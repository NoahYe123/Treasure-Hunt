
Treasure_Hunt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052d4  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08005494  08005494  00006494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005604  08005604  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005604  08005604  00006604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800560c  0800560c  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800560c  0800560c  0000660c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005610  08005610  00006610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005614  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000068  0800567c  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  0800567c  000072c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012bbd  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002590  00000000  00000000  00019c55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  0001c1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb8  00000000  00000000  0001d238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b81c  00000000  00000000  0001def0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013261  00000000  00000000  0004970c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010bc14  00000000  00000000  0005c96d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00168581  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f98  00000000  00000000  001685c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0016d55c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000068 	.word	0x20000068
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800547c 	.word	0x0800547c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	0800547c 	.word	0x0800547c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <PrintInitialGrid>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void PrintInitialGrid(void) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b092      	sub	sp, #72	@ 0x48
 80005a4:	af00      	add	r7, sp, #0
    const char newline[] = "\r\n"; // Newline for the terminal
 80005a6:	4a28      	ldr	r2, [pc, #160]	@ (8000648 <PrintInitialGrid+0xa8>)
 80005a8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80005ac:	6812      	ldr	r2, [r2, #0]
 80005ae:	4611      	mov	r1, r2
 80005b0:	8019      	strh	r1, [r3, #0]
 80005b2:	3302      	adds	r3, #2
 80005b4:	0c12      	lsrs	r2, r2, #16
 80005b6:	701a      	strb	r2, [r3, #0]
    char displayBuffer[64];


    srand(HAL_GetTick());
 80005b8:	f000 fc40 	bl	8000e3c <HAL_GetTick>
 80005bc:	4603      	mov	r3, r0
 80005be:	4618      	mov	r0, r3
 80005c0:	f003 fd98 	bl	80040f4 <srand>
    treasureRow = rand() % 4; // Random row (0-3)
 80005c4:	f003 fdc4 	bl	8004150 <rand>
 80005c8:	4603      	mov	r3, r0
 80005ca:	425a      	negs	r2, r3
 80005cc:	f003 0303 	and.w	r3, r3, #3
 80005d0:	f002 0203 	and.w	r2, r2, #3
 80005d4:	bf58      	it	pl
 80005d6:	4253      	negpl	r3, r2
 80005d8:	4a1c      	ldr	r2, [pc, #112]	@ (800064c <PrintInitialGrid+0xac>)
 80005da:	6013      	str	r3, [r2, #0]
    treasureCol = rand() % 4; // Random column (0-3)
 80005dc:	f003 fdb8 	bl	8004150 <rand>
 80005e0:	4603      	mov	r3, r0
 80005e2:	425a      	negs	r2, r3
 80005e4:	f003 0303 	and.w	r3, r3, #3
 80005e8:	f002 0203 	and.w	r2, r2, #3
 80005ec:	bf58      	it	pl
 80005ee:	4253      	negpl	r3, r2
 80005f0:	4a17      	ldr	r2, [pc, #92]	@ (8000650 <PrintInitialGrid+0xb0>)
 80005f2:	6013      	str	r3, [r2, #0]

    // Print a grid of all '1's
    for (int i = 0; i < 4; i++) {
 80005f4:	2300      	movs	r3, #0
 80005f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80005f8:	e01e      	b.n	8000638 <PrintInitialGrid+0x98>
        memset(displayBuffer, '1', 4);
 80005fa:	463b      	mov	r3, r7
 80005fc:	2204      	movs	r2, #4
 80005fe:	2131      	movs	r1, #49	@ 0x31
 8000600:	4618      	mov	r0, r3
 8000602:	f003 fea5 	bl	8004350 <memset>
        displayBuffer[4] = '\0';
 8000606:	2300      	movs	r3, #0
 8000608:	713b      	strb	r3, [r7, #4]
        HAL_UART_Transmit(&huart1, (uint8_t *)displayBuffer, strlen(displayBuffer), HAL_MAX_DELAY);
 800060a:	463b      	mov	r3, r7
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff fdf7 	bl	8000200 <strlen>
 8000612:	4603      	mov	r3, r0
 8000614:	b29a      	uxth	r2, r3
 8000616:	4639      	mov	r1, r7
 8000618:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800061c:	480d      	ldr	r0, [pc, #52]	@ (8000654 <PrintInitialGrid+0xb4>)
 800061e:	f002 fe89 	bl	8003334 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart1, (uint8_t *)newline, strlen(newline), HAL_MAX_DELAY);
 8000622:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8000626:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800062a:	2202      	movs	r2, #2
 800062c:	4809      	ldr	r0, [pc, #36]	@ (8000654 <PrintInitialGrid+0xb4>)
 800062e:	f002 fe81 	bl	8003334 <HAL_UART_Transmit>
    for (int i = 0; i < 4; i++) {
 8000632:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000634:	3301      	adds	r3, #1
 8000636:	647b      	str	r3, [r7, #68]	@ 0x44
 8000638:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800063a:	2b03      	cmp	r3, #3
 800063c:	dddd      	ble.n	80005fa <PrintInitialGrid+0x5a>
    }
}
 800063e:	bf00      	nop
 8000640:	bf00      	nop
 8000642:	3748      	adds	r7, #72	@ 0x48
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	08005494 	.word	0x08005494
 800064c:	20000118 	.word	0x20000118
 8000650:	2000011c 	.word	0x2000011c
 8000654:	20000084 	.word	0x20000084

08000658 <PrintTreasureGrid>:

void PrintTreasureGrid(void) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b0a4      	sub	sp, #144	@ 0x90
 800065c:	af02      	add	r7, sp, #8
    const char newline[] = "\r\n";
 800065e:	4a47      	ldr	r2, [pc, #284]	@ (800077c <PrintTreasureGrid+0x124>)
 8000660:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000664:	6812      	ldr	r2, [r2, #0]
 8000666:	4611      	mov	r1, r2
 8000668:	8019      	strh	r1, [r3, #0]
 800066a:	3302      	adds	r3, #2
 800066c:	0c12      	lsrs	r2, r2, #16
 800066e:	701a      	strb	r2, [r3, #0]
    char treasureBuffer[32];
    char displayBuffer[64];       // Buffer to send rows over UART


    // Initialize the grid with '1's
    for (int i = 0; i < 4; i++) {
 8000670:	2300      	movs	r3, #0
 8000672:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000676:	e01c      	b.n	80006b2 <PrintTreasureGrid+0x5a>
        for (int j = 0; j < 4; j++) {
 8000678:	2300      	movs	r3, #0
 800067a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800067e:	e00f      	b.n	80006a0 <PrintTreasureGrid+0x48>
            grid[i][j] = '1';
 8000680:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	3388      	adds	r3, #136	@ 0x88
 8000688:	19da      	adds	r2, r3, r7
 800068a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800068e:	4413      	add	r3, r2
 8000690:	3b24      	subs	r3, #36	@ 0x24
 8000692:	2231      	movs	r2, #49	@ 0x31
 8000694:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 4; j++) {
 8000696:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800069a:	3301      	adds	r3, #1
 800069c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80006a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80006a4:	2b03      	cmp	r3, #3
 80006a6:	ddeb      	ble.n	8000680 <PrintTreasureGrid+0x28>
    for (int i = 0; i < 4; i++) {
 80006a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80006ac:	3301      	adds	r3, #1
 80006ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80006b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80006b6:	2b03      	cmp	r3, #3
 80006b8:	ddde      	ble.n	8000678 <PrintTreasureGrid+0x20>
        }
    }

    // Place the treasure ('0') in a random position

    grid[treasureRow][treasureCol] = '0'; // Set the treasure location
 80006ba:	4b31      	ldr	r3, [pc, #196]	@ (8000780 <PrintTreasureGrid+0x128>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	4b31      	ldr	r3, [pc, #196]	@ (8000784 <PrintTreasureGrid+0x12c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	0092      	lsls	r2, r2, #2
 80006c4:	3288      	adds	r2, #136	@ 0x88
 80006c6:	443a      	add	r2, r7
 80006c8:	4413      	add	r3, r2
 80006ca:	3b24      	subs	r3, #36	@ 0x24
 80006cc:	2230      	movs	r2, #48	@ 0x30
 80006ce:	701a      	strb	r2, [r3, #0]

    // Log the treasure's location internally
    snprintf(treasureBuffer, sizeof(treasureBuffer), "Treasure is at: [%d, %d]\r\n", treasureRow+1, treasureCol+1);
 80006d0:	4b2b      	ldr	r3, [pc, #172]	@ (8000780 <PrintTreasureGrid+0x128>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	1c5a      	adds	r2, r3, #1
 80006d6:	4b2b      	ldr	r3, [pc, #172]	@ (8000784 <PrintTreasureGrid+0x12c>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	3301      	adds	r3, #1
 80006dc:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	4613      	mov	r3, r2
 80006e4:	4a28      	ldr	r2, [pc, #160]	@ (8000788 <PrintTreasureGrid+0x130>)
 80006e6:	2120      	movs	r1, #32
 80006e8:	f003 fcd0 	bl	800408c <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)treasureBuffer, strlen(treasureBuffer), HAL_MAX_DELAY);
 80006ec:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff fd85 	bl	8000200 <strlen>
 80006f6:	4603      	mov	r3, r0
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80006fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000702:	4822      	ldr	r0, [pc, #136]	@ (800078c <PrintTreasureGrid+0x134>)
 8000704:	f002 fe16 	bl	8003334 <HAL_UART_Transmit>

    // Transmit the updated grid
    for (int i = 0; i < 4; i++) {
 8000708:	2300      	movs	r3, #0
 800070a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800070c:	e02e      	b.n	800076c <PrintTreasureGrid+0x114>
        for (int j = 0; j < 4; j++) {
 800070e:	2300      	movs	r3, #0
 8000710:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000712:	e00f      	b.n	8000734 <PrintTreasureGrid+0xdc>
            displayBuffer[j] = grid[i][j]; // Copy each character to the buffer
 8000714:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	3388      	adds	r3, #136	@ 0x88
 800071a:	19da      	adds	r2, r3, r7
 800071c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800071e:	4413      	add	r3, r2
 8000720:	3b24      	subs	r3, #36	@ 0x24
 8000722:	7819      	ldrb	r1, [r3, #0]
 8000724:	1d3a      	adds	r2, r7, #4
 8000726:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000728:	4413      	add	r3, r2
 800072a:	460a      	mov	r2, r1
 800072c:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 4; j++) {
 800072e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000730:	3301      	adds	r3, #1
 8000732:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000734:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000736:	2b03      	cmp	r3, #3
 8000738:	ddec      	ble.n	8000714 <PrintTreasureGrid+0xbc>
        }
        displayBuffer[4] = '\0'; // Null-terminate the string
 800073a:	2300      	movs	r3, #0
 800073c:	723b      	strb	r3, [r7, #8]
        HAL_UART_Transmit(&huart1, (uint8_t *)displayBuffer, strlen(displayBuffer), HAL_MAX_DELAY);
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff fd5d 	bl	8000200 <strlen>
 8000746:	4603      	mov	r3, r0
 8000748:	b29a      	uxth	r2, r3
 800074a:	1d39      	adds	r1, r7, #4
 800074c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000750:	480e      	ldr	r0, [pc, #56]	@ (800078c <PrintTreasureGrid+0x134>)
 8000752:	f002 fdef 	bl	8003334 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart1, (uint8_t *)newline, strlen(newline), HAL_MAX_DELAY);
 8000756:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 800075a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800075e:	2202      	movs	r2, #2
 8000760:	480a      	ldr	r0, [pc, #40]	@ (800078c <PrintTreasureGrid+0x134>)
 8000762:	f002 fde7 	bl	8003334 <HAL_UART_Transmit>
    for (int i = 0; i < 4; i++) {
 8000766:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000768:	3301      	adds	r3, #1
 800076a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800076c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800076e:	2b03      	cmp	r3, #3
 8000770:	ddcd      	ble.n	800070e <PrintTreasureGrid+0xb6>
    }
}
 8000772:	bf00      	nop
 8000774:	bf00      	nop
 8000776:	3788      	adds	r7, #136	@ 0x88
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	08005494 	.word	0x08005494
 8000780:	20000118 	.word	0x20000118
 8000784:	2000011c 	.word	0x2000011c
 8000788:	08005498 	.word	0x08005498
 800078c:	20000084 	.word	0x20000084

08000790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000796:	f000 fb24 	bl	8000de2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800079a:	f000 f81d 	bl	80007d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800079e:	f000 f8b9 	bl	8000914 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007a2:	f000 f86b 	bl	800087c <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  PrintInitialGrid();
 80007a6:	f7ff fefb 	bl	80005a0 <PrintInitialGrid>
  const char newline[] = "\r\n";
 80007aa:	4a09      	ldr	r2, [pc, #36]	@ (80007d0 <main+0x40>)
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	6812      	ldr	r2, [r2, #0]
 80007b0:	4611      	mov	r1, r2
 80007b2:	8019      	strh	r1, [r3, #0]
 80007b4:	3302      	adds	r3, #2
 80007b6:	0c12      	lsrs	r2, r2, #16
 80007b8:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, (uint8_t *)newline, strlen(newline), HAL_MAX_DELAY);
 80007ba:	1d39      	adds	r1, r7, #4
 80007bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007c0:	2202      	movs	r2, #2
 80007c2:	4804      	ldr	r0, [pc, #16]	@ (80007d4 <main+0x44>)
 80007c4:	f002 fdb6 	bl	8003334 <HAL_UART_Transmit>
  PrintTreasureGrid();
 80007c8:	f7ff ff46 	bl	8000658 <PrintTreasureGrid>
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <main+0x3c>
 80007d0:	08005494 	.word	0x08005494
 80007d4:	20000084 	.word	0x20000084

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b096      	sub	sp, #88	@ 0x58
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	2244      	movs	r2, #68	@ 0x44
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f003 fdb2 	bl	8004350 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	463b      	mov	r3, r7
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80007fa:	2000      	movs	r0, #0
 80007fc:	f000 fdbe 	bl	800137c <HAL_PWREx_ControlVoltageScaling>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000806:	f000 f8af 	bl	8000968 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800080a:	2310      	movs	r3, #16
 800080c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800080e:	2301      	movs	r3, #1
 8000810:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000816:	2360      	movs	r3, #96	@ 0x60
 8000818:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081a:	2302      	movs	r3, #2
 800081c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800081e:	2301      	movs	r3, #1
 8000820:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000822:	2301      	movs	r3, #1
 8000824:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000826:	233c      	movs	r3, #60	@ 0x3c
 8000828:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800082a:	2302      	movs	r3, #2
 800082c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800082e:	2302      	movs	r3, #2
 8000830:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000832:	2302      	movs	r3, #2
 8000834:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4618      	mov	r0, r3
 800083c:	f000 fe42 	bl	80014c4 <HAL_RCC_OscConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000846:	f000 f88f 	bl	8000968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084a:	230f      	movs	r3, #15
 800084c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084e:	2303      	movs	r3, #3
 8000850:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800085e:	463b      	mov	r3, r7
 8000860:	2105      	movs	r1, #5
 8000862:	4618      	mov	r0, r3
 8000864:	f001 fa48 	bl	8001cf8 <HAL_RCC_ClockConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800086e:	f000 f87b 	bl	8000968 <Error_Handler>
  }
}
 8000872:	bf00      	nop
 8000874:	3758      	adds	r7, #88	@ 0x58
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000880:	4b22      	ldr	r3, [pc, #136]	@ (800090c <MX_USART1_UART_Init+0x90>)
 8000882:	4a23      	ldr	r2, [pc, #140]	@ (8000910 <MX_USART1_UART_Init+0x94>)
 8000884:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000886:	4b21      	ldr	r3, [pc, #132]	@ (800090c <MX_USART1_UART_Init+0x90>)
 8000888:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800088c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	4b1f      	ldr	r3, [pc, #124]	@ (800090c <MX_USART1_UART_Init+0x90>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000894:	4b1d      	ldr	r3, [pc, #116]	@ (800090c <MX_USART1_UART_Init+0x90>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800089a:	4b1c      	ldr	r3, [pc, #112]	@ (800090c <MX_USART1_UART_Init+0x90>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a0:	4b1a      	ldr	r3, [pc, #104]	@ (800090c <MX_USART1_UART_Init+0x90>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a6:	4b19      	ldr	r3, [pc, #100]	@ (800090c <MX_USART1_UART_Init+0x90>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ac:	4b17      	ldr	r3, [pc, #92]	@ (800090c <MX_USART1_UART_Init+0x90>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b2:	4b16      	ldr	r3, [pc, #88]	@ (800090c <MX_USART1_UART_Init+0x90>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008b8:	4b14      	ldr	r3, [pc, #80]	@ (800090c <MX_USART1_UART_Init+0x90>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008be:	4b13      	ldr	r3, [pc, #76]	@ (800090c <MX_USART1_UART_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008c4:	4811      	ldr	r0, [pc, #68]	@ (800090c <MX_USART1_UART_Init+0x90>)
 80008c6:	f002 fce5 	bl	8003294 <HAL_UART_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008d0:	f000 f84a 	bl	8000968 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008d4:	2100      	movs	r1, #0
 80008d6:	480d      	ldr	r0, [pc, #52]	@ (800090c <MX_USART1_UART_Init+0x90>)
 80008d8:	f003 fb0e 	bl	8003ef8 <HAL_UARTEx_SetTxFifoThreshold>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008e2:	f000 f841 	bl	8000968 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e6:	2100      	movs	r1, #0
 80008e8:	4808      	ldr	r0, [pc, #32]	@ (800090c <MX_USART1_UART_Init+0x90>)
 80008ea:	f003 fb43 	bl	8003f74 <HAL_UARTEx_SetRxFifoThreshold>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008f4:	f000 f838 	bl	8000968 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008f8:	4804      	ldr	r0, [pc, #16]	@ (800090c <MX_USART1_UART_Init+0x90>)
 80008fa:	f003 fac4 	bl	8003e86 <HAL_UARTEx_DisableFifoMode>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000904:	f000 f830 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000084 	.word	0x20000084
 8000910:	40013800 	.word	0x40013800

08000914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	4b09      	ldr	r3, [pc, #36]	@ (8000940 <MX_GPIO_Init+0x2c>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091e:	4a08      	ldr	r2, [pc, #32]	@ (8000940 <MX_GPIO_Init+0x2c>)
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000926:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <MX_GPIO_Init+0x2c>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40021000 	.word	0x40021000

08000944 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a04      	ldr	r2, [pc, #16]	@ (8000964 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d101      	bne.n	800095a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000956:	f000 fa5d 	bl	8000e14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40001000 	.word	0x40001000

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
}
 800096e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <Error_Handler+0x8>

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	4b0f      	ldr	r3, [pc, #60]	@ (80009b8 <HAL_MspInit+0x44>)
 800097c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800097e:	4a0e      	ldr	r2, [pc, #56]	@ (80009b8 <HAL_MspInit+0x44>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6613      	str	r3, [r2, #96]	@ 0x60
 8000986:	4b0c      	ldr	r3, [pc, #48]	@ (80009b8 <HAL_MspInit+0x44>)
 8000988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	4b09      	ldr	r3, [pc, #36]	@ (80009b8 <HAL_MspInit+0x44>)
 8000994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000996:	4a08      	ldr	r2, [pc, #32]	@ (80009b8 <HAL_MspInit+0x44>)
 8000998:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800099c:	6593      	str	r3, [r2, #88]	@ 0x58
 800099e:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <HAL_MspInit+0x44>)
 80009a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	40021000 	.word	0x40021000

080009bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b0ae      	sub	sp, #184	@ 0xb8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d4:	f107 0310 	add.w	r3, r7, #16
 80009d8:	2294      	movs	r2, #148	@ 0x94
 80009da:	2100      	movs	r1, #0
 80009dc:	4618      	mov	r0, r3
 80009de:	f003 fcb7 	bl	8004350 <memset>
  if(huart->Instance==USART1)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a21      	ldr	r2, [pc, #132]	@ (8000a6c <HAL_UART_MspInit+0xb0>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d13a      	bne.n	8000a62 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80009ec:	2301      	movs	r3, #1
 80009ee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80009f0:	2300      	movs	r3, #0
 80009f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f4:	f107 0310 	add.w	r3, r7, #16
 80009f8:	4618      	mov	r0, r3
 80009fa:	f001 fc6d 	bl	80022d8 <HAL_RCCEx_PeriphCLKConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a04:	f7ff ffb0 	bl	8000968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a08:	4b19      	ldr	r3, [pc, #100]	@ (8000a70 <HAL_UART_MspInit+0xb4>)
 8000a0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a0c:	4a18      	ldr	r2, [pc, #96]	@ (8000a70 <HAL_UART_MspInit+0xb4>)
 8000a0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a12:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a14:	4b16      	ldr	r3, [pc, #88]	@ (8000a70 <HAL_UART_MspInit+0xb4>)
 8000a16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a20:	4b13      	ldr	r3, [pc, #76]	@ (8000a70 <HAL_UART_MspInit+0xb4>)
 8000a22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a24:	4a12      	ldr	r2, [pc, #72]	@ (8000a70 <HAL_UART_MspInit+0xb4>)
 8000a26:	f043 0302 	orr.w	r3, r3, #2
 8000a2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a2c:	4b10      	ldr	r3, [pc, #64]	@ (8000a70 <HAL_UART_MspInit+0xb4>)
 8000a2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a30:	f003 0302 	and.w	r3, r3, #2
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a38:	23c0      	movs	r3, #192	@ 0xc0
 8000a3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a50:	2307      	movs	r3, #7
 8000a52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a56:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <HAL_UART_MspInit+0xb8>)
 8000a5e:	f000 fadb 	bl	8001018 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000a62:	bf00      	nop
 8000a64:	37b8      	adds	r7, #184	@ 0xb8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40013800 	.word	0x40013800
 8000a70:	40021000 	.word	0x40021000
 8000a74:	48000400 	.word	0x48000400

08000a78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08e      	sub	sp, #56	@ 0x38
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000a80:	2300      	movs	r3, #0
 8000a82:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a86:	4b34      	ldr	r3, [pc, #208]	@ (8000b58 <HAL_InitTick+0xe0>)
 8000a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a8a:	4a33      	ldr	r2, [pc, #204]	@ (8000b58 <HAL_InitTick+0xe0>)
 8000a8c:	f043 0310 	orr.w	r3, r3, #16
 8000a90:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a92:	4b31      	ldr	r3, [pc, #196]	@ (8000b58 <HAL_InitTick+0xe0>)
 8000a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a96:	f003 0310 	and.w	r3, r3, #16
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a9e:	f107 0210 	add.w	r2, r7, #16
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4611      	mov	r1, r2
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f001 fb23 	bl	80020f4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000aae:	6a3b      	ldr	r3, [r7, #32]
 8000ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d103      	bne.n	8000ac0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ab8:	f001 faf0 	bl	800209c <HAL_RCC_GetPCLK1Freq>
 8000abc:	6378      	str	r0, [r7, #52]	@ 0x34
 8000abe:	e004      	b.n	8000aca <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ac0:	f001 faec 	bl	800209c <HAL_RCC_GetPCLK1Freq>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000acc:	4a23      	ldr	r2, [pc, #140]	@ (8000b5c <HAL_InitTick+0xe4>)
 8000ace:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad2:	0c9b      	lsrs	r3, r3, #18
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ad8:	4b21      	ldr	r3, [pc, #132]	@ (8000b60 <HAL_InitTick+0xe8>)
 8000ada:	4a22      	ldr	r2, [pc, #136]	@ (8000b64 <HAL_InitTick+0xec>)
 8000adc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ade:	4b20      	ldr	r3, [pc, #128]	@ (8000b60 <HAL_InitTick+0xe8>)
 8000ae0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ae4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ae6:	4a1e      	ldr	r2, [pc, #120]	@ (8000b60 <HAL_InitTick+0xe8>)
 8000ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000aea:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000aec:	4b1c      	ldr	r3, [pc, #112]	@ (8000b60 <HAL_InitTick+0xe8>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b60 <HAL_InitTick+0xe8>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af8:	4b19      	ldr	r3, [pc, #100]	@ (8000b60 <HAL_InitTick+0xe8>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000afe:	4818      	ldr	r0, [pc, #96]	@ (8000b60 <HAL_InitTick+0xe8>)
 8000b00:	f002 f902 	bl	8002d08 <HAL_TIM_Base_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b0a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d11b      	bne.n	8000b4a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b12:	4813      	ldr	r0, [pc, #76]	@ (8000b60 <HAL_InitTick+0xe8>)
 8000b14:	f002 f95a 	bl	8002dcc <HAL_TIM_Base_Start_IT>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b1e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d111      	bne.n	8000b4a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b26:	2036      	movs	r0, #54	@ 0x36
 8000b28:	f000 fa68 	bl	8000ffc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2b0f      	cmp	r3, #15
 8000b30:	d808      	bhi.n	8000b44 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b32:	2200      	movs	r2, #0
 8000b34:	6879      	ldr	r1, [r7, #4]
 8000b36:	2036      	movs	r0, #54	@ 0x36
 8000b38:	f000 fa44 	bl	8000fc4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b3c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b68 <HAL_InitTick+0xf0>)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6013      	str	r3, [r2, #0]
 8000b42:	e002      	b.n	8000b4a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000b44:	2301      	movs	r3, #1
 8000b46:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b4a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3738      	adds	r7, #56	@ 0x38
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	431bde83 	.word	0x431bde83
 8000b60:	20000120 	.word	0x20000120
 8000b64:	40001000 	.word	0x40001000
 8000b68:	20000004 	.word	0x20000004

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <NMI_Handler+0x4>

08000b74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <MemManage_Handler+0x4>

08000b84 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <BusFault_Handler+0x4>

08000b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <UsageFault_Handler+0x4>

08000b94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bd0:	4802      	ldr	r0, [pc, #8]	@ (8000bdc <TIM6_DAC_IRQHandler+0x10>)
 8000bd2:	f002 f96b 	bl	8002eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000120 	.word	0x20000120

08000be0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  return 1;
 8000be4:	2301      	movs	r3, #1
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <_kill>:

int _kill(int pid, int sig)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000bfa:	f003 fbb1 	bl	8004360 <__errno>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2216      	movs	r2, #22
 8000c02:	601a      	str	r2, [r3, #0]
  return -1;
 8000c04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <_exit>:

void _exit (int status)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c18:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff ffe7 	bl	8000bf0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c22:	bf00      	nop
 8000c24:	e7fd      	b.n	8000c22 <_exit+0x12>

08000c26 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b086      	sub	sp, #24
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	60f8      	str	r0, [r7, #12]
 8000c2e:	60b9      	str	r1, [r7, #8]
 8000c30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
 8000c36:	e00a      	b.n	8000c4e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c38:	f3af 8000 	nop.w
 8000c3c:	4601      	mov	r1, r0
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	1c5a      	adds	r2, r3, #1
 8000c42:	60ba      	str	r2, [r7, #8]
 8000c44:	b2ca      	uxtb	r2, r1
 8000c46:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	617b      	str	r3, [r7, #20]
 8000c4e:	697a      	ldr	r2, [r7, #20]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	429a      	cmp	r2, r3
 8000c54:	dbf0      	blt.n	8000c38 <_read+0x12>
  }

  return len;
 8000c56:	687b      	ldr	r3, [r7, #4]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3718      	adds	r7, #24
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
 8000c70:	e009      	b.n	8000c86 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	1c5a      	adds	r2, r3, #1
 8000c76:	60ba      	str	r2, [r7, #8]
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	3301      	adds	r3, #1
 8000c84:	617b      	str	r3, [r7, #20]
 8000c86:	697a      	ldr	r2, [r7, #20]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	dbf1      	blt.n	8000c72 <_write+0x12>
  }
  return len;
 8000c8e:	687b      	ldr	r3, [r7, #4]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <_close>:

int _close(int file)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ca0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cc0:	605a      	str	r2, [r3, #4]
  return 0;
 8000cc2:	2300      	movs	r3, #0
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <_isatty>:

int _isatty(int file)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cd8:	2301      	movs	r3, #1
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b085      	sub	sp, #20
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	60f8      	str	r0, [r7, #12]
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cf2:	2300      	movs	r3, #0
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d08:	4a14      	ldr	r2, [pc, #80]	@ (8000d5c <_sbrk+0x5c>)
 8000d0a:	4b15      	ldr	r3, [pc, #84]	@ (8000d60 <_sbrk+0x60>)
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d14:	4b13      	ldr	r3, [pc, #76]	@ (8000d64 <_sbrk+0x64>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d102      	bne.n	8000d22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d1c:	4b11      	ldr	r3, [pc, #68]	@ (8000d64 <_sbrk+0x64>)
 8000d1e:	4a12      	ldr	r2, [pc, #72]	@ (8000d68 <_sbrk+0x68>)
 8000d20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d22:	4b10      	ldr	r3, [pc, #64]	@ (8000d64 <_sbrk+0x64>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d207      	bcs.n	8000d40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d30:	f003 fb16 	bl	8004360 <__errno>
 8000d34:	4603      	mov	r3, r0
 8000d36:	220c      	movs	r2, #12
 8000d38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d3e:	e009      	b.n	8000d54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d40:	4b08      	ldr	r3, [pc, #32]	@ (8000d64 <_sbrk+0x64>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d46:	4b07      	ldr	r3, [pc, #28]	@ (8000d64 <_sbrk+0x64>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	4a05      	ldr	r2, [pc, #20]	@ (8000d64 <_sbrk+0x64>)
 8000d50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d52:	68fb      	ldr	r3, [r7, #12]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3718      	adds	r7, #24
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	200a0000 	.word	0x200a0000
 8000d60:	00000400 	.word	0x00000400
 8000d64:	2000016c 	.word	0x2000016c
 8000d68:	200002c0 	.word	0x200002c0

08000d6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d70:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <SystemInit+0x20>)
 8000d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d76:	4a05      	ldr	r2, [pc, #20]	@ (8000d8c <SystemInit+0x20>)
 8000d78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dc8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d94:	f7ff ffea 	bl	8000d6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d98:	480c      	ldr	r0, [pc, #48]	@ (8000dcc <LoopForever+0x6>)
  ldr r1, =_edata
 8000d9a:	490d      	ldr	r1, [pc, #52]	@ (8000dd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd4 <LoopForever+0xe>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da0:	e002      	b.n	8000da8 <LoopCopyDataInit>

08000da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da6:	3304      	adds	r3, #4

08000da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dac:	d3f9      	bcc.n	8000da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dae:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000db0:	4c0a      	ldr	r4, [pc, #40]	@ (8000ddc <LoopForever+0x16>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db4:	e001      	b.n	8000dba <LoopFillZerobss>

08000db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db8:	3204      	adds	r2, #4

08000dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dbc:	d3fb      	bcc.n	8000db6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dbe:	f003 fad5 	bl	800436c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dc2:	f7ff fce5 	bl	8000790 <main>

08000dc6 <LoopForever>:

LoopForever:
    b LoopForever
 8000dc6:	e7fe      	b.n	8000dc6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dc8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000dd4:	08005614 	.word	0x08005614
  ldr r2, =_sbss
 8000dd8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ddc:	200002c0 	.word	0x200002c0

08000de0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000de0:	e7fe      	b.n	8000de0 <ADC1_IRQHandler>

08000de2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000de8:	2300      	movs	r3, #0
 8000dea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dec:	2003      	movs	r0, #3
 8000dee:	f000 f8de 	bl	8000fae <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000df2:	200f      	movs	r0, #15
 8000df4:	f7ff fe40 	bl	8000a78 <HAL_InitTick>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d002      	beq.n	8000e04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	71fb      	strb	r3, [r7, #7]
 8000e02:	e001      	b.n	8000e08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e04:	f7ff fdb6 	bl	8000974 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e08:	79fb      	ldrb	r3, [r7, #7]
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e18:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <HAL_IncTick+0x20>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <HAL_IncTick+0x24>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4413      	add	r3, r2
 8000e24:	4a04      	ldr	r2, [pc, #16]	@ (8000e38 <HAL_IncTick+0x24>)
 8000e26:	6013      	str	r3, [r2, #0]
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	20000008 	.word	0x20000008
 8000e38:	20000170 	.word	0x20000170

08000e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e40:	4b03      	ldr	r3, [pc, #12]	@ (8000e50 <HAL_GetTick+0x14>)
 8000e42:	681b      	ldr	r3, [r3, #0]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	20000170 	.word	0x20000170

08000e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e64:	4b0c      	ldr	r3, [pc, #48]	@ (8000e98 <__NVIC_SetPriorityGrouping+0x44>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e70:	4013      	ands	r3, r2
 8000e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e86:	4a04      	ldr	r2, [pc, #16]	@ (8000e98 <__NVIC_SetPriorityGrouping+0x44>)
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	60d3      	str	r3, [r2, #12]
}
 8000e8c:	bf00      	nop
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea0:	4b04      	ldr	r3, [pc, #16]	@ (8000eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	f003 0307 	and.w	r3, r3, #7
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	db0b      	blt.n	8000ee2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	f003 021f 	and.w	r2, r3, #31
 8000ed0:	4907      	ldr	r1, [pc, #28]	@ (8000ef0 <__NVIC_EnableIRQ+0x38>)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	095b      	lsrs	r3, r3, #5
 8000ed8:	2001      	movs	r0, #1
 8000eda:	fa00 f202 	lsl.w	r2, r0, r2
 8000ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000e100 	.word	0xe000e100

08000ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	6039      	str	r1, [r7, #0]
 8000efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	db0a      	blt.n	8000f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	490c      	ldr	r1, [pc, #48]	@ (8000f40 <__NVIC_SetPriority+0x4c>)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	0112      	lsls	r2, r2, #4
 8000f14:	b2d2      	uxtb	r2, r2
 8000f16:	440b      	add	r3, r1
 8000f18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f1c:	e00a      	b.n	8000f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	4908      	ldr	r1, [pc, #32]	@ (8000f44 <__NVIC_SetPriority+0x50>)
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	f003 030f 	and.w	r3, r3, #15
 8000f2a:	3b04      	subs	r3, #4
 8000f2c:	0112      	lsls	r2, r2, #4
 8000f2e:	b2d2      	uxtb	r2, r2
 8000f30:	440b      	add	r3, r1
 8000f32:	761a      	strb	r2, [r3, #24]
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000e100 	.word	0xe000e100
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b089      	sub	sp, #36	@ 0x24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	f1c3 0307 	rsb	r3, r3, #7
 8000f62:	2b04      	cmp	r3, #4
 8000f64:	bf28      	it	cs
 8000f66:	2304      	movcs	r3, #4
 8000f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	2b06      	cmp	r3, #6
 8000f70:	d902      	bls.n	8000f78 <NVIC_EncodePriority+0x30>
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3b03      	subs	r3, #3
 8000f76:	e000      	b.n	8000f7a <NVIC_EncodePriority+0x32>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43da      	mvns	r2, r3
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f90:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9a:	43d9      	mvns	r1, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa0:	4313      	orrs	r3, r2
         );
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3724      	adds	r7, #36	@ 0x24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ff4c 	bl	8000e54 <__NVIC_SetPriorityGrouping>
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
 8000fd0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd6:	f7ff ff61 	bl	8000e9c <__NVIC_GetPriorityGrouping>
 8000fda:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	68b9      	ldr	r1, [r7, #8]
 8000fe0:	6978      	ldr	r0, [r7, #20]
 8000fe2:	f7ff ffb1 	bl	8000f48 <NVIC_EncodePriority>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fec:	4611      	mov	r1, r2
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff ff80 	bl	8000ef4 <__NVIC_SetPriority>
}
 8000ff4:	bf00      	nop
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff ff54 	bl	8000eb8 <__NVIC_EnableIRQ>
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001018:	b480      	push	{r7}
 800101a:	b087      	sub	sp, #28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001026:	e166      	b.n	80012f6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	2101      	movs	r1, #1
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	fa01 f303 	lsl.w	r3, r1, r3
 8001034:	4013      	ands	r3, r2
 8001036:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 8158 	beq.w	80012f0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	2b01      	cmp	r3, #1
 800104a:	d005      	beq.n	8001058 <HAL_GPIO_Init+0x40>
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0303 	and.w	r3, r3, #3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d130      	bne.n	80010ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	2203      	movs	r2, #3
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	68da      	ldr	r2, [r3, #12]
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800108e:	2201      	movs	r2, #1
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	091b      	lsrs	r3, r3, #4
 80010a4:	f003 0201 	and.w	r2, r3, #1
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	d017      	beq.n	80010f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	2203      	movs	r2, #3
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4013      	ands	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	689a      	ldr	r2, [r3, #8]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d123      	bne.n	800114a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	08da      	lsrs	r2, r3, #3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3208      	adds	r2, #8
 800110a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	220f      	movs	r2, #15
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	691a      	ldr	r2, [r3, #16]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	f003 0307 	and.w	r3, r3, #7
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	08da      	lsrs	r2, r3, #3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3208      	adds	r2, #8
 8001144:	6939      	ldr	r1, [r7, #16]
 8001146:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	2203      	movs	r2, #3
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4013      	ands	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 0203 	and.w	r2, r3, #3
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 80b2 	beq.w	80012f0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118c:	4b61      	ldr	r3, [pc, #388]	@ (8001314 <HAL_GPIO_Init+0x2fc>)
 800118e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001190:	4a60      	ldr	r2, [pc, #384]	@ (8001314 <HAL_GPIO_Init+0x2fc>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	6613      	str	r3, [r2, #96]	@ 0x60
 8001198:	4b5e      	ldr	r3, [pc, #376]	@ (8001314 <HAL_GPIO_Init+0x2fc>)
 800119a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011a4:	4a5c      	ldr	r2, [pc, #368]	@ (8001318 <HAL_GPIO_Init+0x300>)
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	089b      	lsrs	r3, r3, #2
 80011aa:	3302      	adds	r3, #2
 80011ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	220f      	movs	r2, #15
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011ce:	d02b      	beq.n	8001228 <HAL_GPIO_Init+0x210>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a52      	ldr	r2, [pc, #328]	@ (800131c <HAL_GPIO_Init+0x304>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d025      	beq.n	8001224 <HAL_GPIO_Init+0x20c>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a51      	ldr	r2, [pc, #324]	@ (8001320 <HAL_GPIO_Init+0x308>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d01f      	beq.n	8001220 <HAL_GPIO_Init+0x208>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a50      	ldr	r2, [pc, #320]	@ (8001324 <HAL_GPIO_Init+0x30c>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d019      	beq.n	800121c <HAL_GPIO_Init+0x204>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a4f      	ldr	r2, [pc, #316]	@ (8001328 <HAL_GPIO_Init+0x310>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d013      	beq.n	8001218 <HAL_GPIO_Init+0x200>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a4e      	ldr	r2, [pc, #312]	@ (800132c <HAL_GPIO_Init+0x314>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d00d      	beq.n	8001214 <HAL_GPIO_Init+0x1fc>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a4d      	ldr	r2, [pc, #308]	@ (8001330 <HAL_GPIO_Init+0x318>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d007      	beq.n	8001210 <HAL_GPIO_Init+0x1f8>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a4c      	ldr	r2, [pc, #304]	@ (8001334 <HAL_GPIO_Init+0x31c>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d101      	bne.n	800120c <HAL_GPIO_Init+0x1f4>
 8001208:	2307      	movs	r3, #7
 800120a:	e00e      	b.n	800122a <HAL_GPIO_Init+0x212>
 800120c:	2308      	movs	r3, #8
 800120e:	e00c      	b.n	800122a <HAL_GPIO_Init+0x212>
 8001210:	2306      	movs	r3, #6
 8001212:	e00a      	b.n	800122a <HAL_GPIO_Init+0x212>
 8001214:	2305      	movs	r3, #5
 8001216:	e008      	b.n	800122a <HAL_GPIO_Init+0x212>
 8001218:	2304      	movs	r3, #4
 800121a:	e006      	b.n	800122a <HAL_GPIO_Init+0x212>
 800121c:	2303      	movs	r3, #3
 800121e:	e004      	b.n	800122a <HAL_GPIO_Init+0x212>
 8001220:	2302      	movs	r3, #2
 8001222:	e002      	b.n	800122a <HAL_GPIO_Init+0x212>
 8001224:	2301      	movs	r3, #1
 8001226:	e000      	b.n	800122a <HAL_GPIO_Init+0x212>
 8001228:	2300      	movs	r3, #0
 800122a:	697a      	ldr	r2, [r7, #20]
 800122c:	f002 0203 	and.w	r2, r2, #3
 8001230:	0092      	lsls	r2, r2, #2
 8001232:	4093      	lsls	r3, r2
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4313      	orrs	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800123a:	4937      	ldr	r1, [pc, #220]	@ (8001318 <HAL_GPIO_Init+0x300>)
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	089b      	lsrs	r3, r3, #2
 8001240:	3302      	adds	r3, #2
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001248:	4b3b      	ldr	r3, [pc, #236]	@ (8001338 <HAL_GPIO_Init+0x320>)
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	43db      	mvns	r3, r3
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d003      	beq.n	800126c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800126c:	4a32      	ldr	r2, [pc, #200]	@ (8001338 <HAL_GPIO_Init+0x320>)
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001272:	4b31      	ldr	r3, [pc, #196]	@ (8001338 <HAL_GPIO_Init+0x320>)
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	43db      	mvns	r3, r3
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4013      	ands	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4313      	orrs	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001296:	4a28      	ldr	r2, [pc, #160]	@ (8001338 <HAL_GPIO_Init+0x320>)
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800129c:	4b26      	ldr	r3, [pc, #152]	@ (8001338 <HAL_GPIO_Init+0x320>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	43db      	mvns	r3, r3
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d003      	beq.n	80012c0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	4313      	orrs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001338 <HAL_GPIO_Init+0x320>)
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001338 <HAL_GPIO_Init+0x320>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	43db      	mvns	r3, r3
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	4013      	ands	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012ea:	4a13      	ldr	r2, [pc, #76]	@ (8001338 <HAL_GPIO_Init+0x320>)
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	3301      	adds	r3, #1
 80012f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001300:	2b00      	cmp	r3, #0
 8001302:	f47f ae91 	bne.w	8001028 <HAL_GPIO_Init+0x10>
  }
}
 8001306:	bf00      	nop
 8001308:	bf00      	nop
 800130a:	371c      	adds	r7, #28
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	40021000 	.word	0x40021000
 8001318:	40010000 	.word	0x40010000
 800131c:	48000400 	.word	0x48000400
 8001320:	48000800 	.word	0x48000800
 8001324:	48000c00 	.word	0x48000c00
 8001328:	48001000 	.word	0x48001000
 800132c:	48001400 	.word	0x48001400
 8001330:	48001800 	.word	0x48001800
 8001334:	48001c00 	.word	0x48001c00
 8001338:	40010400 	.word	0x40010400

0800133c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001340:	4b0d      	ldr	r3, [pc, #52]	@ (8001378 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001348:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800134c:	d102      	bne.n	8001354 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800134e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001352:	e00b      	b.n	800136c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001354:	4b08      	ldr	r3, [pc, #32]	@ (8001378 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001356:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800135a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800135e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001362:	d102      	bne.n	800136a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001364:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001368:	e000      	b.n	800136c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800136a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40007000 	.word	0x40007000

0800137c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d141      	bne.n	800140e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800138a:	4b4b      	ldr	r3, [pc, #300]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001392:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001396:	d131      	bne.n	80013fc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001398:	4b47      	ldr	r3, [pc, #284]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800139a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800139e:	4a46      	ldr	r2, [pc, #280]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013a8:	4b43      	ldr	r3, [pc, #268]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013b0:	4a41      	ldr	r2, [pc, #260]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80013b8:	4b40      	ldr	r3, [pc, #256]	@ (80014bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2232      	movs	r2, #50	@ 0x32
 80013be:	fb02 f303 	mul.w	r3, r2, r3
 80013c2:	4a3f      	ldr	r2, [pc, #252]	@ (80014c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80013c4:	fba2 2303 	umull	r2, r3, r2, r3
 80013c8:	0c9b      	lsrs	r3, r3, #18
 80013ca:	3301      	adds	r3, #1
 80013cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013ce:	e002      	b.n	80013d6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013d6:	4b38      	ldr	r3, [pc, #224]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d8:	695b      	ldr	r3, [r3, #20]
 80013da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013e2:	d102      	bne.n	80013ea <HAL_PWREx_ControlVoltageScaling+0x6e>
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1f2      	bne.n	80013d0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013ea:	4b33      	ldr	r3, [pc, #204]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013f6:	d158      	bne.n	80014aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e057      	b.n	80014ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013fc:	4b2e      	ldr	r3, [pc, #184]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001402:	4a2d      	ldr	r2, [pc, #180]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001404:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001408:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800140c:	e04d      	b.n	80014aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001414:	d141      	bne.n	800149a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001416:	4b28      	ldr	r3, [pc, #160]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800141e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001422:	d131      	bne.n	8001488 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001424:	4b24      	ldr	r3, [pc, #144]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001426:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800142a:	4a23      	ldr	r2, [pc, #140]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800142c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001430:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001434:	4b20      	ldr	r3, [pc, #128]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800143c:	4a1e      	ldr	r2, [pc, #120]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800143e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001442:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001444:	4b1d      	ldr	r3, [pc, #116]	@ (80014bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2232      	movs	r2, #50	@ 0x32
 800144a:	fb02 f303 	mul.w	r3, r2, r3
 800144e:	4a1c      	ldr	r2, [pc, #112]	@ (80014c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001450:	fba2 2303 	umull	r2, r3, r2, r3
 8001454:	0c9b      	lsrs	r3, r3, #18
 8001456:	3301      	adds	r3, #1
 8001458:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800145a:	e002      	b.n	8001462 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	3b01      	subs	r3, #1
 8001460:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001462:	4b15      	ldr	r3, [pc, #84]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800146a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800146e:	d102      	bne.n	8001476 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f2      	bne.n	800145c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001476:	4b10      	ldr	r3, [pc, #64]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800147e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001482:	d112      	bne.n	80014aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e011      	b.n	80014ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001488:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800148a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800148e:	4a0a      	ldr	r2, [pc, #40]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001490:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001494:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001498:	e007      	b.n	80014aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800149a:	4b07      	ldr	r3, [pc, #28]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014a2:	4a05      	ldr	r2, [pc, #20]	@ (80014b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014a8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	40007000 	.word	0x40007000
 80014bc:	20000000 	.word	0x20000000
 80014c0:	431bde83 	.word	0x431bde83

080014c4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d102      	bne.n	80014d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	f000 bc08 	b.w	8001ce8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014d8:	4b96      	ldr	r3, [pc, #600]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f003 030c 	and.w	r3, r3, #12
 80014e0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014e2:	4b94      	ldr	r3, [pc, #592]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	f003 0303 	and.w	r3, r3, #3
 80014ea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0310 	and.w	r3, r3, #16
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f000 80e4 	beq.w	80016c2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d007      	beq.n	8001510 <HAL_RCC_OscConfig+0x4c>
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	2b0c      	cmp	r3, #12
 8001504:	f040 808b 	bne.w	800161e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	2b01      	cmp	r3, #1
 800150c:	f040 8087 	bne.w	800161e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001510:	4b88      	ldr	r3, [pc, #544]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d005      	beq.n	8001528 <HAL_RCC_OscConfig+0x64>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e3df      	b.n	8001ce8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a1a      	ldr	r2, [r3, #32]
 800152c:	4b81      	ldr	r3, [pc, #516]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0308 	and.w	r3, r3, #8
 8001534:	2b00      	cmp	r3, #0
 8001536:	d004      	beq.n	8001542 <HAL_RCC_OscConfig+0x7e>
 8001538:	4b7e      	ldr	r3, [pc, #504]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001540:	e005      	b.n	800154e <HAL_RCC_OscConfig+0x8a>
 8001542:	4b7c      	ldr	r3, [pc, #496]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 8001544:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001548:	091b      	lsrs	r3, r3, #4
 800154a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800154e:	4293      	cmp	r3, r2
 8001550:	d223      	bcs.n	800159a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	4618      	mov	r0, r3
 8001558:	f000 fdfe 	bl	8002158 <RCC_SetFlashLatencyFromMSIRange>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e3c0      	b.n	8001ce8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001566:	4b73      	ldr	r3, [pc, #460]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a72      	ldr	r2, [pc, #456]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 800156c:	f043 0308 	orr.w	r3, r3, #8
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	4b70      	ldr	r3, [pc, #448]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a1b      	ldr	r3, [r3, #32]
 800157e:	496d      	ldr	r1, [pc, #436]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 8001580:	4313      	orrs	r3, r2
 8001582:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001584:	4b6b      	ldr	r3, [pc, #428]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	69db      	ldr	r3, [r3, #28]
 8001590:	021b      	lsls	r3, r3, #8
 8001592:	4968      	ldr	r1, [pc, #416]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 8001594:	4313      	orrs	r3, r2
 8001596:	604b      	str	r3, [r1, #4]
 8001598:	e025      	b.n	80015e6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800159a:	4b66      	ldr	r3, [pc, #408]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a65      	ldr	r2, [pc, #404]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 80015a0:	f043 0308 	orr.w	r3, r3, #8
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	4b63      	ldr	r3, [pc, #396]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a1b      	ldr	r3, [r3, #32]
 80015b2:	4960      	ldr	r1, [pc, #384]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015b8:	4b5e      	ldr	r3, [pc, #376]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	69db      	ldr	r3, [r3, #28]
 80015c4:	021b      	lsls	r3, r3, #8
 80015c6:	495b      	ldr	r1, [pc, #364]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d109      	bne.n	80015e6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a1b      	ldr	r3, [r3, #32]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 fdbe 	bl	8002158 <RCC_SetFlashLatencyFromMSIRange>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e380      	b.n	8001ce8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015e6:	f000 fcc1 	bl	8001f6c <HAL_RCC_GetSysClockFreq>
 80015ea:	4602      	mov	r2, r0
 80015ec:	4b51      	ldr	r3, [pc, #324]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	091b      	lsrs	r3, r3, #4
 80015f2:	f003 030f 	and.w	r3, r3, #15
 80015f6:	4950      	ldr	r1, [pc, #320]	@ (8001738 <HAL_RCC_OscConfig+0x274>)
 80015f8:	5ccb      	ldrb	r3, [r1, r3]
 80015fa:	f003 031f 	and.w	r3, r3, #31
 80015fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001602:	4a4e      	ldr	r2, [pc, #312]	@ (800173c <HAL_RCC_OscConfig+0x278>)
 8001604:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001606:	4b4e      	ldr	r3, [pc, #312]	@ (8001740 <HAL_RCC_OscConfig+0x27c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fa34 	bl	8000a78 <HAL_InitTick>
 8001610:	4603      	mov	r3, r0
 8001612:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d052      	beq.n	80016c0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800161a:	7bfb      	ldrb	r3, [r7, #15]
 800161c:	e364      	b.n	8001ce8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d032      	beq.n	800168c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001626:	4b43      	ldr	r3, [pc, #268]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a42      	ldr	r2, [pc, #264]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001632:	f7ff fc03 	bl	8000e3c <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800163a:	f7ff fbff 	bl	8000e3c <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e34d      	b.n	8001ce8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800164c:	4b39      	ldr	r3, [pc, #228]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0f0      	beq.n	800163a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001658:	4b36      	ldr	r3, [pc, #216]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a35      	ldr	r2, [pc, #212]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 800165e:	f043 0308 	orr.w	r3, r3, #8
 8001662:	6013      	str	r3, [r2, #0]
 8001664:	4b33      	ldr	r3, [pc, #204]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	4930      	ldr	r1, [pc, #192]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 8001672:	4313      	orrs	r3, r2
 8001674:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001676:	4b2f      	ldr	r3, [pc, #188]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	021b      	lsls	r3, r3, #8
 8001684:	492b      	ldr	r1, [pc, #172]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 8001686:	4313      	orrs	r3, r2
 8001688:	604b      	str	r3, [r1, #4]
 800168a:	e01a      	b.n	80016c2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800168c:	4b29      	ldr	r3, [pc, #164]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a28      	ldr	r2, [pc, #160]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 8001692:	f023 0301 	bic.w	r3, r3, #1
 8001696:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001698:	f7ff fbd0 	bl	8000e3c <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016a0:	f7ff fbcc 	bl	8000e3c <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e31a      	b.n	8001ce8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016b2:	4b20      	ldr	r3, [pc, #128]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f0      	bne.n	80016a0 <HAL_RCC_OscConfig+0x1dc>
 80016be:	e000      	b.n	80016c2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d073      	beq.n	80017b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	2b08      	cmp	r3, #8
 80016d2:	d005      	beq.n	80016e0 <HAL_RCC_OscConfig+0x21c>
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	2b0c      	cmp	r3, #12
 80016d8:	d10e      	bne.n	80016f8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	2b03      	cmp	r3, #3
 80016de:	d10b      	bne.n	80016f8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e0:	4b14      	ldr	r3, [pc, #80]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d063      	beq.n	80017b4 <HAL_RCC_OscConfig+0x2f0>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d15f      	bne.n	80017b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e2f7      	b.n	8001ce8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001700:	d106      	bne.n	8001710 <HAL_RCC_OscConfig+0x24c>
 8001702:	4b0c      	ldr	r3, [pc, #48]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a0b      	ldr	r2, [pc, #44]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 8001708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	e025      	b.n	800175c <HAL_RCC_OscConfig+0x298>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001718:	d114      	bne.n	8001744 <HAL_RCC_OscConfig+0x280>
 800171a:	4b06      	ldr	r3, [pc, #24]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a05      	ldr	r2, [pc, #20]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 8001720:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	4b03      	ldr	r3, [pc, #12]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a02      	ldr	r2, [pc, #8]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 800172c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	e013      	b.n	800175c <HAL_RCC_OscConfig+0x298>
 8001734:	40021000 	.word	0x40021000
 8001738:	080054b4 	.word	0x080054b4
 800173c:	20000000 	.word	0x20000000
 8001740:	20000004 	.word	0x20000004
 8001744:	4ba0      	ldr	r3, [pc, #640]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a9f      	ldr	r2, [pc, #636]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 800174a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800174e:	6013      	str	r3, [r2, #0]
 8001750:	4b9d      	ldr	r3, [pc, #628]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a9c      	ldr	r2, [pc, #624]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 8001756:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800175a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d013      	beq.n	800178c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001764:	f7ff fb6a 	bl	8000e3c <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800176c:	f7ff fb66 	bl	8000e3c <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b64      	cmp	r3, #100	@ 0x64
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e2b4      	b.n	8001ce8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800177e:	4b92      	ldr	r3, [pc, #584]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0f0      	beq.n	800176c <HAL_RCC_OscConfig+0x2a8>
 800178a:	e014      	b.n	80017b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178c:	f7ff fb56 	bl	8000e3c <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001794:	f7ff fb52 	bl	8000e3c <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b64      	cmp	r3, #100	@ 0x64
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e2a0      	b.n	8001ce8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017a6:	4b88      	ldr	r3, [pc, #544]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1f0      	bne.n	8001794 <HAL_RCC_OscConfig+0x2d0>
 80017b2:	e000      	b.n	80017b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d060      	beq.n	8001884 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	2b04      	cmp	r3, #4
 80017c6:	d005      	beq.n	80017d4 <HAL_RCC_OscConfig+0x310>
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	2b0c      	cmp	r3, #12
 80017cc:	d119      	bne.n	8001802 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d116      	bne.n	8001802 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017d4:	4b7c      	ldr	r3, [pc, #496]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d005      	beq.n	80017ec <HAL_RCC_OscConfig+0x328>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e27d      	b.n	8001ce8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ec:	4b76      	ldr	r3, [pc, #472]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	061b      	lsls	r3, r3, #24
 80017fa:	4973      	ldr	r1, [pc, #460]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001800:	e040      	b.n	8001884 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d023      	beq.n	8001852 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800180a:	4b6f      	ldr	r3, [pc, #444]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a6e      	ldr	r2, [pc, #440]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 8001810:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001814:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001816:	f7ff fb11 	bl	8000e3c <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800181e:	f7ff fb0d 	bl	8000e3c <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e25b      	b.n	8001ce8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001830:	4b65      	ldr	r3, [pc, #404]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0f0      	beq.n	800181e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800183c:	4b62      	ldr	r3, [pc, #392]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	061b      	lsls	r3, r3, #24
 800184a:	495f      	ldr	r1, [pc, #380]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 800184c:	4313      	orrs	r3, r2
 800184e:	604b      	str	r3, [r1, #4]
 8001850:	e018      	b.n	8001884 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001852:	4b5d      	ldr	r3, [pc, #372]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a5c      	ldr	r2, [pc, #368]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 8001858:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800185c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185e:	f7ff faed 	bl	8000e3c <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001866:	f7ff fae9 	bl	8000e3c <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e237      	b.n	8001ce8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001878:	4b53      	ldr	r3, [pc, #332]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001880:	2b00      	cmp	r3, #0
 8001882:	d1f0      	bne.n	8001866 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0308 	and.w	r3, r3, #8
 800188c:	2b00      	cmp	r3, #0
 800188e:	d03c      	beq.n	800190a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d01c      	beq.n	80018d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001898:	4b4b      	ldr	r3, [pc, #300]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 800189a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800189e:	4a4a      	ldr	r2, [pc, #296]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a8:	f7ff fac8 	bl	8000e3c <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018b0:	f7ff fac4 	bl	8000e3c <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e212      	b.n	8001ce8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018c2:	4b41      	ldr	r3, [pc, #260]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 80018c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d0ef      	beq.n	80018b0 <HAL_RCC_OscConfig+0x3ec>
 80018d0:	e01b      	b.n	800190a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018d2:	4b3d      	ldr	r3, [pc, #244]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 80018d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018d8:	4a3b      	ldr	r2, [pc, #236]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 80018da:	f023 0301 	bic.w	r3, r3, #1
 80018de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e2:	f7ff faab 	bl	8000e3c <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ea:	f7ff faa7 	bl	8000e3c <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e1f5      	b.n	8001ce8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018fc:	4b32      	ldr	r3, [pc, #200]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 80018fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1ef      	bne.n	80018ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 80a6 	beq.w	8001a64 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001918:	2300      	movs	r3, #0
 800191a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800191c:	4b2a      	ldr	r3, [pc, #168]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 800191e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001920:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d10d      	bne.n	8001944 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001928:	4b27      	ldr	r3, [pc, #156]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 800192a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800192c:	4a26      	ldr	r2, [pc, #152]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 800192e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001932:	6593      	str	r3, [r2, #88]	@ 0x58
 8001934:	4b24      	ldr	r3, [pc, #144]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 8001936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001938:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001940:	2301      	movs	r3, #1
 8001942:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001944:	4b21      	ldr	r3, [pc, #132]	@ (80019cc <HAL_RCC_OscConfig+0x508>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800194c:	2b00      	cmp	r3, #0
 800194e:	d118      	bne.n	8001982 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001950:	4b1e      	ldr	r3, [pc, #120]	@ (80019cc <HAL_RCC_OscConfig+0x508>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a1d      	ldr	r2, [pc, #116]	@ (80019cc <HAL_RCC_OscConfig+0x508>)
 8001956:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800195a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800195c:	f7ff fa6e 	bl	8000e3c <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001964:	f7ff fa6a 	bl	8000e3c <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e1b8      	b.n	8001ce8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001976:	4b15      	ldr	r3, [pc, #84]	@ (80019cc <HAL_RCC_OscConfig+0x508>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0f0      	beq.n	8001964 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d108      	bne.n	800199c <HAL_RCC_OscConfig+0x4d8>
 800198a:	4b0f      	ldr	r3, [pc, #60]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 800198c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001990:	4a0d      	ldr	r2, [pc, #52]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800199a:	e029      	b.n	80019f0 <HAL_RCC_OscConfig+0x52c>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	2b05      	cmp	r3, #5
 80019a2:	d115      	bne.n	80019d0 <HAL_RCC_OscConfig+0x50c>
 80019a4:	4b08      	ldr	r3, [pc, #32]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 80019a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019aa:	4a07      	ldr	r2, [pc, #28]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 80019ac:	f043 0304 	orr.w	r3, r3, #4
 80019b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019b4:	4b04      	ldr	r3, [pc, #16]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 80019b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ba:	4a03      	ldr	r2, [pc, #12]	@ (80019c8 <HAL_RCC_OscConfig+0x504>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019c4:	e014      	b.n	80019f0 <HAL_RCC_OscConfig+0x52c>
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40007000 	.word	0x40007000
 80019d0:	4b9d      	ldr	r3, [pc, #628]	@ (8001c48 <HAL_RCC_OscConfig+0x784>)
 80019d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019d6:	4a9c      	ldr	r2, [pc, #624]	@ (8001c48 <HAL_RCC_OscConfig+0x784>)
 80019d8:	f023 0301 	bic.w	r3, r3, #1
 80019dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019e0:	4b99      	ldr	r3, [pc, #612]	@ (8001c48 <HAL_RCC_OscConfig+0x784>)
 80019e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019e6:	4a98      	ldr	r2, [pc, #608]	@ (8001c48 <HAL_RCC_OscConfig+0x784>)
 80019e8:	f023 0304 	bic.w	r3, r3, #4
 80019ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d016      	beq.n	8001a26 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f8:	f7ff fa20 	bl	8000e3c <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019fe:	e00a      	b.n	8001a16 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a00:	f7ff fa1c 	bl	8000e3c <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e168      	b.n	8001ce8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a16:	4b8c      	ldr	r3, [pc, #560]	@ (8001c48 <HAL_RCC_OscConfig+0x784>)
 8001a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0ed      	beq.n	8001a00 <HAL_RCC_OscConfig+0x53c>
 8001a24:	e015      	b.n	8001a52 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a26:	f7ff fa09 	bl	8000e3c <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a2c:	e00a      	b.n	8001a44 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2e:	f7ff fa05 	bl	8000e3c <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e151      	b.n	8001ce8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a44:	4b80      	ldr	r3, [pc, #512]	@ (8001c48 <HAL_RCC_OscConfig+0x784>)
 8001a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1ed      	bne.n	8001a2e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a52:	7ffb      	ldrb	r3, [r7, #31]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d105      	bne.n	8001a64 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a58:	4b7b      	ldr	r3, [pc, #492]	@ (8001c48 <HAL_RCC_OscConfig+0x784>)
 8001a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a5c:	4a7a      	ldr	r2, [pc, #488]	@ (8001c48 <HAL_RCC_OscConfig+0x784>)
 8001a5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a62:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0320 	and.w	r3, r3, #32
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d03c      	beq.n	8001aea <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d01c      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a78:	4b73      	ldr	r3, [pc, #460]	@ (8001c48 <HAL_RCC_OscConfig+0x784>)
 8001a7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a7e:	4a72      	ldr	r2, [pc, #456]	@ (8001c48 <HAL_RCC_OscConfig+0x784>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a88:	f7ff f9d8 	bl	8000e3c <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a90:	f7ff f9d4 	bl	8000e3c <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e122      	b.n	8001ce8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001aa2:	4b69      	ldr	r3, [pc, #420]	@ (8001c48 <HAL_RCC_OscConfig+0x784>)
 8001aa4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0ef      	beq.n	8001a90 <HAL_RCC_OscConfig+0x5cc>
 8001ab0:	e01b      	b.n	8001aea <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ab2:	4b65      	ldr	r3, [pc, #404]	@ (8001c48 <HAL_RCC_OscConfig+0x784>)
 8001ab4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ab8:	4a63      	ldr	r2, [pc, #396]	@ (8001c48 <HAL_RCC_OscConfig+0x784>)
 8001aba:	f023 0301 	bic.w	r3, r3, #1
 8001abe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac2:	f7ff f9bb 	bl	8000e3c <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001aca:	f7ff f9b7 	bl	8000e3c <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e105      	b.n	8001ce8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001adc:	4b5a      	ldr	r3, [pc, #360]	@ (8001c48 <HAL_RCC_OscConfig+0x784>)
 8001ade:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1ef      	bne.n	8001aca <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 80f9 	beq.w	8001ce6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	f040 80cf 	bne.w	8001c9c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001afe:	4b52      	ldr	r3, [pc, #328]	@ (8001c48 <HAL_RCC_OscConfig+0x784>)
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	f003 0203 	and.w	r2, r3, #3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d12c      	bne.n	8001b6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d123      	bne.n	8001b6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b2e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d11b      	bne.n	8001b6c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b3e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d113      	bne.n	8001b6c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b4e:	085b      	lsrs	r3, r3, #1
 8001b50:	3b01      	subs	r3, #1
 8001b52:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d109      	bne.n	8001b6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b62:	085b      	lsrs	r3, r3, #1
 8001b64:	3b01      	subs	r3, #1
 8001b66:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d071      	beq.n	8001c50 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	2b0c      	cmp	r3, #12
 8001b70:	d068      	beq.n	8001c44 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b72:	4b35      	ldr	r3, [pc, #212]	@ (8001c48 <HAL_RCC_OscConfig+0x784>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d105      	bne.n	8001b8a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b7e:	4b32      	ldr	r3, [pc, #200]	@ (8001c48 <HAL_RCC_OscConfig+0x784>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e0ac      	b.n	8001ce8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b8e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c48 <HAL_RCC_OscConfig+0x784>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a2d      	ldr	r2, [pc, #180]	@ (8001c48 <HAL_RCC_OscConfig+0x784>)
 8001b94:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b98:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b9a:	f7ff f94f 	bl	8000e3c <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba2:	f7ff f94b 	bl	8000e3c <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e099      	b.n	8001ce8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bb4:	4b24      	ldr	r3, [pc, #144]	@ (8001c48 <HAL_RCC_OscConfig+0x784>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1f0      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bc0:	4b21      	ldr	r3, [pc, #132]	@ (8001c48 <HAL_RCC_OscConfig+0x784>)
 8001bc2:	68da      	ldr	r2, [r3, #12]
 8001bc4:	4b21      	ldr	r3, [pc, #132]	@ (8001c4c <HAL_RCC_OscConfig+0x788>)
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001bd0:	3a01      	subs	r2, #1
 8001bd2:	0112      	lsls	r2, r2, #4
 8001bd4:	4311      	orrs	r1, r2
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001bda:	0212      	lsls	r2, r2, #8
 8001bdc:	4311      	orrs	r1, r2
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001be2:	0852      	lsrs	r2, r2, #1
 8001be4:	3a01      	subs	r2, #1
 8001be6:	0552      	lsls	r2, r2, #21
 8001be8:	4311      	orrs	r1, r2
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001bee:	0852      	lsrs	r2, r2, #1
 8001bf0:	3a01      	subs	r2, #1
 8001bf2:	0652      	lsls	r2, r2, #25
 8001bf4:	4311      	orrs	r1, r2
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001bfa:	06d2      	lsls	r2, r2, #27
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	4912      	ldr	r1, [pc, #72]	@ (8001c48 <HAL_RCC_OscConfig+0x784>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c04:	4b10      	ldr	r3, [pc, #64]	@ (8001c48 <HAL_RCC_OscConfig+0x784>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a0f      	ldr	r2, [pc, #60]	@ (8001c48 <HAL_RCC_OscConfig+0x784>)
 8001c0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c0e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c10:	4b0d      	ldr	r3, [pc, #52]	@ (8001c48 <HAL_RCC_OscConfig+0x784>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	4a0c      	ldr	r2, [pc, #48]	@ (8001c48 <HAL_RCC_OscConfig+0x784>)
 8001c16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c1a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c1c:	f7ff f90e 	bl	8000e3c <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c24:	f7ff f90a 	bl	8000e3c <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e058      	b.n	8001ce8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c36:	4b04      	ldr	r3, [pc, #16]	@ (8001c48 <HAL_RCC_OscConfig+0x784>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0f0      	beq.n	8001c24 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c42:	e050      	b.n	8001ce6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e04f      	b.n	8001ce8 <HAL_RCC_OscConfig+0x824>
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c50:	4b27      	ldr	r3, [pc, #156]	@ (8001cf0 <HAL_RCC_OscConfig+0x82c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d144      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c5c:	4b24      	ldr	r3, [pc, #144]	@ (8001cf0 <HAL_RCC_OscConfig+0x82c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a23      	ldr	r2, [pc, #140]	@ (8001cf0 <HAL_RCC_OscConfig+0x82c>)
 8001c62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c66:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c68:	4b21      	ldr	r3, [pc, #132]	@ (8001cf0 <HAL_RCC_OscConfig+0x82c>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	4a20      	ldr	r2, [pc, #128]	@ (8001cf0 <HAL_RCC_OscConfig+0x82c>)
 8001c6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c72:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c74:	f7ff f8e2 	bl	8000e3c <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c7c:	f7ff f8de 	bl	8000e3c <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e02c      	b.n	8001ce8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c8e:	4b18      	ldr	r3, [pc, #96]	@ (8001cf0 <HAL_RCC_OscConfig+0x82c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0f0      	beq.n	8001c7c <HAL_RCC_OscConfig+0x7b8>
 8001c9a:	e024      	b.n	8001ce6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	2b0c      	cmp	r3, #12
 8001ca0:	d01f      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca2:	4b13      	ldr	r3, [pc, #76]	@ (8001cf0 <HAL_RCC_OscConfig+0x82c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a12      	ldr	r2, [pc, #72]	@ (8001cf0 <HAL_RCC_OscConfig+0x82c>)
 8001ca8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001cac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cae:	f7ff f8c5 	bl	8000e3c <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb6:	f7ff f8c1 	bl	8000e3c <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e00f      	b.n	8001ce8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cc8:	4b09      	ldr	r3, [pc, #36]	@ (8001cf0 <HAL_RCC_OscConfig+0x82c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1f0      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001cd4:	4b06      	ldr	r3, [pc, #24]	@ (8001cf0 <HAL_RCC_OscConfig+0x82c>)
 8001cd6:	68da      	ldr	r2, [r3, #12]
 8001cd8:	4905      	ldr	r1, [pc, #20]	@ (8001cf0 <HAL_RCC_OscConfig+0x82c>)
 8001cda:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <HAL_RCC_OscConfig+0x830>)
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60cb      	str	r3, [r1, #12]
 8001ce0:	e001      	b.n	8001ce6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3720      	adds	r7, #32
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	feeefffc 	.word	0xfeeefffc

08001cf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d101      	bne.n	8001d10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e11d      	b.n	8001f4c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d10:	4b90      	ldr	r3, [pc, #576]	@ (8001f54 <HAL_RCC_ClockConfig+0x25c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 030f 	and.w	r3, r3, #15
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d910      	bls.n	8001d40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1e:	4b8d      	ldr	r3, [pc, #564]	@ (8001f54 <HAL_RCC_ClockConfig+0x25c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f023 020f 	bic.w	r2, r3, #15
 8001d26:	498b      	ldr	r1, [pc, #556]	@ (8001f54 <HAL_RCC_ClockConfig+0x25c>)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2e:	4b89      	ldr	r3, [pc, #548]	@ (8001f54 <HAL_RCC_ClockConfig+0x25c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d001      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e105      	b.n	8001f4c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d010      	beq.n	8001d6e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	4b81      	ldr	r3, [pc, #516]	@ (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d908      	bls.n	8001d6e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d5c:	4b7e      	ldr	r3, [pc, #504]	@ (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	497b      	ldr	r1, [pc, #492]	@ (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d079      	beq.n	8001e6e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b03      	cmp	r3, #3
 8001d80:	d11e      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d82:	4b75      	ldr	r3, [pc, #468]	@ (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e0dc      	b.n	8001f4c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001d92:	f000 fa3b 	bl	800220c <RCC_GetSysClockFreqFromPLLSource>
 8001d96:	4603      	mov	r3, r0
 8001d98:	4a70      	ldr	r2, [pc, #448]	@ (8001f5c <HAL_RCC_ClockConfig+0x264>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d946      	bls.n	8001e2c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001d9e:	4b6e      	ldr	r3, [pc, #440]	@ (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d140      	bne.n	8001e2c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001daa:	4b6b      	ldr	r3, [pc, #428]	@ (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001db2:	4a69      	ldr	r2, [pc, #420]	@ (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001db4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001db8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001dba:	2380      	movs	r3, #128	@ 0x80
 8001dbc:	617b      	str	r3, [r7, #20]
 8001dbe:	e035      	b.n	8001e2c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d107      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dc8:	4b63      	ldr	r3, [pc, #396]	@ (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d115      	bne.n	8001e00 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e0b9      	b.n	8001f4c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d107      	bne.n	8001df0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001de0:	4b5d      	ldr	r3, [pc, #372]	@ (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d109      	bne.n	8001e00 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e0ad      	b.n	8001f4c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001df0:	4b59      	ldr	r3, [pc, #356]	@ (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e0a5      	b.n	8001f4c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001e00:	f000 f8b4 	bl	8001f6c <HAL_RCC_GetSysClockFreq>
 8001e04:	4603      	mov	r3, r0
 8001e06:	4a55      	ldr	r2, [pc, #340]	@ (8001f5c <HAL_RCC_ClockConfig+0x264>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d90f      	bls.n	8001e2c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001e0c:	4b52      	ldr	r3, [pc, #328]	@ (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d109      	bne.n	8001e2c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e18:	4b4f      	ldr	r3, [pc, #316]	@ (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e20:	4a4d      	ldr	r2, [pc, #308]	@ (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001e22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e26:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e28:	2380      	movs	r3, #128	@ 0x80
 8001e2a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e2c:	4b4a      	ldr	r3, [pc, #296]	@ (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f023 0203 	bic.w	r2, r3, #3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	4947      	ldr	r1, [pc, #284]	@ (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e3e:	f7fe fffd 	bl	8000e3c <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e44:	e00a      	b.n	8001e5c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e46:	f7fe fff9 	bl	8000e3c <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e077      	b.n	8001f4c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5c:	4b3e      	ldr	r3, [pc, #248]	@ (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 020c 	and.w	r2, r3, #12
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d1eb      	bne.n	8001e46 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	2b80      	cmp	r3, #128	@ 0x80
 8001e72:	d105      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001e74:	4b38      	ldr	r3, [pc, #224]	@ (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	4a37      	ldr	r2, [pc, #220]	@ (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001e7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e7e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d010      	beq.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	4b31      	ldr	r3, [pc, #196]	@ (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d208      	bcs.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e9c:	4b2e      	ldr	r3, [pc, #184]	@ (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	492b      	ldr	r1, [pc, #172]	@ (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001eae:	4b29      	ldr	r3, [pc, #164]	@ (8001f54 <HAL_RCC_ClockConfig+0x25c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d210      	bcs.n	8001ede <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ebc:	4b25      	ldr	r3, [pc, #148]	@ (8001f54 <HAL_RCC_ClockConfig+0x25c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f023 020f 	bic.w	r2, r3, #15
 8001ec4:	4923      	ldr	r1, [pc, #140]	@ (8001f54 <HAL_RCC_ClockConfig+0x25c>)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ecc:	4b21      	ldr	r3, [pc, #132]	@ (8001f54 <HAL_RCC_ClockConfig+0x25c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 030f 	and.w	r3, r3, #15
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d001      	beq.n	8001ede <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e036      	b.n	8001f4c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0304 	and.w	r3, r3, #4
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d008      	beq.n	8001efc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eea:	4b1b      	ldr	r3, [pc, #108]	@ (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	4918      	ldr	r1, [pc, #96]	@ (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0308 	and.w	r3, r3, #8
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d009      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f08:	4b13      	ldr	r3, [pc, #76]	@ (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	4910      	ldr	r1, [pc, #64]	@ (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f1c:	f000 f826 	bl	8001f6c <HAL_RCC_GetSysClockFreq>
 8001f20:	4602      	mov	r2, r0
 8001f22:	4b0d      	ldr	r3, [pc, #52]	@ (8001f58 <HAL_RCC_ClockConfig+0x260>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	091b      	lsrs	r3, r3, #4
 8001f28:	f003 030f 	and.w	r3, r3, #15
 8001f2c:	490c      	ldr	r1, [pc, #48]	@ (8001f60 <HAL_RCC_ClockConfig+0x268>)
 8001f2e:	5ccb      	ldrb	r3, [r1, r3]
 8001f30:	f003 031f 	and.w	r3, r3, #31
 8001f34:	fa22 f303 	lsr.w	r3, r2, r3
 8001f38:	4a0a      	ldr	r2, [pc, #40]	@ (8001f64 <HAL_RCC_ClockConfig+0x26c>)
 8001f3a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f68 <HAL_RCC_ClockConfig+0x270>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe fd99 	bl	8000a78 <HAL_InitTick>
 8001f46:	4603      	mov	r3, r0
 8001f48:	73fb      	strb	r3, [r7, #15]

  return status;
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3718      	adds	r7, #24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40022000 	.word	0x40022000
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	04c4b400 	.word	0x04c4b400
 8001f60:	080054b4 	.word	0x080054b4
 8001f64:	20000000 	.word	0x20000000
 8001f68:	20000004 	.word	0x20000004

08001f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b089      	sub	sp, #36	@ 0x24
 8001f70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
 8001f76:	2300      	movs	r3, #0
 8001f78:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f7a:	4b3e      	ldr	r3, [pc, #248]	@ (8002074 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 030c 	and.w	r3, r3, #12
 8001f82:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f84:	4b3b      	ldr	r3, [pc, #236]	@ (8002074 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f003 0303 	and.w	r3, r3, #3
 8001f8c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d005      	beq.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x34>
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	2b0c      	cmp	r3, #12
 8001f98:	d121      	bne.n	8001fde <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d11e      	bne.n	8001fde <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fa0:	4b34      	ldr	r3, [pc, #208]	@ (8002074 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0308 	and.w	r3, r3, #8
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d107      	bne.n	8001fbc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fac:	4b31      	ldr	r3, [pc, #196]	@ (8002074 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fb2:	0a1b      	lsrs	r3, r3, #8
 8001fb4:	f003 030f 	and.w	r3, r3, #15
 8001fb8:	61fb      	str	r3, [r7, #28]
 8001fba:	e005      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fbc:	4b2d      	ldr	r3, [pc, #180]	@ (8002074 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	091b      	lsrs	r3, r3, #4
 8001fc2:	f003 030f 	and.w	r3, r3, #15
 8001fc6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fc8:	4a2b      	ldr	r2, [pc, #172]	@ (8002078 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d10d      	bne.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fdc:	e00a      	b.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d102      	bne.n	8001fea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fe4:	4b25      	ldr	r3, [pc, #148]	@ (800207c <HAL_RCC_GetSysClockFreq+0x110>)
 8001fe6:	61bb      	str	r3, [r7, #24]
 8001fe8:	e004      	b.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	2b08      	cmp	r3, #8
 8001fee:	d101      	bne.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ff0:	4b23      	ldr	r3, [pc, #140]	@ (8002080 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ff2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	2b0c      	cmp	r3, #12
 8001ff8:	d134      	bne.n	8002064 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8002074 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2b02      	cmp	r3, #2
 8002008:	d003      	beq.n	8002012 <HAL_RCC_GetSysClockFreq+0xa6>
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	2b03      	cmp	r3, #3
 800200e:	d003      	beq.n	8002018 <HAL_RCC_GetSysClockFreq+0xac>
 8002010:	e005      	b.n	800201e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002012:	4b1a      	ldr	r3, [pc, #104]	@ (800207c <HAL_RCC_GetSysClockFreq+0x110>)
 8002014:	617b      	str	r3, [r7, #20]
      break;
 8002016:	e005      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002018:	4b19      	ldr	r3, [pc, #100]	@ (8002080 <HAL_RCC_GetSysClockFreq+0x114>)
 800201a:	617b      	str	r3, [r7, #20]
      break;
 800201c:	e002      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	617b      	str	r3, [r7, #20]
      break;
 8002022:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002024:	4b13      	ldr	r3, [pc, #76]	@ (8002074 <HAL_RCC_GetSysClockFreq+0x108>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	091b      	lsrs	r3, r3, #4
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	3301      	adds	r3, #1
 8002030:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002032:	4b10      	ldr	r3, [pc, #64]	@ (8002074 <HAL_RCC_GetSysClockFreq+0x108>)
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	0a1b      	lsrs	r3, r3, #8
 8002038:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	fb03 f202 	mul.w	r2, r3, r2
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	fbb2 f3f3 	udiv	r3, r2, r3
 8002048:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800204a:	4b0a      	ldr	r3, [pc, #40]	@ (8002074 <HAL_RCC_GetSysClockFreq+0x108>)
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	0e5b      	lsrs	r3, r3, #25
 8002050:	f003 0303 	and.w	r3, r3, #3
 8002054:	3301      	adds	r3, #1
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002062:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002064:	69bb      	ldr	r3, [r7, #24]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3724      	adds	r7, #36	@ 0x24
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40021000 	.word	0x40021000
 8002078:	080054cc 	.word	0x080054cc
 800207c:	00f42400 	.word	0x00f42400
 8002080:	007a1200 	.word	0x007a1200

08002084 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002088:	4b03      	ldr	r3, [pc, #12]	@ (8002098 <HAL_RCC_GetHCLKFreq+0x14>)
 800208a:	681b      	ldr	r3, [r3, #0]
}
 800208c:	4618      	mov	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	20000000 	.word	0x20000000

0800209c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020a0:	f7ff fff0 	bl	8002084 <HAL_RCC_GetHCLKFreq>
 80020a4:	4602      	mov	r2, r0
 80020a6:	4b06      	ldr	r3, [pc, #24]	@ (80020c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	0a1b      	lsrs	r3, r3, #8
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	4904      	ldr	r1, [pc, #16]	@ (80020c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020b2:	5ccb      	ldrb	r3, [r1, r3]
 80020b4:	f003 031f 	and.w	r3, r3, #31
 80020b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020bc:	4618      	mov	r0, r3
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40021000 	.word	0x40021000
 80020c4:	080054c4 	.word	0x080054c4

080020c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020cc:	f7ff ffda 	bl	8002084 <HAL_RCC_GetHCLKFreq>
 80020d0:	4602      	mov	r2, r0
 80020d2:	4b06      	ldr	r3, [pc, #24]	@ (80020ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	0adb      	lsrs	r3, r3, #11
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	4904      	ldr	r1, [pc, #16]	@ (80020f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020de:	5ccb      	ldrb	r3, [r1, r3]
 80020e0:	f003 031f 	and.w	r3, r3, #31
 80020e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40021000 	.word	0x40021000
 80020f0:	080054c4 	.word	0x080054c4

080020f4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	220f      	movs	r2, #15
 8002102:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002104:	4b12      	ldr	r3, [pc, #72]	@ (8002150 <HAL_RCC_GetClockConfig+0x5c>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 0203 	and.w	r2, r3, #3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002110:	4b0f      	ldr	r3, [pc, #60]	@ (8002150 <HAL_RCC_GetClockConfig+0x5c>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800211c:	4b0c      	ldr	r3, [pc, #48]	@ (8002150 <HAL_RCC_GetClockConfig+0x5c>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002128:	4b09      	ldr	r3, [pc, #36]	@ (8002150 <HAL_RCC_GetClockConfig+0x5c>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	08db      	lsrs	r3, r3, #3
 800212e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002136:	4b07      	ldr	r3, [pc, #28]	@ (8002154 <HAL_RCC_GetClockConfig+0x60>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 020f 	and.w	r2, r3, #15
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	601a      	str	r2, [r3, #0]
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	40021000 	.word	0x40021000
 8002154:	40022000 	.word	0x40022000

08002158 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002160:	2300      	movs	r3, #0
 8002162:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002164:	4b27      	ldr	r3, [pc, #156]	@ (8002204 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002168:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002170:	f7ff f8e4 	bl	800133c <HAL_PWREx_GetVoltageRange>
 8002174:	6178      	str	r0, [r7, #20]
 8002176:	e014      	b.n	80021a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002178:	4b22      	ldr	r3, [pc, #136]	@ (8002204 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800217a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800217c:	4a21      	ldr	r2, [pc, #132]	@ (8002204 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800217e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002182:	6593      	str	r3, [r2, #88]	@ 0x58
 8002184:	4b1f      	ldr	r3, [pc, #124]	@ (8002204 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002188:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002190:	f7ff f8d4 	bl	800133c <HAL_PWREx_GetVoltageRange>
 8002194:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002196:	4b1b      	ldr	r3, [pc, #108]	@ (8002204 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800219a:	4a1a      	ldr	r2, [pc, #104]	@ (8002204 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800219c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021a0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021a8:	d10b      	bne.n	80021c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b80      	cmp	r3, #128	@ 0x80
 80021ae:	d913      	bls.n	80021d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2ba0      	cmp	r3, #160	@ 0xa0
 80021b4:	d902      	bls.n	80021bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021b6:	2302      	movs	r3, #2
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	e00d      	b.n	80021d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021bc:	2301      	movs	r3, #1
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	e00a      	b.n	80021d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80021c6:	d902      	bls.n	80021ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80021c8:	2302      	movs	r3, #2
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	e004      	b.n	80021d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b70      	cmp	r3, #112	@ 0x70
 80021d2:	d101      	bne.n	80021d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021d4:	2301      	movs	r3, #1
 80021d6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002208 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f023 020f 	bic.w	r2, r3, #15
 80021e0:	4909      	ldr	r1, [pc, #36]	@ (8002208 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80021e8:	4b07      	ldr	r3, [pc, #28]	@ (8002208 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 030f 	and.w	r3, r3, #15
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d001      	beq.n	80021fa <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3718      	adds	r7, #24
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40021000 	.word	0x40021000
 8002208:	40022000 	.word	0x40022000

0800220c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800220c:	b480      	push	{r7}
 800220e:	b087      	sub	sp, #28
 8002210:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002212:	4b2d      	ldr	r3, [pc, #180]	@ (80022c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2b03      	cmp	r3, #3
 8002220:	d00b      	beq.n	800223a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2b03      	cmp	r3, #3
 8002226:	d825      	bhi.n	8002274 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d008      	beq.n	8002240 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2b02      	cmp	r3, #2
 8002232:	d11f      	bne.n	8002274 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002234:	4b25      	ldr	r3, [pc, #148]	@ (80022cc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002236:	613b      	str	r3, [r7, #16]
    break;
 8002238:	e01f      	b.n	800227a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800223a:	4b25      	ldr	r3, [pc, #148]	@ (80022d0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800223c:	613b      	str	r3, [r7, #16]
    break;
 800223e:	e01c      	b.n	800227a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002240:	4b21      	ldr	r3, [pc, #132]	@ (80022c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0308 	and.w	r3, r3, #8
 8002248:	2b00      	cmp	r3, #0
 800224a:	d107      	bne.n	800225c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800224c:	4b1e      	ldr	r3, [pc, #120]	@ (80022c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800224e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002252:	0a1b      	lsrs	r3, r3, #8
 8002254:	f003 030f 	and.w	r3, r3, #15
 8002258:	617b      	str	r3, [r7, #20]
 800225a:	e005      	b.n	8002268 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800225c:	4b1a      	ldr	r3, [pc, #104]	@ (80022c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	091b      	lsrs	r3, r3, #4
 8002262:	f003 030f 	and.w	r3, r3, #15
 8002266:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002268:	4a1a      	ldr	r2, [pc, #104]	@ (80022d4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002270:	613b      	str	r3, [r7, #16]
    break;
 8002272:	e002      	b.n	800227a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	613b      	str	r3, [r7, #16]
    break;
 8002278:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800227a:	4b13      	ldr	r3, [pc, #76]	@ (80022c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	091b      	lsrs	r3, r3, #4
 8002280:	f003 030f 	and.w	r3, r3, #15
 8002284:	3301      	adds	r3, #1
 8002286:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002288:	4b0f      	ldr	r3, [pc, #60]	@ (80022c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	0a1b      	lsrs	r3, r3, #8
 800228e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	fb03 f202 	mul.w	r2, r3, r2
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	fbb2 f3f3 	udiv	r3, r2, r3
 800229e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022a0:	4b09      	ldr	r3, [pc, #36]	@ (80022c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	0e5b      	lsrs	r3, r3, #25
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	3301      	adds	r3, #1
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80022ba:	683b      	ldr	r3, [r7, #0]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	371c      	adds	r7, #28
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	40021000 	.word	0x40021000
 80022cc:	00f42400 	.word	0x00f42400
 80022d0:	007a1200 	.word	0x007a1200
 80022d4:	080054cc 	.word	0x080054cc

080022d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022e0:	2300      	movs	r3, #0
 80022e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022e4:	2300      	movs	r3, #0
 80022e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d040      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022f8:	2b80      	cmp	r3, #128	@ 0x80
 80022fa:	d02a      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80022fc:	2b80      	cmp	r3, #128	@ 0x80
 80022fe:	d825      	bhi.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002300:	2b60      	cmp	r3, #96	@ 0x60
 8002302:	d026      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002304:	2b60      	cmp	r3, #96	@ 0x60
 8002306:	d821      	bhi.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002308:	2b40      	cmp	r3, #64	@ 0x40
 800230a:	d006      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800230c:	2b40      	cmp	r3, #64	@ 0x40
 800230e:	d81d      	bhi.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002310:	2b00      	cmp	r3, #0
 8002312:	d009      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002314:	2b20      	cmp	r3, #32
 8002316:	d010      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002318:	e018      	b.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800231a:	4b89      	ldr	r3, [pc, #548]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	4a88      	ldr	r2, [pc, #544]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002320:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002324:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002326:	e015      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3304      	adds	r3, #4
 800232c:	2100      	movs	r1, #0
 800232e:	4618      	mov	r0, r3
 8002330:	f000 fb02 	bl	8002938 <RCCEx_PLLSAI1_Config>
 8002334:	4603      	mov	r3, r0
 8002336:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002338:	e00c      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3320      	adds	r3, #32
 800233e:	2100      	movs	r1, #0
 8002340:	4618      	mov	r0, r3
 8002342:	f000 fbed 	bl	8002b20 <RCCEx_PLLSAI2_Config>
 8002346:	4603      	mov	r3, r0
 8002348:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800234a:	e003      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	74fb      	strb	r3, [r7, #19]
      break;
 8002350:	e000      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002352:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002354:	7cfb      	ldrb	r3, [r7, #19]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10b      	bne.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800235a:	4b79      	ldr	r3, [pc, #484]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800235c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002360:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002368:	4975      	ldr	r1, [pc, #468]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800236a:	4313      	orrs	r3, r2
 800236c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8002370:	e001      	b.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002372:	7cfb      	ldrb	r3, [r7, #19]
 8002374:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d047      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002386:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800238a:	d030      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x116>
 800238c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002390:	d82a      	bhi.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002392:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002396:	d02a      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002398:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800239c:	d824      	bhi.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800239e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023a2:	d008      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80023a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023a8:	d81e      	bhi.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00a      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80023ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023b2:	d010      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80023b4:	e018      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023b6:	4b62      	ldr	r3, [pc, #392]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	4a61      	ldr	r2, [pc, #388]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023c0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023c2:	e015      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3304      	adds	r3, #4
 80023c8:	2100      	movs	r1, #0
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 fab4 	bl	8002938 <RCCEx_PLLSAI1_Config>
 80023d0:	4603      	mov	r3, r0
 80023d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023d4:	e00c      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3320      	adds	r3, #32
 80023da:	2100      	movs	r1, #0
 80023dc:	4618      	mov	r0, r3
 80023de:	f000 fb9f 	bl	8002b20 <RCCEx_PLLSAI2_Config>
 80023e2:	4603      	mov	r3, r0
 80023e4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023e6:	e003      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	74fb      	strb	r3, [r7, #19]
      break;
 80023ec:	e000      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80023ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023f0:	7cfb      	ldrb	r3, [r7, #19]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10b      	bne.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023f6:	4b52      	ldr	r3, [pc, #328]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80023fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002404:	494e      	ldr	r1, [pc, #312]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002406:	4313      	orrs	r3, r2
 8002408:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800240c:	e001      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800240e:	7cfb      	ldrb	r3, [r7, #19]
 8002410:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 809f 	beq.w	800255e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002420:	2300      	movs	r3, #0
 8002422:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002424:	4b46      	ldr	r3, [pc, #280]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002428:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002430:	2301      	movs	r3, #1
 8002432:	e000      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002434:	2300      	movs	r3, #0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00d      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800243a:	4b41      	ldr	r3, [pc, #260]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800243c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800243e:	4a40      	ldr	r2, [pc, #256]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002440:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002444:	6593      	str	r3, [r2, #88]	@ 0x58
 8002446:	4b3e      	ldr	r3, [pc, #248]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800244a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002452:	2301      	movs	r3, #1
 8002454:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002456:	4b3b      	ldr	r3, [pc, #236]	@ (8002544 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a3a      	ldr	r2, [pc, #232]	@ (8002544 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800245c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002460:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002462:	f7fe fceb 	bl	8000e3c <HAL_GetTick>
 8002466:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002468:	e009      	b.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800246a:	f7fe fce7 	bl	8000e3c <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d902      	bls.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	74fb      	strb	r3, [r7, #19]
        break;
 800247c:	e005      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800247e:	4b31      	ldr	r3, [pc, #196]	@ (8002544 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0ef      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800248a:	7cfb      	ldrb	r3, [r7, #19]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d15b      	bne.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002490:	4b2b      	ldr	r3, [pc, #172]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002496:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800249a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d01f      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d019      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024ae:	4b24      	ldr	r3, [pc, #144]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024b8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024ba:	4b21      	ldr	r3, [pc, #132]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024c0:	4a1f      	ldr	r2, [pc, #124]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024d0:	4a1b      	ldr	r2, [pc, #108]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024da:	4a19      	ldr	r2, [pc, #100]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d016      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ec:	f7fe fca6 	bl	8000e3c <HAL_GetTick>
 80024f0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024f2:	e00b      	b.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f4:	f7fe fca2 	bl	8000e3c <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002502:	4293      	cmp	r3, r2
 8002504:	d902      	bls.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	74fb      	strb	r3, [r7, #19]
            break;
 800250a:	e006      	b.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800250c:	4b0c      	ldr	r3, [pc, #48]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800250e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0ec      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800251a:	7cfb      	ldrb	r3, [r7, #19]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10c      	bne.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002520:	4b07      	ldr	r3, [pc, #28]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002526:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002530:	4903      	ldr	r1, [pc, #12]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002532:	4313      	orrs	r3, r2
 8002534:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002538:	e008      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800253a:	7cfb      	ldrb	r3, [r7, #19]
 800253c:	74bb      	strb	r3, [r7, #18]
 800253e:	e005      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002540:	40021000 	.word	0x40021000
 8002544:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002548:	7cfb      	ldrb	r3, [r7, #19]
 800254a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800254c:	7c7b      	ldrb	r3, [r7, #17]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d105      	bne.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002552:	4ba0      	ldr	r3, [pc, #640]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002556:	4a9f      	ldr	r2, [pc, #636]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002558:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800255c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00a      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800256a:	4b9a      	ldr	r3, [pc, #616]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800256c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002570:	f023 0203 	bic.w	r2, r3, #3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002578:	4996      	ldr	r1, [pc, #600]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800257a:	4313      	orrs	r3, r2
 800257c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00a      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800258c:	4b91      	ldr	r3, [pc, #580]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800258e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002592:	f023 020c 	bic.w	r2, r3, #12
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259a:	498e      	ldr	r1, [pc, #568]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800259c:	4313      	orrs	r3, r2
 800259e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0304 	and.w	r3, r3, #4
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00a      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025ae:	4b89      	ldr	r3, [pc, #548]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025b4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025bc:	4985      	ldr	r1, [pc, #532]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0308 	and.w	r3, r3, #8
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00a      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025d0:	4b80      	ldr	r3, [pc, #512]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025de:	497d      	ldr	r1, [pc, #500]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0310 	and.w	r3, r3, #16
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00a      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025f2:	4b78      	ldr	r3, [pc, #480]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002600:	4974      	ldr	r1, [pc, #464]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002602:	4313      	orrs	r3, r2
 8002604:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0320 	and.w	r3, r3, #32
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00a      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002614:	4b6f      	ldr	r3, [pc, #444]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800261a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002622:	496c      	ldr	r1, [pc, #432]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002624:	4313      	orrs	r3, r2
 8002626:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00a      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002636:	4b67      	ldr	r3, [pc, #412]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800263c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002644:	4963      	ldr	r1, [pc, #396]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002646:	4313      	orrs	r3, r2
 8002648:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00a      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002658:	4b5e      	ldr	r3, [pc, #376]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800265a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800265e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002666:	495b      	ldr	r1, [pc, #364]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00a      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800267a:	4b56      	ldr	r3, [pc, #344]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800267c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002680:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002688:	4952      	ldr	r1, [pc, #328]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800268a:	4313      	orrs	r3, r2
 800268c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00a      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800269c:	4b4d      	ldr	r3, [pc, #308]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800269e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026a2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026aa:	494a      	ldr	r1, [pc, #296]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00a      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026be:	4b45      	ldr	r3, [pc, #276]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026cc:	4941      	ldr	r1, [pc, #260]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00a      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80026e0:	4b3c      	ldr	r3, [pc, #240]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80026e6:	f023 0203 	bic.w	r2, r3, #3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026ee:	4939      	ldr	r1, [pc, #228]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d028      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002702:	4b34      	ldr	r3, [pc, #208]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002708:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002710:	4930      	ldr	r1, [pc, #192]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002712:	4313      	orrs	r3, r2
 8002714:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800271c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002720:	d106      	bne.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002722:	4b2c      	ldr	r3, [pc, #176]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	4a2b      	ldr	r2, [pc, #172]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002728:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800272c:	60d3      	str	r3, [r2, #12]
 800272e:	e011      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002734:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002738:	d10c      	bne.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3304      	adds	r3, #4
 800273e:	2101      	movs	r1, #1
 8002740:	4618      	mov	r0, r3
 8002742:	f000 f8f9 	bl	8002938 <RCCEx_PLLSAI1_Config>
 8002746:	4603      	mov	r3, r0
 8002748:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800274a:	7cfb      	ldrb	r3, [r7, #19]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002750:	7cfb      	ldrb	r3, [r7, #19]
 8002752:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d04d      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002764:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002768:	d108      	bne.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800276a:	4b1a      	ldr	r3, [pc, #104]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800276c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002770:	4a18      	ldr	r2, [pc, #96]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002772:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002776:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800277a:	e012      	b.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800277c:	4b15      	ldr	r3, [pc, #84]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800277e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002782:	4a14      	ldr	r2, [pc, #80]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002784:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002788:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800278c:	4b11      	ldr	r3, [pc, #68]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800278e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002792:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800279a:	490e      	ldr	r1, [pc, #56]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800279c:	4313      	orrs	r3, r2
 800279e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027aa:	d106      	bne.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027ac:	4b09      	ldr	r3, [pc, #36]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	4a08      	ldr	r2, [pc, #32]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027b6:	60d3      	str	r3, [r2, #12]
 80027b8:	e020      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80027c2:	d109      	bne.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027c4:	4b03      	ldr	r3, [pc, #12]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	4a02      	ldr	r2, [pc, #8]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027ce:	60d3      	str	r3, [r2, #12]
 80027d0:	e014      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x524>
 80027d2:	bf00      	nop
 80027d4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027e0:	d10c      	bne.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	3304      	adds	r3, #4
 80027e6:	2101      	movs	r1, #1
 80027e8:	4618      	mov	r0, r3
 80027ea:	f000 f8a5 	bl	8002938 <RCCEx_PLLSAI1_Config>
 80027ee:	4603      	mov	r3, r0
 80027f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027f2:	7cfb      	ldrb	r3, [r7, #19]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80027f8:	7cfb      	ldrb	r3, [r7, #19]
 80027fa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d028      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002808:	4b4a      	ldr	r3, [pc, #296]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800280a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800280e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002816:	4947      	ldr	r1, [pc, #284]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002818:	4313      	orrs	r3, r2
 800281a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002822:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002826:	d106      	bne.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002828:	4b42      	ldr	r3, [pc, #264]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	4a41      	ldr	r2, [pc, #260]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800282e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002832:	60d3      	str	r3, [r2, #12]
 8002834:	e011      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800283a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800283e:	d10c      	bne.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3304      	adds	r3, #4
 8002844:	2101      	movs	r1, #1
 8002846:	4618      	mov	r0, r3
 8002848:	f000 f876 	bl	8002938 <RCCEx_PLLSAI1_Config>
 800284c:	4603      	mov	r3, r0
 800284e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002850:	7cfb      	ldrb	r3, [r7, #19]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002856:	7cfb      	ldrb	r3, [r7, #19]
 8002858:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d01e      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002866:	4b33      	ldr	r3, [pc, #204]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800286c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002876:	492f      	ldr	r1, [pc, #188]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002878:	4313      	orrs	r3, r2
 800287a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002884:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002888:	d10c      	bne.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	3304      	adds	r3, #4
 800288e:	2102      	movs	r1, #2
 8002890:	4618      	mov	r0, r3
 8002892:	f000 f851 	bl	8002938 <RCCEx_PLLSAI1_Config>
 8002896:	4603      	mov	r3, r0
 8002898:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800289a:	7cfb      	ldrb	r3, [r7, #19]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80028a0:	7cfb      	ldrb	r3, [r7, #19]
 80028a2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00b      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80028b0:	4b20      	ldr	r3, [pc, #128]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80028b6:	f023 0204 	bic.w	r2, r3, #4
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028c0:	491c      	ldr	r1, [pc, #112]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00b      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80028d4:	4b17      	ldr	r3, [pc, #92]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80028da:	f023 0218 	bic.w	r2, r3, #24
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e4:	4913      	ldr	r1, [pc, #76]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d017      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80028f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80028fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002908:	490a      	ldr	r1, [pc, #40]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800290a:	4313      	orrs	r3, r2
 800290c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002916:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800291a:	d105      	bne.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800291c:	4b05      	ldr	r3, [pc, #20]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	4a04      	ldr	r2, [pc, #16]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002922:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002926:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002928:	7cbb      	ldrb	r3, [r7, #18]
}
 800292a:	4618      	mov	r0, r3
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40021000 	.word	0x40021000

08002938 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002946:	4b72      	ldr	r3, [pc, #456]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00e      	beq.n	8002970 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002952:	4b6f      	ldr	r3, [pc, #444]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	f003 0203 	and.w	r2, r3, #3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d103      	bne.n	800296a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
       ||
 8002966:	2b00      	cmp	r3, #0
 8002968:	d142      	bne.n	80029f0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	73fb      	strb	r3, [r7, #15]
 800296e:	e03f      	b.n	80029f0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b03      	cmp	r3, #3
 8002976:	d018      	beq.n	80029aa <RCCEx_PLLSAI1_Config+0x72>
 8002978:	2b03      	cmp	r3, #3
 800297a:	d825      	bhi.n	80029c8 <RCCEx_PLLSAI1_Config+0x90>
 800297c:	2b01      	cmp	r3, #1
 800297e:	d002      	beq.n	8002986 <RCCEx_PLLSAI1_Config+0x4e>
 8002980:	2b02      	cmp	r3, #2
 8002982:	d009      	beq.n	8002998 <RCCEx_PLLSAI1_Config+0x60>
 8002984:	e020      	b.n	80029c8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002986:	4b62      	ldr	r3, [pc, #392]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d11d      	bne.n	80029ce <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002996:	e01a      	b.n	80029ce <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002998:	4b5d      	ldr	r3, [pc, #372]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d116      	bne.n	80029d2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029a8:	e013      	b.n	80029d2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029aa:	4b59      	ldr	r3, [pc, #356]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10f      	bne.n	80029d6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029b6:	4b56      	ldr	r3, [pc, #344]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d109      	bne.n	80029d6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029c6:	e006      	b.n	80029d6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	73fb      	strb	r3, [r7, #15]
      break;
 80029cc:	e004      	b.n	80029d8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80029ce:	bf00      	nop
 80029d0:	e002      	b.n	80029d8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80029d2:	bf00      	nop
 80029d4:	e000      	b.n	80029d8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80029d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80029d8:	7bfb      	ldrb	r3, [r7, #15]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d108      	bne.n	80029f0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80029de:	4b4c      	ldr	r3, [pc, #304]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	f023 0203 	bic.w	r2, r3, #3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4949      	ldr	r1, [pc, #292]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f040 8086 	bne.w	8002b04 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80029f8:	4b45      	ldr	r3, [pc, #276]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a44      	ldr	r2, [pc, #272]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 80029fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002a02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a04:	f7fe fa1a 	bl	8000e3c <HAL_GetTick>
 8002a08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a0a:	e009      	b.n	8002a20 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a0c:	f7fe fa16 	bl	8000e3c <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d902      	bls.n	8002a20 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	73fb      	strb	r3, [r7, #15]
        break;
 8002a1e:	e005      	b.n	8002a2c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a20:	4b3b      	ldr	r3, [pc, #236]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1ef      	bne.n	8002a0c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002a2c:	7bfb      	ldrb	r3, [r7, #15]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d168      	bne.n	8002b04 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d113      	bne.n	8002a60 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a38:	4b35      	ldr	r3, [pc, #212]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a3a:	691a      	ldr	r2, [r3, #16]
 8002a3c:	4b35      	ldr	r3, [pc, #212]	@ (8002b14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a3e:	4013      	ands	r3, r2
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6892      	ldr	r2, [r2, #8]
 8002a44:	0211      	lsls	r1, r2, #8
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	68d2      	ldr	r2, [r2, #12]
 8002a4a:	06d2      	lsls	r2, r2, #27
 8002a4c:	4311      	orrs	r1, r2
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6852      	ldr	r2, [r2, #4]
 8002a52:	3a01      	subs	r2, #1
 8002a54:	0112      	lsls	r2, r2, #4
 8002a56:	430a      	orrs	r2, r1
 8002a58:	492d      	ldr	r1, [pc, #180]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	610b      	str	r3, [r1, #16]
 8002a5e:	e02d      	b.n	8002abc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d115      	bne.n	8002a92 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a66:	4b2a      	ldr	r3, [pc, #168]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a68:	691a      	ldr	r2, [r3, #16]
 8002a6a:	4b2b      	ldr	r3, [pc, #172]	@ (8002b18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6892      	ldr	r2, [r2, #8]
 8002a72:	0211      	lsls	r1, r2, #8
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6912      	ldr	r2, [r2, #16]
 8002a78:	0852      	lsrs	r2, r2, #1
 8002a7a:	3a01      	subs	r2, #1
 8002a7c:	0552      	lsls	r2, r2, #21
 8002a7e:	4311      	orrs	r1, r2
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6852      	ldr	r2, [r2, #4]
 8002a84:	3a01      	subs	r2, #1
 8002a86:	0112      	lsls	r2, r2, #4
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	4921      	ldr	r1, [pc, #132]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	610b      	str	r3, [r1, #16]
 8002a90:	e014      	b.n	8002abc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a92:	4b1f      	ldr	r3, [pc, #124]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a94:	691a      	ldr	r2, [r3, #16]
 8002a96:	4b21      	ldr	r3, [pc, #132]	@ (8002b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a98:	4013      	ands	r3, r2
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6892      	ldr	r2, [r2, #8]
 8002a9e:	0211      	lsls	r1, r2, #8
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6952      	ldr	r2, [r2, #20]
 8002aa4:	0852      	lsrs	r2, r2, #1
 8002aa6:	3a01      	subs	r2, #1
 8002aa8:	0652      	lsls	r2, r2, #25
 8002aaa:	4311      	orrs	r1, r2
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6852      	ldr	r2, [r2, #4]
 8002ab0:	3a01      	subs	r2, #1
 8002ab2:	0112      	lsls	r2, r2, #4
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	4916      	ldr	r1, [pc, #88]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002abc:	4b14      	ldr	r3, [pc, #80]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a13      	ldr	r2, [pc, #76]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ac2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002ac6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac8:	f7fe f9b8 	bl	8000e3c <HAL_GetTick>
 8002acc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ace:	e009      	b.n	8002ae4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ad0:	f7fe f9b4 	bl	8000e3c <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d902      	bls.n	8002ae4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	73fb      	strb	r3, [r7, #15]
          break;
 8002ae2:	e005      	b.n	8002af0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d0ef      	beq.n	8002ad0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d106      	bne.n	8002b04 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002af6:	4b06      	ldr	r3, [pc, #24]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002af8:	691a      	ldr	r2, [r3, #16]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	4904      	ldr	r1, [pc, #16]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40021000 	.word	0x40021000
 8002b14:	07ff800f 	.word	0x07ff800f
 8002b18:	ff9f800f 	.word	0xff9f800f
 8002b1c:	f9ff800f 	.word	0xf9ff800f

08002b20 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b2e:	4b72      	ldr	r3, [pc, #456]	@ (8002cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00e      	beq.n	8002b58 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b3a:	4b6f      	ldr	r3, [pc, #444]	@ (8002cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	f003 0203 	and.w	r2, r3, #3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d103      	bne.n	8002b52 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
       ||
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d142      	bne.n	8002bd8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	73fb      	strb	r3, [r7, #15]
 8002b56:	e03f      	b.n	8002bd8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2b03      	cmp	r3, #3
 8002b5e:	d018      	beq.n	8002b92 <RCCEx_PLLSAI2_Config+0x72>
 8002b60:	2b03      	cmp	r3, #3
 8002b62:	d825      	bhi.n	8002bb0 <RCCEx_PLLSAI2_Config+0x90>
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d002      	beq.n	8002b6e <RCCEx_PLLSAI2_Config+0x4e>
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d009      	beq.n	8002b80 <RCCEx_PLLSAI2_Config+0x60>
 8002b6c:	e020      	b.n	8002bb0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b6e:	4b62      	ldr	r3, [pc, #392]	@ (8002cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d11d      	bne.n	8002bb6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b7e:	e01a      	b.n	8002bb6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b80:	4b5d      	ldr	r3, [pc, #372]	@ (8002cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d116      	bne.n	8002bba <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b90:	e013      	b.n	8002bba <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b92:	4b59      	ldr	r3, [pc, #356]	@ (8002cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10f      	bne.n	8002bbe <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b9e:	4b56      	ldr	r3, [pc, #344]	@ (8002cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d109      	bne.n	8002bbe <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bae:	e006      	b.n	8002bbe <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8002bb4:	e004      	b.n	8002bc0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002bb6:	bf00      	nop
 8002bb8:	e002      	b.n	8002bc0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002bba:	bf00      	nop
 8002bbc:	e000      	b.n	8002bc0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002bbe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d108      	bne.n	8002bd8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002bc6:	4b4c      	ldr	r3, [pc, #304]	@ (8002cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	f023 0203 	bic.w	r2, r3, #3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4949      	ldr	r1, [pc, #292]	@ (8002cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f040 8086 	bne.w	8002cec <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002be0:	4b45      	ldr	r3, [pc, #276]	@ (8002cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a44      	ldr	r2, [pc, #272]	@ (8002cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002be6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bec:	f7fe f926 	bl	8000e3c <HAL_GetTick>
 8002bf0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bf2:	e009      	b.n	8002c08 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bf4:	f7fe f922 	bl	8000e3c <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d902      	bls.n	8002c08 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	73fb      	strb	r3, [r7, #15]
        break;
 8002c06:	e005      	b.n	8002c14 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c08:	4b3b      	ldr	r3, [pc, #236]	@ (8002cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1ef      	bne.n	8002bf4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d168      	bne.n	8002cec <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d113      	bne.n	8002c48 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c20:	4b35      	ldr	r3, [pc, #212]	@ (8002cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c22:	695a      	ldr	r2, [r3, #20]
 8002c24:	4b35      	ldr	r3, [pc, #212]	@ (8002cfc <RCCEx_PLLSAI2_Config+0x1dc>)
 8002c26:	4013      	ands	r3, r2
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6892      	ldr	r2, [r2, #8]
 8002c2c:	0211      	lsls	r1, r2, #8
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	68d2      	ldr	r2, [r2, #12]
 8002c32:	06d2      	lsls	r2, r2, #27
 8002c34:	4311      	orrs	r1, r2
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6852      	ldr	r2, [r2, #4]
 8002c3a:	3a01      	subs	r2, #1
 8002c3c:	0112      	lsls	r2, r2, #4
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	492d      	ldr	r1, [pc, #180]	@ (8002cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	614b      	str	r3, [r1, #20]
 8002c46:	e02d      	b.n	8002ca4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d115      	bne.n	8002c7a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c4e:	4b2a      	ldr	r3, [pc, #168]	@ (8002cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c50:	695a      	ldr	r2, [r3, #20]
 8002c52:	4b2b      	ldr	r3, [pc, #172]	@ (8002d00 <RCCEx_PLLSAI2_Config+0x1e0>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6892      	ldr	r2, [r2, #8]
 8002c5a:	0211      	lsls	r1, r2, #8
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6912      	ldr	r2, [r2, #16]
 8002c60:	0852      	lsrs	r2, r2, #1
 8002c62:	3a01      	subs	r2, #1
 8002c64:	0552      	lsls	r2, r2, #21
 8002c66:	4311      	orrs	r1, r2
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6852      	ldr	r2, [r2, #4]
 8002c6c:	3a01      	subs	r2, #1
 8002c6e:	0112      	lsls	r2, r2, #4
 8002c70:	430a      	orrs	r2, r1
 8002c72:	4921      	ldr	r1, [pc, #132]	@ (8002cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	614b      	str	r3, [r1, #20]
 8002c78:	e014      	b.n	8002ca4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c7a:	4b1f      	ldr	r3, [pc, #124]	@ (8002cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c7c:	695a      	ldr	r2, [r3, #20]
 8002c7e:	4b21      	ldr	r3, [pc, #132]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1e4>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6892      	ldr	r2, [r2, #8]
 8002c86:	0211      	lsls	r1, r2, #8
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6952      	ldr	r2, [r2, #20]
 8002c8c:	0852      	lsrs	r2, r2, #1
 8002c8e:	3a01      	subs	r2, #1
 8002c90:	0652      	lsls	r2, r2, #25
 8002c92:	4311      	orrs	r1, r2
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6852      	ldr	r2, [r2, #4]
 8002c98:	3a01      	subs	r2, #1
 8002c9a:	0112      	lsls	r2, r2, #4
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	4916      	ldr	r1, [pc, #88]	@ (8002cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ca4:	4b14      	ldr	r3, [pc, #80]	@ (8002cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a13      	ldr	r2, [pc, #76]	@ (8002cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002caa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb0:	f7fe f8c4 	bl	8000e3c <HAL_GetTick>
 8002cb4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002cb6:	e009      	b.n	8002ccc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002cb8:	f7fe f8c0 	bl	8000e3c <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d902      	bls.n	8002ccc <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	73fb      	strb	r3, [r7, #15]
          break;
 8002cca:	e005      	b.n	8002cd8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0ef      	beq.n	8002cb8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d106      	bne.n	8002cec <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002cde:	4b06      	ldr	r3, [pc, #24]	@ (8002cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ce0:	695a      	ldr	r2, [r3, #20]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	4904      	ldr	r1, [pc, #16]	@ (8002cf8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	07ff800f 	.word	0x07ff800f
 8002d00:	ff9f800f 	.word	0xff9f800f
 8002d04:	f9ff800f 	.word	0xf9ff800f

08002d08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e049      	b.n	8002dae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d106      	bne.n	8002d34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f841 	bl	8002db6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2202      	movs	r2, #2
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3304      	adds	r3, #4
 8002d44:	4619      	mov	r1, r3
 8002d46:	4610      	mov	r0, r2
 8002d48:	f000 f9e0 	bl	800310c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
	...

08002dcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d001      	beq.n	8002de4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e04f      	b.n	8002e84 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2202      	movs	r2, #2
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68da      	ldr	r2, [r3, #12]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f042 0201 	orr.w	r2, r2, #1
 8002dfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a23      	ldr	r2, [pc, #140]	@ (8002e90 <HAL_TIM_Base_Start_IT+0xc4>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d01d      	beq.n	8002e42 <HAL_TIM_Base_Start_IT+0x76>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e0e:	d018      	beq.n	8002e42 <HAL_TIM_Base_Start_IT+0x76>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a1f      	ldr	r2, [pc, #124]	@ (8002e94 <HAL_TIM_Base_Start_IT+0xc8>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d013      	beq.n	8002e42 <HAL_TIM_Base_Start_IT+0x76>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a1e      	ldr	r2, [pc, #120]	@ (8002e98 <HAL_TIM_Base_Start_IT+0xcc>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d00e      	beq.n	8002e42 <HAL_TIM_Base_Start_IT+0x76>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a1c      	ldr	r2, [pc, #112]	@ (8002e9c <HAL_TIM_Base_Start_IT+0xd0>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d009      	beq.n	8002e42 <HAL_TIM_Base_Start_IT+0x76>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a1b      	ldr	r2, [pc, #108]	@ (8002ea0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d004      	beq.n	8002e42 <HAL_TIM_Base_Start_IT+0x76>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a19      	ldr	r2, [pc, #100]	@ (8002ea4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d115      	bne.n	8002e6e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	4b17      	ldr	r3, [pc, #92]	@ (8002ea8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2b06      	cmp	r3, #6
 8002e52:	d015      	beq.n	8002e80 <HAL_TIM_Base_Start_IT+0xb4>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e5a:	d011      	beq.n	8002e80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0201 	orr.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e6c:	e008      	b.n	8002e80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f042 0201 	orr.w	r2, r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	e000      	b.n	8002e82 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e80:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	40012c00 	.word	0x40012c00
 8002e94:	40000400 	.word	0x40000400
 8002e98:	40000800 	.word	0x40000800
 8002e9c:	40000c00 	.word	0x40000c00
 8002ea0:	40013400 	.word	0x40013400
 8002ea4:	40014000 	.word	0x40014000
 8002ea8:	00010007 	.word	0x00010007

08002eac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d020      	beq.n	8002f10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d01b      	beq.n	8002f10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f06f 0202 	mvn.w	r2, #2
 8002ee0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f8e9 	bl	80030ce <HAL_TIM_IC_CaptureCallback>
 8002efc:	e005      	b.n	8002f0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f8db 	bl	80030ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f8ec 	bl	80030e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	f003 0304 	and.w	r3, r3, #4
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d020      	beq.n	8002f5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d01b      	beq.n	8002f5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f06f 0204 	mvn.w	r2, #4
 8002f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2202      	movs	r2, #2
 8002f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f8c3 	bl	80030ce <HAL_TIM_IC_CaptureCallback>
 8002f48:	e005      	b.n	8002f56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f8b5 	bl	80030ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 f8c6 	bl	80030e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f003 0308 	and.w	r3, r3, #8
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d020      	beq.n	8002fa8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f003 0308 	and.w	r3, r3, #8
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d01b      	beq.n	8002fa8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f06f 0208 	mvn.w	r2, #8
 8002f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2204      	movs	r2, #4
 8002f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f89d 	bl	80030ce <HAL_TIM_IC_CaptureCallback>
 8002f94:	e005      	b.n	8002fa2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f88f 	bl	80030ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 f8a0 	bl	80030e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	f003 0310 	and.w	r3, r3, #16
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d020      	beq.n	8002ff4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f003 0310 	and.w	r3, r3, #16
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d01b      	beq.n	8002ff4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f06f 0210 	mvn.w	r2, #16
 8002fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2208      	movs	r2, #8
 8002fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f877 	bl	80030ce <HAL_TIM_IC_CaptureCallback>
 8002fe0:	e005      	b.n	8002fee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f869 	bl	80030ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 f87a 	bl	80030e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00c      	beq.n	8003018 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b00      	cmp	r3, #0
 8003006:	d007      	beq.n	8003018 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f06f 0201 	mvn.w	r2, #1
 8003010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7fd fc96 	bl	8000944 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800301e:	2b00      	cmp	r3, #0
 8003020:	d104      	bne.n	800302c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00c      	beq.n	8003046 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003032:	2b00      	cmp	r3, #0
 8003034:	d007      	beq.n	8003046 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800303e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 f913 	bl	800326c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00c      	beq.n	800306a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003056:	2b00      	cmp	r3, #0
 8003058:	d007      	beq.n	800306a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f90b 	bl	8003280 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00c      	beq.n	800308e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800307a:	2b00      	cmp	r3, #0
 800307c:	d007      	beq.n	800308e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 f834 	bl	80030f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	f003 0320 	and.w	r3, r3, #32
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00c      	beq.n	80030b2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f003 0320 	and.w	r3, r3, #32
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d007      	beq.n	80030b2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f06f 0220 	mvn.w	r2, #32
 80030aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f8d3 	bl	8003258 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030b2:	bf00      	nop
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
	...

0800310c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a46      	ldr	r2, [pc, #280]	@ (8003238 <TIM_Base_SetConfig+0x12c>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d013      	beq.n	800314c <TIM_Base_SetConfig+0x40>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800312a:	d00f      	beq.n	800314c <TIM_Base_SetConfig+0x40>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a43      	ldr	r2, [pc, #268]	@ (800323c <TIM_Base_SetConfig+0x130>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d00b      	beq.n	800314c <TIM_Base_SetConfig+0x40>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a42      	ldr	r2, [pc, #264]	@ (8003240 <TIM_Base_SetConfig+0x134>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d007      	beq.n	800314c <TIM_Base_SetConfig+0x40>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a41      	ldr	r2, [pc, #260]	@ (8003244 <TIM_Base_SetConfig+0x138>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d003      	beq.n	800314c <TIM_Base_SetConfig+0x40>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a40      	ldr	r2, [pc, #256]	@ (8003248 <TIM_Base_SetConfig+0x13c>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d108      	bne.n	800315e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003152:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	4313      	orrs	r3, r2
 800315c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a35      	ldr	r2, [pc, #212]	@ (8003238 <TIM_Base_SetConfig+0x12c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d01f      	beq.n	80031a6 <TIM_Base_SetConfig+0x9a>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800316c:	d01b      	beq.n	80031a6 <TIM_Base_SetConfig+0x9a>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a32      	ldr	r2, [pc, #200]	@ (800323c <TIM_Base_SetConfig+0x130>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d017      	beq.n	80031a6 <TIM_Base_SetConfig+0x9a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a31      	ldr	r2, [pc, #196]	@ (8003240 <TIM_Base_SetConfig+0x134>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d013      	beq.n	80031a6 <TIM_Base_SetConfig+0x9a>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a30      	ldr	r2, [pc, #192]	@ (8003244 <TIM_Base_SetConfig+0x138>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d00f      	beq.n	80031a6 <TIM_Base_SetConfig+0x9a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a2f      	ldr	r2, [pc, #188]	@ (8003248 <TIM_Base_SetConfig+0x13c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d00b      	beq.n	80031a6 <TIM_Base_SetConfig+0x9a>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a2e      	ldr	r2, [pc, #184]	@ (800324c <TIM_Base_SetConfig+0x140>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d007      	beq.n	80031a6 <TIM_Base_SetConfig+0x9a>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a2d      	ldr	r2, [pc, #180]	@ (8003250 <TIM_Base_SetConfig+0x144>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d003      	beq.n	80031a6 <TIM_Base_SetConfig+0x9a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a2c      	ldr	r2, [pc, #176]	@ (8003254 <TIM_Base_SetConfig+0x148>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d108      	bne.n	80031b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a16      	ldr	r2, [pc, #88]	@ (8003238 <TIM_Base_SetConfig+0x12c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d00f      	beq.n	8003204 <TIM_Base_SetConfig+0xf8>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a18      	ldr	r2, [pc, #96]	@ (8003248 <TIM_Base_SetConfig+0x13c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d00b      	beq.n	8003204 <TIM_Base_SetConfig+0xf8>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a17      	ldr	r2, [pc, #92]	@ (800324c <TIM_Base_SetConfig+0x140>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d007      	beq.n	8003204 <TIM_Base_SetConfig+0xf8>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a16      	ldr	r2, [pc, #88]	@ (8003250 <TIM_Base_SetConfig+0x144>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d003      	beq.n	8003204 <TIM_Base_SetConfig+0xf8>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a15      	ldr	r2, [pc, #84]	@ (8003254 <TIM_Base_SetConfig+0x148>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d103      	bne.n	800320c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b01      	cmp	r3, #1
 800321c:	d105      	bne.n	800322a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	f023 0201 	bic.w	r2, r3, #1
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	611a      	str	r2, [r3, #16]
  }
}
 800322a:	bf00      	nop
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	40012c00 	.word	0x40012c00
 800323c:	40000400 	.word	0x40000400
 8003240:	40000800 	.word	0x40000800
 8003244:	40000c00 	.word	0x40000c00
 8003248:	40013400 	.word	0x40013400
 800324c:	40014000 	.word	0x40014000
 8003250:	40014400 	.word	0x40014400
 8003254:	40014800 	.word	0x40014800

08003258 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e042      	b.n	800332c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d106      	bne.n	80032be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7fd fb7f 	bl	80009bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2224      	movs	r2, #36	@ 0x24
 80032c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 0201 	bic.w	r2, r2, #1
 80032d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d002      	beq.n	80032e4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 fbb2 	bl	8003a48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f8b3 	bl	8003450 <UART_SetConfig>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e01b      	b.n	800332c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003302:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689a      	ldr	r2, [r3, #8]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003312:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0201 	orr.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 fc31 	bl	8003b8c <UART_CheckIdleState>
 800332a:	4603      	mov	r3, r0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b08a      	sub	sp, #40	@ 0x28
 8003338:	af02      	add	r7, sp, #8
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	603b      	str	r3, [r7, #0]
 8003340:	4613      	mov	r3, r2
 8003342:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800334a:	2b20      	cmp	r3, #32
 800334c:	d17b      	bne.n	8003446 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d002      	beq.n	800335a <HAL_UART_Transmit+0x26>
 8003354:	88fb      	ldrh	r3, [r7, #6]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e074      	b.n	8003448 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2221      	movs	r2, #33	@ 0x21
 800336a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800336e:	f7fd fd65 	bl	8000e3c <HAL_GetTick>
 8003372:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	88fa      	ldrh	r2, [r7, #6]
 8003378:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	88fa      	ldrh	r2, [r7, #6]
 8003380:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800338c:	d108      	bne.n	80033a0 <HAL_UART_Transmit+0x6c>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d104      	bne.n	80033a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003396:	2300      	movs	r3, #0
 8003398:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	61bb      	str	r3, [r7, #24]
 800339e:	e003      	b.n	80033a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033a4:	2300      	movs	r3, #0
 80033a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033a8:	e030      	b.n	800340c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	2200      	movs	r2, #0
 80033b2:	2180      	movs	r1, #128	@ 0x80
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f000 fc93 	bl	8003ce0 <UART_WaitOnFlagUntilTimeout>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d005      	beq.n	80033cc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2220      	movs	r2, #32
 80033c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e03d      	b.n	8003448 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10b      	bne.n	80033ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	881a      	ldrh	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033de:	b292      	uxth	r2, r2
 80033e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	3302      	adds	r3, #2
 80033e6:	61bb      	str	r3, [r7, #24]
 80033e8:	e007      	b.n	80033fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	781a      	ldrb	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	3301      	adds	r3, #1
 80033f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003400:	b29b      	uxth	r3, r3
 8003402:	3b01      	subs	r3, #1
 8003404:	b29a      	uxth	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003412:	b29b      	uxth	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1c8      	bne.n	80033aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	2200      	movs	r2, #0
 8003420:	2140      	movs	r1, #64	@ 0x40
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 fc5c 	bl	8003ce0 <UART_WaitOnFlagUntilTimeout>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d005      	beq.n	800343a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2220      	movs	r2, #32
 8003432:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e006      	b.n	8003448 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2220      	movs	r2, #32
 800343e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003442:	2300      	movs	r3, #0
 8003444:	e000      	b.n	8003448 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003446:	2302      	movs	r3, #2
  }
}
 8003448:	4618      	mov	r0, r3
 800344a:	3720      	adds	r7, #32
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003450:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003454:	b08c      	sub	sp, #48	@ 0x30
 8003456:	af00      	add	r7, sp, #0
 8003458:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800345a:	2300      	movs	r3, #0
 800345c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	431a      	orrs	r2, r3
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	431a      	orrs	r2, r3
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	4313      	orrs	r3, r2
 8003476:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	4baa      	ldr	r3, [pc, #680]	@ (8003728 <UART_SetConfig+0x2d8>)
 8003480:	4013      	ands	r3, r2
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	6812      	ldr	r2, [r2, #0]
 8003486:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003488:	430b      	orrs	r3, r1
 800348a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	68da      	ldr	r2, [r3, #12]
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a9f      	ldr	r2, [pc, #636]	@ (800372c <UART_SetConfig+0x2dc>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d004      	beq.n	80034bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034b8:	4313      	orrs	r3, r2
 80034ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80034c6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	6812      	ldr	r2, [r2, #0]
 80034ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034d0:	430b      	orrs	r3, r1
 80034d2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034da:	f023 010f 	bic.w	r1, r3, #15
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a90      	ldr	r2, [pc, #576]	@ (8003730 <UART_SetConfig+0x2e0>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d125      	bne.n	8003540 <UART_SetConfig+0xf0>
 80034f4:	4b8f      	ldr	r3, [pc, #572]	@ (8003734 <UART_SetConfig+0x2e4>)
 80034f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034fa:	f003 0303 	and.w	r3, r3, #3
 80034fe:	2b03      	cmp	r3, #3
 8003500:	d81a      	bhi.n	8003538 <UART_SetConfig+0xe8>
 8003502:	a201      	add	r2, pc, #4	@ (adr r2, 8003508 <UART_SetConfig+0xb8>)
 8003504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003508:	08003519 	.word	0x08003519
 800350c:	08003529 	.word	0x08003529
 8003510:	08003521 	.word	0x08003521
 8003514:	08003531 	.word	0x08003531
 8003518:	2301      	movs	r3, #1
 800351a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800351e:	e116      	b.n	800374e <UART_SetConfig+0x2fe>
 8003520:	2302      	movs	r3, #2
 8003522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003526:	e112      	b.n	800374e <UART_SetConfig+0x2fe>
 8003528:	2304      	movs	r3, #4
 800352a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800352e:	e10e      	b.n	800374e <UART_SetConfig+0x2fe>
 8003530:	2308      	movs	r3, #8
 8003532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003536:	e10a      	b.n	800374e <UART_SetConfig+0x2fe>
 8003538:	2310      	movs	r3, #16
 800353a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800353e:	e106      	b.n	800374e <UART_SetConfig+0x2fe>
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a7c      	ldr	r2, [pc, #496]	@ (8003738 <UART_SetConfig+0x2e8>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d138      	bne.n	80035bc <UART_SetConfig+0x16c>
 800354a:	4b7a      	ldr	r3, [pc, #488]	@ (8003734 <UART_SetConfig+0x2e4>)
 800354c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003550:	f003 030c 	and.w	r3, r3, #12
 8003554:	2b0c      	cmp	r3, #12
 8003556:	d82d      	bhi.n	80035b4 <UART_SetConfig+0x164>
 8003558:	a201      	add	r2, pc, #4	@ (adr r2, 8003560 <UART_SetConfig+0x110>)
 800355a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355e:	bf00      	nop
 8003560:	08003595 	.word	0x08003595
 8003564:	080035b5 	.word	0x080035b5
 8003568:	080035b5 	.word	0x080035b5
 800356c:	080035b5 	.word	0x080035b5
 8003570:	080035a5 	.word	0x080035a5
 8003574:	080035b5 	.word	0x080035b5
 8003578:	080035b5 	.word	0x080035b5
 800357c:	080035b5 	.word	0x080035b5
 8003580:	0800359d 	.word	0x0800359d
 8003584:	080035b5 	.word	0x080035b5
 8003588:	080035b5 	.word	0x080035b5
 800358c:	080035b5 	.word	0x080035b5
 8003590:	080035ad 	.word	0x080035ad
 8003594:	2300      	movs	r3, #0
 8003596:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800359a:	e0d8      	b.n	800374e <UART_SetConfig+0x2fe>
 800359c:	2302      	movs	r3, #2
 800359e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035a2:	e0d4      	b.n	800374e <UART_SetConfig+0x2fe>
 80035a4:	2304      	movs	r3, #4
 80035a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035aa:	e0d0      	b.n	800374e <UART_SetConfig+0x2fe>
 80035ac:	2308      	movs	r3, #8
 80035ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035b2:	e0cc      	b.n	800374e <UART_SetConfig+0x2fe>
 80035b4:	2310      	movs	r3, #16
 80035b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035ba:	e0c8      	b.n	800374e <UART_SetConfig+0x2fe>
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a5e      	ldr	r2, [pc, #376]	@ (800373c <UART_SetConfig+0x2ec>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d125      	bne.n	8003612 <UART_SetConfig+0x1c2>
 80035c6:	4b5b      	ldr	r3, [pc, #364]	@ (8003734 <UART_SetConfig+0x2e4>)
 80035c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035cc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80035d0:	2b30      	cmp	r3, #48	@ 0x30
 80035d2:	d016      	beq.n	8003602 <UART_SetConfig+0x1b2>
 80035d4:	2b30      	cmp	r3, #48	@ 0x30
 80035d6:	d818      	bhi.n	800360a <UART_SetConfig+0x1ba>
 80035d8:	2b20      	cmp	r3, #32
 80035da:	d00a      	beq.n	80035f2 <UART_SetConfig+0x1a2>
 80035dc:	2b20      	cmp	r3, #32
 80035de:	d814      	bhi.n	800360a <UART_SetConfig+0x1ba>
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d002      	beq.n	80035ea <UART_SetConfig+0x19a>
 80035e4:	2b10      	cmp	r3, #16
 80035e6:	d008      	beq.n	80035fa <UART_SetConfig+0x1aa>
 80035e8:	e00f      	b.n	800360a <UART_SetConfig+0x1ba>
 80035ea:	2300      	movs	r3, #0
 80035ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035f0:	e0ad      	b.n	800374e <UART_SetConfig+0x2fe>
 80035f2:	2302      	movs	r3, #2
 80035f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035f8:	e0a9      	b.n	800374e <UART_SetConfig+0x2fe>
 80035fa:	2304      	movs	r3, #4
 80035fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003600:	e0a5      	b.n	800374e <UART_SetConfig+0x2fe>
 8003602:	2308      	movs	r3, #8
 8003604:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003608:	e0a1      	b.n	800374e <UART_SetConfig+0x2fe>
 800360a:	2310      	movs	r3, #16
 800360c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003610:	e09d      	b.n	800374e <UART_SetConfig+0x2fe>
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a4a      	ldr	r2, [pc, #296]	@ (8003740 <UART_SetConfig+0x2f0>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d125      	bne.n	8003668 <UART_SetConfig+0x218>
 800361c:	4b45      	ldr	r3, [pc, #276]	@ (8003734 <UART_SetConfig+0x2e4>)
 800361e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003622:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003626:	2bc0      	cmp	r3, #192	@ 0xc0
 8003628:	d016      	beq.n	8003658 <UART_SetConfig+0x208>
 800362a:	2bc0      	cmp	r3, #192	@ 0xc0
 800362c:	d818      	bhi.n	8003660 <UART_SetConfig+0x210>
 800362e:	2b80      	cmp	r3, #128	@ 0x80
 8003630:	d00a      	beq.n	8003648 <UART_SetConfig+0x1f8>
 8003632:	2b80      	cmp	r3, #128	@ 0x80
 8003634:	d814      	bhi.n	8003660 <UART_SetConfig+0x210>
 8003636:	2b00      	cmp	r3, #0
 8003638:	d002      	beq.n	8003640 <UART_SetConfig+0x1f0>
 800363a:	2b40      	cmp	r3, #64	@ 0x40
 800363c:	d008      	beq.n	8003650 <UART_SetConfig+0x200>
 800363e:	e00f      	b.n	8003660 <UART_SetConfig+0x210>
 8003640:	2300      	movs	r3, #0
 8003642:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003646:	e082      	b.n	800374e <UART_SetConfig+0x2fe>
 8003648:	2302      	movs	r3, #2
 800364a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800364e:	e07e      	b.n	800374e <UART_SetConfig+0x2fe>
 8003650:	2304      	movs	r3, #4
 8003652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003656:	e07a      	b.n	800374e <UART_SetConfig+0x2fe>
 8003658:	2308      	movs	r3, #8
 800365a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800365e:	e076      	b.n	800374e <UART_SetConfig+0x2fe>
 8003660:	2310      	movs	r3, #16
 8003662:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003666:	e072      	b.n	800374e <UART_SetConfig+0x2fe>
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a35      	ldr	r2, [pc, #212]	@ (8003744 <UART_SetConfig+0x2f4>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d12a      	bne.n	80036c8 <UART_SetConfig+0x278>
 8003672:	4b30      	ldr	r3, [pc, #192]	@ (8003734 <UART_SetConfig+0x2e4>)
 8003674:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003678:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800367c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003680:	d01a      	beq.n	80036b8 <UART_SetConfig+0x268>
 8003682:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003686:	d81b      	bhi.n	80036c0 <UART_SetConfig+0x270>
 8003688:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800368c:	d00c      	beq.n	80036a8 <UART_SetConfig+0x258>
 800368e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003692:	d815      	bhi.n	80036c0 <UART_SetConfig+0x270>
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <UART_SetConfig+0x250>
 8003698:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800369c:	d008      	beq.n	80036b0 <UART_SetConfig+0x260>
 800369e:	e00f      	b.n	80036c0 <UART_SetConfig+0x270>
 80036a0:	2300      	movs	r3, #0
 80036a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036a6:	e052      	b.n	800374e <UART_SetConfig+0x2fe>
 80036a8:	2302      	movs	r3, #2
 80036aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036ae:	e04e      	b.n	800374e <UART_SetConfig+0x2fe>
 80036b0:	2304      	movs	r3, #4
 80036b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036b6:	e04a      	b.n	800374e <UART_SetConfig+0x2fe>
 80036b8:	2308      	movs	r3, #8
 80036ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036be:	e046      	b.n	800374e <UART_SetConfig+0x2fe>
 80036c0:	2310      	movs	r3, #16
 80036c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036c6:	e042      	b.n	800374e <UART_SetConfig+0x2fe>
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a17      	ldr	r2, [pc, #92]	@ (800372c <UART_SetConfig+0x2dc>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d13a      	bne.n	8003748 <UART_SetConfig+0x2f8>
 80036d2:	4b18      	ldr	r3, [pc, #96]	@ (8003734 <UART_SetConfig+0x2e4>)
 80036d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036d8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80036dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80036e0:	d01a      	beq.n	8003718 <UART_SetConfig+0x2c8>
 80036e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80036e6:	d81b      	bhi.n	8003720 <UART_SetConfig+0x2d0>
 80036e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036ec:	d00c      	beq.n	8003708 <UART_SetConfig+0x2b8>
 80036ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036f2:	d815      	bhi.n	8003720 <UART_SetConfig+0x2d0>
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <UART_SetConfig+0x2b0>
 80036f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036fc:	d008      	beq.n	8003710 <UART_SetConfig+0x2c0>
 80036fe:	e00f      	b.n	8003720 <UART_SetConfig+0x2d0>
 8003700:	2300      	movs	r3, #0
 8003702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003706:	e022      	b.n	800374e <UART_SetConfig+0x2fe>
 8003708:	2302      	movs	r3, #2
 800370a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800370e:	e01e      	b.n	800374e <UART_SetConfig+0x2fe>
 8003710:	2304      	movs	r3, #4
 8003712:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003716:	e01a      	b.n	800374e <UART_SetConfig+0x2fe>
 8003718:	2308      	movs	r3, #8
 800371a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800371e:	e016      	b.n	800374e <UART_SetConfig+0x2fe>
 8003720:	2310      	movs	r3, #16
 8003722:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003726:	e012      	b.n	800374e <UART_SetConfig+0x2fe>
 8003728:	cfff69f3 	.word	0xcfff69f3
 800372c:	40008000 	.word	0x40008000
 8003730:	40013800 	.word	0x40013800
 8003734:	40021000 	.word	0x40021000
 8003738:	40004400 	.word	0x40004400
 800373c:	40004800 	.word	0x40004800
 8003740:	40004c00 	.word	0x40004c00
 8003744:	40005000 	.word	0x40005000
 8003748:	2310      	movs	r3, #16
 800374a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4aae      	ldr	r2, [pc, #696]	@ (8003a0c <UART_SetConfig+0x5bc>)
 8003754:	4293      	cmp	r3, r2
 8003756:	f040 8097 	bne.w	8003888 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800375a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800375e:	2b08      	cmp	r3, #8
 8003760:	d823      	bhi.n	80037aa <UART_SetConfig+0x35a>
 8003762:	a201      	add	r2, pc, #4	@ (adr r2, 8003768 <UART_SetConfig+0x318>)
 8003764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003768:	0800378d 	.word	0x0800378d
 800376c:	080037ab 	.word	0x080037ab
 8003770:	08003795 	.word	0x08003795
 8003774:	080037ab 	.word	0x080037ab
 8003778:	0800379b 	.word	0x0800379b
 800377c:	080037ab 	.word	0x080037ab
 8003780:	080037ab 	.word	0x080037ab
 8003784:	080037ab 	.word	0x080037ab
 8003788:	080037a3 	.word	0x080037a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800378c:	f7fe fc86 	bl	800209c <HAL_RCC_GetPCLK1Freq>
 8003790:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003792:	e010      	b.n	80037b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003794:	4b9e      	ldr	r3, [pc, #632]	@ (8003a10 <UART_SetConfig+0x5c0>)
 8003796:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003798:	e00d      	b.n	80037b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800379a:	f7fe fbe7 	bl	8001f6c <HAL_RCC_GetSysClockFreq>
 800379e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80037a0:	e009      	b.n	80037b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80037a8:	e005      	b.n	80037b6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80037b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80037b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 8130 	beq.w	8003a1e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c2:	4a94      	ldr	r2, [pc, #592]	@ (8003a14 <UART_SetConfig+0x5c4>)
 80037c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037c8:	461a      	mov	r2, r3
 80037ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80037d0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	4613      	mov	r3, r2
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	4413      	add	r3, r2
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d305      	bcc.n	80037ee <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d903      	bls.n	80037f6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80037f4:	e113      	b.n	8003a1e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f8:	2200      	movs	r2, #0
 80037fa:	60bb      	str	r3, [r7, #8]
 80037fc:	60fa      	str	r2, [r7, #12]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003802:	4a84      	ldr	r2, [pc, #528]	@ (8003a14 <UART_SetConfig+0x5c4>)
 8003804:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003808:	b29b      	uxth	r3, r3
 800380a:	2200      	movs	r2, #0
 800380c:	603b      	str	r3, [r7, #0]
 800380e:	607a      	str	r2, [r7, #4]
 8003810:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003814:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003818:	f7fc fd4a 	bl	80002b0 <__aeabi_uldivmod>
 800381c:	4602      	mov	r2, r0
 800381e:	460b      	mov	r3, r1
 8003820:	4610      	mov	r0, r2
 8003822:	4619      	mov	r1, r3
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	f04f 0300 	mov.w	r3, #0
 800382c:	020b      	lsls	r3, r1, #8
 800382e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003832:	0202      	lsls	r2, r0, #8
 8003834:	6979      	ldr	r1, [r7, #20]
 8003836:	6849      	ldr	r1, [r1, #4]
 8003838:	0849      	lsrs	r1, r1, #1
 800383a:	2000      	movs	r0, #0
 800383c:	460c      	mov	r4, r1
 800383e:	4605      	mov	r5, r0
 8003840:	eb12 0804 	adds.w	r8, r2, r4
 8003844:	eb43 0905 	adc.w	r9, r3, r5
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	469a      	mov	sl, r3
 8003850:	4693      	mov	fp, r2
 8003852:	4652      	mov	r2, sl
 8003854:	465b      	mov	r3, fp
 8003856:	4640      	mov	r0, r8
 8003858:	4649      	mov	r1, r9
 800385a:	f7fc fd29 	bl	80002b0 <__aeabi_uldivmod>
 800385e:	4602      	mov	r2, r0
 8003860:	460b      	mov	r3, r1
 8003862:	4613      	mov	r3, r2
 8003864:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800386c:	d308      	bcc.n	8003880 <UART_SetConfig+0x430>
 800386e:	6a3b      	ldr	r3, [r7, #32]
 8003870:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003874:	d204      	bcs.n	8003880 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6a3a      	ldr	r2, [r7, #32]
 800387c:	60da      	str	r2, [r3, #12]
 800387e:	e0ce      	b.n	8003a1e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003886:	e0ca      	b.n	8003a1e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003890:	d166      	bne.n	8003960 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003892:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003896:	2b08      	cmp	r3, #8
 8003898:	d827      	bhi.n	80038ea <UART_SetConfig+0x49a>
 800389a:	a201      	add	r2, pc, #4	@ (adr r2, 80038a0 <UART_SetConfig+0x450>)
 800389c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a0:	080038c5 	.word	0x080038c5
 80038a4:	080038cd 	.word	0x080038cd
 80038a8:	080038d5 	.word	0x080038d5
 80038ac:	080038eb 	.word	0x080038eb
 80038b0:	080038db 	.word	0x080038db
 80038b4:	080038eb 	.word	0x080038eb
 80038b8:	080038eb 	.word	0x080038eb
 80038bc:	080038eb 	.word	0x080038eb
 80038c0:	080038e3 	.word	0x080038e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038c4:	f7fe fbea 	bl	800209c <HAL_RCC_GetPCLK1Freq>
 80038c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80038ca:	e014      	b.n	80038f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038cc:	f7fe fbfc 	bl	80020c8 <HAL_RCC_GetPCLK2Freq>
 80038d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80038d2:	e010      	b.n	80038f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038d4:	4b4e      	ldr	r3, [pc, #312]	@ (8003a10 <UART_SetConfig+0x5c0>)
 80038d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80038d8:	e00d      	b.n	80038f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038da:	f7fe fb47 	bl	8001f6c <HAL_RCC_GetSysClockFreq>
 80038de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80038e0:	e009      	b.n	80038f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80038e8:	e005      	b.n	80038f6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80038f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 8090 	beq.w	8003a1e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003902:	4a44      	ldr	r2, [pc, #272]	@ (8003a14 <UART_SetConfig+0x5c4>)
 8003904:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003908:	461a      	mov	r2, r3
 800390a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003910:	005a      	lsls	r2, r3, #1
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	085b      	lsrs	r3, r3, #1
 8003918:	441a      	add	r2, r3
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003922:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	2b0f      	cmp	r3, #15
 8003928:	d916      	bls.n	8003958 <UART_SetConfig+0x508>
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003930:	d212      	bcs.n	8003958 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	b29b      	uxth	r3, r3
 8003936:	f023 030f 	bic.w	r3, r3, #15
 800393a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	085b      	lsrs	r3, r3, #1
 8003940:	b29b      	uxth	r3, r3
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	b29a      	uxth	r2, r3
 8003948:	8bfb      	ldrh	r3, [r7, #30]
 800394a:	4313      	orrs	r3, r2
 800394c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	8bfa      	ldrh	r2, [r7, #30]
 8003954:	60da      	str	r2, [r3, #12]
 8003956:	e062      	b.n	8003a1e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800395e:	e05e      	b.n	8003a1e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003960:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003964:	2b08      	cmp	r3, #8
 8003966:	d828      	bhi.n	80039ba <UART_SetConfig+0x56a>
 8003968:	a201      	add	r2, pc, #4	@ (adr r2, 8003970 <UART_SetConfig+0x520>)
 800396a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396e:	bf00      	nop
 8003970:	08003995 	.word	0x08003995
 8003974:	0800399d 	.word	0x0800399d
 8003978:	080039a5 	.word	0x080039a5
 800397c:	080039bb 	.word	0x080039bb
 8003980:	080039ab 	.word	0x080039ab
 8003984:	080039bb 	.word	0x080039bb
 8003988:	080039bb 	.word	0x080039bb
 800398c:	080039bb 	.word	0x080039bb
 8003990:	080039b3 	.word	0x080039b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003994:	f7fe fb82 	bl	800209c <HAL_RCC_GetPCLK1Freq>
 8003998:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800399a:	e014      	b.n	80039c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800399c:	f7fe fb94 	bl	80020c8 <HAL_RCC_GetPCLK2Freq>
 80039a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039a2:	e010      	b.n	80039c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039a4:	4b1a      	ldr	r3, [pc, #104]	@ (8003a10 <UART_SetConfig+0x5c0>)
 80039a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80039a8:	e00d      	b.n	80039c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039aa:	f7fe fadf 	bl	8001f6c <HAL_RCC_GetSysClockFreq>
 80039ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039b0:	e009      	b.n	80039c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80039b8:	e005      	b.n	80039c6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80039ba:	2300      	movs	r3, #0
 80039bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80039c4:	bf00      	nop
    }

    if (pclk != 0U)
 80039c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d028      	beq.n	8003a1e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d0:	4a10      	ldr	r2, [pc, #64]	@ (8003a14 <UART_SetConfig+0x5c4>)
 80039d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039d6:	461a      	mov	r2, r3
 80039d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039da:	fbb3 f2f2 	udiv	r2, r3, r2
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	085b      	lsrs	r3, r3, #1
 80039e4:	441a      	add	r2, r3
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ee:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	2b0f      	cmp	r3, #15
 80039f4:	d910      	bls.n	8003a18 <UART_SetConfig+0x5c8>
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039fc:	d20c      	bcs.n	8003a18 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	60da      	str	r2, [r3, #12]
 8003a08:	e009      	b.n	8003a1e <UART_SetConfig+0x5ce>
 8003a0a:	bf00      	nop
 8003a0c:	40008000 	.word	0x40008000
 8003a10:	00f42400 	.word	0x00f42400
 8003a14:	080054fc 	.word	0x080054fc
      }
      else
      {
        ret = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2200      	movs	r2, #0
 8003a32:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	2200      	movs	r2, #0
 8003a38:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003a3a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3730      	adds	r7, #48	@ 0x30
 8003a42:	46bd      	mov	sp, r7
 8003a44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003a48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a54:	f003 0308 	and.w	r3, r3, #8
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00a      	beq.n	8003a72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00a      	beq.n	8003a94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00a      	beq.n	8003ab6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aba:	f003 0304 	and.w	r3, r3, #4
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00a      	beq.n	8003ad8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003adc:	f003 0310 	and.w	r3, r3, #16
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00a      	beq.n	8003afa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003afe:	f003 0320 	and.w	r3, r3, #32
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00a      	beq.n	8003b1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d01a      	beq.n	8003b5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b46:	d10a      	bne.n	8003b5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00a      	beq.n	8003b80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	605a      	str	r2, [r3, #4]
  }
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b098      	sub	sp, #96	@ 0x60
 8003b90:	af02      	add	r7, sp, #8
 8003b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b9c:	f7fd f94e 	bl	8000e3c <HAL_GetTick>
 8003ba0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0308 	and.w	r3, r3, #8
 8003bac:	2b08      	cmp	r3, #8
 8003bae:	d12f      	bne.n	8003c10 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bb0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f88e 	bl	8003ce0 <UART_WaitOnFlagUntilTimeout>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d022      	beq.n	8003c10 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bd2:	e853 3f00 	ldrex	r3, [r3]
 8003bd6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003bd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bde:	653b      	str	r3, [r7, #80]	@ 0x50
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	461a      	mov	r2, r3
 8003be6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003be8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003bee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bf0:	e841 2300 	strex	r3, r2, [r1]
 8003bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003bf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1e6      	bne.n	8003bca <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e063      	b.n	8003cd8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0304 	and.w	r3, r3, #4
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	d149      	bne.n	8003cb2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c1e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c22:	9300      	str	r3, [sp, #0]
 8003c24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c26:	2200      	movs	r2, #0
 8003c28:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 f857 	bl	8003ce0 <UART_WaitOnFlagUntilTimeout>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d03c      	beq.n	8003cb2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c40:	e853 3f00 	ldrex	r3, [r3]
 8003c44:	623b      	str	r3, [r7, #32]
   return(result);
 8003c46:	6a3b      	ldr	r3, [r7, #32]
 8003c48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	461a      	mov	r2, r3
 8003c54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c56:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c58:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c5e:	e841 2300 	strex	r3, r2, [r1]
 8003c62:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1e6      	bne.n	8003c38 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	3308      	adds	r3, #8
 8003c70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	e853 3f00 	ldrex	r3, [r3]
 8003c78:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f023 0301 	bic.w	r3, r3, #1
 8003c80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	3308      	adds	r3, #8
 8003c88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c8a:	61fa      	str	r2, [r7, #28]
 8003c8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8e:	69b9      	ldr	r1, [r7, #24]
 8003c90:	69fa      	ldr	r2, [r7, #28]
 8003c92:	e841 2300 	strex	r3, r2, [r1]
 8003c96:	617b      	str	r3, [r7, #20]
   return(result);
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1e5      	bne.n	8003c6a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e012      	b.n	8003cd8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3758      	adds	r7, #88	@ 0x58
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	603b      	str	r3, [r7, #0]
 8003cec:	4613      	mov	r3, r2
 8003cee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cf0:	e04f      	b.n	8003d92 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cf8:	d04b      	beq.n	8003d92 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cfa:	f7fd f89f 	bl	8000e3c <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d302      	bcc.n	8003d10 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d101      	bne.n	8003d14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e04e      	b.n	8003db2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0304 	and.w	r3, r3, #4
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d037      	beq.n	8003d92 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2b80      	cmp	r3, #128	@ 0x80
 8003d26:	d034      	beq.n	8003d92 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	2b40      	cmp	r3, #64	@ 0x40
 8003d2c:	d031      	beq.n	8003d92 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	69db      	ldr	r3, [r3, #28]
 8003d34:	f003 0308 	and.w	r3, r3, #8
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d110      	bne.n	8003d5e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2208      	movs	r2, #8
 8003d42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 f838 	bl	8003dba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2208      	movs	r2, #8
 8003d4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e029      	b.n	8003db2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d6c:	d111      	bne.n	8003d92 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f000 f81e 	bl	8003dba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2220      	movs	r2, #32
 8003d82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e00f      	b.n	8003db2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69da      	ldr	r2, [r3, #28]
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	bf0c      	ite	eq
 8003da2:	2301      	moveq	r3, #1
 8003da4:	2300      	movne	r3, #0
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	461a      	mov	r2, r3
 8003daa:	79fb      	ldrb	r3, [r7, #7]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d0a0      	beq.n	8003cf2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b095      	sub	sp, #84	@ 0x54
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dca:	e853 3f00 	ldrex	r3, [r3]
 8003dce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	461a      	mov	r2, r3
 8003dde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003de0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003de2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003de6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003de8:	e841 2300 	strex	r3, r2, [r1]
 8003dec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1e6      	bne.n	8003dc2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	3308      	adds	r3, #8
 8003dfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	e853 3f00 	ldrex	r3, [r3]
 8003e02:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e0a:	f023 0301 	bic.w	r3, r3, #1
 8003e0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	3308      	adds	r3, #8
 8003e16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e20:	e841 2300 	strex	r3, r2, [r1]
 8003e24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1e3      	bne.n	8003df4 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d118      	bne.n	8003e66 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	e853 3f00 	ldrex	r3, [r3]
 8003e40:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	f023 0310 	bic.w	r3, r3, #16
 8003e48:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e52:	61bb      	str	r3, [r7, #24]
 8003e54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e56:	6979      	ldr	r1, [r7, #20]
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	e841 2300 	strex	r3, r2, [r1]
 8003e5e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1e6      	bne.n	8003e34 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2220      	movs	r2, #32
 8003e6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003e7a:	bf00      	nop
 8003e7c:	3754      	adds	r7, #84	@ 0x54
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b085      	sub	sp, #20
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d101      	bne.n	8003e9c <HAL_UARTEx_DisableFifoMode+0x16>
 8003e98:	2302      	movs	r3, #2
 8003e9a:	e027      	b.n	8003eec <HAL_UARTEx_DisableFifoMode+0x66>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2224      	movs	r2, #36	@ 0x24
 8003ea8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0201 	bic.w	r2, r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003eca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2220      	movs	r2, #32
 8003ede:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d101      	bne.n	8003f10 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e02d      	b.n	8003f6c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2224      	movs	r2, #36	@ 0x24
 8003f1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 0201 	bic.w	r2, r2, #1
 8003f36:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	683a      	ldr	r2, [r7, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f84f 	bl	8003ff0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d101      	bne.n	8003f8c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003f88:	2302      	movs	r3, #2
 8003f8a:	e02d      	b.n	8003fe8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2224      	movs	r2, #36	@ 0x24
 8003f98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 0201 	bic.w	r2, r2, #1
 8003fb2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f811 	bl	8003ff0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2220      	movs	r2, #32
 8003fda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d108      	bne.n	8004012 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004010:	e031      	b.n	8004076 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004012:	2308      	movs	r3, #8
 8004014:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004016:	2308      	movs	r3, #8
 8004018:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	0e5b      	lsrs	r3, r3, #25
 8004022:	b2db      	uxtb	r3, r3
 8004024:	f003 0307 	and.w	r3, r3, #7
 8004028:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	0f5b      	lsrs	r3, r3, #29
 8004032:	b2db      	uxtb	r3, r3
 8004034:	f003 0307 	and.w	r3, r3, #7
 8004038:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800403a:	7bbb      	ldrb	r3, [r7, #14]
 800403c:	7b3a      	ldrb	r2, [r7, #12]
 800403e:	4911      	ldr	r1, [pc, #68]	@ (8004084 <UARTEx_SetNbDataToProcess+0x94>)
 8004040:	5c8a      	ldrb	r2, [r1, r2]
 8004042:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004046:	7b3a      	ldrb	r2, [r7, #12]
 8004048:	490f      	ldr	r1, [pc, #60]	@ (8004088 <UARTEx_SetNbDataToProcess+0x98>)
 800404a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800404c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004050:	b29a      	uxth	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004058:	7bfb      	ldrb	r3, [r7, #15]
 800405a:	7b7a      	ldrb	r2, [r7, #13]
 800405c:	4909      	ldr	r1, [pc, #36]	@ (8004084 <UARTEx_SetNbDataToProcess+0x94>)
 800405e:	5c8a      	ldrb	r2, [r1, r2]
 8004060:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004064:	7b7a      	ldrb	r2, [r7, #13]
 8004066:	4908      	ldr	r1, [pc, #32]	@ (8004088 <UARTEx_SetNbDataToProcess+0x98>)
 8004068:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800406a:	fb93 f3f2 	sdiv	r3, r3, r2
 800406e:	b29a      	uxth	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004076:	bf00      	nop
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	08005514 	.word	0x08005514
 8004088:	0800551c 	.word	0x0800551c

0800408c <sniprintf>:
 800408c:	b40c      	push	{r2, r3}
 800408e:	b530      	push	{r4, r5, lr}
 8004090:	4b17      	ldr	r3, [pc, #92]	@ (80040f0 <sniprintf+0x64>)
 8004092:	1e0c      	subs	r4, r1, #0
 8004094:	681d      	ldr	r5, [r3, #0]
 8004096:	b09d      	sub	sp, #116	@ 0x74
 8004098:	da08      	bge.n	80040ac <sniprintf+0x20>
 800409a:	238b      	movs	r3, #139	@ 0x8b
 800409c:	602b      	str	r3, [r5, #0]
 800409e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80040a2:	b01d      	add	sp, #116	@ 0x74
 80040a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80040a8:	b002      	add	sp, #8
 80040aa:	4770      	bx	lr
 80040ac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80040b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80040b4:	bf14      	ite	ne
 80040b6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80040ba:	4623      	moveq	r3, r4
 80040bc:	9304      	str	r3, [sp, #16]
 80040be:	9307      	str	r3, [sp, #28]
 80040c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80040c4:	9002      	str	r0, [sp, #8]
 80040c6:	9006      	str	r0, [sp, #24]
 80040c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80040cc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80040ce:	ab21      	add	r3, sp, #132	@ 0x84
 80040d0:	a902      	add	r1, sp, #8
 80040d2:	4628      	mov	r0, r5
 80040d4:	9301      	str	r3, [sp, #4]
 80040d6:	f000 f9eb 	bl	80044b0 <_svfiprintf_r>
 80040da:	1c43      	adds	r3, r0, #1
 80040dc:	bfbc      	itt	lt
 80040de:	238b      	movlt	r3, #139	@ 0x8b
 80040e0:	602b      	strlt	r3, [r5, #0]
 80040e2:	2c00      	cmp	r4, #0
 80040e4:	d0dd      	beq.n	80040a2 <sniprintf+0x16>
 80040e6:	9b02      	ldr	r3, [sp, #8]
 80040e8:	2200      	movs	r2, #0
 80040ea:	701a      	strb	r2, [r3, #0]
 80040ec:	e7d9      	b.n	80040a2 <sniprintf+0x16>
 80040ee:	bf00      	nop
 80040f0:	20000018 	.word	0x20000018

080040f4 <srand>:
 80040f4:	b538      	push	{r3, r4, r5, lr}
 80040f6:	4b10      	ldr	r3, [pc, #64]	@ (8004138 <srand+0x44>)
 80040f8:	681d      	ldr	r5, [r3, #0]
 80040fa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80040fc:	4604      	mov	r4, r0
 80040fe:	b9b3      	cbnz	r3, 800412e <srand+0x3a>
 8004100:	2018      	movs	r0, #24
 8004102:	f000 fad1 	bl	80046a8 <malloc>
 8004106:	4602      	mov	r2, r0
 8004108:	6328      	str	r0, [r5, #48]	@ 0x30
 800410a:	b920      	cbnz	r0, 8004116 <srand+0x22>
 800410c:	4b0b      	ldr	r3, [pc, #44]	@ (800413c <srand+0x48>)
 800410e:	480c      	ldr	r0, [pc, #48]	@ (8004140 <srand+0x4c>)
 8004110:	2146      	movs	r1, #70	@ 0x46
 8004112:	f000 f953 	bl	80043bc <__assert_func>
 8004116:	490b      	ldr	r1, [pc, #44]	@ (8004144 <srand+0x50>)
 8004118:	4b0b      	ldr	r3, [pc, #44]	@ (8004148 <srand+0x54>)
 800411a:	e9c0 1300 	strd	r1, r3, [r0]
 800411e:	4b0b      	ldr	r3, [pc, #44]	@ (800414c <srand+0x58>)
 8004120:	6083      	str	r3, [r0, #8]
 8004122:	230b      	movs	r3, #11
 8004124:	8183      	strh	r3, [r0, #12]
 8004126:	2100      	movs	r1, #0
 8004128:	2001      	movs	r0, #1
 800412a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800412e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004130:	2200      	movs	r2, #0
 8004132:	611c      	str	r4, [r3, #16]
 8004134:	615a      	str	r2, [r3, #20]
 8004136:	bd38      	pop	{r3, r4, r5, pc}
 8004138:	20000018 	.word	0x20000018
 800413c:	08005524 	.word	0x08005524
 8004140:	0800553b 	.word	0x0800553b
 8004144:	abcd330e 	.word	0xabcd330e
 8004148:	e66d1234 	.word	0xe66d1234
 800414c:	0005deec 	.word	0x0005deec

08004150 <rand>:
 8004150:	4b16      	ldr	r3, [pc, #88]	@ (80041ac <rand+0x5c>)
 8004152:	b510      	push	{r4, lr}
 8004154:	681c      	ldr	r4, [r3, #0]
 8004156:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004158:	b9b3      	cbnz	r3, 8004188 <rand+0x38>
 800415a:	2018      	movs	r0, #24
 800415c:	f000 faa4 	bl	80046a8 <malloc>
 8004160:	4602      	mov	r2, r0
 8004162:	6320      	str	r0, [r4, #48]	@ 0x30
 8004164:	b920      	cbnz	r0, 8004170 <rand+0x20>
 8004166:	4b12      	ldr	r3, [pc, #72]	@ (80041b0 <rand+0x60>)
 8004168:	4812      	ldr	r0, [pc, #72]	@ (80041b4 <rand+0x64>)
 800416a:	2152      	movs	r1, #82	@ 0x52
 800416c:	f000 f926 	bl	80043bc <__assert_func>
 8004170:	4911      	ldr	r1, [pc, #68]	@ (80041b8 <rand+0x68>)
 8004172:	4b12      	ldr	r3, [pc, #72]	@ (80041bc <rand+0x6c>)
 8004174:	e9c0 1300 	strd	r1, r3, [r0]
 8004178:	4b11      	ldr	r3, [pc, #68]	@ (80041c0 <rand+0x70>)
 800417a:	6083      	str	r3, [r0, #8]
 800417c:	230b      	movs	r3, #11
 800417e:	8183      	strh	r3, [r0, #12]
 8004180:	2100      	movs	r1, #0
 8004182:	2001      	movs	r0, #1
 8004184:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004188:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800418a:	480e      	ldr	r0, [pc, #56]	@ (80041c4 <rand+0x74>)
 800418c:	690b      	ldr	r3, [r1, #16]
 800418e:	694c      	ldr	r4, [r1, #20]
 8004190:	4a0d      	ldr	r2, [pc, #52]	@ (80041c8 <rand+0x78>)
 8004192:	4358      	muls	r0, r3
 8004194:	fb02 0004 	mla	r0, r2, r4, r0
 8004198:	fba3 3202 	umull	r3, r2, r3, r2
 800419c:	3301      	adds	r3, #1
 800419e:	eb40 0002 	adc.w	r0, r0, r2
 80041a2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80041a6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80041aa:	bd10      	pop	{r4, pc}
 80041ac:	20000018 	.word	0x20000018
 80041b0:	08005524 	.word	0x08005524
 80041b4:	0800553b 	.word	0x0800553b
 80041b8:	abcd330e 	.word	0xabcd330e
 80041bc:	e66d1234 	.word	0xe66d1234
 80041c0:	0005deec 	.word	0x0005deec
 80041c4:	5851f42d 	.word	0x5851f42d
 80041c8:	4c957f2d 	.word	0x4c957f2d

080041cc <std>:
 80041cc:	2300      	movs	r3, #0
 80041ce:	b510      	push	{r4, lr}
 80041d0:	4604      	mov	r4, r0
 80041d2:	e9c0 3300 	strd	r3, r3, [r0]
 80041d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80041da:	6083      	str	r3, [r0, #8]
 80041dc:	8181      	strh	r1, [r0, #12]
 80041de:	6643      	str	r3, [r0, #100]	@ 0x64
 80041e0:	81c2      	strh	r2, [r0, #14]
 80041e2:	6183      	str	r3, [r0, #24]
 80041e4:	4619      	mov	r1, r3
 80041e6:	2208      	movs	r2, #8
 80041e8:	305c      	adds	r0, #92	@ 0x5c
 80041ea:	f000 f8b1 	bl	8004350 <memset>
 80041ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004224 <std+0x58>)
 80041f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80041f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004228 <std+0x5c>)
 80041f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80041f6:	4b0d      	ldr	r3, [pc, #52]	@ (800422c <std+0x60>)
 80041f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80041fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004230 <std+0x64>)
 80041fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80041fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004234 <std+0x68>)
 8004200:	6224      	str	r4, [r4, #32]
 8004202:	429c      	cmp	r4, r3
 8004204:	d006      	beq.n	8004214 <std+0x48>
 8004206:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800420a:	4294      	cmp	r4, r2
 800420c:	d002      	beq.n	8004214 <std+0x48>
 800420e:	33d0      	adds	r3, #208	@ 0xd0
 8004210:	429c      	cmp	r4, r3
 8004212:	d105      	bne.n	8004220 <std+0x54>
 8004214:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800421c:	f000 b8ca 	b.w	80043b4 <__retarget_lock_init_recursive>
 8004220:	bd10      	pop	{r4, pc}
 8004222:	bf00      	nop
 8004224:	08004c89 	.word	0x08004c89
 8004228:	08004cab 	.word	0x08004cab
 800422c:	08004ce3 	.word	0x08004ce3
 8004230:	08004d07 	.word	0x08004d07
 8004234:	20000174 	.word	0x20000174

08004238 <stdio_exit_handler>:
 8004238:	4a02      	ldr	r2, [pc, #8]	@ (8004244 <stdio_exit_handler+0xc>)
 800423a:	4903      	ldr	r1, [pc, #12]	@ (8004248 <stdio_exit_handler+0x10>)
 800423c:	4803      	ldr	r0, [pc, #12]	@ (800424c <stdio_exit_handler+0x14>)
 800423e:	f000 b869 	b.w	8004314 <_fwalk_sglue>
 8004242:	bf00      	nop
 8004244:	2000000c 	.word	0x2000000c
 8004248:	08004c21 	.word	0x08004c21
 800424c:	2000001c 	.word	0x2000001c

08004250 <cleanup_stdio>:
 8004250:	6841      	ldr	r1, [r0, #4]
 8004252:	4b0c      	ldr	r3, [pc, #48]	@ (8004284 <cleanup_stdio+0x34>)
 8004254:	4299      	cmp	r1, r3
 8004256:	b510      	push	{r4, lr}
 8004258:	4604      	mov	r4, r0
 800425a:	d001      	beq.n	8004260 <cleanup_stdio+0x10>
 800425c:	f000 fce0 	bl	8004c20 <_fflush_r>
 8004260:	68a1      	ldr	r1, [r4, #8]
 8004262:	4b09      	ldr	r3, [pc, #36]	@ (8004288 <cleanup_stdio+0x38>)
 8004264:	4299      	cmp	r1, r3
 8004266:	d002      	beq.n	800426e <cleanup_stdio+0x1e>
 8004268:	4620      	mov	r0, r4
 800426a:	f000 fcd9 	bl	8004c20 <_fflush_r>
 800426e:	68e1      	ldr	r1, [r4, #12]
 8004270:	4b06      	ldr	r3, [pc, #24]	@ (800428c <cleanup_stdio+0x3c>)
 8004272:	4299      	cmp	r1, r3
 8004274:	d004      	beq.n	8004280 <cleanup_stdio+0x30>
 8004276:	4620      	mov	r0, r4
 8004278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800427c:	f000 bcd0 	b.w	8004c20 <_fflush_r>
 8004280:	bd10      	pop	{r4, pc}
 8004282:	bf00      	nop
 8004284:	20000174 	.word	0x20000174
 8004288:	200001dc 	.word	0x200001dc
 800428c:	20000244 	.word	0x20000244

08004290 <global_stdio_init.part.0>:
 8004290:	b510      	push	{r4, lr}
 8004292:	4b0b      	ldr	r3, [pc, #44]	@ (80042c0 <global_stdio_init.part.0+0x30>)
 8004294:	4c0b      	ldr	r4, [pc, #44]	@ (80042c4 <global_stdio_init.part.0+0x34>)
 8004296:	4a0c      	ldr	r2, [pc, #48]	@ (80042c8 <global_stdio_init.part.0+0x38>)
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	4620      	mov	r0, r4
 800429c:	2200      	movs	r2, #0
 800429e:	2104      	movs	r1, #4
 80042a0:	f7ff ff94 	bl	80041cc <std>
 80042a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80042a8:	2201      	movs	r2, #1
 80042aa:	2109      	movs	r1, #9
 80042ac:	f7ff ff8e 	bl	80041cc <std>
 80042b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80042b4:	2202      	movs	r2, #2
 80042b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042ba:	2112      	movs	r1, #18
 80042bc:	f7ff bf86 	b.w	80041cc <std>
 80042c0:	200002ac 	.word	0x200002ac
 80042c4:	20000174 	.word	0x20000174
 80042c8:	08004239 	.word	0x08004239

080042cc <__sfp_lock_acquire>:
 80042cc:	4801      	ldr	r0, [pc, #4]	@ (80042d4 <__sfp_lock_acquire+0x8>)
 80042ce:	f000 b872 	b.w	80043b6 <__retarget_lock_acquire_recursive>
 80042d2:	bf00      	nop
 80042d4:	200002b1 	.word	0x200002b1

080042d8 <__sfp_lock_release>:
 80042d8:	4801      	ldr	r0, [pc, #4]	@ (80042e0 <__sfp_lock_release+0x8>)
 80042da:	f000 b86d 	b.w	80043b8 <__retarget_lock_release_recursive>
 80042de:	bf00      	nop
 80042e0:	200002b1 	.word	0x200002b1

080042e4 <__sinit>:
 80042e4:	b510      	push	{r4, lr}
 80042e6:	4604      	mov	r4, r0
 80042e8:	f7ff fff0 	bl	80042cc <__sfp_lock_acquire>
 80042ec:	6a23      	ldr	r3, [r4, #32]
 80042ee:	b11b      	cbz	r3, 80042f8 <__sinit+0x14>
 80042f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042f4:	f7ff bff0 	b.w	80042d8 <__sfp_lock_release>
 80042f8:	4b04      	ldr	r3, [pc, #16]	@ (800430c <__sinit+0x28>)
 80042fa:	6223      	str	r3, [r4, #32]
 80042fc:	4b04      	ldr	r3, [pc, #16]	@ (8004310 <__sinit+0x2c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1f5      	bne.n	80042f0 <__sinit+0xc>
 8004304:	f7ff ffc4 	bl	8004290 <global_stdio_init.part.0>
 8004308:	e7f2      	b.n	80042f0 <__sinit+0xc>
 800430a:	bf00      	nop
 800430c:	08004251 	.word	0x08004251
 8004310:	200002ac 	.word	0x200002ac

08004314 <_fwalk_sglue>:
 8004314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004318:	4607      	mov	r7, r0
 800431a:	4688      	mov	r8, r1
 800431c:	4614      	mov	r4, r2
 800431e:	2600      	movs	r6, #0
 8004320:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004324:	f1b9 0901 	subs.w	r9, r9, #1
 8004328:	d505      	bpl.n	8004336 <_fwalk_sglue+0x22>
 800432a:	6824      	ldr	r4, [r4, #0]
 800432c:	2c00      	cmp	r4, #0
 800432e:	d1f7      	bne.n	8004320 <_fwalk_sglue+0xc>
 8004330:	4630      	mov	r0, r6
 8004332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004336:	89ab      	ldrh	r3, [r5, #12]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d907      	bls.n	800434c <_fwalk_sglue+0x38>
 800433c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004340:	3301      	adds	r3, #1
 8004342:	d003      	beq.n	800434c <_fwalk_sglue+0x38>
 8004344:	4629      	mov	r1, r5
 8004346:	4638      	mov	r0, r7
 8004348:	47c0      	blx	r8
 800434a:	4306      	orrs	r6, r0
 800434c:	3568      	adds	r5, #104	@ 0x68
 800434e:	e7e9      	b.n	8004324 <_fwalk_sglue+0x10>

08004350 <memset>:
 8004350:	4402      	add	r2, r0
 8004352:	4603      	mov	r3, r0
 8004354:	4293      	cmp	r3, r2
 8004356:	d100      	bne.n	800435a <memset+0xa>
 8004358:	4770      	bx	lr
 800435a:	f803 1b01 	strb.w	r1, [r3], #1
 800435e:	e7f9      	b.n	8004354 <memset+0x4>

08004360 <__errno>:
 8004360:	4b01      	ldr	r3, [pc, #4]	@ (8004368 <__errno+0x8>)
 8004362:	6818      	ldr	r0, [r3, #0]
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	20000018 	.word	0x20000018

0800436c <__libc_init_array>:
 800436c:	b570      	push	{r4, r5, r6, lr}
 800436e:	4d0d      	ldr	r5, [pc, #52]	@ (80043a4 <__libc_init_array+0x38>)
 8004370:	4c0d      	ldr	r4, [pc, #52]	@ (80043a8 <__libc_init_array+0x3c>)
 8004372:	1b64      	subs	r4, r4, r5
 8004374:	10a4      	asrs	r4, r4, #2
 8004376:	2600      	movs	r6, #0
 8004378:	42a6      	cmp	r6, r4
 800437a:	d109      	bne.n	8004390 <__libc_init_array+0x24>
 800437c:	4d0b      	ldr	r5, [pc, #44]	@ (80043ac <__libc_init_array+0x40>)
 800437e:	4c0c      	ldr	r4, [pc, #48]	@ (80043b0 <__libc_init_array+0x44>)
 8004380:	f001 f87c 	bl	800547c <_init>
 8004384:	1b64      	subs	r4, r4, r5
 8004386:	10a4      	asrs	r4, r4, #2
 8004388:	2600      	movs	r6, #0
 800438a:	42a6      	cmp	r6, r4
 800438c:	d105      	bne.n	800439a <__libc_init_array+0x2e>
 800438e:	bd70      	pop	{r4, r5, r6, pc}
 8004390:	f855 3b04 	ldr.w	r3, [r5], #4
 8004394:	4798      	blx	r3
 8004396:	3601      	adds	r6, #1
 8004398:	e7ee      	b.n	8004378 <__libc_init_array+0xc>
 800439a:	f855 3b04 	ldr.w	r3, [r5], #4
 800439e:	4798      	blx	r3
 80043a0:	3601      	adds	r6, #1
 80043a2:	e7f2      	b.n	800438a <__libc_init_array+0x1e>
 80043a4:	0800560c 	.word	0x0800560c
 80043a8:	0800560c 	.word	0x0800560c
 80043ac:	0800560c 	.word	0x0800560c
 80043b0:	08005610 	.word	0x08005610

080043b4 <__retarget_lock_init_recursive>:
 80043b4:	4770      	bx	lr

080043b6 <__retarget_lock_acquire_recursive>:
 80043b6:	4770      	bx	lr

080043b8 <__retarget_lock_release_recursive>:
 80043b8:	4770      	bx	lr
	...

080043bc <__assert_func>:
 80043bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80043be:	4614      	mov	r4, r2
 80043c0:	461a      	mov	r2, r3
 80043c2:	4b09      	ldr	r3, [pc, #36]	@ (80043e8 <__assert_func+0x2c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4605      	mov	r5, r0
 80043c8:	68d8      	ldr	r0, [r3, #12]
 80043ca:	b954      	cbnz	r4, 80043e2 <__assert_func+0x26>
 80043cc:	4b07      	ldr	r3, [pc, #28]	@ (80043ec <__assert_func+0x30>)
 80043ce:	461c      	mov	r4, r3
 80043d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80043d4:	9100      	str	r1, [sp, #0]
 80043d6:	462b      	mov	r3, r5
 80043d8:	4905      	ldr	r1, [pc, #20]	@ (80043f0 <__assert_func+0x34>)
 80043da:	f000 fc99 	bl	8004d10 <fiprintf>
 80043de:	f000 fd55 	bl	8004e8c <abort>
 80043e2:	4b04      	ldr	r3, [pc, #16]	@ (80043f4 <__assert_func+0x38>)
 80043e4:	e7f4      	b.n	80043d0 <__assert_func+0x14>
 80043e6:	bf00      	nop
 80043e8:	20000018 	.word	0x20000018
 80043ec:	080055ce 	.word	0x080055ce
 80043f0:	080055a0 	.word	0x080055a0
 80043f4:	08005593 	.word	0x08005593

080043f8 <__ssputs_r>:
 80043f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043fc:	688e      	ldr	r6, [r1, #8]
 80043fe:	461f      	mov	r7, r3
 8004400:	42be      	cmp	r6, r7
 8004402:	680b      	ldr	r3, [r1, #0]
 8004404:	4682      	mov	sl, r0
 8004406:	460c      	mov	r4, r1
 8004408:	4690      	mov	r8, r2
 800440a:	d82d      	bhi.n	8004468 <__ssputs_r+0x70>
 800440c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004410:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004414:	d026      	beq.n	8004464 <__ssputs_r+0x6c>
 8004416:	6965      	ldr	r5, [r4, #20]
 8004418:	6909      	ldr	r1, [r1, #16]
 800441a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800441e:	eba3 0901 	sub.w	r9, r3, r1
 8004422:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004426:	1c7b      	adds	r3, r7, #1
 8004428:	444b      	add	r3, r9
 800442a:	106d      	asrs	r5, r5, #1
 800442c:	429d      	cmp	r5, r3
 800442e:	bf38      	it	cc
 8004430:	461d      	movcc	r5, r3
 8004432:	0553      	lsls	r3, r2, #21
 8004434:	d527      	bpl.n	8004486 <__ssputs_r+0x8e>
 8004436:	4629      	mov	r1, r5
 8004438:	f000 f960 	bl	80046fc <_malloc_r>
 800443c:	4606      	mov	r6, r0
 800443e:	b360      	cbz	r0, 800449a <__ssputs_r+0xa2>
 8004440:	6921      	ldr	r1, [r4, #16]
 8004442:	464a      	mov	r2, r9
 8004444:	f000 fd14 	bl	8004e70 <memcpy>
 8004448:	89a3      	ldrh	r3, [r4, #12]
 800444a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800444e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004452:	81a3      	strh	r3, [r4, #12]
 8004454:	6126      	str	r6, [r4, #16]
 8004456:	6165      	str	r5, [r4, #20]
 8004458:	444e      	add	r6, r9
 800445a:	eba5 0509 	sub.w	r5, r5, r9
 800445e:	6026      	str	r6, [r4, #0]
 8004460:	60a5      	str	r5, [r4, #8]
 8004462:	463e      	mov	r6, r7
 8004464:	42be      	cmp	r6, r7
 8004466:	d900      	bls.n	800446a <__ssputs_r+0x72>
 8004468:	463e      	mov	r6, r7
 800446a:	6820      	ldr	r0, [r4, #0]
 800446c:	4632      	mov	r2, r6
 800446e:	4641      	mov	r1, r8
 8004470:	f000 fc8e 	bl	8004d90 <memmove>
 8004474:	68a3      	ldr	r3, [r4, #8]
 8004476:	1b9b      	subs	r3, r3, r6
 8004478:	60a3      	str	r3, [r4, #8]
 800447a:	6823      	ldr	r3, [r4, #0]
 800447c:	4433      	add	r3, r6
 800447e:	6023      	str	r3, [r4, #0]
 8004480:	2000      	movs	r0, #0
 8004482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004486:	462a      	mov	r2, r5
 8004488:	f000 fc54 	bl	8004d34 <_realloc_r>
 800448c:	4606      	mov	r6, r0
 800448e:	2800      	cmp	r0, #0
 8004490:	d1e0      	bne.n	8004454 <__ssputs_r+0x5c>
 8004492:	6921      	ldr	r1, [r4, #16]
 8004494:	4650      	mov	r0, sl
 8004496:	f000 fd01 	bl	8004e9c <_free_r>
 800449a:	230c      	movs	r3, #12
 800449c:	f8ca 3000 	str.w	r3, [sl]
 80044a0:	89a3      	ldrh	r3, [r4, #12]
 80044a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044a6:	81a3      	strh	r3, [r4, #12]
 80044a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80044ac:	e7e9      	b.n	8004482 <__ssputs_r+0x8a>
	...

080044b0 <_svfiprintf_r>:
 80044b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b4:	4698      	mov	r8, r3
 80044b6:	898b      	ldrh	r3, [r1, #12]
 80044b8:	061b      	lsls	r3, r3, #24
 80044ba:	b09d      	sub	sp, #116	@ 0x74
 80044bc:	4607      	mov	r7, r0
 80044be:	460d      	mov	r5, r1
 80044c0:	4614      	mov	r4, r2
 80044c2:	d510      	bpl.n	80044e6 <_svfiprintf_r+0x36>
 80044c4:	690b      	ldr	r3, [r1, #16]
 80044c6:	b973      	cbnz	r3, 80044e6 <_svfiprintf_r+0x36>
 80044c8:	2140      	movs	r1, #64	@ 0x40
 80044ca:	f000 f917 	bl	80046fc <_malloc_r>
 80044ce:	6028      	str	r0, [r5, #0]
 80044d0:	6128      	str	r0, [r5, #16]
 80044d2:	b930      	cbnz	r0, 80044e2 <_svfiprintf_r+0x32>
 80044d4:	230c      	movs	r3, #12
 80044d6:	603b      	str	r3, [r7, #0]
 80044d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80044dc:	b01d      	add	sp, #116	@ 0x74
 80044de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044e2:	2340      	movs	r3, #64	@ 0x40
 80044e4:	616b      	str	r3, [r5, #20]
 80044e6:	2300      	movs	r3, #0
 80044e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80044ea:	2320      	movs	r3, #32
 80044ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80044f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80044f4:	2330      	movs	r3, #48	@ 0x30
 80044f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004694 <_svfiprintf_r+0x1e4>
 80044fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80044fe:	f04f 0901 	mov.w	r9, #1
 8004502:	4623      	mov	r3, r4
 8004504:	469a      	mov	sl, r3
 8004506:	f813 2b01 	ldrb.w	r2, [r3], #1
 800450a:	b10a      	cbz	r2, 8004510 <_svfiprintf_r+0x60>
 800450c:	2a25      	cmp	r2, #37	@ 0x25
 800450e:	d1f9      	bne.n	8004504 <_svfiprintf_r+0x54>
 8004510:	ebba 0b04 	subs.w	fp, sl, r4
 8004514:	d00b      	beq.n	800452e <_svfiprintf_r+0x7e>
 8004516:	465b      	mov	r3, fp
 8004518:	4622      	mov	r2, r4
 800451a:	4629      	mov	r1, r5
 800451c:	4638      	mov	r0, r7
 800451e:	f7ff ff6b 	bl	80043f8 <__ssputs_r>
 8004522:	3001      	adds	r0, #1
 8004524:	f000 80a7 	beq.w	8004676 <_svfiprintf_r+0x1c6>
 8004528:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800452a:	445a      	add	r2, fp
 800452c:	9209      	str	r2, [sp, #36]	@ 0x24
 800452e:	f89a 3000 	ldrb.w	r3, [sl]
 8004532:	2b00      	cmp	r3, #0
 8004534:	f000 809f 	beq.w	8004676 <_svfiprintf_r+0x1c6>
 8004538:	2300      	movs	r3, #0
 800453a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800453e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004542:	f10a 0a01 	add.w	sl, sl, #1
 8004546:	9304      	str	r3, [sp, #16]
 8004548:	9307      	str	r3, [sp, #28]
 800454a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800454e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004550:	4654      	mov	r4, sl
 8004552:	2205      	movs	r2, #5
 8004554:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004558:	484e      	ldr	r0, [pc, #312]	@ (8004694 <_svfiprintf_r+0x1e4>)
 800455a:	f7fb fe59 	bl	8000210 <memchr>
 800455e:	9a04      	ldr	r2, [sp, #16]
 8004560:	b9d8      	cbnz	r0, 800459a <_svfiprintf_r+0xea>
 8004562:	06d0      	lsls	r0, r2, #27
 8004564:	bf44      	itt	mi
 8004566:	2320      	movmi	r3, #32
 8004568:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800456c:	0711      	lsls	r1, r2, #28
 800456e:	bf44      	itt	mi
 8004570:	232b      	movmi	r3, #43	@ 0x2b
 8004572:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004576:	f89a 3000 	ldrb.w	r3, [sl]
 800457a:	2b2a      	cmp	r3, #42	@ 0x2a
 800457c:	d015      	beq.n	80045aa <_svfiprintf_r+0xfa>
 800457e:	9a07      	ldr	r2, [sp, #28]
 8004580:	4654      	mov	r4, sl
 8004582:	2000      	movs	r0, #0
 8004584:	f04f 0c0a 	mov.w	ip, #10
 8004588:	4621      	mov	r1, r4
 800458a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800458e:	3b30      	subs	r3, #48	@ 0x30
 8004590:	2b09      	cmp	r3, #9
 8004592:	d94b      	bls.n	800462c <_svfiprintf_r+0x17c>
 8004594:	b1b0      	cbz	r0, 80045c4 <_svfiprintf_r+0x114>
 8004596:	9207      	str	r2, [sp, #28]
 8004598:	e014      	b.n	80045c4 <_svfiprintf_r+0x114>
 800459a:	eba0 0308 	sub.w	r3, r0, r8
 800459e:	fa09 f303 	lsl.w	r3, r9, r3
 80045a2:	4313      	orrs	r3, r2
 80045a4:	9304      	str	r3, [sp, #16]
 80045a6:	46a2      	mov	sl, r4
 80045a8:	e7d2      	b.n	8004550 <_svfiprintf_r+0xa0>
 80045aa:	9b03      	ldr	r3, [sp, #12]
 80045ac:	1d19      	adds	r1, r3, #4
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	9103      	str	r1, [sp, #12]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	bfbb      	ittet	lt
 80045b6:	425b      	neglt	r3, r3
 80045b8:	f042 0202 	orrlt.w	r2, r2, #2
 80045bc:	9307      	strge	r3, [sp, #28]
 80045be:	9307      	strlt	r3, [sp, #28]
 80045c0:	bfb8      	it	lt
 80045c2:	9204      	strlt	r2, [sp, #16]
 80045c4:	7823      	ldrb	r3, [r4, #0]
 80045c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80045c8:	d10a      	bne.n	80045e0 <_svfiprintf_r+0x130>
 80045ca:	7863      	ldrb	r3, [r4, #1]
 80045cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80045ce:	d132      	bne.n	8004636 <_svfiprintf_r+0x186>
 80045d0:	9b03      	ldr	r3, [sp, #12]
 80045d2:	1d1a      	adds	r2, r3, #4
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	9203      	str	r2, [sp, #12]
 80045d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80045dc:	3402      	adds	r4, #2
 80045de:	9305      	str	r3, [sp, #20]
 80045e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80046a4 <_svfiprintf_r+0x1f4>
 80045e4:	7821      	ldrb	r1, [r4, #0]
 80045e6:	2203      	movs	r2, #3
 80045e8:	4650      	mov	r0, sl
 80045ea:	f7fb fe11 	bl	8000210 <memchr>
 80045ee:	b138      	cbz	r0, 8004600 <_svfiprintf_r+0x150>
 80045f0:	9b04      	ldr	r3, [sp, #16]
 80045f2:	eba0 000a 	sub.w	r0, r0, sl
 80045f6:	2240      	movs	r2, #64	@ 0x40
 80045f8:	4082      	lsls	r2, r0
 80045fa:	4313      	orrs	r3, r2
 80045fc:	3401      	adds	r4, #1
 80045fe:	9304      	str	r3, [sp, #16]
 8004600:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004604:	4824      	ldr	r0, [pc, #144]	@ (8004698 <_svfiprintf_r+0x1e8>)
 8004606:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800460a:	2206      	movs	r2, #6
 800460c:	f7fb fe00 	bl	8000210 <memchr>
 8004610:	2800      	cmp	r0, #0
 8004612:	d036      	beq.n	8004682 <_svfiprintf_r+0x1d2>
 8004614:	4b21      	ldr	r3, [pc, #132]	@ (800469c <_svfiprintf_r+0x1ec>)
 8004616:	bb1b      	cbnz	r3, 8004660 <_svfiprintf_r+0x1b0>
 8004618:	9b03      	ldr	r3, [sp, #12]
 800461a:	3307      	adds	r3, #7
 800461c:	f023 0307 	bic.w	r3, r3, #7
 8004620:	3308      	adds	r3, #8
 8004622:	9303      	str	r3, [sp, #12]
 8004624:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004626:	4433      	add	r3, r6
 8004628:	9309      	str	r3, [sp, #36]	@ 0x24
 800462a:	e76a      	b.n	8004502 <_svfiprintf_r+0x52>
 800462c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004630:	460c      	mov	r4, r1
 8004632:	2001      	movs	r0, #1
 8004634:	e7a8      	b.n	8004588 <_svfiprintf_r+0xd8>
 8004636:	2300      	movs	r3, #0
 8004638:	3401      	adds	r4, #1
 800463a:	9305      	str	r3, [sp, #20]
 800463c:	4619      	mov	r1, r3
 800463e:	f04f 0c0a 	mov.w	ip, #10
 8004642:	4620      	mov	r0, r4
 8004644:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004648:	3a30      	subs	r2, #48	@ 0x30
 800464a:	2a09      	cmp	r2, #9
 800464c:	d903      	bls.n	8004656 <_svfiprintf_r+0x1a6>
 800464e:	2b00      	cmp	r3, #0
 8004650:	d0c6      	beq.n	80045e0 <_svfiprintf_r+0x130>
 8004652:	9105      	str	r1, [sp, #20]
 8004654:	e7c4      	b.n	80045e0 <_svfiprintf_r+0x130>
 8004656:	fb0c 2101 	mla	r1, ip, r1, r2
 800465a:	4604      	mov	r4, r0
 800465c:	2301      	movs	r3, #1
 800465e:	e7f0      	b.n	8004642 <_svfiprintf_r+0x192>
 8004660:	ab03      	add	r3, sp, #12
 8004662:	9300      	str	r3, [sp, #0]
 8004664:	462a      	mov	r2, r5
 8004666:	4b0e      	ldr	r3, [pc, #56]	@ (80046a0 <_svfiprintf_r+0x1f0>)
 8004668:	a904      	add	r1, sp, #16
 800466a:	4638      	mov	r0, r7
 800466c:	f3af 8000 	nop.w
 8004670:	1c42      	adds	r2, r0, #1
 8004672:	4606      	mov	r6, r0
 8004674:	d1d6      	bne.n	8004624 <_svfiprintf_r+0x174>
 8004676:	89ab      	ldrh	r3, [r5, #12]
 8004678:	065b      	lsls	r3, r3, #25
 800467a:	f53f af2d 	bmi.w	80044d8 <_svfiprintf_r+0x28>
 800467e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004680:	e72c      	b.n	80044dc <_svfiprintf_r+0x2c>
 8004682:	ab03      	add	r3, sp, #12
 8004684:	9300      	str	r3, [sp, #0]
 8004686:	462a      	mov	r2, r5
 8004688:	4b05      	ldr	r3, [pc, #20]	@ (80046a0 <_svfiprintf_r+0x1f0>)
 800468a:	a904      	add	r1, sp, #16
 800468c:	4638      	mov	r0, r7
 800468e:	f000 f923 	bl	80048d8 <_printf_i>
 8004692:	e7ed      	b.n	8004670 <_svfiprintf_r+0x1c0>
 8004694:	080055cf 	.word	0x080055cf
 8004698:	080055d9 	.word	0x080055d9
 800469c:	00000000 	.word	0x00000000
 80046a0:	080043f9 	.word	0x080043f9
 80046a4:	080055d5 	.word	0x080055d5

080046a8 <malloc>:
 80046a8:	4b02      	ldr	r3, [pc, #8]	@ (80046b4 <malloc+0xc>)
 80046aa:	4601      	mov	r1, r0
 80046ac:	6818      	ldr	r0, [r3, #0]
 80046ae:	f000 b825 	b.w	80046fc <_malloc_r>
 80046b2:	bf00      	nop
 80046b4:	20000018 	.word	0x20000018

080046b8 <sbrk_aligned>:
 80046b8:	b570      	push	{r4, r5, r6, lr}
 80046ba:	4e0f      	ldr	r6, [pc, #60]	@ (80046f8 <sbrk_aligned+0x40>)
 80046bc:	460c      	mov	r4, r1
 80046be:	6831      	ldr	r1, [r6, #0]
 80046c0:	4605      	mov	r5, r0
 80046c2:	b911      	cbnz	r1, 80046ca <sbrk_aligned+0x12>
 80046c4:	f000 fbb2 	bl	8004e2c <_sbrk_r>
 80046c8:	6030      	str	r0, [r6, #0]
 80046ca:	4621      	mov	r1, r4
 80046cc:	4628      	mov	r0, r5
 80046ce:	f000 fbad 	bl	8004e2c <_sbrk_r>
 80046d2:	1c43      	adds	r3, r0, #1
 80046d4:	d103      	bne.n	80046de <sbrk_aligned+0x26>
 80046d6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80046da:	4620      	mov	r0, r4
 80046dc:	bd70      	pop	{r4, r5, r6, pc}
 80046de:	1cc4      	adds	r4, r0, #3
 80046e0:	f024 0403 	bic.w	r4, r4, #3
 80046e4:	42a0      	cmp	r0, r4
 80046e6:	d0f8      	beq.n	80046da <sbrk_aligned+0x22>
 80046e8:	1a21      	subs	r1, r4, r0
 80046ea:	4628      	mov	r0, r5
 80046ec:	f000 fb9e 	bl	8004e2c <_sbrk_r>
 80046f0:	3001      	adds	r0, #1
 80046f2:	d1f2      	bne.n	80046da <sbrk_aligned+0x22>
 80046f4:	e7ef      	b.n	80046d6 <sbrk_aligned+0x1e>
 80046f6:	bf00      	nop
 80046f8:	200002b4 	.word	0x200002b4

080046fc <_malloc_r>:
 80046fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004700:	1ccd      	adds	r5, r1, #3
 8004702:	f025 0503 	bic.w	r5, r5, #3
 8004706:	3508      	adds	r5, #8
 8004708:	2d0c      	cmp	r5, #12
 800470a:	bf38      	it	cc
 800470c:	250c      	movcc	r5, #12
 800470e:	2d00      	cmp	r5, #0
 8004710:	4606      	mov	r6, r0
 8004712:	db01      	blt.n	8004718 <_malloc_r+0x1c>
 8004714:	42a9      	cmp	r1, r5
 8004716:	d904      	bls.n	8004722 <_malloc_r+0x26>
 8004718:	230c      	movs	r3, #12
 800471a:	6033      	str	r3, [r6, #0]
 800471c:	2000      	movs	r0, #0
 800471e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004722:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80047f8 <_malloc_r+0xfc>
 8004726:	f000 faa3 	bl	8004c70 <__malloc_lock>
 800472a:	f8d8 3000 	ldr.w	r3, [r8]
 800472e:	461c      	mov	r4, r3
 8004730:	bb44      	cbnz	r4, 8004784 <_malloc_r+0x88>
 8004732:	4629      	mov	r1, r5
 8004734:	4630      	mov	r0, r6
 8004736:	f7ff ffbf 	bl	80046b8 <sbrk_aligned>
 800473a:	1c43      	adds	r3, r0, #1
 800473c:	4604      	mov	r4, r0
 800473e:	d158      	bne.n	80047f2 <_malloc_r+0xf6>
 8004740:	f8d8 4000 	ldr.w	r4, [r8]
 8004744:	4627      	mov	r7, r4
 8004746:	2f00      	cmp	r7, #0
 8004748:	d143      	bne.n	80047d2 <_malloc_r+0xd6>
 800474a:	2c00      	cmp	r4, #0
 800474c:	d04b      	beq.n	80047e6 <_malloc_r+0xea>
 800474e:	6823      	ldr	r3, [r4, #0]
 8004750:	4639      	mov	r1, r7
 8004752:	4630      	mov	r0, r6
 8004754:	eb04 0903 	add.w	r9, r4, r3
 8004758:	f000 fb68 	bl	8004e2c <_sbrk_r>
 800475c:	4581      	cmp	r9, r0
 800475e:	d142      	bne.n	80047e6 <_malloc_r+0xea>
 8004760:	6821      	ldr	r1, [r4, #0]
 8004762:	1a6d      	subs	r5, r5, r1
 8004764:	4629      	mov	r1, r5
 8004766:	4630      	mov	r0, r6
 8004768:	f7ff ffa6 	bl	80046b8 <sbrk_aligned>
 800476c:	3001      	adds	r0, #1
 800476e:	d03a      	beq.n	80047e6 <_malloc_r+0xea>
 8004770:	6823      	ldr	r3, [r4, #0]
 8004772:	442b      	add	r3, r5
 8004774:	6023      	str	r3, [r4, #0]
 8004776:	f8d8 3000 	ldr.w	r3, [r8]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	bb62      	cbnz	r2, 80047d8 <_malloc_r+0xdc>
 800477e:	f8c8 7000 	str.w	r7, [r8]
 8004782:	e00f      	b.n	80047a4 <_malloc_r+0xa8>
 8004784:	6822      	ldr	r2, [r4, #0]
 8004786:	1b52      	subs	r2, r2, r5
 8004788:	d420      	bmi.n	80047cc <_malloc_r+0xd0>
 800478a:	2a0b      	cmp	r2, #11
 800478c:	d917      	bls.n	80047be <_malloc_r+0xc2>
 800478e:	1961      	adds	r1, r4, r5
 8004790:	42a3      	cmp	r3, r4
 8004792:	6025      	str	r5, [r4, #0]
 8004794:	bf18      	it	ne
 8004796:	6059      	strne	r1, [r3, #4]
 8004798:	6863      	ldr	r3, [r4, #4]
 800479a:	bf08      	it	eq
 800479c:	f8c8 1000 	streq.w	r1, [r8]
 80047a0:	5162      	str	r2, [r4, r5]
 80047a2:	604b      	str	r3, [r1, #4]
 80047a4:	4630      	mov	r0, r6
 80047a6:	f000 fa69 	bl	8004c7c <__malloc_unlock>
 80047aa:	f104 000b 	add.w	r0, r4, #11
 80047ae:	1d23      	adds	r3, r4, #4
 80047b0:	f020 0007 	bic.w	r0, r0, #7
 80047b4:	1ac2      	subs	r2, r0, r3
 80047b6:	bf1c      	itt	ne
 80047b8:	1a1b      	subne	r3, r3, r0
 80047ba:	50a3      	strne	r3, [r4, r2]
 80047bc:	e7af      	b.n	800471e <_malloc_r+0x22>
 80047be:	6862      	ldr	r2, [r4, #4]
 80047c0:	42a3      	cmp	r3, r4
 80047c2:	bf0c      	ite	eq
 80047c4:	f8c8 2000 	streq.w	r2, [r8]
 80047c8:	605a      	strne	r2, [r3, #4]
 80047ca:	e7eb      	b.n	80047a4 <_malloc_r+0xa8>
 80047cc:	4623      	mov	r3, r4
 80047ce:	6864      	ldr	r4, [r4, #4]
 80047d0:	e7ae      	b.n	8004730 <_malloc_r+0x34>
 80047d2:	463c      	mov	r4, r7
 80047d4:	687f      	ldr	r7, [r7, #4]
 80047d6:	e7b6      	b.n	8004746 <_malloc_r+0x4a>
 80047d8:	461a      	mov	r2, r3
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	42a3      	cmp	r3, r4
 80047de:	d1fb      	bne.n	80047d8 <_malloc_r+0xdc>
 80047e0:	2300      	movs	r3, #0
 80047e2:	6053      	str	r3, [r2, #4]
 80047e4:	e7de      	b.n	80047a4 <_malloc_r+0xa8>
 80047e6:	230c      	movs	r3, #12
 80047e8:	6033      	str	r3, [r6, #0]
 80047ea:	4630      	mov	r0, r6
 80047ec:	f000 fa46 	bl	8004c7c <__malloc_unlock>
 80047f0:	e794      	b.n	800471c <_malloc_r+0x20>
 80047f2:	6005      	str	r5, [r0, #0]
 80047f4:	e7d6      	b.n	80047a4 <_malloc_r+0xa8>
 80047f6:	bf00      	nop
 80047f8:	200002b8 	.word	0x200002b8

080047fc <_printf_common>:
 80047fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004800:	4616      	mov	r6, r2
 8004802:	4698      	mov	r8, r3
 8004804:	688a      	ldr	r2, [r1, #8]
 8004806:	690b      	ldr	r3, [r1, #16]
 8004808:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800480c:	4293      	cmp	r3, r2
 800480e:	bfb8      	it	lt
 8004810:	4613      	movlt	r3, r2
 8004812:	6033      	str	r3, [r6, #0]
 8004814:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004818:	4607      	mov	r7, r0
 800481a:	460c      	mov	r4, r1
 800481c:	b10a      	cbz	r2, 8004822 <_printf_common+0x26>
 800481e:	3301      	adds	r3, #1
 8004820:	6033      	str	r3, [r6, #0]
 8004822:	6823      	ldr	r3, [r4, #0]
 8004824:	0699      	lsls	r1, r3, #26
 8004826:	bf42      	ittt	mi
 8004828:	6833      	ldrmi	r3, [r6, #0]
 800482a:	3302      	addmi	r3, #2
 800482c:	6033      	strmi	r3, [r6, #0]
 800482e:	6825      	ldr	r5, [r4, #0]
 8004830:	f015 0506 	ands.w	r5, r5, #6
 8004834:	d106      	bne.n	8004844 <_printf_common+0x48>
 8004836:	f104 0a19 	add.w	sl, r4, #25
 800483a:	68e3      	ldr	r3, [r4, #12]
 800483c:	6832      	ldr	r2, [r6, #0]
 800483e:	1a9b      	subs	r3, r3, r2
 8004840:	42ab      	cmp	r3, r5
 8004842:	dc26      	bgt.n	8004892 <_printf_common+0x96>
 8004844:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004848:	6822      	ldr	r2, [r4, #0]
 800484a:	3b00      	subs	r3, #0
 800484c:	bf18      	it	ne
 800484e:	2301      	movne	r3, #1
 8004850:	0692      	lsls	r2, r2, #26
 8004852:	d42b      	bmi.n	80048ac <_printf_common+0xb0>
 8004854:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004858:	4641      	mov	r1, r8
 800485a:	4638      	mov	r0, r7
 800485c:	47c8      	blx	r9
 800485e:	3001      	adds	r0, #1
 8004860:	d01e      	beq.n	80048a0 <_printf_common+0xa4>
 8004862:	6823      	ldr	r3, [r4, #0]
 8004864:	6922      	ldr	r2, [r4, #16]
 8004866:	f003 0306 	and.w	r3, r3, #6
 800486a:	2b04      	cmp	r3, #4
 800486c:	bf02      	ittt	eq
 800486e:	68e5      	ldreq	r5, [r4, #12]
 8004870:	6833      	ldreq	r3, [r6, #0]
 8004872:	1aed      	subeq	r5, r5, r3
 8004874:	68a3      	ldr	r3, [r4, #8]
 8004876:	bf0c      	ite	eq
 8004878:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800487c:	2500      	movne	r5, #0
 800487e:	4293      	cmp	r3, r2
 8004880:	bfc4      	itt	gt
 8004882:	1a9b      	subgt	r3, r3, r2
 8004884:	18ed      	addgt	r5, r5, r3
 8004886:	2600      	movs	r6, #0
 8004888:	341a      	adds	r4, #26
 800488a:	42b5      	cmp	r5, r6
 800488c:	d11a      	bne.n	80048c4 <_printf_common+0xc8>
 800488e:	2000      	movs	r0, #0
 8004890:	e008      	b.n	80048a4 <_printf_common+0xa8>
 8004892:	2301      	movs	r3, #1
 8004894:	4652      	mov	r2, sl
 8004896:	4641      	mov	r1, r8
 8004898:	4638      	mov	r0, r7
 800489a:	47c8      	blx	r9
 800489c:	3001      	adds	r0, #1
 800489e:	d103      	bne.n	80048a8 <_printf_common+0xac>
 80048a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80048a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048a8:	3501      	adds	r5, #1
 80048aa:	e7c6      	b.n	800483a <_printf_common+0x3e>
 80048ac:	18e1      	adds	r1, r4, r3
 80048ae:	1c5a      	adds	r2, r3, #1
 80048b0:	2030      	movs	r0, #48	@ 0x30
 80048b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80048b6:	4422      	add	r2, r4
 80048b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80048bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80048c0:	3302      	adds	r3, #2
 80048c2:	e7c7      	b.n	8004854 <_printf_common+0x58>
 80048c4:	2301      	movs	r3, #1
 80048c6:	4622      	mov	r2, r4
 80048c8:	4641      	mov	r1, r8
 80048ca:	4638      	mov	r0, r7
 80048cc:	47c8      	blx	r9
 80048ce:	3001      	adds	r0, #1
 80048d0:	d0e6      	beq.n	80048a0 <_printf_common+0xa4>
 80048d2:	3601      	adds	r6, #1
 80048d4:	e7d9      	b.n	800488a <_printf_common+0x8e>
	...

080048d8 <_printf_i>:
 80048d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048dc:	7e0f      	ldrb	r7, [r1, #24]
 80048de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80048e0:	2f78      	cmp	r7, #120	@ 0x78
 80048e2:	4691      	mov	r9, r2
 80048e4:	4680      	mov	r8, r0
 80048e6:	460c      	mov	r4, r1
 80048e8:	469a      	mov	sl, r3
 80048ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80048ee:	d807      	bhi.n	8004900 <_printf_i+0x28>
 80048f0:	2f62      	cmp	r7, #98	@ 0x62
 80048f2:	d80a      	bhi.n	800490a <_printf_i+0x32>
 80048f4:	2f00      	cmp	r7, #0
 80048f6:	f000 80d2 	beq.w	8004a9e <_printf_i+0x1c6>
 80048fa:	2f58      	cmp	r7, #88	@ 0x58
 80048fc:	f000 80b9 	beq.w	8004a72 <_printf_i+0x19a>
 8004900:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004904:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004908:	e03a      	b.n	8004980 <_printf_i+0xa8>
 800490a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800490e:	2b15      	cmp	r3, #21
 8004910:	d8f6      	bhi.n	8004900 <_printf_i+0x28>
 8004912:	a101      	add	r1, pc, #4	@ (adr r1, 8004918 <_printf_i+0x40>)
 8004914:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004918:	08004971 	.word	0x08004971
 800491c:	08004985 	.word	0x08004985
 8004920:	08004901 	.word	0x08004901
 8004924:	08004901 	.word	0x08004901
 8004928:	08004901 	.word	0x08004901
 800492c:	08004901 	.word	0x08004901
 8004930:	08004985 	.word	0x08004985
 8004934:	08004901 	.word	0x08004901
 8004938:	08004901 	.word	0x08004901
 800493c:	08004901 	.word	0x08004901
 8004940:	08004901 	.word	0x08004901
 8004944:	08004a85 	.word	0x08004a85
 8004948:	080049af 	.word	0x080049af
 800494c:	08004a3f 	.word	0x08004a3f
 8004950:	08004901 	.word	0x08004901
 8004954:	08004901 	.word	0x08004901
 8004958:	08004aa7 	.word	0x08004aa7
 800495c:	08004901 	.word	0x08004901
 8004960:	080049af 	.word	0x080049af
 8004964:	08004901 	.word	0x08004901
 8004968:	08004901 	.word	0x08004901
 800496c:	08004a47 	.word	0x08004a47
 8004970:	6833      	ldr	r3, [r6, #0]
 8004972:	1d1a      	adds	r2, r3, #4
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6032      	str	r2, [r6, #0]
 8004978:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800497c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004980:	2301      	movs	r3, #1
 8004982:	e09d      	b.n	8004ac0 <_printf_i+0x1e8>
 8004984:	6833      	ldr	r3, [r6, #0]
 8004986:	6820      	ldr	r0, [r4, #0]
 8004988:	1d19      	adds	r1, r3, #4
 800498a:	6031      	str	r1, [r6, #0]
 800498c:	0606      	lsls	r6, r0, #24
 800498e:	d501      	bpl.n	8004994 <_printf_i+0xbc>
 8004990:	681d      	ldr	r5, [r3, #0]
 8004992:	e003      	b.n	800499c <_printf_i+0xc4>
 8004994:	0645      	lsls	r5, r0, #25
 8004996:	d5fb      	bpl.n	8004990 <_printf_i+0xb8>
 8004998:	f9b3 5000 	ldrsh.w	r5, [r3]
 800499c:	2d00      	cmp	r5, #0
 800499e:	da03      	bge.n	80049a8 <_printf_i+0xd0>
 80049a0:	232d      	movs	r3, #45	@ 0x2d
 80049a2:	426d      	negs	r5, r5
 80049a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049a8:	4859      	ldr	r0, [pc, #356]	@ (8004b10 <_printf_i+0x238>)
 80049aa:	230a      	movs	r3, #10
 80049ac:	e011      	b.n	80049d2 <_printf_i+0xfa>
 80049ae:	6821      	ldr	r1, [r4, #0]
 80049b0:	6833      	ldr	r3, [r6, #0]
 80049b2:	0608      	lsls	r0, r1, #24
 80049b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80049b8:	d402      	bmi.n	80049c0 <_printf_i+0xe8>
 80049ba:	0649      	lsls	r1, r1, #25
 80049bc:	bf48      	it	mi
 80049be:	b2ad      	uxthmi	r5, r5
 80049c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80049c2:	4853      	ldr	r0, [pc, #332]	@ (8004b10 <_printf_i+0x238>)
 80049c4:	6033      	str	r3, [r6, #0]
 80049c6:	bf14      	ite	ne
 80049c8:	230a      	movne	r3, #10
 80049ca:	2308      	moveq	r3, #8
 80049cc:	2100      	movs	r1, #0
 80049ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80049d2:	6866      	ldr	r6, [r4, #4]
 80049d4:	60a6      	str	r6, [r4, #8]
 80049d6:	2e00      	cmp	r6, #0
 80049d8:	bfa2      	ittt	ge
 80049da:	6821      	ldrge	r1, [r4, #0]
 80049dc:	f021 0104 	bicge.w	r1, r1, #4
 80049e0:	6021      	strge	r1, [r4, #0]
 80049e2:	b90d      	cbnz	r5, 80049e8 <_printf_i+0x110>
 80049e4:	2e00      	cmp	r6, #0
 80049e6:	d04b      	beq.n	8004a80 <_printf_i+0x1a8>
 80049e8:	4616      	mov	r6, r2
 80049ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80049ee:	fb03 5711 	mls	r7, r3, r1, r5
 80049f2:	5dc7      	ldrb	r7, [r0, r7]
 80049f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80049f8:	462f      	mov	r7, r5
 80049fa:	42bb      	cmp	r3, r7
 80049fc:	460d      	mov	r5, r1
 80049fe:	d9f4      	bls.n	80049ea <_printf_i+0x112>
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d10b      	bne.n	8004a1c <_printf_i+0x144>
 8004a04:	6823      	ldr	r3, [r4, #0]
 8004a06:	07df      	lsls	r7, r3, #31
 8004a08:	d508      	bpl.n	8004a1c <_printf_i+0x144>
 8004a0a:	6923      	ldr	r3, [r4, #16]
 8004a0c:	6861      	ldr	r1, [r4, #4]
 8004a0e:	4299      	cmp	r1, r3
 8004a10:	bfde      	ittt	le
 8004a12:	2330      	movle	r3, #48	@ 0x30
 8004a14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a18:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004a1c:	1b92      	subs	r2, r2, r6
 8004a1e:	6122      	str	r2, [r4, #16]
 8004a20:	f8cd a000 	str.w	sl, [sp]
 8004a24:	464b      	mov	r3, r9
 8004a26:	aa03      	add	r2, sp, #12
 8004a28:	4621      	mov	r1, r4
 8004a2a:	4640      	mov	r0, r8
 8004a2c:	f7ff fee6 	bl	80047fc <_printf_common>
 8004a30:	3001      	adds	r0, #1
 8004a32:	d14a      	bne.n	8004aca <_printf_i+0x1f2>
 8004a34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a38:	b004      	add	sp, #16
 8004a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a3e:	6823      	ldr	r3, [r4, #0]
 8004a40:	f043 0320 	orr.w	r3, r3, #32
 8004a44:	6023      	str	r3, [r4, #0]
 8004a46:	4833      	ldr	r0, [pc, #204]	@ (8004b14 <_printf_i+0x23c>)
 8004a48:	2778      	movs	r7, #120	@ 0x78
 8004a4a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	6831      	ldr	r1, [r6, #0]
 8004a52:	061f      	lsls	r7, r3, #24
 8004a54:	f851 5b04 	ldr.w	r5, [r1], #4
 8004a58:	d402      	bmi.n	8004a60 <_printf_i+0x188>
 8004a5a:	065f      	lsls	r7, r3, #25
 8004a5c:	bf48      	it	mi
 8004a5e:	b2ad      	uxthmi	r5, r5
 8004a60:	6031      	str	r1, [r6, #0]
 8004a62:	07d9      	lsls	r1, r3, #31
 8004a64:	bf44      	itt	mi
 8004a66:	f043 0320 	orrmi.w	r3, r3, #32
 8004a6a:	6023      	strmi	r3, [r4, #0]
 8004a6c:	b11d      	cbz	r5, 8004a76 <_printf_i+0x19e>
 8004a6e:	2310      	movs	r3, #16
 8004a70:	e7ac      	b.n	80049cc <_printf_i+0xf4>
 8004a72:	4827      	ldr	r0, [pc, #156]	@ (8004b10 <_printf_i+0x238>)
 8004a74:	e7e9      	b.n	8004a4a <_printf_i+0x172>
 8004a76:	6823      	ldr	r3, [r4, #0]
 8004a78:	f023 0320 	bic.w	r3, r3, #32
 8004a7c:	6023      	str	r3, [r4, #0]
 8004a7e:	e7f6      	b.n	8004a6e <_printf_i+0x196>
 8004a80:	4616      	mov	r6, r2
 8004a82:	e7bd      	b.n	8004a00 <_printf_i+0x128>
 8004a84:	6833      	ldr	r3, [r6, #0]
 8004a86:	6825      	ldr	r5, [r4, #0]
 8004a88:	6961      	ldr	r1, [r4, #20]
 8004a8a:	1d18      	adds	r0, r3, #4
 8004a8c:	6030      	str	r0, [r6, #0]
 8004a8e:	062e      	lsls	r6, r5, #24
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	d501      	bpl.n	8004a98 <_printf_i+0x1c0>
 8004a94:	6019      	str	r1, [r3, #0]
 8004a96:	e002      	b.n	8004a9e <_printf_i+0x1c6>
 8004a98:	0668      	lsls	r0, r5, #25
 8004a9a:	d5fb      	bpl.n	8004a94 <_printf_i+0x1bc>
 8004a9c:	8019      	strh	r1, [r3, #0]
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	6123      	str	r3, [r4, #16]
 8004aa2:	4616      	mov	r6, r2
 8004aa4:	e7bc      	b.n	8004a20 <_printf_i+0x148>
 8004aa6:	6833      	ldr	r3, [r6, #0]
 8004aa8:	1d1a      	adds	r2, r3, #4
 8004aaa:	6032      	str	r2, [r6, #0]
 8004aac:	681e      	ldr	r6, [r3, #0]
 8004aae:	6862      	ldr	r2, [r4, #4]
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	4630      	mov	r0, r6
 8004ab4:	f7fb fbac 	bl	8000210 <memchr>
 8004ab8:	b108      	cbz	r0, 8004abe <_printf_i+0x1e6>
 8004aba:	1b80      	subs	r0, r0, r6
 8004abc:	6060      	str	r0, [r4, #4]
 8004abe:	6863      	ldr	r3, [r4, #4]
 8004ac0:	6123      	str	r3, [r4, #16]
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ac8:	e7aa      	b.n	8004a20 <_printf_i+0x148>
 8004aca:	6923      	ldr	r3, [r4, #16]
 8004acc:	4632      	mov	r2, r6
 8004ace:	4649      	mov	r1, r9
 8004ad0:	4640      	mov	r0, r8
 8004ad2:	47d0      	blx	sl
 8004ad4:	3001      	adds	r0, #1
 8004ad6:	d0ad      	beq.n	8004a34 <_printf_i+0x15c>
 8004ad8:	6823      	ldr	r3, [r4, #0]
 8004ada:	079b      	lsls	r3, r3, #30
 8004adc:	d413      	bmi.n	8004b06 <_printf_i+0x22e>
 8004ade:	68e0      	ldr	r0, [r4, #12]
 8004ae0:	9b03      	ldr	r3, [sp, #12]
 8004ae2:	4298      	cmp	r0, r3
 8004ae4:	bfb8      	it	lt
 8004ae6:	4618      	movlt	r0, r3
 8004ae8:	e7a6      	b.n	8004a38 <_printf_i+0x160>
 8004aea:	2301      	movs	r3, #1
 8004aec:	4632      	mov	r2, r6
 8004aee:	4649      	mov	r1, r9
 8004af0:	4640      	mov	r0, r8
 8004af2:	47d0      	blx	sl
 8004af4:	3001      	adds	r0, #1
 8004af6:	d09d      	beq.n	8004a34 <_printf_i+0x15c>
 8004af8:	3501      	adds	r5, #1
 8004afa:	68e3      	ldr	r3, [r4, #12]
 8004afc:	9903      	ldr	r1, [sp, #12]
 8004afe:	1a5b      	subs	r3, r3, r1
 8004b00:	42ab      	cmp	r3, r5
 8004b02:	dcf2      	bgt.n	8004aea <_printf_i+0x212>
 8004b04:	e7eb      	b.n	8004ade <_printf_i+0x206>
 8004b06:	2500      	movs	r5, #0
 8004b08:	f104 0619 	add.w	r6, r4, #25
 8004b0c:	e7f5      	b.n	8004afa <_printf_i+0x222>
 8004b0e:	bf00      	nop
 8004b10:	080055e0 	.word	0x080055e0
 8004b14:	080055f1 	.word	0x080055f1

08004b18 <__sflush_r>:
 8004b18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b20:	0716      	lsls	r6, r2, #28
 8004b22:	4605      	mov	r5, r0
 8004b24:	460c      	mov	r4, r1
 8004b26:	d454      	bmi.n	8004bd2 <__sflush_r+0xba>
 8004b28:	684b      	ldr	r3, [r1, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	dc02      	bgt.n	8004b34 <__sflush_r+0x1c>
 8004b2e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	dd48      	ble.n	8004bc6 <__sflush_r+0xae>
 8004b34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004b36:	2e00      	cmp	r6, #0
 8004b38:	d045      	beq.n	8004bc6 <__sflush_r+0xae>
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004b40:	682f      	ldr	r7, [r5, #0]
 8004b42:	6a21      	ldr	r1, [r4, #32]
 8004b44:	602b      	str	r3, [r5, #0]
 8004b46:	d030      	beq.n	8004baa <__sflush_r+0x92>
 8004b48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004b4a:	89a3      	ldrh	r3, [r4, #12]
 8004b4c:	0759      	lsls	r1, r3, #29
 8004b4e:	d505      	bpl.n	8004b5c <__sflush_r+0x44>
 8004b50:	6863      	ldr	r3, [r4, #4]
 8004b52:	1ad2      	subs	r2, r2, r3
 8004b54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004b56:	b10b      	cbz	r3, 8004b5c <__sflush_r+0x44>
 8004b58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004b5a:	1ad2      	subs	r2, r2, r3
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004b60:	6a21      	ldr	r1, [r4, #32]
 8004b62:	4628      	mov	r0, r5
 8004b64:	47b0      	blx	r6
 8004b66:	1c43      	adds	r3, r0, #1
 8004b68:	89a3      	ldrh	r3, [r4, #12]
 8004b6a:	d106      	bne.n	8004b7a <__sflush_r+0x62>
 8004b6c:	6829      	ldr	r1, [r5, #0]
 8004b6e:	291d      	cmp	r1, #29
 8004b70:	d82b      	bhi.n	8004bca <__sflush_r+0xb2>
 8004b72:	4a2a      	ldr	r2, [pc, #168]	@ (8004c1c <__sflush_r+0x104>)
 8004b74:	410a      	asrs	r2, r1
 8004b76:	07d6      	lsls	r6, r2, #31
 8004b78:	d427      	bmi.n	8004bca <__sflush_r+0xb2>
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	6062      	str	r2, [r4, #4]
 8004b7e:	04d9      	lsls	r1, r3, #19
 8004b80:	6922      	ldr	r2, [r4, #16]
 8004b82:	6022      	str	r2, [r4, #0]
 8004b84:	d504      	bpl.n	8004b90 <__sflush_r+0x78>
 8004b86:	1c42      	adds	r2, r0, #1
 8004b88:	d101      	bne.n	8004b8e <__sflush_r+0x76>
 8004b8a:	682b      	ldr	r3, [r5, #0]
 8004b8c:	b903      	cbnz	r3, 8004b90 <__sflush_r+0x78>
 8004b8e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004b90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004b92:	602f      	str	r7, [r5, #0]
 8004b94:	b1b9      	cbz	r1, 8004bc6 <__sflush_r+0xae>
 8004b96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004b9a:	4299      	cmp	r1, r3
 8004b9c:	d002      	beq.n	8004ba4 <__sflush_r+0x8c>
 8004b9e:	4628      	mov	r0, r5
 8004ba0:	f000 f97c 	bl	8004e9c <_free_r>
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ba8:	e00d      	b.n	8004bc6 <__sflush_r+0xae>
 8004baa:	2301      	movs	r3, #1
 8004bac:	4628      	mov	r0, r5
 8004bae:	47b0      	blx	r6
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	1c50      	adds	r0, r2, #1
 8004bb4:	d1c9      	bne.n	8004b4a <__sflush_r+0x32>
 8004bb6:	682b      	ldr	r3, [r5, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d0c6      	beq.n	8004b4a <__sflush_r+0x32>
 8004bbc:	2b1d      	cmp	r3, #29
 8004bbe:	d001      	beq.n	8004bc4 <__sflush_r+0xac>
 8004bc0:	2b16      	cmp	r3, #22
 8004bc2:	d11e      	bne.n	8004c02 <__sflush_r+0xea>
 8004bc4:	602f      	str	r7, [r5, #0]
 8004bc6:	2000      	movs	r0, #0
 8004bc8:	e022      	b.n	8004c10 <__sflush_r+0xf8>
 8004bca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bce:	b21b      	sxth	r3, r3
 8004bd0:	e01b      	b.n	8004c0a <__sflush_r+0xf2>
 8004bd2:	690f      	ldr	r7, [r1, #16]
 8004bd4:	2f00      	cmp	r7, #0
 8004bd6:	d0f6      	beq.n	8004bc6 <__sflush_r+0xae>
 8004bd8:	0793      	lsls	r3, r2, #30
 8004bda:	680e      	ldr	r6, [r1, #0]
 8004bdc:	bf08      	it	eq
 8004bde:	694b      	ldreq	r3, [r1, #20]
 8004be0:	600f      	str	r7, [r1, #0]
 8004be2:	bf18      	it	ne
 8004be4:	2300      	movne	r3, #0
 8004be6:	eba6 0807 	sub.w	r8, r6, r7
 8004bea:	608b      	str	r3, [r1, #8]
 8004bec:	f1b8 0f00 	cmp.w	r8, #0
 8004bf0:	dde9      	ble.n	8004bc6 <__sflush_r+0xae>
 8004bf2:	6a21      	ldr	r1, [r4, #32]
 8004bf4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004bf6:	4643      	mov	r3, r8
 8004bf8:	463a      	mov	r2, r7
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	47b0      	blx	r6
 8004bfe:	2800      	cmp	r0, #0
 8004c00:	dc08      	bgt.n	8004c14 <__sflush_r+0xfc>
 8004c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c0a:	81a3      	strh	r3, [r4, #12]
 8004c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c14:	4407      	add	r7, r0
 8004c16:	eba8 0800 	sub.w	r8, r8, r0
 8004c1a:	e7e7      	b.n	8004bec <__sflush_r+0xd4>
 8004c1c:	dfbffffe 	.word	0xdfbffffe

08004c20 <_fflush_r>:
 8004c20:	b538      	push	{r3, r4, r5, lr}
 8004c22:	690b      	ldr	r3, [r1, #16]
 8004c24:	4605      	mov	r5, r0
 8004c26:	460c      	mov	r4, r1
 8004c28:	b913      	cbnz	r3, 8004c30 <_fflush_r+0x10>
 8004c2a:	2500      	movs	r5, #0
 8004c2c:	4628      	mov	r0, r5
 8004c2e:	bd38      	pop	{r3, r4, r5, pc}
 8004c30:	b118      	cbz	r0, 8004c3a <_fflush_r+0x1a>
 8004c32:	6a03      	ldr	r3, [r0, #32]
 8004c34:	b90b      	cbnz	r3, 8004c3a <_fflush_r+0x1a>
 8004c36:	f7ff fb55 	bl	80042e4 <__sinit>
 8004c3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d0f3      	beq.n	8004c2a <_fflush_r+0xa>
 8004c42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004c44:	07d0      	lsls	r0, r2, #31
 8004c46:	d404      	bmi.n	8004c52 <_fflush_r+0x32>
 8004c48:	0599      	lsls	r1, r3, #22
 8004c4a:	d402      	bmi.n	8004c52 <_fflush_r+0x32>
 8004c4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c4e:	f7ff fbb2 	bl	80043b6 <__retarget_lock_acquire_recursive>
 8004c52:	4628      	mov	r0, r5
 8004c54:	4621      	mov	r1, r4
 8004c56:	f7ff ff5f 	bl	8004b18 <__sflush_r>
 8004c5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c5c:	07da      	lsls	r2, r3, #31
 8004c5e:	4605      	mov	r5, r0
 8004c60:	d4e4      	bmi.n	8004c2c <_fflush_r+0xc>
 8004c62:	89a3      	ldrh	r3, [r4, #12]
 8004c64:	059b      	lsls	r3, r3, #22
 8004c66:	d4e1      	bmi.n	8004c2c <_fflush_r+0xc>
 8004c68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c6a:	f7ff fba5 	bl	80043b8 <__retarget_lock_release_recursive>
 8004c6e:	e7dd      	b.n	8004c2c <_fflush_r+0xc>

08004c70 <__malloc_lock>:
 8004c70:	4801      	ldr	r0, [pc, #4]	@ (8004c78 <__malloc_lock+0x8>)
 8004c72:	f7ff bba0 	b.w	80043b6 <__retarget_lock_acquire_recursive>
 8004c76:	bf00      	nop
 8004c78:	200002b0 	.word	0x200002b0

08004c7c <__malloc_unlock>:
 8004c7c:	4801      	ldr	r0, [pc, #4]	@ (8004c84 <__malloc_unlock+0x8>)
 8004c7e:	f7ff bb9b 	b.w	80043b8 <__retarget_lock_release_recursive>
 8004c82:	bf00      	nop
 8004c84:	200002b0 	.word	0x200002b0

08004c88 <__sread>:
 8004c88:	b510      	push	{r4, lr}
 8004c8a:	460c      	mov	r4, r1
 8004c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c90:	f000 f8ba 	bl	8004e08 <_read_r>
 8004c94:	2800      	cmp	r0, #0
 8004c96:	bfab      	itete	ge
 8004c98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004c9a:	89a3      	ldrhlt	r3, [r4, #12]
 8004c9c:	181b      	addge	r3, r3, r0
 8004c9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004ca2:	bfac      	ite	ge
 8004ca4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004ca6:	81a3      	strhlt	r3, [r4, #12]
 8004ca8:	bd10      	pop	{r4, pc}

08004caa <__swrite>:
 8004caa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cae:	461f      	mov	r7, r3
 8004cb0:	898b      	ldrh	r3, [r1, #12]
 8004cb2:	05db      	lsls	r3, r3, #23
 8004cb4:	4605      	mov	r5, r0
 8004cb6:	460c      	mov	r4, r1
 8004cb8:	4616      	mov	r6, r2
 8004cba:	d505      	bpl.n	8004cc8 <__swrite+0x1e>
 8004cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f000 f88e 	bl	8004de4 <_lseek_r>
 8004cc8:	89a3      	ldrh	r3, [r4, #12]
 8004cca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004cd2:	81a3      	strh	r3, [r4, #12]
 8004cd4:	4632      	mov	r2, r6
 8004cd6:	463b      	mov	r3, r7
 8004cd8:	4628      	mov	r0, r5
 8004cda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cde:	f000 b8b5 	b.w	8004e4c <_write_r>

08004ce2 <__sseek>:
 8004ce2:	b510      	push	{r4, lr}
 8004ce4:	460c      	mov	r4, r1
 8004ce6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cea:	f000 f87b 	bl	8004de4 <_lseek_r>
 8004cee:	1c43      	adds	r3, r0, #1
 8004cf0:	89a3      	ldrh	r3, [r4, #12]
 8004cf2:	bf15      	itete	ne
 8004cf4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004cf6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004cfa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004cfe:	81a3      	strheq	r3, [r4, #12]
 8004d00:	bf18      	it	ne
 8004d02:	81a3      	strhne	r3, [r4, #12]
 8004d04:	bd10      	pop	{r4, pc}

08004d06 <__sclose>:
 8004d06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d0a:	f000 b85b 	b.w	8004dc4 <_close_r>
	...

08004d10 <fiprintf>:
 8004d10:	b40e      	push	{r1, r2, r3}
 8004d12:	b503      	push	{r0, r1, lr}
 8004d14:	4601      	mov	r1, r0
 8004d16:	ab03      	add	r3, sp, #12
 8004d18:	4805      	ldr	r0, [pc, #20]	@ (8004d30 <fiprintf+0x20>)
 8004d1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d1e:	6800      	ldr	r0, [r0, #0]
 8004d20:	9301      	str	r3, [sp, #4]
 8004d22:	f000 f92f 	bl	8004f84 <_vfiprintf_r>
 8004d26:	b002      	add	sp, #8
 8004d28:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d2c:	b003      	add	sp, #12
 8004d2e:	4770      	bx	lr
 8004d30:	20000018 	.word	0x20000018

08004d34 <_realloc_r>:
 8004d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d38:	4680      	mov	r8, r0
 8004d3a:	4615      	mov	r5, r2
 8004d3c:	460c      	mov	r4, r1
 8004d3e:	b921      	cbnz	r1, 8004d4a <_realloc_r+0x16>
 8004d40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d44:	4611      	mov	r1, r2
 8004d46:	f7ff bcd9 	b.w	80046fc <_malloc_r>
 8004d4a:	b92a      	cbnz	r2, 8004d58 <_realloc_r+0x24>
 8004d4c:	f000 f8a6 	bl	8004e9c <_free_r>
 8004d50:	2400      	movs	r4, #0
 8004d52:	4620      	mov	r0, r4
 8004d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d58:	f000 fa2c 	bl	80051b4 <_malloc_usable_size_r>
 8004d5c:	4285      	cmp	r5, r0
 8004d5e:	4606      	mov	r6, r0
 8004d60:	d802      	bhi.n	8004d68 <_realloc_r+0x34>
 8004d62:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004d66:	d8f4      	bhi.n	8004d52 <_realloc_r+0x1e>
 8004d68:	4629      	mov	r1, r5
 8004d6a:	4640      	mov	r0, r8
 8004d6c:	f7ff fcc6 	bl	80046fc <_malloc_r>
 8004d70:	4607      	mov	r7, r0
 8004d72:	2800      	cmp	r0, #0
 8004d74:	d0ec      	beq.n	8004d50 <_realloc_r+0x1c>
 8004d76:	42b5      	cmp	r5, r6
 8004d78:	462a      	mov	r2, r5
 8004d7a:	4621      	mov	r1, r4
 8004d7c:	bf28      	it	cs
 8004d7e:	4632      	movcs	r2, r6
 8004d80:	f000 f876 	bl	8004e70 <memcpy>
 8004d84:	4621      	mov	r1, r4
 8004d86:	4640      	mov	r0, r8
 8004d88:	f000 f888 	bl	8004e9c <_free_r>
 8004d8c:	463c      	mov	r4, r7
 8004d8e:	e7e0      	b.n	8004d52 <_realloc_r+0x1e>

08004d90 <memmove>:
 8004d90:	4288      	cmp	r0, r1
 8004d92:	b510      	push	{r4, lr}
 8004d94:	eb01 0402 	add.w	r4, r1, r2
 8004d98:	d902      	bls.n	8004da0 <memmove+0x10>
 8004d9a:	4284      	cmp	r4, r0
 8004d9c:	4623      	mov	r3, r4
 8004d9e:	d807      	bhi.n	8004db0 <memmove+0x20>
 8004da0:	1e43      	subs	r3, r0, #1
 8004da2:	42a1      	cmp	r1, r4
 8004da4:	d008      	beq.n	8004db8 <memmove+0x28>
 8004da6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004daa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004dae:	e7f8      	b.n	8004da2 <memmove+0x12>
 8004db0:	4402      	add	r2, r0
 8004db2:	4601      	mov	r1, r0
 8004db4:	428a      	cmp	r2, r1
 8004db6:	d100      	bne.n	8004dba <memmove+0x2a>
 8004db8:	bd10      	pop	{r4, pc}
 8004dba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004dbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004dc2:	e7f7      	b.n	8004db4 <memmove+0x24>

08004dc4 <_close_r>:
 8004dc4:	b538      	push	{r3, r4, r5, lr}
 8004dc6:	4d06      	ldr	r5, [pc, #24]	@ (8004de0 <_close_r+0x1c>)
 8004dc8:	2300      	movs	r3, #0
 8004dca:	4604      	mov	r4, r0
 8004dcc:	4608      	mov	r0, r1
 8004dce:	602b      	str	r3, [r5, #0]
 8004dd0:	f7fb ff62 	bl	8000c98 <_close>
 8004dd4:	1c43      	adds	r3, r0, #1
 8004dd6:	d102      	bne.n	8004dde <_close_r+0x1a>
 8004dd8:	682b      	ldr	r3, [r5, #0]
 8004dda:	b103      	cbz	r3, 8004dde <_close_r+0x1a>
 8004ddc:	6023      	str	r3, [r4, #0]
 8004dde:	bd38      	pop	{r3, r4, r5, pc}
 8004de0:	200002bc 	.word	0x200002bc

08004de4 <_lseek_r>:
 8004de4:	b538      	push	{r3, r4, r5, lr}
 8004de6:	4d07      	ldr	r5, [pc, #28]	@ (8004e04 <_lseek_r+0x20>)
 8004de8:	4604      	mov	r4, r0
 8004dea:	4608      	mov	r0, r1
 8004dec:	4611      	mov	r1, r2
 8004dee:	2200      	movs	r2, #0
 8004df0:	602a      	str	r2, [r5, #0]
 8004df2:	461a      	mov	r2, r3
 8004df4:	f7fb ff77 	bl	8000ce6 <_lseek>
 8004df8:	1c43      	adds	r3, r0, #1
 8004dfa:	d102      	bne.n	8004e02 <_lseek_r+0x1e>
 8004dfc:	682b      	ldr	r3, [r5, #0]
 8004dfe:	b103      	cbz	r3, 8004e02 <_lseek_r+0x1e>
 8004e00:	6023      	str	r3, [r4, #0]
 8004e02:	bd38      	pop	{r3, r4, r5, pc}
 8004e04:	200002bc 	.word	0x200002bc

08004e08 <_read_r>:
 8004e08:	b538      	push	{r3, r4, r5, lr}
 8004e0a:	4d07      	ldr	r5, [pc, #28]	@ (8004e28 <_read_r+0x20>)
 8004e0c:	4604      	mov	r4, r0
 8004e0e:	4608      	mov	r0, r1
 8004e10:	4611      	mov	r1, r2
 8004e12:	2200      	movs	r2, #0
 8004e14:	602a      	str	r2, [r5, #0]
 8004e16:	461a      	mov	r2, r3
 8004e18:	f7fb ff05 	bl	8000c26 <_read>
 8004e1c:	1c43      	adds	r3, r0, #1
 8004e1e:	d102      	bne.n	8004e26 <_read_r+0x1e>
 8004e20:	682b      	ldr	r3, [r5, #0]
 8004e22:	b103      	cbz	r3, 8004e26 <_read_r+0x1e>
 8004e24:	6023      	str	r3, [r4, #0]
 8004e26:	bd38      	pop	{r3, r4, r5, pc}
 8004e28:	200002bc 	.word	0x200002bc

08004e2c <_sbrk_r>:
 8004e2c:	b538      	push	{r3, r4, r5, lr}
 8004e2e:	4d06      	ldr	r5, [pc, #24]	@ (8004e48 <_sbrk_r+0x1c>)
 8004e30:	2300      	movs	r3, #0
 8004e32:	4604      	mov	r4, r0
 8004e34:	4608      	mov	r0, r1
 8004e36:	602b      	str	r3, [r5, #0]
 8004e38:	f7fb ff62 	bl	8000d00 <_sbrk>
 8004e3c:	1c43      	adds	r3, r0, #1
 8004e3e:	d102      	bne.n	8004e46 <_sbrk_r+0x1a>
 8004e40:	682b      	ldr	r3, [r5, #0]
 8004e42:	b103      	cbz	r3, 8004e46 <_sbrk_r+0x1a>
 8004e44:	6023      	str	r3, [r4, #0]
 8004e46:	bd38      	pop	{r3, r4, r5, pc}
 8004e48:	200002bc 	.word	0x200002bc

08004e4c <_write_r>:
 8004e4c:	b538      	push	{r3, r4, r5, lr}
 8004e4e:	4d07      	ldr	r5, [pc, #28]	@ (8004e6c <_write_r+0x20>)
 8004e50:	4604      	mov	r4, r0
 8004e52:	4608      	mov	r0, r1
 8004e54:	4611      	mov	r1, r2
 8004e56:	2200      	movs	r2, #0
 8004e58:	602a      	str	r2, [r5, #0]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	f7fb ff00 	bl	8000c60 <_write>
 8004e60:	1c43      	adds	r3, r0, #1
 8004e62:	d102      	bne.n	8004e6a <_write_r+0x1e>
 8004e64:	682b      	ldr	r3, [r5, #0]
 8004e66:	b103      	cbz	r3, 8004e6a <_write_r+0x1e>
 8004e68:	6023      	str	r3, [r4, #0]
 8004e6a:	bd38      	pop	{r3, r4, r5, pc}
 8004e6c:	200002bc 	.word	0x200002bc

08004e70 <memcpy>:
 8004e70:	440a      	add	r2, r1
 8004e72:	4291      	cmp	r1, r2
 8004e74:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004e78:	d100      	bne.n	8004e7c <memcpy+0xc>
 8004e7a:	4770      	bx	lr
 8004e7c:	b510      	push	{r4, lr}
 8004e7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e86:	4291      	cmp	r1, r2
 8004e88:	d1f9      	bne.n	8004e7e <memcpy+0xe>
 8004e8a:	bd10      	pop	{r4, pc}

08004e8c <abort>:
 8004e8c:	b508      	push	{r3, lr}
 8004e8e:	2006      	movs	r0, #6
 8004e90:	f000 fad8 	bl	8005444 <raise>
 8004e94:	2001      	movs	r0, #1
 8004e96:	f7fb febb 	bl	8000c10 <_exit>
	...

08004e9c <_free_r>:
 8004e9c:	b538      	push	{r3, r4, r5, lr}
 8004e9e:	4605      	mov	r5, r0
 8004ea0:	2900      	cmp	r1, #0
 8004ea2:	d041      	beq.n	8004f28 <_free_r+0x8c>
 8004ea4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ea8:	1f0c      	subs	r4, r1, #4
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	bfb8      	it	lt
 8004eae:	18e4      	addlt	r4, r4, r3
 8004eb0:	f7ff fede 	bl	8004c70 <__malloc_lock>
 8004eb4:	4a1d      	ldr	r2, [pc, #116]	@ (8004f2c <_free_r+0x90>)
 8004eb6:	6813      	ldr	r3, [r2, #0]
 8004eb8:	b933      	cbnz	r3, 8004ec8 <_free_r+0x2c>
 8004eba:	6063      	str	r3, [r4, #4]
 8004ebc:	6014      	str	r4, [r2, #0]
 8004ebe:	4628      	mov	r0, r5
 8004ec0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ec4:	f7ff beda 	b.w	8004c7c <__malloc_unlock>
 8004ec8:	42a3      	cmp	r3, r4
 8004eca:	d908      	bls.n	8004ede <_free_r+0x42>
 8004ecc:	6820      	ldr	r0, [r4, #0]
 8004ece:	1821      	adds	r1, r4, r0
 8004ed0:	428b      	cmp	r3, r1
 8004ed2:	bf01      	itttt	eq
 8004ed4:	6819      	ldreq	r1, [r3, #0]
 8004ed6:	685b      	ldreq	r3, [r3, #4]
 8004ed8:	1809      	addeq	r1, r1, r0
 8004eda:	6021      	streq	r1, [r4, #0]
 8004edc:	e7ed      	b.n	8004eba <_free_r+0x1e>
 8004ede:	461a      	mov	r2, r3
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	b10b      	cbz	r3, 8004ee8 <_free_r+0x4c>
 8004ee4:	42a3      	cmp	r3, r4
 8004ee6:	d9fa      	bls.n	8004ede <_free_r+0x42>
 8004ee8:	6811      	ldr	r1, [r2, #0]
 8004eea:	1850      	adds	r0, r2, r1
 8004eec:	42a0      	cmp	r0, r4
 8004eee:	d10b      	bne.n	8004f08 <_free_r+0x6c>
 8004ef0:	6820      	ldr	r0, [r4, #0]
 8004ef2:	4401      	add	r1, r0
 8004ef4:	1850      	adds	r0, r2, r1
 8004ef6:	4283      	cmp	r3, r0
 8004ef8:	6011      	str	r1, [r2, #0]
 8004efa:	d1e0      	bne.n	8004ebe <_free_r+0x22>
 8004efc:	6818      	ldr	r0, [r3, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	6053      	str	r3, [r2, #4]
 8004f02:	4408      	add	r0, r1
 8004f04:	6010      	str	r0, [r2, #0]
 8004f06:	e7da      	b.n	8004ebe <_free_r+0x22>
 8004f08:	d902      	bls.n	8004f10 <_free_r+0x74>
 8004f0a:	230c      	movs	r3, #12
 8004f0c:	602b      	str	r3, [r5, #0]
 8004f0e:	e7d6      	b.n	8004ebe <_free_r+0x22>
 8004f10:	6820      	ldr	r0, [r4, #0]
 8004f12:	1821      	adds	r1, r4, r0
 8004f14:	428b      	cmp	r3, r1
 8004f16:	bf04      	itt	eq
 8004f18:	6819      	ldreq	r1, [r3, #0]
 8004f1a:	685b      	ldreq	r3, [r3, #4]
 8004f1c:	6063      	str	r3, [r4, #4]
 8004f1e:	bf04      	itt	eq
 8004f20:	1809      	addeq	r1, r1, r0
 8004f22:	6021      	streq	r1, [r4, #0]
 8004f24:	6054      	str	r4, [r2, #4]
 8004f26:	e7ca      	b.n	8004ebe <_free_r+0x22>
 8004f28:	bd38      	pop	{r3, r4, r5, pc}
 8004f2a:	bf00      	nop
 8004f2c:	200002b8 	.word	0x200002b8

08004f30 <__sfputc_r>:
 8004f30:	6893      	ldr	r3, [r2, #8]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	b410      	push	{r4}
 8004f38:	6093      	str	r3, [r2, #8]
 8004f3a:	da08      	bge.n	8004f4e <__sfputc_r+0x1e>
 8004f3c:	6994      	ldr	r4, [r2, #24]
 8004f3e:	42a3      	cmp	r3, r4
 8004f40:	db01      	blt.n	8004f46 <__sfputc_r+0x16>
 8004f42:	290a      	cmp	r1, #10
 8004f44:	d103      	bne.n	8004f4e <__sfputc_r+0x1e>
 8004f46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f4a:	f000 b93b 	b.w	80051c4 <__swbuf_r>
 8004f4e:	6813      	ldr	r3, [r2, #0]
 8004f50:	1c58      	adds	r0, r3, #1
 8004f52:	6010      	str	r0, [r2, #0]
 8004f54:	7019      	strb	r1, [r3, #0]
 8004f56:	4608      	mov	r0, r1
 8004f58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <__sfputs_r>:
 8004f5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f60:	4606      	mov	r6, r0
 8004f62:	460f      	mov	r7, r1
 8004f64:	4614      	mov	r4, r2
 8004f66:	18d5      	adds	r5, r2, r3
 8004f68:	42ac      	cmp	r4, r5
 8004f6a:	d101      	bne.n	8004f70 <__sfputs_r+0x12>
 8004f6c:	2000      	movs	r0, #0
 8004f6e:	e007      	b.n	8004f80 <__sfputs_r+0x22>
 8004f70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f74:	463a      	mov	r2, r7
 8004f76:	4630      	mov	r0, r6
 8004f78:	f7ff ffda 	bl	8004f30 <__sfputc_r>
 8004f7c:	1c43      	adds	r3, r0, #1
 8004f7e:	d1f3      	bne.n	8004f68 <__sfputs_r+0xa>
 8004f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f84 <_vfiprintf_r>:
 8004f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f88:	460d      	mov	r5, r1
 8004f8a:	b09d      	sub	sp, #116	@ 0x74
 8004f8c:	4614      	mov	r4, r2
 8004f8e:	4698      	mov	r8, r3
 8004f90:	4606      	mov	r6, r0
 8004f92:	b118      	cbz	r0, 8004f9c <_vfiprintf_r+0x18>
 8004f94:	6a03      	ldr	r3, [r0, #32]
 8004f96:	b90b      	cbnz	r3, 8004f9c <_vfiprintf_r+0x18>
 8004f98:	f7ff f9a4 	bl	80042e4 <__sinit>
 8004f9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004f9e:	07d9      	lsls	r1, r3, #31
 8004fa0:	d405      	bmi.n	8004fae <_vfiprintf_r+0x2a>
 8004fa2:	89ab      	ldrh	r3, [r5, #12]
 8004fa4:	059a      	lsls	r2, r3, #22
 8004fa6:	d402      	bmi.n	8004fae <_vfiprintf_r+0x2a>
 8004fa8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004faa:	f7ff fa04 	bl	80043b6 <__retarget_lock_acquire_recursive>
 8004fae:	89ab      	ldrh	r3, [r5, #12]
 8004fb0:	071b      	lsls	r3, r3, #28
 8004fb2:	d501      	bpl.n	8004fb8 <_vfiprintf_r+0x34>
 8004fb4:	692b      	ldr	r3, [r5, #16]
 8004fb6:	b99b      	cbnz	r3, 8004fe0 <_vfiprintf_r+0x5c>
 8004fb8:	4629      	mov	r1, r5
 8004fba:	4630      	mov	r0, r6
 8004fbc:	f000 f940 	bl	8005240 <__swsetup_r>
 8004fc0:	b170      	cbz	r0, 8004fe0 <_vfiprintf_r+0x5c>
 8004fc2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004fc4:	07dc      	lsls	r4, r3, #31
 8004fc6:	d504      	bpl.n	8004fd2 <_vfiprintf_r+0x4e>
 8004fc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004fcc:	b01d      	add	sp, #116	@ 0x74
 8004fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fd2:	89ab      	ldrh	r3, [r5, #12]
 8004fd4:	0598      	lsls	r0, r3, #22
 8004fd6:	d4f7      	bmi.n	8004fc8 <_vfiprintf_r+0x44>
 8004fd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004fda:	f7ff f9ed 	bl	80043b8 <__retarget_lock_release_recursive>
 8004fde:	e7f3      	b.n	8004fc8 <_vfiprintf_r+0x44>
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fe4:	2320      	movs	r3, #32
 8004fe6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004fea:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fee:	2330      	movs	r3, #48	@ 0x30
 8004ff0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80051a0 <_vfiprintf_r+0x21c>
 8004ff4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004ff8:	f04f 0901 	mov.w	r9, #1
 8004ffc:	4623      	mov	r3, r4
 8004ffe:	469a      	mov	sl, r3
 8005000:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005004:	b10a      	cbz	r2, 800500a <_vfiprintf_r+0x86>
 8005006:	2a25      	cmp	r2, #37	@ 0x25
 8005008:	d1f9      	bne.n	8004ffe <_vfiprintf_r+0x7a>
 800500a:	ebba 0b04 	subs.w	fp, sl, r4
 800500e:	d00b      	beq.n	8005028 <_vfiprintf_r+0xa4>
 8005010:	465b      	mov	r3, fp
 8005012:	4622      	mov	r2, r4
 8005014:	4629      	mov	r1, r5
 8005016:	4630      	mov	r0, r6
 8005018:	f7ff ffa1 	bl	8004f5e <__sfputs_r>
 800501c:	3001      	adds	r0, #1
 800501e:	f000 80a7 	beq.w	8005170 <_vfiprintf_r+0x1ec>
 8005022:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005024:	445a      	add	r2, fp
 8005026:	9209      	str	r2, [sp, #36]	@ 0x24
 8005028:	f89a 3000 	ldrb.w	r3, [sl]
 800502c:	2b00      	cmp	r3, #0
 800502e:	f000 809f 	beq.w	8005170 <_vfiprintf_r+0x1ec>
 8005032:	2300      	movs	r3, #0
 8005034:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005038:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800503c:	f10a 0a01 	add.w	sl, sl, #1
 8005040:	9304      	str	r3, [sp, #16]
 8005042:	9307      	str	r3, [sp, #28]
 8005044:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005048:	931a      	str	r3, [sp, #104]	@ 0x68
 800504a:	4654      	mov	r4, sl
 800504c:	2205      	movs	r2, #5
 800504e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005052:	4853      	ldr	r0, [pc, #332]	@ (80051a0 <_vfiprintf_r+0x21c>)
 8005054:	f7fb f8dc 	bl	8000210 <memchr>
 8005058:	9a04      	ldr	r2, [sp, #16]
 800505a:	b9d8      	cbnz	r0, 8005094 <_vfiprintf_r+0x110>
 800505c:	06d1      	lsls	r1, r2, #27
 800505e:	bf44      	itt	mi
 8005060:	2320      	movmi	r3, #32
 8005062:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005066:	0713      	lsls	r3, r2, #28
 8005068:	bf44      	itt	mi
 800506a:	232b      	movmi	r3, #43	@ 0x2b
 800506c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005070:	f89a 3000 	ldrb.w	r3, [sl]
 8005074:	2b2a      	cmp	r3, #42	@ 0x2a
 8005076:	d015      	beq.n	80050a4 <_vfiprintf_r+0x120>
 8005078:	9a07      	ldr	r2, [sp, #28]
 800507a:	4654      	mov	r4, sl
 800507c:	2000      	movs	r0, #0
 800507e:	f04f 0c0a 	mov.w	ip, #10
 8005082:	4621      	mov	r1, r4
 8005084:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005088:	3b30      	subs	r3, #48	@ 0x30
 800508a:	2b09      	cmp	r3, #9
 800508c:	d94b      	bls.n	8005126 <_vfiprintf_r+0x1a2>
 800508e:	b1b0      	cbz	r0, 80050be <_vfiprintf_r+0x13a>
 8005090:	9207      	str	r2, [sp, #28]
 8005092:	e014      	b.n	80050be <_vfiprintf_r+0x13a>
 8005094:	eba0 0308 	sub.w	r3, r0, r8
 8005098:	fa09 f303 	lsl.w	r3, r9, r3
 800509c:	4313      	orrs	r3, r2
 800509e:	9304      	str	r3, [sp, #16]
 80050a0:	46a2      	mov	sl, r4
 80050a2:	e7d2      	b.n	800504a <_vfiprintf_r+0xc6>
 80050a4:	9b03      	ldr	r3, [sp, #12]
 80050a6:	1d19      	adds	r1, r3, #4
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	9103      	str	r1, [sp, #12]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	bfbb      	ittet	lt
 80050b0:	425b      	neglt	r3, r3
 80050b2:	f042 0202 	orrlt.w	r2, r2, #2
 80050b6:	9307      	strge	r3, [sp, #28]
 80050b8:	9307      	strlt	r3, [sp, #28]
 80050ba:	bfb8      	it	lt
 80050bc:	9204      	strlt	r2, [sp, #16]
 80050be:	7823      	ldrb	r3, [r4, #0]
 80050c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80050c2:	d10a      	bne.n	80050da <_vfiprintf_r+0x156>
 80050c4:	7863      	ldrb	r3, [r4, #1]
 80050c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80050c8:	d132      	bne.n	8005130 <_vfiprintf_r+0x1ac>
 80050ca:	9b03      	ldr	r3, [sp, #12]
 80050cc:	1d1a      	adds	r2, r3, #4
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	9203      	str	r2, [sp, #12]
 80050d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80050d6:	3402      	adds	r4, #2
 80050d8:	9305      	str	r3, [sp, #20]
 80050da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80051b0 <_vfiprintf_r+0x22c>
 80050de:	7821      	ldrb	r1, [r4, #0]
 80050e0:	2203      	movs	r2, #3
 80050e2:	4650      	mov	r0, sl
 80050e4:	f7fb f894 	bl	8000210 <memchr>
 80050e8:	b138      	cbz	r0, 80050fa <_vfiprintf_r+0x176>
 80050ea:	9b04      	ldr	r3, [sp, #16]
 80050ec:	eba0 000a 	sub.w	r0, r0, sl
 80050f0:	2240      	movs	r2, #64	@ 0x40
 80050f2:	4082      	lsls	r2, r0
 80050f4:	4313      	orrs	r3, r2
 80050f6:	3401      	adds	r4, #1
 80050f8:	9304      	str	r3, [sp, #16]
 80050fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050fe:	4829      	ldr	r0, [pc, #164]	@ (80051a4 <_vfiprintf_r+0x220>)
 8005100:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005104:	2206      	movs	r2, #6
 8005106:	f7fb f883 	bl	8000210 <memchr>
 800510a:	2800      	cmp	r0, #0
 800510c:	d03f      	beq.n	800518e <_vfiprintf_r+0x20a>
 800510e:	4b26      	ldr	r3, [pc, #152]	@ (80051a8 <_vfiprintf_r+0x224>)
 8005110:	bb1b      	cbnz	r3, 800515a <_vfiprintf_r+0x1d6>
 8005112:	9b03      	ldr	r3, [sp, #12]
 8005114:	3307      	adds	r3, #7
 8005116:	f023 0307 	bic.w	r3, r3, #7
 800511a:	3308      	adds	r3, #8
 800511c:	9303      	str	r3, [sp, #12]
 800511e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005120:	443b      	add	r3, r7
 8005122:	9309      	str	r3, [sp, #36]	@ 0x24
 8005124:	e76a      	b.n	8004ffc <_vfiprintf_r+0x78>
 8005126:	fb0c 3202 	mla	r2, ip, r2, r3
 800512a:	460c      	mov	r4, r1
 800512c:	2001      	movs	r0, #1
 800512e:	e7a8      	b.n	8005082 <_vfiprintf_r+0xfe>
 8005130:	2300      	movs	r3, #0
 8005132:	3401      	adds	r4, #1
 8005134:	9305      	str	r3, [sp, #20]
 8005136:	4619      	mov	r1, r3
 8005138:	f04f 0c0a 	mov.w	ip, #10
 800513c:	4620      	mov	r0, r4
 800513e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005142:	3a30      	subs	r2, #48	@ 0x30
 8005144:	2a09      	cmp	r2, #9
 8005146:	d903      	bls.n	8005150 <_vfiprintf_r+0x1cc>
 8005148:	2b00      	cmp	r3, #0
 800514a:	d0c6      	beq.n	80050da <_vfiprintf_r+0x156>
 800514c:	9105      	str	r1, [sp, #20]
 800514e:	e7c4      	b.n	80050da <_vfiprintf_r+0x156>
 8005150:	fb0c 2101 	mla	r1, ip, r1, r2
 8005154:	4604      	mov	r4, r0
 8005156:	2301      	movs	r3, #1
 8005158:	e7f0      	b.n	800513c <_vfiprintf_r+0x1b8>
 800515a:	ab03      	add	r3, sp, #12
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	462a      	mov	r2, r5
 8005160:	4b12      	ldr	r3, [pc, #72]	@ (80051ac <_vfiprintf_r+0x228>)
 8005162:	a904      	add	r1, sp, #16
 8005164:	4630      	mov	r0, r6
 8005166:	f3af 8000 	nop.w
 800516a:	4607      	mov	r7, r0
 800516c:	1c78      	adds	r0, r7, #1
 800516e:	d1d6      	bne.n	800511e <_vfiprintf_r+0x19a>
 8005170:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005172:	07d9      	lsls	r1, r3, #31
 8005174:	d405      	bmi.n	8005182 <_vfiprintf_r+0x1fe>
 8005176:	89ab      	ldrh	r3, [r5, #12]
 8005178:	059a      	lsls	r2, r3, #22
 800517a:	d402      	bmi.n	8005182 <_vfiprintf_r+0x1fe>
 800517c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800517e:	f7ff f91b 	bl	80043b8 <__retarget_lock_release_recursive>
 8005182:	89ab      	ldrh	r3, [r5, #12]
 8005184:	065b      	lsls	r3, r3, #25
 8005186:	f53f af1f 	bmi.w	8004fc8 <_vfiprintf_r+0x44>
 800518a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800518c:	e71e      	b.n	8004fcc <_vfiprintf_r+0x48>
 800518e:	ab03      	add	r3, sp, #12
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	462a      	mov	r2, r5
 8005194:	4b05      	ldr	r3, [pc, #20]	@ (80051ac <_vfiprintf_r+0x228>)
 8005196:	a904      	add	r1, sp, #16
 8005198:	4630      	mov	r0, r6
 800519a:	f7ff fb9d 	bl	80048d8 <_printf_i>
 800519e:	e7e4      	b.n	800516a <_vfiprintf_r+0x1e6>
 80051a0:	080055cf 	.word	0x080055cf
 80051a4:	080055d9 	.word	0x080055d9
 80051a8:	00000000 	.word	0x00000000
 80051ac:	08004f5f 	.word	0x08004f5f
 80051b0:	080055d5 	.word	0x080055d5

080051b4 <_malloc_usable_size_r>:
 80051b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051b8:	1f18      	subs	r0, r3, #4
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	bfbc      	itt	lt
 80051be:	580b      	ldrlt	r3, [r1, r0]
 80051c0:	18c0      	addlt	r0, r0, r3
 80051c2:	4770      	bx	lr

080051c4 <__swbuf_r>:
 80051c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051c6:	460e      	mov	r6, r1
 80051c8:	4614      	mov	r4, r2
 80051ca:	4605      	mov	r5, r0
 80051cc:	b118      	cbz	r0, 80051d6 <__swbuf_r+0x12>
 80051ce:	6a03      	ldr	r3, [r0, #32]
 80051d0:	b90b      	cbnz	r3, 80051d6 <__swbuf_r+0x12>
 80051d2:	f7ff f887 	bl	80042e4 <__sinit>
 80051d6:	69a3      	ldr	r3, [r4, #24]
 80051d8:	60a3      	str	r3, [r4, #8]
 80051da:	89a3      	ldrh	r3, [r4, #12]
 80051dc:	071a      	lsls	r2, r3, #28
 80051de:	d501      	bpl.n	80051e4 <__swbuf_r+0x20>
 80051e0:	6923      	ldr	r3, [r4, #16]
 80051e2:	b943      	cbnz	r3, 80051f6 <__swbuf_r+0x32>
 80051e4:	4621      	mov	r1, r4
 80051e6:	4628      	mov	r0, r5
 80051e8:	f000 f82a 	bl	8005240 <__swsetup_r>
 80051ec:	b118      	cbz	r0, 80051f6 <__swbuf_r+0x32>
 80051ee:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80051f2:	4638      	mov	r0, r7
 80051f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051f6:	6823      	ldr	r3, [r4, #0]
 80051f8:	6922      	ldr	r2, [r4, #16]
 80051fa:	1a98      	subs	r0, r3, r2
 80051fc:	6963      	ldr	r3, [r4, #20]
 80051fe:	b2f6      	uxtb	r6, r6
 8005200:	4283      	cmp	r3, r0
 8005202:	4637      	mov	r7, r6
 8005204:	dc05      	bgt.n	8005212 <__swbuf_r+0x4e>
 8005206:	4621      	mov	r1, r4
 8005208:	4628      	mov	r0, r5
 800520a:	f7ff fd09 	bl	8004c20 <_fflush_r>
 800520e:	2800      	cmp	r0, #0
 8005210:	d1ed      	bne.n	80051ee <__swbuf_r+0x2a>
 8005212:	68a3      	ldr	r3, [r4, #8]
 8005214:	3b01      	subs	r3, #1
 8005216:	60a3      	str	r3, [r4, #8]
 8005218:	6823      	ldr	r3, [r4, #0]
 800521a:	1c5a      	adds	r2, r3, #1
 800521c:	6022      	str	r2, [r4, #0]
 800521e:	701e      	strb	r6, [r3, #0]
 8005220:	6962      	ldr	r2, [r4, #20]
 8005222:	1c43      	adds	r3, r0, #1
 8005224:	429a      	cmp	r2, r3
 8005226:	d004      	beq.n	8005232 <__swbuf_r+0x6e>
 8005228:	89a3      	ldrh	r3, [r4, #12]
 800522a:	07db      	lsls	r3, r3, #31
 800522c:	d5e1      	bpl.n	80051f2 <__swbuf_r+0x2e>
 800522e:	2e0a      	cmp	r6, #10
 8005230:	d1df      	bne.n	80051f2 <__swbuf_r+0x2e>
 8005232:	4621      	mov	r1, r4
 8005234:	4628      	mov	r0, r5
 8005236:	f7ff fcf3 	bl	8004c20 <_fflush_r>
 800523a:	2800      	cmp	r0, #0
 800523c:	d0d9      	beq.n	80051f2 <__swbuf_r+0x2e>
 800523e:	e7d6      	b.n	80051ee <__swbuf_r+0x2a>

08005240 <__swsetup_r>:
 8005240:	b538      	push	{r3, r4, r5, lr}
 8005242:	4b29      	ldr	r3, [pc, #164]	@ (80052e8 <__swsetup_r+0xa8>)
 8005244:	4605      	mov	r5, r0
 8005246:	6818      	ldr	r0, [r3, #0]
 8005248:	460c      	mov	r4, r1
 800524a:	b118      	cbz	r0, 8005254 <__swsetup_r+0x14>
 800524c:	6a03      	ldr	r3, [r0, #32]
 800524e:	b90b      	cbnz	r3, 8005254 <__swsetup_r+0x14>
 8005250:	f7ff f848 	bl	80042e4 <__sinit>
 8005254:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005258:	0719      	lsls	r1, r3, #28
 800525a:	d422      	bmi.n	80052a2 <__swsetup_r+0x62>
 800525c:	06da      	lsls	r2, r3, #27
 800525e:	d407      	bmi.n	8005270 <__swsetup_r+0x30>
 8005260:	2209      	movs	r2, #9
 8005262:	602a      	str	r2, [r5, #0]
 8005264:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005268:	81a3      	strh	r3, [r4, #12]
 800526a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800526e:	e033      	b.n	80052d8 <__swsetup_r+0x98>
 8005270:	0758      	lsls	r0, r3, #29
 8005272:	d512      	bpl.n	800529a <__swsetup_r+0x5a>
 8005274:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005276:	b141      	cbz	r1, 800528a <__swsetup_r+0x4a>
 8005278:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800527c:	4299      	cmp	r1, r3
 800527e:	d002      	beq.n	8005286 <__swsetup_r+0x46>
 8005280:	4628      	mov	r0, r5
 8005282:	f7ff fe0b 	bl	8004e9c <_free_r>
 8005286:	2300      	movs	r3, #0
 8005288:	6363      	str	r3, [r4, #52]	@ 0x34
 800528a:	89a3      	ldrh	r3, [r4, #12]
 800528c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005290:	81a3      	strh	r3, [r4, #12]
 8005292:	2300      	movs	r3, #0
 8005294:	6063      	str	r3, [r4, #4]
 8005296:	6923      	ldr	r3, [r4, #16]
 8005298:	6023      	str	r3, [r4, #0]
 800529a:	89a3      	ldrh	r3, [r4, #12]
 800529c:	f043 0308 	orr.w	r3, r3, #8
 80052a0:	81a3      	strh	r3, [r4, #12]
 80052a2:	6923      	ldr	r3, [r4, #16]
 80052a4:	b94b      	cbnz	r3, 80052ba <__swsetup_r+0x7a>
 80052a6:	89a3      	ldrh	r3, [r4, #12]
 80052a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80052ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052b0:	d003      	beq.n	80052ba <__swsetup_r+0x7a>
 80052b2:	4621      	mov	r1, r4
 80052b4:	4628      	mov	r0, r5
 80052b6:	f000 f83f 	bl	8005338 <__smakebuf_r>
 80052ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052be:	f013 0201 	ands.w	r2, r3, #1
 80052c2:	d00a      	beq.n	80052da <__swsetup_r+0x9a>
 80052c4:	2200      	movs	r2, #0
 80052c6:	60a2      	str	r2, [r4, #8]
 80052c8:	6962      	ldr	r2, [r4, #20]
 80052ca:	4252      	negs	r2, r2
 80052cc:	61a2      	str	r2, [r4, #24]
 80052ce:	6922      	ldr	r2, [r4, #16]
 80052d0:	b942      	cbnz	r2, 80052e4 <__swsetup_r+0xa4>
 80052d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80052d6:	d1c5      	bne.n	8005264 <__swsetup_r+0x24>
 80052d8:	bd38      	pop	{r3, r4, r5, pc}
 80052da:	0799      	lsls	r1, r3, #30
 80052dc:	bf58      	it	pl
 80052de:	6962      	ldrpl	r2, [r4, #20]
 80052e0:	60a2      	str	r2, [r4, #8]
 80052e2:	e7f4      	b.n	80052ce <__swsetup_r+0x8e>
 80052e4:	2000      	movs	r0, #0
 80052e6:	e7f7      	b.n	80052d8 <__swsetup_r+0x98>
 80052e8:	20000018 	.word	0x20000018

080052ec <__swhatbuf_r>:
 80052ec:	b570      	push	{r4, r5, r6, lr}
 80052ee:	460c      	mov	r4, r1
 80052f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052f4:	2900      	cmp	r1, #0
 80052f6:	b096      	sub	sp, #88	@ 0x58
 80052f8:	4615      	mov	r5, r2
 80052fa:	461e      	mov	r6, r3
 80052fc:	da0d      	bge.n	800531a <__swhatbuf_r+0x2e>
 80052fe:	89a3      	ldrh	r3, [r4, #12]
 8005300:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005304:	f04f 0100 	mov.w	r1, #0
 8005308:	bf14      	ite	ne
 800530a:	2340      	movne	r3, #64	@ 0x40
 800530c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005310:	2000      	movs	r0, #0
 8005312:	6031      	str	r1, [r6, #0]
 8005314:	602b      	str	r3, [r5, #0]
 8005316:	b016      	add	sp, #88	@ 0x58
 8005318:	bd70      	pop	{r4, r5, r6, pc}
 800531a:	466a      	mov	r2, sp
 800531c:	f000 f848 	bl	80053b0 <_fstat_r>
 8005320:	2800      	cmp	r0, #0
 8005322:	dbec      	blt.n	80052fe <__swhatbuf_r+0x12>
 8005324:	9901      	ldr	r1, [sp, #4]
 8005326:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800532a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800532e:	4259      	negs	r1, r3
 8005330:	4159      	adcs	r1, r3
 8005332:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005336:	e7eb      	b.n	8005310 <__swhatbuf_r+0x24>

08005338 <__smakebuf_r>:
 8005338:	898b      	ldrh	r3, [r1, #12]
 800533a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800533c:	079d      	lsls	r5, r3, #30
 800533e:	4606      	mov	r6, r0
 8005340:	460c      	mov	r4, r1
 8005342:	d507      	bpl.n	8005354 <__smakebuf_r+0x1c>
 8005344:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005348:	6023      	str	r3, [r4, #0]
 800534a:	6123      	str	r3, [r4, #16]
 800534c:	2301      	movs	r3, #1
 800534e:	6163      	str	r3, [r4, #20]
 8005350:	b003      	add	sp, #12
 8005352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005354:	ab01      	add	r3, sp, #4
 8005356:	466a      	mov	r2, sp
 8005358:	f7ff ffc8 	bl	80052ec <__swhatbuf_r>
 800535c:	9f00      	ldr	r7, [sp, #0]
 800535e:	4605      	mov	r5, r0
 8005360:	4639      	mov	r1, r7
 8005362:	4630      	mov	r0, r6
 8005364:	f7ff f9ca 	bl	80046fc <_malloc_r>
 8005368:	b948      	cbnz	r0, 800537e <__smakebuf_r+0x46>
 800536a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800536e:	059a      	lsls	r2, r3, #22
 8005370:	d4ee      	bmi.n	8005350 <__smakebuf_r+0x18>
 8005372:	f023 0303 	bic.w	r3, r3, #3
 8005376:	f043 0302 	orr.w	r3, r3, #2
 800537a:	81a3      	strh	r3, [r4, #12]
 800537c:	e7e2      	b.n	8005344 <__smakebuf_r+0xc>
 800537e:	89a3      	ldrh	r3, [r4, #12]
 8005380:	6020      	str	r0, [r4, #0]
 8005382:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005386:	81a3      	strh	r3, [r4, #12]
 8005388:	9b01      	ldr	r3, [sp, #4]
 800538a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800538e:	b15b      	cbz	r3, 80053a8 <__smakebuf_r+0x70>
 8005390:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005394:	4630      	mov	r0, r6
 8005396:	f000 f81d 	bl	80053d4 <_isatty_r>
 800539a:	b128      	cbz	r0, 80053a8 <__smakebuf_r+0x70>
 800539c:	89a3      	ldrh	r3, [r4, #12]
 800539e:	f023 0303 	bic.w	r3, r3, #3
 80053a2:	f043 0301 	orr.w	r3, r3, #1
 80053a6:	81a3      	strh	r3, [r4, #12]
 80053a8:	89a3      	ldrh	r3, [r4, #12]
 80053aa:	431d      	orrs	r5, r3
 80053ac:	81a5      	strh	r5, [r4, #12]
 80053ae:	e7cf      	b.n	8005350 <__smakebuf_r+0x18>

080053b0 <_fstat_r>:
 80053b0:	b538      	push	{r3, r4, r5, lr}
 80053b2:	4d07      	ldr	r5, [pc, #28]	@ (80053d0 <_fstat_r+0x20>)
 80053b4:	2300      	movs	r3, #0
 80053b6:	4604      	mov	r4, r0
 80053b8:	4608      	mov	r0, r1
 80053ba:	4611      	mov	r1, r2
 80053bc:	602b      	str	r3, [r5, #0]
 80053be:	f7fb fc77 	bl	8000cb0 <_fstat>
 80053c2:	1c43      	adds	r3, r0, #1
 80053c4:	d102      	bne.n	80053cc <_fstat_r+0x1c>
 80053c6:	682b      	ldr	r3, [r5, #0]
 80053c8:	b103      	cbz	r3, 80053cc <_fstat_r+0x1c>
 80053ca:	6023      	str	r3, [r4, #0]
 80053cc:	bd38      	pop	{r3, r4, r5, pc}
 80053ce:	bf00      	nop
 80053d0:	200002bc 	.word	0x200002bc

080053d4 <_isatty_r>:
 80053d4:	b538      	push	{r3, r4, r5, lr}
 80053d6:	4d06      	ldr	r5, [pc, #24]	@ (80053f0 <_isatty_r+0x1c>)
 80053d8:	2300      	movs	r3, #0
 80053da:	4604      	mov	r4, r0
 80053dc:	4608      	mov	r0, r1
 80053de:	602b      	str	r3, [r5, #0]
 80053e0:	f7fb fc76 	bl	8000cd0 <_isatty>
 80053e4:	1c43      	adds	r3, r0, #1
 80053e6:	d102      	bne.n	80053ee <_isatty_r+0x1a>
 80053e8:	682b      	ldr	r3, [r5, #0]
 80053ea:	b103      	cbz	r3, 80053ee <_isatty_r+0x1a>
 80053ec:	6023      	str	r3, [r4, #0]
 80053ee:	bd38      	pop	{r3, r4, r5, pc}
 80053f0:	200002bc 	.word	0x200002bc

080053f4 <_raise_r>:
 80053f4:	291f      	cmp	r1, #31
 80053f6:	b538      	push	{r3, r4, r5, lr}
 80053f8:	4605      	mov	r5, r0
 80053fa:	460c      	mov	r4, r1
 80053fc:	d904      	bls.n	8005408 <_raise_r+0x14>
 80053fe:	2316      	movs	r3, #22
 8005400:	6003      	str	r3, [r0, #0]
 8005402:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005406:	bd38      	pop	{r3, r4, r5, pc}
 8005408:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800540a:	b112      	cbz	r2, 8005412 <_raise_r+0x1e>
 800540c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005410:	b94b      	cbnz	r3, 8005426 <_raise_r+0x32>
 8005412:	4628      	mov	r0, r5
 8005414:	f000 f830 	bl	8005478 <_getpid_r>
 8005418:	4622      	mov	r2, r4
 800541a:	4601      	mov	r1, r0
 800541c:	4628      	mov	r0, r5
 800541e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005422:	f000 b817 	b.w	8005454 <_kill_r>
 8005426:	2b01      	cmp	r3, #1
 8005428:	d00a      	beq.n	8005440 <_raise_r+0x4c>
 800542a:	1c59      	adds	r1, r3, #1
 800542c:	d103      	bne.n	8005436 <_raise_r+0x42>
 800542e:	2316      	movs	r3, #22
 8005430:	6003      	str	r3, [r0, #0]
 8005432:	2001      	movs	r0, #1
 8005434:	e7e7      	b.n	8005406 <_raise_r+0x12>
 8005436:	2100      	movs	r1, #0
 8005438:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800543c:	4620      	mov	r0, r4
 800543e:	4798      	blx	r3
 8005440:	2000      	movs	r0, #0
 8005442:	e7e0      	b.n	8005406 <_raise_r+0x12>

08005444 <raise>:
 8005444:	4b02      	ldr	r3, [pc, #8]	@ (8005450 <raise+0xc>)
 8005446:	4601      	mov	r1, r0
 8005448:	6818      	ldr	r0, [r3, #0]
 800544a:	f7ff bfd3 	b.w	80053f4 <_raise_r>
 800544e:	bf00      	nop
 8005450:	20000018 	.word	0x20000018

08005454 <_kill_r>:
 8005454:	b538      	push	{r3, r4, r5, lr}
 8005456:	4d07      	ldr	r5, [pc, #28]	@ (8005474 <_kill_r+0x20>)
 8005458:	2300      	movs	r3, #0
 800545a:	4604      	mov	r4, r0
 800545c:	4608      	mov	r0, r1
 800545e:	4611      	mov	r1, r2
 8005460:	602b      	str	r3, [r5, #0]
 8005462:	f7fb fbc5 	bl	8000bf0 <_kill>
 8005466:	1c43      	adds	r3, r0, #1
 8005468:	d102      	bne.n	8005470 <_kill_r+0x1c>
 800546a:	682b      	ldr	r3, [r5, #0]
 800546c:	b103      	cbz	r3, 8005470 <_kill_r+0x1c>
 800546e:	6023      	str	r3, [r4, #0]
 8005470:	bd38      	pop	{r3, r4, r5, pc}
 8005472:	bf00      	nop
 8005474:	200002bc 	.word	0x200002bc

08005478 <_getpid_r>:
 8005478:	f7fb bbb2 	b.w	8000be0 <_getpid>

0800547c <_init>:
 800547c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800547e:	bf00      	nop
 8005480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005482:	bc08      	pop	{r3}
 8005484:	469e      	mov	lr, r3
 8005486:	4770      	bx	lr

08005488 <_fini>:
 8005488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548a:	bf00      	nop
 800548c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800548e:	bc08      	pop	{r3}
 8005490:	469e      	mov	lr, r3
 8005492:	4770      	bx	lr
