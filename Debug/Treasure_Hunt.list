
Treasure_Hunt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090fc  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  080092c0  080092c0  0000a2c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800976c  0800976c  0000b24c  2**0
                  CONTENTS
  4 .ARM          00000008  0800976c  0800976c  0000a76c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009774  08009774  0000b24c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009774  08009774  0000a774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009778  08009778  0000a778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000024c  20000000  0800977c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  2000024c  080099c8  0000b24c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000514  080099c8  0000b514  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b24c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001913d  00000000  00000000  0000b27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003466  00000000  00000000  000243b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  00027820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010c9  00000000  00000000  00028db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d492  00000000  00000000  00029e81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aef9  00000000  00000000  00057313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001120ea  00000000  00000000  0007220c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001842f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c48  00000000  00000000  0018433c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0018af84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000024c 	.word	0x2000024c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080092a4 	.word	0x080092a4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000250 	.word	0x20000250
 80001fc:	080092a4 	.word	0x080092a4

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <strcmp>:
 80002b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002b8:	2a01      	cmp	r2, #1
 80002ba:	bf28      	it	cs
 80002bc:	429a      	cmpcs	r2, r3
 80002be:	d0f7      	beq.n	80002b0 <strcmp>
 80002c0:	1ad0      	subs	r0, r2, r3
 80002c2:	4770      	bx	lr

080002c4 <__aeabi_drsub>:
 80002c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c8:	e002      	b.n	80002d0 <__adddf3>
 80002ca:	bf00      	nop

080002cc <__aeabi_dsub>:
 80002cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d0 <__adddf3>:
 80002d0:	b530      	push	{r4, r5, lr}
 80002d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002da:	ea94 0f05 	teq	r4, r5
 80002de:	bf08      	it	eq
 80002e0:	ea90 0f02 	teqeq	r0, r2
 80002e4:	bf1f      	itttt	ne
 80002e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f6:	f000 80e2 	beq.w	80004be <__adddf3+0x1ee>
 80002fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000302:	bfb8      	it	lt
 8000304:	426d      	neglt	r5, r5
 8000306:	dd0c      	ble.n	8000322 <__adddf3+0x52>
 8000308:	442c      	add	r4, r5
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	ea82 0000 	eor.w	r0, r2, r0
 8000316:	ea83 0101 	eor.w	r1, r3, r1
 800031a:	ea80 0202 	eor.w	r2, r0, r2
 800031e:	ea81 0303 	eor.w	r3, r1, r3
 8000322:	2d36      	cmp	r5, #54	@ 0x36
 8000324:	bf88      	it	hi
 8000326:	bd30      	pophi	{r4, r5, pc}
 8000328:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800032c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000330:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000334:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x70>
 800033a:	4240      	negs	r0, r0
 800033c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000340:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000344:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000348:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800034c:	d002      	beq.n	8000354 <__adddf3+0x84>
 800034e:	4252      	negs	r2, r2
 8000350:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000354:	ea94 0f05 	teq	r4, r5
 8000358:	f000 80a7 	beq.w	80004aa <__adddf3+0x1da>
 800035c:	f1a4 0401 	sub.w	r4, r4, #1
 8000360:	f1d5 0e20 	rsbs	lr, r5, #32
 8000364:	db0d      	blt.n	8000382 <__adddf3+0xb2>
 8000366:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036a:	fa22 f205 	lsr.w	r2, r2, r5
 800036e:	1880      	adds	r0, r0, r2
 8000370:	f141 0100 	adc.w	r1, r1, #0
 8000374:	fa03 f20e 	lsl.w	r2, r3, lr
 8000378:	1880      	adds	r0, r0, r2
 800037a:	fa43 f305 	asr.w	r3, r3, r5
 800037e:	4159      	adcs	r1, r3
 8000380:	e00e      	b.n	80003a0 <__adddf3+0xd0>
 8000382:	f1a5 0520 	sub.w	r5, r5, #32
 8000386:	f10e 0e20 	add.w	lr, lr, #32
 800038a:	2a01      	cmp	r2, #1
 800038c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000390:	bf28      	it	cs
 8000392:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	18c0      	adds	r0, r0, r3
 800039c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a4:	d507      	bpl.n	80003b6 <__adddf3+0xe6>
 80003a6:	f04f 0e00 	mov.w	lr, #0
 80003aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003ba:	d31b      	bcc.n	80003f4 <__adddf3+0x124>
 80003bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c0:	d30c      	bcc.n	80003dc <__adddf3+0x10c>
 80003c2:	0849      	lsrs	r1, r1, #1
 80003c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003cc:	f104 0401 	add.w	r4, r4, #1
 80003d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d8:	f080 809a 	bcs.w	8000510 <__adddf3+0x240>
 80003dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e0:	bf08      	it	eq
 80003e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e6:	f150 0000 	adcs.w	r0, r0, #0
 80003ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ee:	ea41 0105 	orr.w	r1, r1, r5
 80003f2:	bd30      	pop	{r4, r5, pc}
 80003f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f8:	4140      	adcs	r0, r0
 80003fa:	eb41 0101 	adc.w	r1, r1, r1
 80003fe:	3c01      	subs	r4, #1
 8000400:	bf28      	it	cs
 8000402:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000406:	d2e9      	bcs.n	80003dc <__adddf3+0x10c>
 8000408:	f091 0f00 	teq	r1, #0
 800040c:	bf04      	itt	eq
 800040e:	4601      	moveq	r1, r0
 8000410:	2000      	moveq	r0, #0
 8000412:	fab1 f381 	clz	r3, r1
 8000416:	bf08      	it	eq
 8000418:	3320      	addeq	r3, #32
 800041a:	f1a3 030b 	sub.w	r3, r3, #11
 800041e:	f1b3 0220 	subs.w	r2, r3, #32
 8000422:	da0c      	bge.n	800043e <__adddf3+0x16e>
 8000424:	320c      	adds	r2, #12
 8000426:	dd08      	ble.n	800043a <__adddf3+0x16a>
 8000428:	f102 0c14 	add.w	ip, r2, #20
 800042c:	f1c2 020c 	rsb	r2, r2, #12
 8000430:	fa01 f00c 	lsl.w	r0, r1, ip
 8000434:	fa21 f102 	lsr.w	r1, r1, r2
 8000438:	e00c      	b.n	8000454 <__adddf3+0x184>
 800043a:	f102 0214 	add.w	r2, r2, #20
 800043e:	bfd8      	it	le
 8000440:	f1c2 0c20 	rsble	ip, r2, #32
 8000444:	fa01 f102 	lsl.w	r1, r1, r2
 8000448:	fa20 fc0c 	lsr.w	ip, r0, ip
 800044c:	bfdc      	itt	le
 800044e:	ea41 010c 	orrle.w	r1, r1, ip
 8000452:	4090      	lslle	r0, r2
 8000454:	1ae4      	subs	r4, r4, r3
 8000456:	bfa2      	ittt	ge
 8000458:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800045c:	4329      	orrge	r1, r5
 800045e:	bd30      	popge	{r4, r5, pc}
 8000460:	ea6f 0404 	mvn.w	r4, r4
 8000464:	3c1f      	subs	r4, #31
 8000466:	da1c      	bge.n	80004a2 <__adddf3+0x1d2>
 8000468:	340c      	adds	r4, #12
 800046a:	dc0e      	bgt.n	800048a <__adddf3+0x1ba>
 800046c:	f104 0414 	add.w	r4, r4, #20
 8000470:	f1c4 0220 	rsb	r2, r4, #32
 8000474:	fa20 f004 	lsr.w	r0, r0, r4
 8000478:	fa01 f302 	lsl.w	r3, r1, r2
 800047c:	ea40 0003 	orr.w	r0, r0, r3
 8000480:	fa21 f304 	lsr.w	r3, r1, r4
 8000484:	ea45 0103 	orr.w	r1, r5, r3
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	f1c4 040c 	rsb	r4, r4, #12
 800048e:	f1c4 0220 	rsb	r2, r4, #32
 8000492:	fa20 f002 	lsr.w	r0, r0, r2
 8000496:	fa01 f304 	lsl.w	r3, r1, r4
 800049a:	ea40 0003 	orr.w	r0, r0, r3
 800049e:	4629      	mov	r1, r5
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	fa21 f004 	lsr.w	r0, r1, r4
 80004a6:	4629      	mov	r1, r5
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	f094 0f00 	teq	r4, #0
 80004ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b2:	bf06      	itte	eq
 80004b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b8:	3401      	addeq	r4, #1
 80004ba:	3d01      	subne	r5, #1
 80004bc:	e74e      	b.n	800035c <__adddf3+0x8c>
 80004be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c2:	bf18      	it	ne
 80004c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c8:	d029      	beq.n	800051e <__adddf3+0x24e>
 80004ca:	ea94 0f05 	teq	r4, r5
 80004ce:	bf08      	it	eq
 80004d0:	ea90 0f02 	teqeq	r0, r2
 80004d4:	d005      	beq.n	80004e2 <__adddf3+0x212>
 80004d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004da:	bf04      	itt	eq
 80004dc:	4619      	moveq	r1, r3
 80004de:	4610      	moveq	r0, r2
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea91 0f03 	teq	r1, r3
 80004e6:	bf1e      	ittt	ne
 80004e8:	2100      	movne	r1, #0
 80004ea:	2000      	movne	r0, #0
 80004ec:	bd30      	popne	{r4, r5, pc}
 80004ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f2:	d105      	bne.n	8000500 <__adddf3+0x230>
 80004f4:	0040      	lsls	r0, r0, #1
 80004f6:	4149      	adcs	r1, r1
 80004f8:	bf28      	it	cs
 80004fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fe:	bd30      	pop	{r4, r5, pc}
 8000500:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000504:	bf3c      	itt	cc
 8000506:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050a:	bd30      	popcc	{r4, r5, pc}
 800050c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000510:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000514:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000518:	f04f 0000 	mov.w	r0, #0
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000522:	bf1a      	itte	ne
 8000524:	4619      	movne	r1, r3
 8000526:	4610      	movne	r0, r2
 8000528:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800052c:	bf1c      	itt	ne
 800052e:	460b      	movne	r3, r1
 8000530:	4602      	movne	r2, r0
 8000532:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000536:	bf06      	itte	eq
 8000538:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800053c:	ea91 0f03 	teqeq	r1, r3
 8000540:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	bf00      	nop

08000548 <__aeabi_ui2d>:
 8000548:	f090 0f00 	teq	r0, #0
 800054c:	bf04      	itt	eq
 800054e:	2100      	moveq	r1, #0
 8000550:	4770      	bxeq	lr
 8000552:	b530      	push	{r4, r5, lr}
 8000554:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000558:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800055c:	f04f 0500 	mov.w	r5, #0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e750      	b.n	8000408 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_i2d>:
 8000568:	f090 0f00 	teq	r0, #0
 800056c:	bf04      	itt	eq
 800056e:	2100      	moveq	r1, #0
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000578:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800057c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000580:	bf48      	it	mi
 8000582:	4240      	negmi	r0, r0
 8000584:	f04f 0100 	mov.w	r1, #0
 8000588:	e73e      	b.n	8000408 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_f2d>:
 800058c:	0042      	lsls	r2, r0, #1
 800058e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000592:	ea4f 0131 	mov.w	r1, r1, rrx
 8000596:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059a:	bf1f      	itttt	ne
 800059c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a8:	4770      	bxne	lr
 80005aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ae:	bf08      	it	eq
 80005b0:	4770      	bxeq	lr
 80005b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b6:	bf04      	itt	eq
 80005b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005cc:	e71c      	b.n	8000408 <__adddf3+0x138>
 80005ce:	bf00      	nop

080005d0 <__aeabi_ul2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f04f 0500 	mov.w	r5, #0
 80005de:	e00a      	b.n	80005f6 <__aeabi_l2d+0x16>

080005e0 <__aeabi_l2d>:
 80005e0:	ea50 0201 	orrs.w	r2, r0, r1
 80005e4:	bf08      	it	eq
 80005e6:	4770      	bxeq	lr
 80005e8:	b530      	push	{r4, r5, lr}
 80005ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ee:	d502      	bpl.n	80005f6 <__aeabi_l2d+0x16>
 80005f0:	4240      	negs	r0, r0
 80005f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000602:	f43f aed8 	beq.w	80003b6 <__adddf3+0xe6>
 8000606:	f04f 0203 	mov.w	r2, #3
 800060a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060e:	bf18      	it	ne
 8000610:	3203      	addne	r2, #3
 8000612:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000616:	bf18      	it	ne
 8000618:	3203      	addne	r2, #3
 800061a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061e:	f1c2 0320 	rsb	r3, r2, #32
 8000622:	fa00 fc03 	lsl.w	ip, r0, r3
 8000626:	fa20 f002 	lsr.w	r0, r0, r2
 800062a:	fa01 fe03 	lsl.w	lr, r1, r3
 800062e:	ea40 000e 	orr.w	r0, r0, lr
 8000632:	fa21 f102 	lsr.w	r1, r1, r2
 8000636:	4414      	add	r4, r2
 8000638:	e6bd      	b.n	80003b6 <__adddf3+0xe6>
 800063a:	bf00      	nop

0800063c <__aeabi_dmul>:
 800063c:	b570      	push	{r4, r5, r6, lr}
 800063e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000642:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000646:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064a:	bf1d      	ittte	ne
 800064c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000650:	ea94 0f0c 	teqne	r4, ip
 8000654:	ea95 0f0c 	teqne	r5, ip
 8000658:	f000 f8de 	bleq	8000818 <__aeabi_dmul+0x1dc>
 800065c:	442c      	add	r4, r5
 800065e:	ea81 0603 	eor.w	r6, r1, r3
 8000662:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000666:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066e:	bf18      	it	ne
 8000670:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000678:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800067c:	d038      	beq.n	80006f0 <__aeabi_dmul+0xb4>
 800067e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000682:	f04f 0500 	mov.w	r5, #0
 8000686:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000692:	f04f 0600 	mov.w	r6, #0
 8000696:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069a:	f09c 0f00 	teq	ip, #0
 800069e:	bf18      	it	ne
 80006a0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006ac:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b0:	d204      	bcs.n	80006bc <__aeabi_dmul+0x80>
 80006b2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b6:	416d      	adcs	r5, r5
 80006b8:	eb46 0606 	adc.w	r6, r6, r6
 80006bc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006cc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d4:	bf88      	it	hi
 80006d6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006da:	d81e      	bhi.n	800071a <__aeabi_dmul+0xde>
 80006dc:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e0:	bf08      	it	eq
 80006e2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e6:	f150 0000 	adcs.w	r0, r0, #0
 80006ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f4:	ea46 0101 	orr.w	r1, r6, r1
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000704:	bfc2      	ittt	gt
 8000706:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070e:	bd70      	popgt	{r4, r5, r6, pc}
 8000710:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000714:	f04f 0e00 	mov.w	lr, #0
 8000718:	3c01      	subs	r4, #1
 800071a:	f300 80ab 	bgt.w	8000874 <__aeabi_dmul+0x238>
 800071e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000722:	bfde      	ittt	le
 8000724:	2000      	movle	r0, #0
 8000726:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072a:	bd70      	pople	{r4, r5, r6, pc}
 800072c:	f1c4 0400 	rsb	r4, r4, #0
 8000730:	3c20      	subs	r4, #32
 8000732:	da35      	bge.n	80007a0 <__aeabi_dmul+0x164>
 8000734:	340c      	adds	r4, #12
 8000736:	dc1b      	bgt.n	8000770 <__aeabi_dmul+0x134>
 8000738:	f104 0414 	add.w	r4, r4, #20
 800073c:	f1c4 0520 	rsb	r5, r4, #32
 8000740:	fa00 f305 	lsl.w	r3, r0, r5
 8000744:	fa20 f004 	lsr.w	r0, r0, r4
 8000748:	fa01 f205 	lsl.w	r2, r1, r5
 800074c:	ea40 0002 	orr.w	r0, r0, r2
 8000750:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000754:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	fa21 f604 	lsr.w	r6, r1, r4
 8000760:	eb42 0106 	adc.w	r1, r2, r6
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 040c 	rsb	r4, r4, #12
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f304 	lsl.w	r3, r0, r4
 800077c:	fa20 f005 	lsr.w	r0, r0, r5
 8000780:	fa01 f204 	lsl.w	r2, r1, r4
 8000784:	ea40 0002 	orr.w	r0, r0, r2
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000790:	f141 0100 	adc.w	r1, r1, #0
 8000794:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000798:	bf08      	it	eq
 800079a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079e:	bd70      	pop	{r4, r5, r6, pc}
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f205 	lsl.w	r2, r0, r5
 80007a8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007ac:	fa20 f304 	lsr.w	r3, r0, r4
 80007b0:	fa01 f205 	lsl.w	r2, r1, r5
 80007b4:	ea43 0302 	orr.w	r3, r3, r2
 80007b8:	fa21 f004 	lsr.w	r0, r1, r4
 80007bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c0:	fa21 f204 	lsr.w	r2, r1, r4
 80007c4:	ea20 0002 	bic.w	r0, r0, r2
 80007c8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d0:	bf08      	it	eq
 80007d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d6:	bd70      	pop	{r4, r5, r6, pc}
 80007d8:	f094 0f00 	teq	r4, #0
 80007dc:	d10f      	bne.n	80007fe <__aeabi_dmul+0x1c2>
 80007de:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e2:	0040      	lsls	r0, r0, #1
 80007e4:	eb41 0101 	adc.w	r1, r1, r1
 80007e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007ec:	bf08      	it	eq
 80007ee:	3c01      	subeq	r4, #1
 80007f0:	d0f7      	beq.n	80007e2 <__aeabi_dmul+0x1a6>
 80007f2:	ea41 0106 	orr.w	r1, r1, r6
 80007f6:	f095 0f00 	teq	r5, #0
 80007fa:	bf18      	it	ne
 80007fc:	4770      	bxne	lr
 80007fe:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000802:	0052      	lsls	r2, r2, #1
 8000804:	eb43 0303 	adc.w	r3, r3, r3
 8000808:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800080c:	bf08      	it	eq
 800080e:	3d01      	subeq	r5, #1
 8000810:	d0f7      	beq.n	8000802 <__aeabi_dmul+0x1c6>
 8000812:	ea43 0306 	orr.w	r3, r3, r6
 8000816:	4770      	bx	lr
 8000818:	ea94 0f0c 	teq	r4, ip
 800081c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000820:	bf18      	it	ne
 8000822:	ea95 0f0c 	teqne	r5, ip
 8000826:	d00c      	beq.n	8000842 <__aeabi_dmul+0x206>
 8000828:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082c:	bf18      	it	ne
 800082e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000832:	d1d1      	bne.n	80007d8 <__aeabi_dmul+0x19c>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000846:	bf06      	itte	eq
 8000848:	4610      	moveq	r0, r2
 800084a:	4619      	moveq	r1, r3
 800084c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000850:	d019      	beq.n	8000886 <__aeabi_dmul+0x24a>
 8000852:	ea94 0f0c 	teq	r4, ip
 8000856:	d102      	bne.n	800085e <__aeabi_dmul+0x222>
 8000858:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800085c:	d113      	bne.n	8000886 <__aeabi_dmul+0x24a>
 800085e:	ea95 0f0c 	teq	r5, ip
 8000862:	d105      	bne.n	8000870 <__aeabi_dmul+0x234>
 8000864:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000868:	bf1c      	itt	ne
 800086a:	4610      	movne	r0, r2
 800086c:	4619      	movne	r1, r3
 800086e:	d10a      	bne.n	8000886 <__aeabi_dmul+0x24a>
 8000870:	ea81 0103 	eor.w	r1, r1, r3
 8000874:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000878:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800087c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000880:	f04f 0000 	mov.w	r0, #0
 8000884:	bd70      	pop	{r4, r5, r6, pc}
 8000886:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088e:	bd70      	pop	{r4, r5, r6, pc}

08000890 <__aeabi_ddiv>:
 8000890:	b570      	push	{r4, r5, r6, lr}
 8000892:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000896:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089e:	bf1d      	ittte	ne
 80008a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a4:	ea94 0f0c 	teqne	r4, ip
 80008a8:	ea95 0f0c 	teqne	r5, ip
 80008ac:	f000 f8a7 	bleq	80009fe <__aeabi_ddiv+0x16e>
 80008b0:	eba4 0405 	sub.w	r4, r4, r5
 80008b4:	ea81 0e03 	eor.w	lr, r1, r3
 80008b8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c0:	f000 8088 	beq.w	80009d4 <__aeabi_ddiv+0x144>
 80008c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008cc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008dc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e4:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e8:	429d      	cmp	r5, r3
 80008ea:	bf08      	it	eq
 80008ec:	4296      	cmpeq	r6, r2
 80008ee:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f6:	d202      	bcs.n	80008fe <__aeabi_ddiv+0x6e>
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	1ab6      	subs	r6, r6, r2
 8000900:	eb65 0503 	sbc.w	r5, r5, r3
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 000c 	orrcs.w	r0, r0, ip
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800093c:	085b      	lsrs	r3, r3, #1
 800093e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000942:	ebb6 0e02 	subs.w	lr, r6, r2
 8000946:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094a:	bf22      	ittt	cs
 800094c:	1ab6      	subcs	r6, r6, r2
 800094e:	4675      	movcs	r5, lr
 8000950:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000954:	085b      	lsrs	r3, r3, #1
 8000956:	ea4f 0232 	mov.w	r2, r2, rrx
 800095a:	ebb6 0e02 	subs.w	lr, r6, r2
 800095e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000962:	bf22      	ittt	cs
 8000964:	1ab6      	subcs	r6, r6, r2
 8000966:	4675      	movcs	r5, lr
 8000968:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800096c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000970:	d018      	beq.n	80009a4 <__aeabi_ddiv+0x114>
 8000972:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000976:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000982:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000986:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098e:	d1c0      	bne.n	8000912 <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	d10b      	bne.n	80009ae <__aeabi_ddiv+0x11e>
 8000996:	ea41 0100 	orr.w	r1, r1, r0
 800099a:	f04f 0000 	mov.w	r0, #0
 800099e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a2:	e7b6      	b.n	8000912 <__aeabi_ddiv+0x82>
 80009a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a8:	bf04      	itt	eq
 80009aa:	4301      	orreq	r1, r0
 80009ac:	2000      	moveq	r0, #0
 80009ae:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b2:	bf88      	it	hi
 80009b4:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b8:	f63f aeaf 	bhi.w	800071a <__aeabi_dmul+0xde>
 80009bc:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c0:	bf04      	itt	eq
 80009c2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ca:	f150 0000 	adcs.w	r0, r0, #0
 80009ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d2:	bd70      	pop	{r4, r5, r6, pc}
 80009d4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009dc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e0:	bfc2      	ittt	gt
 80009e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ea:	bd70      	popgt	{r4, r5, r6, pc}
 80009ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f0:	f04f 0e00 	mov.w	lr, #0
 80009f4:	3c01      	subs	r4, #1
 80009f6:	e690      	b.n	800071a <__aeabi_dmul+0xde>
 80009f8:	ea45 0e06 	orr.w	lr, r5, r6
 80009fc:	e68d      	b.n	800071a <__aeabi_dmul+0xde>
 80009fe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a02:	ea94 0f0c 	teq	r4, ip
 8000a06:	bf08      	it	eq
 8000a08:	ea95 0f0c 	teqeq	r5, ip
 8000a0c:	f43f af3b 	beq.w	8000886 <__aeabi_dmul+0x24a>
 8000a10:	ea94 0f0c 	teq	r4, ip
 8000a14:	d10a      	bne.n	8000a2c <__aeabi_ddiv+0x19c>
 8000a16:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1a:	f47f af34 	bne.w	8000886 <__aeabi_dmul+0x24a>
 8000a1e:	ea95 0f0c 	teq	r5, ip
 8000a22:	f47f af25 	bne.w	8000870 <__aeabi_dmul+0x234>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e72c      	b.n	8000886 <__aeabi_dmul+0x24a>
 8000a2c:	ea95 0f0c 	teq	r5, ip
 8000a30:	d106      	bne.n	8000a40 <__aeabi_ddiv+0x1b0>
 8000a32:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a36:	f43f aefd 	beq.w	8000834 <__aeabi_dmul+0x1f8>
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	e722      	b.n	8000886 <__aeabi_dmul+0x24a>
 8000a40:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a44:	bf18      	it	ne
 8000a46:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4a:	f47f aec5 	bne.w	80007d8 <__aeabi_dmul+0x19c>
 8000a4e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a52:	f47f af0d 	bne.w	8000870 <__aeabi_dmul+0x234>
 8000a56:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5a:	f47f aeeb 	bne.w	8000834 <__aeabi_dmul+0x1f8>
 8000a5e:	e712      	b.n	8000886 <__aeabi_dmul+0x24a>

08000a60 <__gedf2>:
 8000a60:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a64:	e006      	b.n	8000a74 <__cmpdf2+0x4>
 8000a66:	bf00      	nop

08000a68 <__ledf2>:
 8000a68:	f04f 0c01 	mov.w	ip, #1
 8000a6c:	e002      	b.n	8000a74 <__cmpdf2+0x4>
 8000a6e:	bf00      	nop

08000a70 <__cmpdf2>:
 8000a70:	f04f 0c01 	mov.w	ip, #1
 8000a74:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	bf18      	it	ne
 8000a86:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8a:	d01b      	beq.n	8000ac4 <__cmpdf2+0x54>
 8000a8c:	b001      	add	sp, #4
 8000a8e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a92:	bf0c      	ite	eq
 8000a94:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a98:	ea91 0f03 	teqne	r1, r3
 8000a9c:	bf02      	ittt	eq
 8000a9e:	ea90 0f02 	teqeq	r0, r2
 8000aa2:	2000      	moveq	r0, #0
 8000aa4:	4770      	bxeq	lr
 8000aa6:	f110 0f00 	cmn.w	r0, #0
 8000aaa:	ea91 0f03 	teq	r1, r3
 8000aae:	bf58      	it	pl
 8000ab0:	4299      	cmppl	r1, r3
 8000ab2:	bf08      	it	eq
 8000ab4:	4290      	cmpeq	r0, r2
 8000ab6:	bf2c      	ite	cs
 8000ab8:	17d8      	asrcs	r0, r3, #31
 8000aba:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000abe:	f040 0001 	orr.w	r0, r0, #1
 8000ac2:	4770      	bx	lr
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__cmpdf2+0x64>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d107      	bne.n	8000ae4 <__cmpdf2+0x74>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d1d6      	bne.n	8000a8c <__cmpdf2+0x1c>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d0d3      	beq.n	8000a8c <__cmpdf2+0x1c>
 8000ae4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_cdrcmple>:
 8000aec:	4684      	mov	ip, r0
 8000aee:	4610      	mov	r0, r2
 8000af0:	4662      	mov	r2, ip
 8000af2:	468c      	mov	ip, r1
 8000af4:	4619      	mov	r1, r3
 8000af6:	4663      	mov	r3, ip
 8000af8:	e000      	b.n	8000afc <__aeabi_cdcmpeq>
 8000afa:	bf00      	nop

08000afc <__aeabi_cdcmpeq>:
 8000afc:	b501      	push	{r0, lr}
 8000afe:	f7ff ffb7 	bl	8000a70 <__cmpdf2>
 8000b02:	2800      	cmp	r0, #0
 8000b04:	bf48      	it	mi
 8000b06:	f110 0f00 	cmnmi.w	r0, #0
 8000b0a:	bd01      	pop	{r0, pc}

08000b0c <__aeabi_dcmpeq>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff fff4 	bl	8000afc <__aeabi_cdcmpeq>
 8000b14:	bf0c      	ite	eq
 8000b16:	2001      	moveq	r0, #1
 8000b18:	2000      	movne	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmplt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffea 	bl	8000afc <__aeabi_cdcmpeq>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmple>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffe0 	bl	8000afc <__aeabi_cdcmpeq>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpge>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffce 	bl	8000aec <__aeabi_cdrcmple>
 8000b50:	bf94      	ite	ls
 8000b52:	2001      	movls	r0, #1
 8000b54:	2000      	movhi	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpgt>:
 8000b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b60:	f7ff ffc4 	bl	8000aec <__aeabi_cdrcmple>
 8000b64:	bf34      	ite	cc
 8000b66:	2001      	movcc	r0, #1
 8000b68:	2000      	movcs	r0, #0
 8000b6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6e:	bf00      	nop

08000b70 <__aeabi_dcmpun>:
 8000b70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d102      	bne.n	8000b80 <__aeabi_dcmpun+0x10>
 8000b7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7e:	d10a      	bne.n	8000b96 <__aeabi_dcmpun+0x26>
 8000b80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__aeabi_dcmpun+0x20>
 8000b8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8e:	d102      	bne.n	8000b96 <__aeabi_dcmpun+0x26>
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	f04f 0001 	mov.w	r0, #1
 8000b9a:	4770      	bx	lr

08000b9c <__aeabi_d2iz>:
 8000b9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba4:	d215      	bcs.n	8000bd2 <__aeabi_d2iz+0x36>
 8000ba6:	d511      	bpl.n	8000bcc <__aeabi_d2iz+0x30>
 8000ba8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb0:	d912      	bls.n	8000bd8 <__aeabi_d2iz+0x3c>
 8000bb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bbe:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	4770      	bx	lr
 8000bcc:	f04f 0000 	mov.w	r0, #0
 8000bd0:	4770      	bx	lr
 8000bd2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd6:	d105      	bne.n	8000be4 <__aeabi_d2iz+0x48>
 8000bd8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bdc:	bf08      	it	eq
 8000bde:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop

08000bec <__aeabi_uldivmod>:
 8000bec:	b953      	cbnz	r3, 8000c04 <__aeabi_uldivmod+0x18>
 8000bee:	b94a      	cbnz	r2, 8000c04 <__aeabi_uldivmod+0x18>
 8000bf0:	2900      	cmp	r1, #0
 8000bf2:	bf08      	it	eq
 8000bf4:	2800      	cmpeq	r0, #0
 8000bf6:	bf1c      	itt	ne
 8000bf8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bfc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c00:	f000 b96a 	b.w	8000ed8 <__aeabi_idiv0>
 8000c04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c0c:	f000 f806 	bl	8000c1c <__udivmoddi4>
 8000c10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c18:	b004      	add	sp, #16
 8000c1a:	4770      	bx	lr

08000c1c <__udivmoddi4>:
 8000c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c20:	9d08      	ldr	r5, [sp, #32]
 8000c22:	460c      	mov	r4, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14e      	bne.n	8000cc6 <__udivmoddi4+0xaa>
 8000c28:	4694      	mov	ip, r2
 8000c2a:	458c      	cmp	ip, r1
 8000c2c:	4686      	mov	lr, r0
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	d962      	bls.n	8000cfa <__udivmoddi4+0xde>
 8000c34:	b14a      	cbz	r2, 8000c4a <__udivmoddi4+0x2e>
 8000c36:	f1c2 0320 	rsb	r3, r2, #32
 8000c3a:	4091      	lsls	r1, r2
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c44:	4319      	orrs	r1, r3
 8000c46:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4e:	fa1f f68c 	uxth.w	r6, ip
 8000c52:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c5a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c62:	fb04 f106 	mul.w	r1, r4, r6
 8000c66:	4299      	cmp	r1, r3
 8000c68:	d90a      	bls.n	8000c80 <__udivmoddi4+0x64>
 8000c6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c72:	f080 8112 	bcs.w	8000e9a <__udivmoddi4+0x27e>
 8000c76:	4299      	cmp	r1, r3
 8000c78:	f240 810f 	bls.w	8000e9a <__udivmoddi4+0x27e>
 8000c7c:	3c02      	subs	r4, #2
 8000c7e:	4463      	add	r3, ip
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	fa1f f38e 	uxth.w	r3, lr
 8000c86:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c8a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c92:	fb00 f606 	mul.w	r6, r0, r6
 8000c96:	429e      	cmp	r6, r3
 8000c98:	d90a      	bls.n	8000cb0 <__udivmoddi4+0x94>
 8000c9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000ca2:	f080 80fc 	bcs.w	8000e9e <__udivmoddi4+0x282>
 8000ca6:	429e      	cmp	r6, r3
 8000ca8:	f240 80f9 	bls.w	8000e9e <__udivmoddi4+0x282>
 8000cac:	4463      	add	r3, ip
 8000cae:	3802      	subs	r0, #2
 8000cb0:	1b9b      	subs	r3, r3, r6
 8000cb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	b11d      	cbz	r5, 8000cc2 <__udivmoddi4+0xa6>
 8000cba:	40d3      	lsrs	r3, r2
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	e9c5 3200 	strd	r3, r2, [r5]
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d905      	bls.n	8000cd6 <__udivmoddi4+0xba>
 8000cca:	b10d      	cbz	r5, 8000cd0 <__udivmoddi4+0xb4>
 8000ccc:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4608      	mov	r0, r1
 8000cd4:	e7f5      	b.n	8000cc2 <__udivmoddi4+0xa6>
 8000cd6:	fab3 f183 	clz	r1, r3
 8000cda:	2900      	cmp	r1, #0
 8000cdc:	d146      	bne.n	8000d6c <__udivmoddi4+0x150>
 8000cde:	42a3      	cmp	r3, r4
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0xcc>
 8000ce2:	4290      	cmp	r0, r2
 8000ce4:	f0c0 80f0 	bcc.w	8000ec8 <__udivmoddi4+0x2ac>
 8000ce8:	1a86      	subs	r6, r0, r2
 8000cea:	eb64 0303 	sbc.w	r3, r4, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	2d00      	cmp	r5, #0
 8000cf2:	d0e6      	beq.n	8000cc2 <__udivmoddi4+0xa6>
 8000cf4:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf8:	e7e3      	b.n	8000cc2 <__udivmoddi4+0xa6>
 8000cfa:	2a00      	cmp	r2, #0
 8000cfc:	f040 8090 	bne.w	8000e20 <__udivmoddi4+0x204>
 8000d00:	eba1 040c 	sub.w	r4, r1, ip
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	fa1f f78c 	uxth.w	r7, ip
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d16:	fb08 4416 	mls	r4, r8, r6, r4
 8000d1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1e:	fb07 f006 	mul.w	r0, r7, r6
 8000d22:	4298      	cmp	r0, r3
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x11c>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x11a>
 8000d30:	4298      	cmp	r0, r3
 8000d32:	f200 80cd 	bhi.w	8000ed0 <__udivmoddi4+0x2b4>
 8000d36:	4626      	mov	r6, r4
 8000d38:	1a1c      	subs	r4, r3, r0
 8000d3a:	fa1f f38e 	uxth.w	r3, lr
 8000d3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d42:	fb08 4410 	mls	r4, r8, r0, r4
 8000d46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d4a:	fb00 f707 	mul.w	r7, r0, r7
 8000d4e:	429f      	cmp	r7, r3
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x148>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x146>
 8000d5c:	429f      	cmp	r7, r3
 8000d5e:	f200 80b0 	bhi.w	8000ec2 <__udivmoddi4+0x2a6>
 8000d62:	4620      	mov	r0, r4
 8000d64:	1bdb      	subs	r3, r3, r7
 8000d66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0x9c>
 8000d6c:	f1c1 0620 	rsb	r6, r1, #32
 8000d70:	408b      	lsls	r3, r1
 8000d72:	fa22 f706 	lsr.w	r7, r2, r6
 8000d76:	431f      	orrs	r7, r3
 8000d78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d80:	ea43 030c 	orr.w	r3, r3, ip
 8000d84:	40f4      	lsrs	r4, r6
 8000d86:	fa00 f801 	lsl.w	r8, r0, r1
 8000d8a:	0c38      	lsrs	r0, r7, #16
 8000d8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d90:	fbb4 fef0 	udiv	lr, r4, r0
 8000d94:	fa1f fc87 	uxth.w	ip, r7
 8000d98:	fb00 441e 	mls	r4, r0, lr, r4
 8000d9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da0:	fb0e f90c 	mul.w	r9, lr, ip
 8000da4:	45a1      	cmp	r9, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	d90a      	bls.n	8000dc2 <__udivmoddi4+0x1a6>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000db2:	f080 8084 	bcs.w	8000ebe <__udivmoddi4+0x2a2>
 8000db6:	45a1      	cmp	r9, r4
 8000db8:	f240 8081 	bls.w	8000ebe <__udivmoddi4+0x2a2>
 8000dbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dc0:	443c      	add	r4, r7
 8000dc2:	eba4 0409 	sub.w	r4, r4, r9
 8000dc6:	fa1f f983 	uxth.w	r9, r3
 8000dca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dce:	fb00 4413 	mls	r4, r0, r3, r4
 8000dd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dda:	45a4      	cmp	ip, r4
 8000ddc:	d907      	bls.n	8000dee <__udivmoddi4+0x1d2>
 8000dde:	193c      	adds	r4, r7, r4
 8000de0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000de4:	d267      	bcs.n	8000eb6 <__udivmoddi4+0x29a>
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d965      	bls.n	8000eb6 <__udivmoddi4+0x29a>
 8000dea:	3b02      	subs	r3, #2
 8000dec:	443c      	add	r4, r7
 8000dee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000df2:	fba0 9302 	umull	r9, r3, r0, r2
 8000df6:	eba4 040c 	sub.w	r4, r4, ip
 8000dfa:	429c      	cmp	r4, r3
 8000dfc:	46ce      	mov	lr, r9
 8000dfe:	469c      	mov	ip, r3
 8000e00:	d351      	bcc.n	8000ea6 <__udivmoddi4+0x28a>
 8000e02:	d04e      	beq.n	8000ea2 <__udivmoddi4+0x286>
 8000e04:	b155      	cbz	r5, 8000e1c <__udivmoddi4+0x200>
 8000e06:	ebb8 030e 	subs.w	r3, r8, lr
 8000e0a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e12:	40cb      	lsrs	r3, r1
 8000e14:	431e      	orrs	r6, r3
 8000e16:	40cc      	lsrs	r4, r1
 8000e18:	e9c5 6400 	strd	r6, r4, [r5]
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	e750      	b.n	8000cc2 <__udivmoddi4+0xa6>
 8000e20:	f1c2 0320 	rsb	r3, r2, #32
 8000e24:	fa20 f103 	lsr.w	r1, r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e30:	4094      	lsls	r4, r2
 8000e32:	430c      	orrs	r4, r1
 8000e34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e38:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e3c:	fa1f f78c 	uxth.w	r7, ip
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3110 	mls	r1, r8, r0, r3
 8000e48:	0c23      	lsrs	r3, r4, #16
 8000e4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4e:	fb00 f107 	mul.w	r1, r0, r7
 8000e52:	4299      	cmp	r1, r3
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x24c>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e5e:	d22c      	bcs.n	8000eba <__udivmoddi4+0x29e>
 8000e60:	4299      	cmp	r1, r3
 8000e62:	d92a      	bls.n	8000eba <__udivmoddi4+0x29e>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1a5b      	subs	r3, r3, r1
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e70:	fb08 3311 	mls	r3, r8, r1, r3
 8000e74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e78:	fb01 f307 	mul.w	r3, r1, r7
 8000e7c:	42a3      	cmp	r3, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x276>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e88:	d213      	bcs.n	8000eb2 <__udivmoddi4+0x296>
 8000e8a:	42a3      	cmp	r3, r4
 8000e8c:	d911      	bls.n	8000eb2 <__udivmoddi4+0x296>
 8000e8e:	3902      	subs	r1, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	1ae4      	subs	r4, r4, r3
 8000e94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e98:	e739      	b.n	8000d0e <__udivmoddi4+0xf2>
 8000e9a:	4604      	mov	r4, r0
 8000e9c:	e6f0      	b.n	8000c80 <__udivmoddi4+0x64>
 8000e9e:	4608      	mov	r0, r1
 8000ea0:	e706      	b.n	8000cb0 <__udivmoddi4+0x94>
 8000ea2:	45c8      	cmp	r8, r9
 8000ea4:	d2ae      	bcs.n	8000e04 <__udivmoddi4+0x1e8>
 8000ea6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eaa:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eae:	3801      	subs	r0, #1
 8000eb0:	e7a8      	b.n	8000e04 <__udivmoddi4+0x1e8>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	e7ed      	b.n	8000e92 <__udivmoddi4+0x276>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	e799      	b.n	8000dee <__udivmoddi4+0x1d2>
 8000eba:	4630      	mov	r0, r6
 8000ebc:	e7d4      	b.n	8000e68 <__udivmoddi4+0x24c>
 8000ebe:	46d6      	mov	lr, sl
 8000ec0:	e77f      	b.n	8000dc2 <__udivmoddi4+0x1a6>
 8000ec2:	4463      	add	r3, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e74d      	b.n	8000d64 <__udivmoddi4+0x148>
 8000ec8:	4606      	mov	r6, r0
 8000eca:	4623      	mov	r3, r4
 8000ecc:	4608      	mov	r0, r1
 8000ece:	e70f      	b.n	8000cf0 <__udivmoddi4+0xd4>
 8000ed0:	3e02      	subs	r6, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	e730      	b.n	8000d38 <__udivmoddi4+0x11c>
 8000ed6:	bf00      	nop

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <DetectMovement>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void DetectMovement(void) {
 8000edc:	b590      	push	{r4, r7, lr}
 8000ede:	b0a7      	sub	sp, #156	@ 0x9c
 8000ee0:	af02      	add	r7, sp, #8
    int16_t accelData[3]; // Array to hold accelerometer data
    BSP_ACCELERO_AccGetXYZ(accelData); // Get accelerometer readings
 8000ee2:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 fc88 	bl	80017fc <BSP_ACCELERO_AccGetXYZ>

    char newDirection[10] = ""; // Holds the detected direction in this check
 8000eec:	2300      	movs	r3, #0
 8000eee:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000ef0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	809a      	strh	r2, [r3, #4]

    // Determine tilt direction based on thresholds
    if (accelData[0] > tiltThreshold) {
 8000efa:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	@ 0x84
 8000efe:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000f02:	4293      	cmp	r3, r2
 8000f04:	dd06      	ble.n	8000f14 <DetectMovement+0x38>
        sprintf(newDirection, "Up");
 8000f06:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000f0a:	496f      	ldr	r1, [pc, #444]	@ (80010c8 <DetectMovement+0x1ec>)
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f005 ff6b 	bl	8006de8 <siprintf>
 8000f12:	e030      	b.n	8000f76 <DetectMovement+0x9a>
    } else if (accelData[0] < -tiltThreshold) {
 8000f14:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	@ 0x84
 8000f18:	461a      	mov	r2, r3
 8000f1a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000f1e:	425b      	negs	r3, r3
 8000f20:	429a      	cmp	r2, r3
 8000f22:	da06      	bge.n	8000f32 <DetectMovement+0x56>
        sprintf(newDirection, "Down");
 8000f24:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000f28:	4968      	ldr	r1, [pc, #416]	@ (80010cc <DetectMovement+0x1f0>)
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f005 ff5c 	bl	8006de8 <siprintf>
 8000f30:	e021      	b.n	8000f76 <DetectMovement+0x9a>
    } else if (accelData[1] > tiltThreshold) {
 8000f32:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 8000f36:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	dd06      	ble.n	8000f4c <DetectMovement+0x70>
        sprintf(newDirection, "Right");
 8000f3e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000f42:	4963      	ldr	r1, [pc, #396]	@ (80010d0 <DetectMovement+0x1f4>)
 8000f44:	4618      	mov	r0, r3
 8000f46:	f005 ff4f 	bl	8006de8 <siprintf>
 8000f4a:	e014      	b.n	8000f76 <DetectMovement+0x9a>
    } else if (accelData[1] < -tiltThreshold) {
 8000f4c:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 8000f50:	461a      	mov	r2, r3
 8000f52:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000f56:	425b      	negs	r3, r3
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	da06      	bge.n	8000f6a <DetectMovement+0x8e>
        sprintf(newDirection, "Left");
 8000f5c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000f60:	495c      	ldr	r1, [pc, #368]	@ (80010d4 <DetectMovement+0x1f8>)
 8000f62:	4618      	mov	r0, r3
 8000f64:	f005 ff40 	bl	8006de8 <siprintf>
 8000f68:	e005      	b.n	8000f76 <DetectMovement+0x9a>
    } else {
        sprintf(newDirection, ""); // No significant tilt detected
 8000f6a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000f6e:	495a      	ldr	r1, [pc, #360]	@ (80010d8 <DetectMovement+0x1fc>)
 8000f70:	4618      	mov	r0, r3
 8000f72:	f005 ff39 	bl	8006de8 <siprintf>
    }

    uint32_t currentTime = HAL_GetTick(); // Get the current time in milliseconds
 8000f76:	f001 fa67 	bl	8002448 <HAL_GetTick>
 8000f7a:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c

    // Debugging: Print raw accelerometer data and the detected direction
    char debugBuf[100];
    sprintf(debugBuf, "Accel X: %d, Y: %d, Z: %d, Det: %s\n", accelData[0], accelData[1], accelData[2], newDirection);
 8000f7e:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	@ 0x84
 8000f82:	4619      	mov	r1, r3
 8000f84:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 8000f88:	461c      	mov	r4, r3
 8000f8a:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	@ 0x88
 8000f8e:	461a      	mov	r2, r3
 8000f90:	f107 0014 	add.w	r0, r7, #20
 8000f94:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000f98:	9301      	str	r3, [sp, #4]
 8000f9a:	9200      	str	r2, [sp, #0]
 8000f9c:	4623      	mov	r3, r4
 8000f9e:	460a      	mov	r2, r1
 8000fa0:	494e      	ldr	r1, [pc, #312]	@ (80010dc <DetectMovement+0x200>)
 8000fa2:	f005 ff21 	bl	8006de8 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)debugBuf, strlen(debugBuf), HAL_MAX_DELAY);
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff f978 	bl	80002a0 <strlen>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	f107 0114 	add.w	r1, r7, #20
 8000fb8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fbc:	4848      	ldr	r0, [pc, #288]	@ (80010e0 <DetectMovement+0x204>)
 8000fbe:	f004 fbdb 	bl	8005778 <HAL_UART_Transmit>

    // If a new direction is detected, reset the timer
    if (strcmp(newDirection, currentDirection) != 0) {
 8000fc2:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000fc6:	4947      	ldr	r1, [pc, #284]	@ (80010e4 <DetectMovement+0x208>)
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff f971 	bl	80002b0 <strcmp>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d00a      	beq.n	8000fea <DetectMovement+0x10e>
        sprintf(currentDirection, "%s", newDirection); // Update current direction
 8000fd4:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4943      	ldr	r1, [pc, #268]	@ (80010e8 <DetectMovement+0x20c>)
 8000fdc:	4841      	ldr	r0, [pc, #260]	@ (80010e4 <DetectMovement+0x208>)
 8000fde:	f005 ff03 	bl	8006de8 <siprintf>
        tiltStartTime = currentTime;                  // Reset the timer
 8000fe2:	4a42      	ldr	r2, [pc, #264]	@ (80010ec <DetectMovement+0x210>)
 8000fe4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000fe8:	6013      	str	r3, [r2, #0]
    }

    // Check if the tilt is stable within the margin for 3 seconds
    if (strlen(currentDirection) > 0 && (currentTime - tiltStartTime >= holdDuration)) {
 8000fea:	4b3e      	ldr	r3, [pc, #248]	@ (80010e4 <DetectMovement+0x208>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d066      	beq.n	80010c0 <DetectMovement+0x1e4>
 8000ff2:	4b3e      	ldr	r3, [pc, #248]	@ (80010ec <DetectMovement+0x210>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001000:	4293      	cmp	r3, r2
 8001002:	d35d      	bcc.n	80010c0 <DetectMovement+0x1e4>
        // Ensure the tilt is still within the margin of stability
        if ((strcmp(currentDirection, "Up") == 0 && accelData[0] > tiltThreshold - stabilityMargin) ||
 8001004:	4930      	ldr	r1, [pc, #192]	@ (80010c8 <DetectMovement+0x1ec>)
 8001006:	4837      	ldr	r0, [pc, #220]	@ (80010e4 <DetectMovement+0x208>)
 8001008:	f7ff f952 	bl	80002b0 <strcmp>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d10a      	bne.n	8001028 <DetectMovement+0x14c>
 8001012:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	@ 0x84
 8001016:	461a      	mov	r2, r3
 8001018:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800101c:	4619      	mov	r1, r3
 800101e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001022:	1acb      	subs	r3, r1, r3
 8001024:	429a      	cmp	r2, r3
 8001026:	dc35      	bgt.n	8001094 <DetectMovement+0x1b8>
            (strcmp(currentDirection, "Down") == 0 && accelData[0] < -tiltThreshold + stabilityMargin) ||
 8001028:	4928      	ldr	r1, [pc, #160]	@ (80010cc <DetectMovement+0x1f0>)
 800102a:	482e      	ldr	r0, [pc, #184]	@ (80010e4 <DetectMovement+0x208>)
 800102c:	f7ff f940 	bl	80002b0 <strcmp>
 8001030:	4603      	mov	r3, r0
        if ((strcmp(currentDirection, "Up") == 0 && accelData[0] > tiltThreshold - stabilityMargin) ||
 8001032:	2b00      	cmp	r3, #0
 8001034:	d10a      	bne.n	800104c <DetectMovement+0x170>
            (strcmp(currentDirection, "Down") == 0 && accelData[0] < -tiltThreshold + stabilityMargin) ||
 8001036:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	@ 0x84
 800103a:	461a      	mov	r2, r3
 800103c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001040:	4619      	mov	r1, r3
 8001042:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001046:	1acb      	subs	r3, r1, r3
 8001048:	429a      	cmp	r2, r3
 800104a:	db23      	blt.n	8001094 <DetectMovement+0x1b8>
            (strcmp(currentDirection, "Right") == 0 && accelData[1] > tiltThreshold - stabilityMargin) ||
 800104c:	4920      	ldr	r1, [pc, #128]	@ (80010d0 <DetectMovement+0x1f4>)
 800104e:	4825      	ldr	r0, [pc, #148]	@ (80010e4 <DetectMovement+0x208>)
 8001050:	f7ff f92e 	bl	80002b0 <strcmp>
 8001054:	4603      	mov	r3, r0
            (strcmp(currentDirection, "Down") == 0 && accelData[0] < -tiltThreshold + stabilityMargin) ||
 8001056:	2b00      	cmp	r3, #0
 8001058:	d10a      	bne.n	8001070 <DetectMovement+0x194>
            (strcmp(currentDirection, "Right") == 0 && accelData[1] > tiltThreshold - stabilityMargin) ||
 800105a:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 800105e:	461a      	mov	r2, r3
 8001060:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001064:	4619      	mov	r1, r3
 8001066:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800106a:	1acb      	subs	r3, r1, r3
 800106c:	429a      	cmp	r2, r3
 800106e:	dc11      	bgt.n	8001094 <DetectMovement+0x1b8>
            (strcmp(currentDirection, "Left") == 0 && accelData[1] < -tiltThreshold + stabilityMargin)) {
 8001070:	4918      	ldr	r1, [pc, #96]	@ (80010d4 <DetectMovement+0x1f8>)
 8001072:	481c      	ldr	r0, [pc, #112]	@ (80010e4 <DetectMovement+0x208>)
 8001074:	f7ff f91c 	bl	80002b0 <strcmp>
 8001078:	4603      	mov	r3, r0
            (strcmp(currentDirection, "Right") == 0 && accelData[1] > tiltThreshold - stabilityMargin) ||
 800107a:	2b00      	cmp	r3, #0
 800107c:	d120      	bne.n	80010c0 <DetectMovement+0x1e4>
            (strcmp(currentDirection, "Left") == 0 && accelData[1] < -tiltThreshold + stabilityMargin)) {
 800107e:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 8001082:	461a      	mov	r2, r3
 8001084:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001088:	4619      	mov	r1, r3
 800108a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800108e:	1acb      	subs	r3, r1, r3
 8001090:	429a      	cmp	r2, r3
 8001092:	da15      	bge.n	80010c0 <DetectMovement+0x1e4>
            char buf[20];
            sprintf(buf, "Move %s\n", currentDirection);
 8001094:	463b      	mov	r3, r7
 8001096:	4a13      	ldr	r2, [pc, #76]	@ (80010e4 <DetectMovement+0x208>)
 8001098:	4915      	ldr	r1, [pc, #84]	@ (80010f0 <DetectMovement+0x214>)
 800109a:	4618      	mov	r0, r3
 800109c:	f005 fea4 	bl	8006de8 <siprintf>
            HAL_UART_Transmit(&huart1, (uint8_t *)buf, strlen(buf), HAL_MAX_DELAY);
 80010a0:	463b      	mov	r3, r7
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff f8fc 	bl	80002a0 <strlen>
 80010a8:	4603      	mov	r3, r0
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	4639      	mov	r1, r7
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010b2:	480b      	ldr	r0, [pc, #44]	@ (80010e0 <DetectMovement+0x204>)
 80010b4:	f004 fb60 	bl	8005778 <HAL_UART_Transmit>

            // Reset the timer to avoid repeated prints for the same tilt
            tiltStartTime = currentTime;
 80010b8:	4a0c      	ldr	r2, [pc, #48]	@ (80010ec <DetectMovement+0x210>)
 80010ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80010be:	6013      	str	r3, [r2, #0]
        }
    }
}
 80010c0:	bf00      	nop
 80010c2:	3794      	adds	r7, #148	@ 0x94
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd90      	pop	{r4, r7, pc}
 80010c8:	080092c0 	.word	0x080092c0
 80010cc:	080092c4 	.word	0x080092c4
 80010d0:	080092cc 	.word	0x080092cc
 80010d4:	080092d4 	.word	0x080092d4
 80010d8:	080092dc 	.word	0x080092dc
 80010dc:	080092e0 	.word	0x080092e0
 80010e0:	20000268 	.word	0x20000268
 80010e4:	20000308 	.word	0x20000308
 80010e8:	08009304 	.word	0x08009304
 80010ec:	20000304 	.word	0x20000304
 80010f0:	08009308 	.word	0x08009308

080010f4 <PrintInitialGrid>:

void PrintInitialGrid(void) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b092      	sub	sp, #72	@ 0x48
 80010f8:	af00      	add	r7, sp, #0
    const char newline[] = "\r\n"; // Newline for the terminal
 80010fa:	4a28      	ldr	r2, [pc, #160]	@ (800119c <PrintInitialGrid+0xa8>)
 80010fc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001100:	6812      	ldr	r2, [r2, #0]
 8001102:	4611      	mov	r1, r2
 8001104:	8019      	strh	r1, [r3, #0]
 8001106:	3302      	adds	r3, #2
 8001108:	0c12      	lsrs	r2, r2, #16
 800110a:	701a      	strb	r2, [r3, #0]
    char displayBuffer[64];


    srand(HAL_GetTick());
 800110c:	f001 f99c 	bl	8002448 <HAL_GetTick>
 8001110:	4603      	mov	r3, r0
 8001112:	4618      	mov	r0, r3
 8001114:	f005 fe88 	bl	8006e28 <srand>
    treasureRow = rand() % 4; // Random row (0-3)
 8001118:	f005 feb4 	bl	8006e84 <rand>
 800111c:	4603      	mov	r3, r0
 800111e:	425a      	negs	r2, r3
 8001120:	f003 0303 	and.w	r3, r3, #3
 8001124:	f002 0203 	and.w	r2, r2, #3
 8001128:	bf58      	it	pl
 800112a:	4253      	negpl	r3, r2
 800112c:	4a1c      	ldr	r2, [pc, #112]	@ (80011a0 <PrintInitialGrid+0xac>)
 800112e:	6013      	str	r3, [r2, #0]
    treasureCol = rand() % 4; // Random column (0-3)
 8001130:	f005 fea8 	bl	8006e84 <rand>
 8001134:	4603      	mov	r3, r0
 8001136:	425a      	negs	r2, r3
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	f002 0203 	and.w	r2, r2, #3
 8001140:	bf58      	it	pl
 8001142:	4253      	negpl	r3, r2
 8001144:	4a17      	ldr	r2, [pc, #92]	@ (80011a4 <PrintInitialGrid+0xb0>)
 8001146:	6013      	str	r3, [r2, #0]

    // Print a grid of all '1's
    for (int i = 0; i < 4; i++) {
 8001148:	2300      	movs	r3, #0
 800114a:	647b      	str	r3, [r7, #68]	@ 0x44
 800114c:	e01e      	b.n	800118c <PrintInitialGrid+0x98>
        memset(displayBuffer, '1', 4);
 800114e:	463b      	mov	r3, r7
 8001150:	2204      	movs	r2, #4
 8001152:	2131      	movs	r1, #49	@ 0x31
 8001154:	4618      	mov	r0, r3
 8001156:	f005 ff95 	bl	8007084 <memset>
        displayBuffer[4] = '\0';
 800115a:	2300      	movs	r3, #0
 800115c:	713b      	strb	r3, [r7, #4]
        HAL_UART_Transmit(&huart1, (uint8_t *)displayBuffer, strlen(displayBuffer), HAL_MAX_DELAY);
 800115e:	463b      	mov	r3, r7
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff f89d 	bl	80002a0 <strlen>
 8001166:	4603      	mov	r3, r0
 8001168:	b29a      	uxth	r2, r3
 800116a:	4639      	mov	r1, r7
 800116c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001170:	480d      	ldr	r0, [pc, #52]	@ (80011a8 <PrintInitialGrid+0xb4>)
 8001172:	f004 fb01 	bl	8005778 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart1, (uint8_t *)newline, strlen(newline), HAL_MAX_DELAY);
 8001176:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800117a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800117e:	2202      	movs	r2, #2
 8001180:	4809      	ldr	r0, [pc, #36]	@ (80011a8 <PrintInitialGrid+0xb4>)
 8001182:	f004 faf9 	bl	8005778 <HAL_UART_Transmit>
    for (int i = 0; i < 4; i++) {
 8001186:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001188:	3301      	adds	r3, #1
 800118a:	647b      	str	r3, [r7, #68]	@ 0x44
 800118c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800118e:	2b03      	cmp	r3, #3
 8001190:	dddd      	ble.n	800114e <PrintInitialGrid+0x5a>
    }
}
 8001192:	bf00      	nop
 8001194:	bf00      	nop
 8001196:	3748      	adds	r7, #72	@ 0x48
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	08009314 	.word	0x08009314
 80011a0:	200002fc 	.word	0x200002fc
 80011a4:	20000300 	.word	0x20000300
 80011a8:	20000268 	.word	0x20000268

080011ac <PrintTreasureGrid>:

void PrintTreasureGrid(void) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b0a4      	sub	sp, #144	@ 0x90
 80011b0:	af02      	add	r7, sp, #8
    const char newline[] = "\r\n";
 80011b2:	4a47      	ldr	r2, [pc, #284]	@ (80012d0 <PrintTreasureGrid+0x124>)
 80011b4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80011b8:	6812      	ldr	r2, [r2, #0]
 80011ba:	4611      	mov	r1, r2
 80011bc:	8019      	strh	r1, [r3, #0]
 80011be:	3302      	adds	r3, #2
 80011c0:	0c12      	lsrs	r2, r2, #16
 80011c2:	701a      	strb	r2, [r3, #0]
    char treasureBuffer[32];
    char displayBuffer[64];       // Buffer to send rows over UART


    // Initialize the grid with '1's
    for (int i = 0; i < 4; i++) {
 80011c4:	2300      	movs	r3, #0
 80011c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80011ca:	e01c      	b.n	8001206 <PrintTreasureGrid+0x5a>
        for (int j = 0; j < 4; j++) {
 80011cc:	2300      	movs	r3, #0
 80011ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80011d2:	e00f      	b.n	80011f4 <PrintTreasureGrid+0x48>
            grid[i][j] = '1';
 80011d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	3388      	adds	r3, #136	@ 0x88
 80011dc:	19da      	adds	r2, r3, r7
 80011de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80011e2:	4413      	add	r3, r2
 80011e4:	3b24      	subs	r3, #36	@ 0x24
 80011e6:	2231      	movs	r2, #49	@ 0x31
 80011e8:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 4; j++) {
 80011ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80011ee:	3301      	adds	r3, #1
 80011f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80011f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80011f8:	2b03      	cmp	r3, #3
 80011fa:	ddeb      	ble.n	80011d4 <PrintTreasureGrid+0x28>
    for (int i = 0; i < 4; i++) {
 80011fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001200:	3301      	adds	r3, #1
 8001202:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001206:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800120a:	2b03      	cmp	r3, #3
 800120c:	ddde      	ble.n	80011cc <PrintTreasureGrid+0x20>
        }
    }

    // Place the treasure ('0') in a random position

    grid[treasureRow][treasureCol] = '0'; // Set the treasure location
 800120e:	4b31      	ldr	r3, [pc, #196]	@ (80012d4 <PrintTreasureGrid+0x128>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	4b31      	ldr	r3, [pc, #196]	@ (80012d8 <PrintTreasureGrid+0x12c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	0092      	lsls	r2, r2, #2
 8001218:	3288      	adds	r2, #136	@ 0x88
 800121a:	443a      	add	r2, r7
 800121c:	4413      	add	r3, r2
 800121e:	3b24      	subs	r3, #36	@ 0x24
 8001220:	2230      	movs	r2, #48	@ 0x30
 8001222:	701a      	strb	r2, [r3, #0]

    // Log the treasure's location internally
    snprintf(treasureBuffer, sizeof(treasureBuffer), "Treasure is at: [%d, %d]\r\n", treasureRow+1, treasureCol+1);
 8001224:	4b2b      	ldr	r3, [pc, #172]	@ (80012d4 <PrintTreasureGrid+0x128>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	1c5a      	adds	r2, r3, #1
 800122a:	4b2b      	ldr	r3, [pc, #172]	@ (80012d8 <PrintTreasureGrid+0x12c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	3301      	adds	r3, #1
 8001230:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	4613      	mov	r3, r2
 8001238:	4a28      	ldr	r2, [pc, #160]	@ (80012dc <PrintTreasureGrid+0x130>)
 800123a:	2120      	movs	r1, #32
 800123c:	f005 fda0 	bl	8006d80 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)treasureBuffer, strlen(treasureBuffer), HAL_MAX_DELAY);
 8001240:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff f82b 	bl	80002a0 <strlen>
 800124a:	4603      	mov	r3, r0
 800124c:	b29a      	uxth	r2, r3
 800124e:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8001252:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001256:	4822      	ldr	r0, [pc, #136]	@ (80012e0 <PrintTreasureGrid+0x134>)
 8001258:	f004 fa8e 	bl	8005778 <HAL_UART_Transmit>

    // Transmit the updated grid
    for (int i = 0; i < 4; i++) {
 800125c:	2300      	movs	r3, #0
 800125e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001260:	e02e      	b.n	80012c0 <PrintTreasureGrid+0x114>
        for (int j = 0; j < 4; j++) {
 8001262:	2300      	movs	r3, #0
 8001264:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001266:	e00f      	b.n	8001288 <PrintTreasureGrid+0xdc>
            displayBuffer[j] = grid[i][j]; // Copy each character to the buffer
 8001268:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	3388      	adds	r3, #136	@ 0x88
 800126e:	19da      	adds	r2, r3, r7
 8001270:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001272:	4413      	add	r3, r2
 8001274:	3b24      	subs	r3, #36	@ 0x24
 8001276:	7819      	ldrb	r1, [r3, #0]
 8001278:	1d3a      	adds	r2, r7, #4
 800127a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800127c:	4413      	add	r3, r2
 800127e:	460a      	mov	r2, r1
 8001280:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 4; j++) {
 8001282:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001284:	3301      	adds	r3, #1
 8001286:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001288:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800128a:	2b03      	cmp	r3, #3
 800128c:	ddec      	ble.n	8001268 <PrintTreasureGrid+0xbc>
        }
        displayBuffer[4] = '\0'; // Null-terminate the string
 800128e:	2300      	movs	r3, #0
 8001290:	723b      	strb	r3, [r7, #8]
        HAL_UART_Transmit(&huart1, (uint8_t *)displayBuffer, strlen(displayBuffer), HAL_MAX_DELAY);
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff f803 	bl	80002a0 <strlen>
 800129a:	4603      	mov	r3, r0
 800129c:	b29a      	uxth	r2, r3
 800129e:	1d39      	adds	r1, r7, #4
 80012a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012a4:	480e      	ldr	r0, [pc, #56]	@ (80012e0 <PrintTreasureGrid+0x134>)
 80012a6:	f004 fa67 	bl	8005778 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart1, (uint8_t *)newline, strlen(newline), HAL_MAX_DELAY);
 80012aa:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012b2:	2202      	movs	r2, #2
 80012b4:	480a      	ldr	r0, [pc, #40]	@ (80012e0 <PrintTreasureGrid+0x134>)
 80012b6:	f004 fa5f 	bl	8005778 <HAL_UART_Transmit>
    for (int i = 0; i < 4; i++) {
 80012ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80012bc:	3301      	adds	r3, #1
 80012be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80012c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	ddcd      	ble.n	8001262 <PrintTreasureGrid+0xb6>
    }
}
 80012c6:	bf00      	nop
 80012c8:	bf00      	nop
 80012ca:	3788      	adds	r7, #136	@ 0x88
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	08009314 	.word	0x08009314
 80012d4:	200002fc 	.word	0x200002fc
 80012d8:	20000300 	.word	0x20000300
 80012dc:	08009318 	.word	0x08009318
 80012e0:	20000268 	.word	0x20000268

080012e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ea:	f001 f881 	bl	80023f0 <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_GYRO_Init();
 80012ee:	f000 fa9d 	bl	800182c <BSP_GYRO_Init>
  BSP_TSENSOR_Init();
 80012f2:	f000 fadd 	bl	80018b0 <BSP_TSENSOR_Init>
  BSP_ACCELERO_Init();
 80012f6:	f000 fa43 	bl	8001780 <BSP_ACCELERO_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012fa:	f000 f823 	bl	8001344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012fe:	f000 f8bf 	bl	8001480 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001302:	f000 f871 	bl	80013e8 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  PrintInitialGrid();
 8001306:	f7ff fef5 	bl	80010f4 <PrintInitialGrid>
  const char newline[] = "\r\n";
 800130a:	4a0c      	ldr	r2, [pc, #48]	@ (800133c <main+0x58>)
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	6812      	ldr	r2, [r2, #0]
 8001310:	4611      	mov	r1, r2
 8001312:	8019      	strh	r1, [r3, #0]
 8001314:	3302      	adds	r3, #2
 8001316:	0c12      	lsrs	r2, r2, #16
 8001318:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, (uint8_t *)newline, strlen(newline), HAL_MAX_DELAY);
 800131a:	1d39      	adds	r1, r7, #4
 800131c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001320:	2202      	movs	r2, #2
 8001322:	4807      	ldr	r0, [pc, #28]	@ (8001340 <main+0x5c>)
 8001324:	f004 fa28 	bl	8005778 <HAL_UART_Transmit>
  PrintTreasureGrid();
 8001328:	f7ff ff40 	bl	80011ac <PrintTreasureGrid>
  while (1)
  {
	  DetectMovement();
 800132c:	f7ff fdd6 	bl	8000edc <DetectMovement>
//	  char buf[50];
//	  float gyro_read[3];
//	  BSP_GYRO_GetXYZ(&gyro_read);
//	  sprintf(buf, "Gyro: [%d, %d, %d]\r\n", (int) gyro_read[0], (int) gyro_read[1], (int) gyro_read[2]);
//	  HAL_UART_Transmit(&huart1, (uint8_t *) buf, (uint16_t) sizeof(buf), 100);
	  HAL_Delay(50);
 8001330:	2032      	movs	r0, #50	@ 0x32
 8001332:	f001 f895 	bl	8002460 <HAL_Delay>
	  DetectMovement();
 8001336:	bf00      	nop
 8001338:	e7f8      	b.n	800132c <main+0x48>
 800133a:	bf00      	nop
 800133c:	08009314 	.word	0x08009314
 8001340:	20000268 	.word	0x20000268

08001344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b096      	sub	sp, #88	@ 0x58
 8001348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134a:	f107 0314 	add.w	r3, r7, #20
 800134e:	2244      	movs	r2, #68	@ 0x44
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f005 fe96 	bl	8007084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001358:	463b      	mov	r3, r7
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001366:	2000      	movs	r0, #0
 8001368:	f002 fa2a 	bl	80037c0 <HAL_PWREx_ControlVoltageScaling>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001372:	f000 f8af 	bl	80014d4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001376:	2310      	movs	r3, #16
 8001378:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800137a:	2301      	movs	r3, #1
 800137c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001382:	2360      	movs	r3, #96	@ 0x60
 8001384:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001386:	2302      	movs	r3, #2
 8001388:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800138a:	2301      	movs	r3, #1
 800138c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800138e:	2301      	movs	r3, #1
 8001390:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001392:	233c      	movs	r3, #60	@ 0x3c
 8001394:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001396:	2302      	movs	r3, #2
 8001398:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800139a:	2302      	movs	r3, #2
 800139c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800139e:	2302      	movs	r3, #2
 80013a0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4618      	mov	r0, r3
 80013a8:	f002 faae 	bl	8003908 <HAL_RCC_OscConfig>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80013b2:	f000 f88f 	bl	80014d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b6:	230f      	movs	r3, #15
 80013b8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ba:	2303      	movs	r3, #3
 80013bc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013be:	2300      	movs	r3, #0
 80013c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013ca:	463b      	mov	r3, r7
 80013cc:	2105      	movs	r1, #5
 80013ce:	4618      	mov	r0, r3
 80013d0:	f002 feb4 	bl	800413c <HAL_RCC_ClockConfig>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80013da:	f000 f87b 	bl	80014d4 <Error_Handler>
  }
}
 80013de:	bf00      	nop
 80013e0:	3758      	adds	r7, #88	@ 0x58
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013ec:	4b22      	ldr	r3, [pc, #136]	@ (8001478 <MX_USART1_UART_Init+0x90>)
 80013ee:	4a23      	ldr	r2, [pc, #140]	@ (800147c <MX_USART1_UART_Init+0x94>)
 80013f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013f2:	4b21      	ldr	r3, [pc, #132]	@ (8001478 <MX_USART1_UART_Init+0x90>)
 80013f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001478 <MX_USART1_UART_Init+0x90>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001400:	4b1d      	ldr	r3, [pc, #116]	@ (8001478 <MX_USART1_UART_Init+0x90>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001406:	4b1c      	ldr	r3, [pc, #112]	@ (8001478 <MX_USART1_UART_Init+0x90>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800140c:	4b1a      	ldr	r3, [pc, #104]	@ (8001478 <MX_USART1_UART_Init+0x90>)
 800140e:	220c      	movs	r2, #12
 8001410:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001412:	4b19      	ldr	r3, [pc, #100]	@ (8001478 <MX_USART1_UART_Init+0x90>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001418:	4b17      	ldr	r3, [pc, #92]	@ (8001478 <MX_USART1_UART_Init+0x90>)
 800141a:	2200      	movs	r2, #0
 800141c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800141e:	4b16      	ldr	r3, [pc, #88]	@ (8001478 <MX_USART1_UART_Init+0x90>)
 8001420:	2200      	movs	r2, #0
 8001422:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001424:	4b14      	ldr	r3, [pc, #80]	@ (8001478 <MX_USART1_UART_Init+0x90>)
 8001426:	2200      	movs	r2, #0
 8001428:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800142a:	4b13      	ldr	r3, [pc, #76]	@ (8001478 <MX_USART1_UART_Init+0x90>)
 800142c:	2200      	movs	r2, #0
 800142e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001430:	4811      	ldr	r0, [pc, #68]	@ (8001478 <MX_USART1_UART_Init+0x90>)
 8001432:	f004 f951 	bl	80056d8 <HAL_UART_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800143c:	f000 f84a 	bl	80014d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001440:	2100      	movs	r1, #0
 8001442:	480d      	ldr	r0, [pc, #52]	@ (8001478 <MX_USART1_UART_Init+0x90>)
 8001444:	f004 ff7a 	bl	800633c <HAL_UARTEx_SetTxFifoThreshold>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800144e:	f000 f841 	bl	80014d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001452:	2100      	movs	r1, #0
 8001454:	4808      	ldr	r0, [pc, #32]	@ (8001478 <MX_USART1_UART_Init+0x90>)
 8001456:	f004 ffaf 	bl	80063b8 <HAL_UARTEx_SetRxFifoThreshold>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001460:	f000 f838 	bl	80014d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001464:	4804      	ldr	r0, [pc, #16]	@ (8001478 <MX_USART1_UART_Init+0x90>)
 8001466:	f004 ff30 	bl	80062ca <HAL_UARTEx_DisableFifoMode>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001470:	f000 f830 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000268 	.word	0x20000268
 800147c:	40013800 	.word	0x40013800

08001480 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001486:	4b09      	ldr	r3, [pc, #36]	@ (80014ac <MX_GPIO_Init+0x2c>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148a:	4a08      	ldr	r2, [pc, #32]	@ (80014ac <MX_GPIO_Init+0x2c>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001492:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <MX_GPIO_Init+0x2c>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	40021000 	.word	0x40021000

080014b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a04      	ldr	r2, [pc, #16]	@ (80014d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d101      	bne.n	80014c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014c2:	f000 ffad 	bl	8002420 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40001000 	.word	0x40001000

080014d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d8:	b672      	cpsid	i
}
 80014da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014dc:	bf00      	nop
 80014de:	e7fd      	b.n	80014dc <Error_Handler+0x8>

080014e0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08a      	sub	sp, #40	@ 0x28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80014e8:	4b27      	ldr	r3, [pc, #156]	@ (8001588 <I2Cx_MspInit+0xa8>)
 80014ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ec:	4a26      	ldr	r2, [pc, #152]	@ (8001588 <I2Cx_MspInit+0xa8>)
 80014ee:	f043 0302 	orr.w	r3, r3, #2
 80014f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f4:	4b24      	ldr	r3, [pc, #144]	@ (8001588 <I2Cx_MspInit+0xa8>)
 80014f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001500:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001504:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001506:	2312      	movs	r3, #18
 8001508:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800150a:	2301      	movs	r3, #1
 800150c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150e:	2303      	movs	r3, #3
 8001510:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001512:	2304      	movs	r3, #4
 8001514:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	4619      	mov	r1, r3
 800151c:	481b      	ldr	r0, [pc, #108]	@ (800158c <I2Cx_MspInit+0xac>)
 800151e:	f001 f8a5 	bl	800266c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	4818      	ldr	r0, [pc, #96]	@ (800158c <I2Cx_MspInit+0xac>)
 800152a:	f001 f89f 	bl	800266c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800152e:	4b16      	ldr	r3, [pc, #88]	@ (8001588 <I2Cx_MspInit+0xa8>)
 8001530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001532:	4a15      	ldr	r2, [pc, #84]	@ (8001588 <I2Cx_MspInit+0xa8>)
 8001534:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001538:	6593      	str	r3, [r2, #88]	@ 0x58
 800153a:	4b13      	ldr	r3, [pc, #76]	@ (8001588 <I2Cx_MspInit+0xa8>)
 800153c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800153e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001546:	4b10      	ldr	r3, [pc, #64]	@ (8001588 <I2Cx_MspInit+0xa8>)
 8001548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800154a:	4a0f      	ldr	r2, [pc, #60]	@ (8001588 <I2Cx_MspInit+0xa8>)
 800154c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001550:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001552:	4b0d      	ldr	r3, [pc, #52]	@ (8001588 <I2Cx_MspInit+0xa8>)
 8001554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001556:	4a0c      	ldr	r2, [pc, #48]	@ (8001588 <I2Cx_MspInit+0xa8>)
 8001558:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800155c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800155e:	2200      	movs	r2, #0
 8001560:	210f      	movs	r1, #15
 8001562:	2021      	movs	r0, #33	@ 0x21
 8001564:	f001 f858 	bl	8002618 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001568:	2021      	movs	r0, #33	@ 0x21
 800156a:	f001 f871 	bl	8002650 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	210f      	movs	r1, #15
 8001572:	2022      	movs	r0, #34	@ 0x22
 8001574:	f001 f850 	bl	8002618 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001578:	2022      	movs	r0, #34	@ 0x22
 800157a:	f001 f869 	bl	8002650 <HAL_NVIC_EnableIRQ>
}
 800157e:	bf00      	nop
 8001580:	3728      	adds	r7, #40	@ 0x28
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40021000 	.word	0x40021000
 800158c:	48000400 	.word	0x48000400

08001590 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a12      	ldr	r2, [pc, #72]	@ (80015e4 <I2Cx_Init+0x54>)
 800159c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a11      	ldr	r2, [pc, #68]	@ (80015e8 <I2Cx_Init+0x58>)
 80015a2:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2201      	movs	r2, #1
 80015ae:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff ff89 	bl	80014e0 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f001 fad0 	bl	8002b74 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80015d4:	2100      	movs	r1, #0
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f002 f886 	bl	80036e8 <HAL_I2CEx_ConfigAnalogFilter>
}
 80015dc:	bf00      	nop
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40005800 	.word	0x40005800
 80015e8:	00702681 	.word	0x00702681

080015ec <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08a      	sub	sp, #40	@ 0x28
 80015f0:	af04      	add	r7, sp, #16
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	4608      	mov	r0, r1
 80015f6:	4611      	mov	r1, r2
 80015f8:	461a      	mov	r2, r3
 80015fa:	4603      	mov	r3, r0
 80015fc:	72fb      	strb	r3, [r7, #11]
 80015fe:	460b      	mov	r3, r1
 8001600:	813b      	strh	r3, [r7, #8]
 8001602:	4613      	mov	r3, r2
 8001604:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001606:	2300      	movs	r3, #0
 8001608:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800160a:	7afb      	ldrb	r3, [r7, #11]
 800160c:	b299      	uxth	r1, r3
 800160e:	88f8      	ldrh	r0, [r7, #6]
 8001610:	893a      	ldrh	r2, [r7, #8]
 8001612:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001616:	9302      	str	r3, [sp, #8]
 8001618:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800161a:	9301      	str	r3, [sp, #4]
 800161c:	6a3b      	ldr	r3, [r7, #32]
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	4603      	mov	r3, r0
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f001 fc84 	bl	8002f30 <HAL_I2C_Mem_Read>
 8001628:	4603      	mov	r3, r0
 800162a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800162c:	7dfb      	ldrb	r3, [r7, #23]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d004      	beq.n	800163c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001632:	7afb      	ldrb	r3, [r7, #11]
 8001634:	4619      	mov	r1, r3
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	f000 f832 	bl	80016a0 <I2Cx_Error>
  }
  return status;
 800163c:	7dfb      	ldrb	r3, [r7, #23]
}
 800163e:	4618      	mov	r0, r3
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b08a      	sub	sp, #40	@ 0x28
 800164a:	af04      	add	r7, sp, #16
 800164c:	60f8      	str	r0, [r7, #12]
 800164e:	4608      	mov	r0, r1
 8001650:	4611      	mov	r1, r2
 8001652:	461a      	mov	r2, r3
 8001654:	4603      	mov	r3, r0
 8001656:	72fb      	strb	r3, [r7, #11]
 8001658:	460b      	mov	r3, r1
 800165a:	813b      	strh	r3, [r7, #8]
 800165c:	4613      	mov	r3, r2
 800165e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001660:	2300      	movs	r3, #0
 8001662:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001664:	7afb      	ldrb	r3, [r7, #11]
 8001666:	b299      	uxth	r1, r3
 8001668:	88f8      	ldrh	r0, [r7, #6]
 800166a:	893a      	ldrh	r2, [r7, #8]
 800166c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001670:	9302      	str	r3, [sp, #8]
 8001672:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001674:	9301      	str	r3, [sp, #4]
 8001676:	6a3b      	ldr	r3, [r7, #32]
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	4603      	mov	r3, r0
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f001 fb43 	bl	8002d08 <HAL_I2C_Mem_Write>
 8001682:	4603      	mov	r3, r0
 8001684:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001686:	7dfb      	ldrb	r3, [r7, #23]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d004      	beq.n	8001696 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800168c:	7afb      	ldrb	r3, [r7, #11]
 800168e:	4619      	mov	r1, r3
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f000 f805 	bl	80016a0 <I2Cx_Error>
  }
  return status;
 8001696:	7dfb      	ldrb	r3, [r7, #23]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f001 fafc 	bl	8002caa <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff ff6c 	bl	8001590 <I2Cx_Init>
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80016c4:	4802      	ldr	r0, [pc, #8]	@ (80016d0 <SENSOR_IO_Init+0x10>)
 80016c6:	f7ff ff63 	bl	8001590 <I2Cx_Init>
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000314 	.word	0x20000314

080016d4 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af02      	add	r7, sp, #8
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
 80016de:	460b      	mov	r3, r1
 80016e0:	71bb      	strb	r3, [r7, #6]
 80016e2:	4613      	mov	r3, r2
 80016e4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80016e6:	79bb      	ldrb	r3, [r7, #6]
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	79f9      	ldrb	r1, [r7, #7]
 80016ec:	2301      	movs	r3, #1
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	1d7b      	adds	r3, r7, #5
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2301      	movs	r3, #1
 80016f6:	4803      	ldr	r0, [pc, #12]	@ (8001704 <SENSOR_IO_Write+0x30>)
 80016f8:	f7ff ffa5 	bl	8001646 <I2Cx_WriteMultiple>
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20000314 	.word	0x20000314

08001708 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af02      	add	r7, sp, #8
 800170e:	4603      	mov	r3, r0
 8001710:	460a      	mov	r2, r1
 8001712:	71fb      	strb	r3, [r7, #7]
 8001714:	4613      	mov	r3, r2
 8001716:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001718:	2300      	movs	r3, #0
 800171a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800171c:	79bb      	ldrb	r3, [r7, #6]
 800171e:	b29a      	uxth	r2, r3
 8001720:	79f9      	ldrb	r1, [r7, #7]
 8001722:	2301      	movs	r3, #1
 8001724:	9301      	str	r3, [sp, #4]
 8001726:	f107 030f 	add.w	r3, r7, #15
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	2301      	movs	r3, #1
 800172e:	4804      	ldr	r0, [pc, #16]	@ (8001740 <SENSOR_IO_Read+0x38>)
 8001730:	f7ff ff5c 	bl	80015ec <I2Cx_ReadMultiple>

  return read_value;
 8001734:	7bfb      	ldrb	r3, [r7, #15]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000314 	.word	0x20000314

08001744 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af02      	add	r7, sp, #8
 800174a:	603a      	str	r2, [r7, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
 8001752:	460b      	mov	r3, r1
 8001754:	71bb      	strb	r3, [r7, #6]
 8001756:	4613      	mov	r3, r2
 8001758:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800175a:	79bb      	ldrb	r3, [r7, #6]
 800175c:	b29a      	uxth	r2, r3
 800175e:	79f9      	ldrb	r1, [r7, #7]
 8001760:	88bb      	ldrh	r3, [r7, #4]
 8001762:	9301      	str	r3, [sp, #4]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	2301      	movs	r3, #1
 800176a:	4804      	ldr	r0, [pc, #16]	@ (800177c <SENSOR_IO_ReadMultiple+0x38>)
 800176c:	f7ff ff3e 	bl	80015ec <I2Cx_ReadMultiple>
 8001770:	4603      	mov	r3, r0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000314 	.word	0x20000314

08001780 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8001786:	2300      	movs	r3, #0
 8001788:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800178a:	2300      	movs	r3, #0
 800178c:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800178e:	4b19      	ldr	r3, [pc, #100]	@ (80017f4 <BSP_ACCELERO_Init+0x74>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	4798      	blx	r3
 8001794:	4603      	mov	r3, r0
 8001796:	2b6a      	cmp	r3, #106	@ 0x6a
 8001798:	d002      	beq.n	80017a0 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	73fb      	strb	r3, [r7, #15]
 800179e:	e024      	b.n	80017ea <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80017a0:	4b15      	ldr	r3, [pc, #84]	@ (80017f8 <BSP_ACCELERO_Init+0x78>)
 80017a2:	4a14      	ldr	r2, [pc, #80]	@ (80017f4 <BSP_ACCELERO_Init+0x74>)
 80017a4:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80017a6:	2330      	movs	r3, #48	@ 0x30
 80017a8:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80017ae:	2300      	movs	r3, #0
 80017b0:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80017b2:	2340      	movs	r3, #64	@ 0x40
 80017b4:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80017be:	797a      	ldrb	r2, [r7, #5]
 80017c0:	7abb      	ldrb	r3, [r7, #10]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80017c8:	7a3b      	ldrb	r3, [r7, #8]
 80017ca:	f043 0304 	orr.w	r3, r3, #4
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	021b      	lsls	r3, r3, #8
 80017d2:	b21a      	sxth	r2, r3
 80017d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80017d8:	4313      	orrs	r3, r2
 80017da:	b21b      	sxth	r3, r3
 80017dc:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80017de:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <BSP_ACCELERO_Init+0x78>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	89ba      	ldrh	r2, [r7, #12]
 80017e6:	4610      	mov	r0, r2
 80017e8:	4798      	blx	r3
  }  

  return ret;
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000014 	.word	0x20000014
 80017f8:	20000368 	.word	0x20000368

080017fc <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8001804:	4b08      	ldr	r3, [pc, #32]	@ (8001828 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d009      	beq.n	8001820 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 800180c:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	2b00      	cmp	r3, #0
 8001814:	d004      	beq.n	8001820 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8001816:	4b04      	ldr	r3, [pc, #16]	@ (8001828 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	4798      	blx	r3
    }
  }
}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000368 	.word	0x20000368

0800182c <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001836:	2300      	movs	r3, #0
 8001838:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800183a:	4b1b      	ldr	r3, [pc, #108]	@ (80018a8 <BSP_GYRO_Init+0x7c>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	4798      	blx	r3
 8001840:	4603      	mov	r3, r0
 8001842:	2b6a      	cmp	r3, #106	@ 0x6a
 8001844:	d002      	beq.n	800184c <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	73fb      	strb	r3, [r7, #15]
 800184a:	e028      	b.n	800189e <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 800184c:	4b17      	ldr	r3, [pc, #92]	@ (80018ac <BSP_GYRO_Init+0x80>)
 800184e:	4a16      	ldr	r2, [pc, #88]	@ (80018a8 <BSP_GYRO_Init+0x7c>)
 8001850:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8001856:	2330      	movs	r3, #48	@ 0x30
 8001858:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001862:	2340      	movs	r3, #64	@ 0x40
 8001864:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 800186a:	230c      	movs	r3, #12
 800186c:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 800186e:	7aba      	ldrb	r2, [r7, #10]
 8001870:	797b      	ldrb	r3, [r7, #5]
 8001872:	4313      	orrs	r3, r2
 8001874:	b2db      	uxtb	r3, r3
 8001876:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001878:	7a3b      	ldrb	r3, [r7, #8]
 800187a:	f043 0304 	orr.w	r3, r3, #4
 800187e:	b2db      	uxtb	r3, r3
 8001880:	021b      	lsls	r3, r3, #8
 8001882:	b21a      	sxth	r2, r3
 8001884:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001888:	4313      	orrs	r3, r2
 800188a:	b21b      	sxth	r3, r3
 800188c:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 800188e:	4b07      	ldr	r3, [pc, #28]	@ (80018ac <BSP_GYRO_Init+0x80>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	89ba      	ldrh	r2, [r7, #12]
 8001896:	4610      	mov	r0, r2
 8001898:	4798      	blx	r3
    
    ret = GYRO_OK;
 800189a:	2300      	movs	r3, #0
 800189c:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800189e:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000048 	.word	0x20000048
 80018ac:	2000036c 	.word	0x2000036c

080018b0 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80018ba:	4b09      	ldr	r3, [pc, #36]	@ (80018e0 <BSP_TSENSOR_Init+0x30>)
 80018bc:	4a09      	ldr	r2, [pc, #36]	@ (80018e4 <BSP_TSENSOR_Init+0x34>)
 80018be:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80018c0:	f7ff fefe 	bl	80016c0 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80018c4:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <BSP_TSENSOR_Init+0x30>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2100      	movs	r1, #0
 80018cc:	20be      	movs	r0, #190	@ 0xbe
 80018ce:	4798      	blx	r3

  ret = TSENSOR_OK;
 80018d0:	2300      	movs	r3, #0
 80018d2:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80018d4:	79fb      	ldrb	r3, [r7, #7]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000370 	.word	0x20000370
 80018e4:	20000004 	.word	0x20000004

080018e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ee:	4b11      	ldr	r3, [pc, #68]	@ (8001934 <HAL_MspInit+0x4c>)
 80018f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018f2:	4a10      	ldr	r2, [pc, #64]	@ (8001934 <HAL_MspInit+0x4c>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80018fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001934 <HAL_MspInit+0x4c>)
 80018fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001906:	4b0b      	ldr	r3, [pc, #44]	@ (8001934 <HAL_MspInit+0x4c>)
 8001908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800190a:	4a0a      	ldr	r2, [pc, #40]	@ (8001934 <HAL_MspInit+0x4c>)
 800190c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001910:	6593      	str	r3, [r2, #88]	@ 0x58
 8001912:	4b08      	ldr	r3, [pc, #32]	@ (8001934 <HAL_MspInit+0x4c>)
 8001914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800191a:	603b      	str	r3, [r7, #0]
 800191c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800191e:	2200      	movs	r2, #0
 8001920:	210f      	movs	r1, #15
 8001922:	f06f 0001 	mvn.w	r0, #1
 8001926:	f000 fe77 	bl	8002618 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40021000 	.word	0x40021000

08001938 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b0ae      	sub	sp, #184	@ 0xb8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001940:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001950:	f107 0310 	add.w	r3, r7, #16
 8001954:	2294      	movs	r2, #148	@ 0x94
 8001956:	2100      	movs	r1, #0
 8001958:	4618      	mov	r0, r3
 800195a:	f005 fb93 	bl	8007084 <memset>
  if(hi2c->Instance==I2C2)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a21      	ldr	r2, [pc, #132]	@ (80019e8 <HAL_I2C_MspInit+0xb0>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d13b      	bne.n	80019e0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001968:	2380      	movs	r3, #128	@ 0x80
 800196a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800196c:	2300      	movs	r3, #0
 800196e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001970:	f107 0310 	add.w	r3, r7, #16
 8001974:	4618      	mov	r0, r3
 8001976:	f002 fed1 	bl	800471c <HAL_RCCEx_PeriphCLKConfig>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001980:	f7ff fda8 	bl	80014d4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001984:	4b19      	ldr	r3, [pc, #100]	@ (80019ec <HAL_I2C_MspInit+0xb4>)
 8001986:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001988:	4a18      	ldr	r2, [pc, #96]	@ (80019ec <HAL_I2C_MspInit+0xb4>)
 800198a:	f043 0302 	orr.w	r3, r3, #2
 800198e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001990:	4b16      	ldr	r3, [pc, #88]	@ (80019ec <HAL_I2C_MspInit+0xb4>)
 8001992:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800199c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80019a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019a4:	2312      	movs	r3, #18
 80019a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b0:	2303      	movs	r3, #3
 80019b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80019b6:	2304      	movs	r3, #4
 80019b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019bc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80019c0:	4619      	mov	r1, r3
 80019c2:	480b      	ldr	r0, [pc, #44]	@ (80019f0 <HAL_I2C_MspInit+0xb8>)
 80019c4:	f000 fe52 	bl	800266c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019c8:	4b08      	ldr	r3, [pc, #32]	@ (80019ec <HAL_I2C_MspInit+0xb4>)
 80019ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019cc:	4a07      	ldr	r2, [pc, #28]	@ (80019ec <HAL_I2C_MspInit+0xb4>)
 80019ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80019d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80019d4:	4b05      	ldr	r3, [pc, #20]	@ (80019ec <HAL_I2C_MspInit+0xb4>)
 80019d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80019e0:	bf00      	nop
 80019e2:	37b8      	adds	r7, #184	@ 0xb8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40005800 	.word	0x40005800
 80019ec:	40021000 	.word	0x40021000
 80019f0:	48000400 	.word	0x48000400

080019f4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a0b      	ldr	r2, [pc, #44]	@ (8001a30 <HAL_I2C_MspDeInit+0x3c>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d10f      	bne.n	8001a26 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001a06:	4b0b      	ldr	r3, [pc, #44]	@ (8001a34 <HAL_I2C_MspDeInit+0x40>)
 8001a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a34 <HAL_I2C_MspDeInit+0x40>)
 8001a0c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001a10:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8001a12:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a16:	4808      	ldr	r0, [pc, #32]	@ (8001a38 <HAL_I2C_MspDeInit+0x44>)
 8001a18:	f000 ffba 	bl	8002990 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8001a1c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a20:	4805      	ldr	r0, [pc, #20]	@ (8001a38 <HAL_I2C_MspDeInit+0x44>)
 8001a22:	f000 ffb5 	bl	8002990 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40005800 	.word	0x40005800
 8001a34:	40021000 	.word	0x40021000
 8001a38:	48000400 	.word	0x48000400

08001a3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b0ae      	sub	sp, #184	@ 0xb8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a54:	f107 0310 	add.w	r3, r7, #16
 8001a58:	2294      	movs	r2, #148	@ 0x94
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f005 fb11 	bl	8007084 <memset>
  if(huart->Instance==USART1)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a21      	ldr	r2, [pc, #132]	@ (8001aec <HAL_UART_MspInit+0xb0>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d13a      	bne.n	8001ae2 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001a70:	2300      	movs	r3, #0
 8001a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a74:	f107 0310 	add.w	r3, r7, #16
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f002 fe4f 	bl	800471c <HAL_RCCEx_PeriphCLKConfig>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a84:	f7ff fd26 	bl	80014d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a88:	4b19      	ldr	r3, [pc, #100]	@ (8001af0 <HAL_UART_MspInit+0xb4>)
 8001a8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a8c:	4a18      	ldr	r2, [pc, #96]	@ (8001af0 <HAL_UART_MspInit+0xb4>)
 8001a8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a92:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a94:	4b16      	ldr	r3, [pc, #88]	@ (8001af0 <HAL_UART_MspInit+0xb4>)
 8001a96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa0:	4b13      	ldr	r3, [pc, #76]	@ (8001af0 <HAL_UART_MspInit+0xb4>)
 8001aa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa4:	4a12      	ldr	r2, [pc, #72]	@ (8001af0 <HAL_UART_MspInit+0xb4>)
 8001aa6:	f043 0302 	orr.w	r3, r3, #2
 8001aaa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aac:	4b10      	ldr	r3, [pc, #64]	@ (8001af0 <HAL_UART_MspInit+0xb4>)
 8001aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ab8:	23c0      	movs	r3, #192	@ 0xc0
 8001aba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aca:	2303      	movs	r3, #3
 8001acc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ad0:	2307      	movs	r3, #7
 8001ad2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ada:	4619      	mov	r1, r3
 8001adc:	4805      	ldr	r0, [pc, #20]	@ (8001af4 <HAL_UART_MspInit+0xb8>)
 8001ade:	f000 fdc5 	bl	800266c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ae2:	bf00      	nop
 8001ae4:	37b8      	adds	r7, #184	@ 0xb8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40013800 	.word	0x40013800
 8001af0:	40021000 	.word	0x40021000
 8001af4:	48000400 	.word	0x48000400

08001af8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08e      	sub	sp, #56	@ 0x38
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001b00:	2300      	movs	r3, #0
 8001b02:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001b06:	4b34      	ldr	r3, [pc, #208]	@ (8001bd8 <HAL_InitTick+0xe0>)
 8001b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b0a:	4a33      	ldr	r2, [pc, #204]	@ (8001bd8 <HAL_InitTick+0xe0>)
 8001b0c:	f043 0310 	orr.w	r3, r3, #16
 8001b10:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b12:	4b31      	ldr	r3, [pc, #196]	@ (8001bd8 <HAL_InitTick+0xe0>)
 8001b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b16:	f003 0310 	and.w	r3, r3, #16
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b1e:	f107 0210 	add.w	r2, r7, #16
 8001b22:	f107 0314 	add.w	r3, r7, #20
 8001b26:	4611      	mov	r1, r2
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f002 fd05 	bl	8004538 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001b2e:	6a3b      	ldr	r3, [r7, #32]
 8001b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d103      	bne.n	8001b40 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b38:	f002 fcd2 	bl	80044e0 <HAL_RCC_GetPCLK1Freq>
 8001b3c:	6378      	str	r0, [r7, #52]	@ 0x34
 8001b3e:	e004      	b.n	8001b4a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001b40:	f002 fcce 	bl	80044e0 <HAL_RCC_GetPCLK1Freq>
 8001b44:	4603      	mov	r3, r0
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b4c:	4a23      	ldr	r2, [pc, #140]	@ (8001bdc <HAL_InitTick+0xe4>)
 8001b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b52:	0c9b      	lsrs	r3, r3, #18
 8001b54:	3b01      	subs	r3, #1
 8001b56:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001b58:	4b21      	ldr	r3, [pc, #132]	@ (8001be0 <HAL_InitTick+0xe8>)
 8001b5a:	4a22      	ldr	r2, [pc, #136]	@ (8001be4 <HAL_InitTick+0xec>)
 8001b5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001b5e:	4b20      	ldr	r3, [pc, #128]	@ (8001be0 <HAL_InitTick+0xe8>)
 8001b60:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b64:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001b66:	4a1e      	ldr	r2, [pc, #120]	@ (8001be0 <HAL_InitTick+0xe8>)
 8001b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b6a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001b6c:	4b1c      	ldr	r3, [pc, #112]	@ (8001be0 <HAL_InitTick+0xe8>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b72:	4b1b      	ldr	r3, [pc, #108]	@ (8001be0 <HAL_InitTick+0xe8>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b78:	4b19      	ldr	r3, [pc, #100]	@ (8001be0 <HAL_InitTick+0xe8>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001b7e:	4818      	ldr	r0, [pc, #96]	@ (8001be0 <HAL_InitTick+0xe8>)
 8001b80:	f003 fae4 	bl	800514c <HAL_TIM_Base_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001b8a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d11b      	bne.n	8001bca <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001b92:	4813      	ldr	r0, [pc, #76]	@ (8001be0 <HAL_InitTick+0xe8>)
 8001b94:	f003 fb3c 	bl	8005210 <HAL_TIM_Base_Start_IT>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001b9e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d111      	bne.n	8001bca <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ba6:	2036      	movs	r0, #54	@ 0x36
 8001ba8:	f000 fd52 	bl	8002650 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b0f      	cmp	r3, #15
 8001bb0:	d808      	bhi.n	8001bc4 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	2036      	movs	r0, #54	@ 0x36
 8001bb8:	f000 fd2e 	bl	8002618 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8001be8 <HAL_InitTick+0xf0>)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	e002      	b.n	8001bca <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001bca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3738      	adds	r7, #56	@ 0x38
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	431bde83 	.word	0x431bde83
 8001be0:	20000374 	.word	0x20000374
 8001be4:	40001000 	.word	0x40001000
 8001be8:	2000007c 	.word	0x2000007c

08001bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <NMI_Handler+0x4>

08001bf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <HardFault_Handler+0x4>

08001bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c00:	bf00      	nop
 8001c02:	e7fd      	b.n	8001c00 <MemManage_Handler+0x4>

08001c04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c08:	bf00      	nop
 8001c0a:	e7fd      	b.n	8001c08 <BusFault_Handler+0x4>

08001c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c10:	bf00      	nop
 8001c12:	e7fd      	b.n	8001c10 <UsageFault_Handler+0x4>

08001c14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
	...

08001c24 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c28:	4802      	ldr	r0, [pc, #8]	@ (8001c34 <TIM6_DAC_IRQHandler+0x10>)
 8001c2a:	f003 fb61 	bl	80052f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000374 	.word	0x20000374

08001c38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return 1;
 8001c3c:	2301      	movs	r3, #1
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <_kill>:

int _kill(int pid, int sig)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c52:	f005 fa23 	bl	800709c <__errno>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2216      	movs	r2, #22
 8001c5a:	601a      	str	r2, [r3, #0]
  return -1;
 8001c5c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <_exit>:

void _exit (int status)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c70:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff ffe7 	bl	8001c48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c7a:	bf00      	nop
 8001c7c:	e7fd      	b.n	8001c7a <_exit+0x12>

08001c7e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b086      	sub	sp, #24
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	60f8      	str	r0, [r7, #12]
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	e00a      	b.n	8001ca6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c90:	f3af 8000 	nop.w
 8001c94:	4601      	mov	r1, r0
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	1c5a      	adds	r2, r3, #1
 8001c9a:	60ba      	str	r2, [r7, #8]
 8001c9c:	b2ca      	uxtb	r2, r1
 8001c9e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	dbf0      	blt.n	8001c90 <_read+0x12>
  }

  return len;
 8001cae:	687b      	ldr	r3, [r7, #4]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	e009      	b.n	8001cde <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	1c5a      	adds	r2, r3, #1
 8001cce:	60ba      	str	r2, [r7, #8]
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	dbf1      	blt.n	8001cca <_write+0x12>
  }
  return len;
 8001ce6:	687b      	ldr	r3, [r7, #4]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <_close>:

int _close(int file)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cf8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d18:	605a      	str	r2, [r3, #4]
  return 0;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <_isatty>:

int _isatty(int file)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d30:	2301      	movs	r3, #1
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b085      	sub	sp, #20
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	60f8      	str	r0, [r7, #12]
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d60:	4a14      	ldr	r2, [pc, #80]	@ (8001db4 <_sbrk+0x5c>)
 8001d62:	4b15      	ldr	r3, [pc, #84]	@ (8001db8 <_sbrk+0x60>)
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d6c:	4b13      	ldr	r3, [pc, #76]	@ (8001dbc <_sbrk+0x64>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d102      	bne.n	8001d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d74:	4b11      	ldr	r3, [pc, #68]	@ (8001dbc <_sbrk+0x64>)
 8001d76:	4a12      	ldr	r2, [pc, #72]	@ (8001dc0 <_sbrk+0x68>)
 8001d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d7a:	4b10      	ldr	r3, [pc, #64]	@ (8001dbc <_sbrk+0x64>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d207      	bcs.n	8001d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d88:	f005 f988 	bl	800709c <__errno>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	220c      	movs	r2, #12
 8001d90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d96:	e009      	b.n	8001dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d98:	4b08      	ldr	r3, [pc, #32]	@ (8001dbc <_sbrk+0x64>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d9e:	4b07      	ldr	r3, [pc, #28]	@ (8001dbc <_sbrk+0x64>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	4a05      	ldr	r2, [pc, #20]	@ (8001dbc <_sbrk+0x64>)
 8001da8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001daa:	68fb      	ldr	r3, [r7, #12]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	200a0000 	.word	0x200a0000
 8001db8:	00000400 	.word	0x00000400
 8001dbc:	200003c0 	.word	0x200003c0
 8001dc0:	20000518 	.word	0x20000518

08001dc4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001dc8:	4b06      	ldr	r3, [pc, #24]	@ (8001de4 <SystemInit+0x20>)
 8001dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dce:	4a05      	ldr	r2, [pc, #20]	@ (8001de4 <SystemInit+0x20>)
 8001dd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001de8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e20 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dec:	f7ff ffea 	bl	8001dc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001df0:	480c      	ldr	r0, [pc, #48]	@ (8001e24 <LoopForever+0x6>)
  ldr r1, =_edata
 8001df2:	490d      	ldr	r1, [pc, #52]	@ (8001e28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001df4:	4a0d      	ldr	r2, [pc, #52]	@ (8001e2c <LoopForever+0xe>)
  movs r3, #0
 8001df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001df8:	e002      	b.n	8001e00 <LoopCopyDataInit>

08001dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dfe:	3304      	adds	r3, #4

08001e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e04:	d3f9      	bcc.n	8001dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e06:	4a0a      	ldr	r2, [pc, #40]	@ (8001e30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e08:	4c0a      	ldr	r4, [pc, #40]	@ (8001e34 <LoopForever+0x16>)
  movs r3, #0
 8001e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e0c:	e001      	b.n	8001e12 <LoopFillZerobss>

08001e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e10:	3204      	adds	r2, #4

08001e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e14:	d3fb      	bcc.n	8001e0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e16:	f005 f947 	bl	80070a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e1a:	f7ff fa63 	bl	80012e4 <main>

08001e1e <LoopForever>:

LoopForever:
    b LoopForever
 8001e1e:	e7fe      	b.n	8001e1e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e20:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e28:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 8001e2c:	0800977c 	.word	0x0800977c
  ldr r2, =_sbss
 8001e30:	2000024c 	.word	0x2000024c
  ldr r4, =_ebss
 8001e34:	20000514 	.word	0x20000514

08001e38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e38:	e7fe      	b.n	8001e38 <ADC1_IRQHandler>

08001e3a <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b084      	sub	sp, #16
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	4603      	mov	r3, r0
 8001e42:	6039      	str	r1, [r7, #0]
 8001e44:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2120      	movs	r1, #32
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff fc5b 	bl	8001708 <SENSOR_IO_Read>
 8001e52:	4603      	mov	r3, r0
 8001e54:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
 8001e58:	f023 0304 	bic.w	r3, r3, #4
 8001e5c:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
 8001e60:	f043 0304 	orr.w	r3, r3, #4
 8001e64:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
 8001e68:	f023 0303 	bic.w	r3, r3, #3
 8001e6c:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001e6e:	7bfb      	ldrb	r3, [r7, #15]
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
 8001e78:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e7c:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001e7e:	88fb      	ldrh	r3, [r7, #6]
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	7bfa      	ldrb	r2, [r7, #15]
 8001e84:	2120      	movs	r1, #32
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff fc24 	bl	80016d4 <SENSOR_IO_Write>
}
 8001e8c:	bf00      	nop
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b088      	sub	sp, #32
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8001e9e:	88fb      	ldrh	r3, [r7, #6]
 8001ea0:	b2d8      	uxtb	r0, r3
 8001ea2:	f107 0208 	add.w	r2, r7, #8
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	21b2      	movs	r1, #178	@ 0xb2
 8001eaa:	f7ff fc4b 	bl	8001744 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8001eae:	88fb      	ldrh	r3, [r7, #6]
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2135      	movs	r1, #53	@ 0x35
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff fc27 	bl	8001708 <SENSOR_IO_Read>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001ebe:	7ffb      	ldrb	r3, [r7, #31]
 8001ec0:	021b      	lsls	r3, r3, #8
 8001ec2:	b21b      	sxth	r3, r3
 8001ec4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ec8:	b21a      	sxth	r2, r3
 8001eca:	7a3b      	ldrb	r3, [r7, #8]
 8001ecc:	b21b      	sxth	r3, r3
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001ed2:	7ffb      	ldrb	r3, [r7, #31]
 8001ed4:	019b      	lsls	r3, r3, #6
 8001ed6:	b21b      	sxth	r3, r3
 8001ed8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001edc:	b21a      	sxth	r2, r3
 8001ede:	7a7b      	ldrb	r3, [r7, #9]
 8001ee0:	b21b      	sxth	r3, r3
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8001ee6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001eea:	10db      	asrs	r3, r3, #3
 8001eec:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8001eee:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001ef2:	10db      	asrs	r3, r3, #3
 8001ef4:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001ef6:	88fb      	ldrh	r3, [r7, #6]
 8001ef8:	b2d8      	uxtb	r0, r3
 8001efa:	f107 0208 	add.w	r2, r7, #8
 8001efe:	2304      	movs	r3, #4
 8001f00:	21bc      	movs	r1, #188	@ 0xbc
 8001f02:	f7ff fc1f 	bl	8001744 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001f06:	7a7b      	ldrb	r3, [r7, #9]
 8001f08:	021b      	lsls	r3, r3, #8
 8001f0a:	b21a      	sxth	r2, r3
 8001f0c:	7a3b      	ldrb	r3, [r7, #8]
 8001f0e:	b21b      	sxth	r3, r3
 8001f10:	4313      	orrs	r3, r2
 8001f12:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001f14:	7afb      	ldrb	r3, [r7, #11]
 8001f16:	021b      	lsls	r3, r3, #8
 8001f18:	b21a      	sxth	r2, r3
 8001f1a:	7abb      	ldrb	r3, [r7, #10]
 8001f1c:	b21b      	sxth	r3, r3
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001f22:	88fb      	ldrh	r3, [r7, #6]
 8001f24:	b2d8      	uxtb	r0, r3
 8001f26:	f107 0208 	add.w	r2, r7, #8
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	21aa      	movs	r1, #170	@ 0xaa
 8001f2e:	f7ff fc09 	bl	8001744 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001f32:	7a7b      	ldrb	r3, [r7, #9]
 8001f34:	021b      	lsls	r3, r3, #8
 8001f36:	b21a      	sxth	r2, r3
 8001f38:	7a3b      	ldrb	r3, [r7, #8]
 8001f3a:	b21b      	sxth	r3, r3
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8001f40:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001f44:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	ee07 3a90 	vmov	s15, r3
 8001f4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f52:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001f56:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	ee07 3a90 	vmov	s15, r3
 8001f60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f64:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001f68:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001f6c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	ee07 3a90 	vmov	s15, r3
 8001f76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f7e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001f82:	ee07 3a90 	vmov	s15, r3
 8001f86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f8e:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	ee07 3a90 	vmov	s15, r3
}
 8001f98:	eeb0 0a67 	vmov.f32	s0, s15
 8001f9c:	3720      	adds	r7, #32
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b084      	sub	sp, #16
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	4603      	mov	r3, r0
 8001faa:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001fac:	2300      	movs	r3, #0
 8001fae:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001fb0:	2110      	movs	r1, #16
 8001fb2:	20d4      	movs	r0, #212	@ 0xd4
 8001fb4:	f7ff fba8 	bl	8001708 <SENSOR_IO_Read>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8001fbc:	88fb      	ldrh	r3, [r7, #6]
 8001fbe:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8001fc0:	7bbb      	ldrb	r3, [r7, #14]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8001fc8:	7bba      	ldrb	r2, [r7, #14]
 8001fca:	7bfb      	ldrb	r3, [r7, #15]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8001fd0:	7bbb      	ldrb	r3, [r7, #14]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	2110      	movs	r1, #16
 8001fd6:	20d4      	movs	r0, #212	@ 0xd4
 8001fd8:	f7ff fb7c 	bl	80016d4 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001fdc:	2112      	movs	r1, #18
 8001fde:	20d4      	movs	r0, #212	@ 0xd4
 8001fe0:	f7ff fb92 	bl	8001708 <SENSOR_IO_Read>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8001fe8:	88fb      	ldrh	r3, [r7, #6]
 8001fea:	0a1b      	lsrs	r3, r3, #8
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8001ff0:	7bbb      	ldrb	r3, [r7, #14]
 8001ff2:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8001ff6:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8001ff8:	7bba      	ldrb	r2, [r7, #14]
 8001ffa:	7bfb      	ldrb	r3, [r7, #15]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002000:	7bbb      	ldrb	r3, [r7, #14]
 8002002:	461a      	mov	r2, r3
 8002004:	2112      	movs	r1, #18
 8002006:	20d4      	movs	r0, #212	@ 0xd4
 8002008:	f7ff fb64 	bl	80016d4 <SENSOR_IO_Write>
}
 800200c:	bf00      	nop
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800201a:	2300      	movs	r3, #0
 800201c:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800201e:	2110      	movs	r1, #16
 8002020:	20d4      	movs	r0, #212	@ 0xd4
 8002022:	f7ff fb71 	bl	8001708 <SENSOR_IO_Read>
 8002026:	4603      	mov	r3, r0
 8002028:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	f003 030f 	and.w	r3, r3, #15
 8002030:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	461a      	mov	r2, r3
 8002036:	2110      	movs	r1, #16
 8002038:	20d4      	movs	r0, #212	@ 0xd4
 800203a:	f7ff fb4b 	bl	80016d4 <SENSOR_IO_Write>
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8002046:	b580      	push	{r7, lr}
 8002048:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 800204a:	f7ff fb39 	bl	80016c0 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 800204e:	210f      	movs	r1, #15
 8002050:	20d4      	movs	r0, #212	@ 0xd4
 8002052:	f7ff fb59 	bl	8001708 <SENSOR_IO_Read>
 8002056:	4603      	mov	r3, r0
}
 8002058:	4618      	mov	r0, r3
 800205a:	bd80      	pop	{r7, pc}

0800205c <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002066:	2300      	movs	r3, #0
 8002068:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 800206a:	2115      	movs	r1, #21
 800206c:	20d4      	movs	r0, #212	@ 0xd4
 800206e:	f7ff fb4b 	bl	8001708 <SENSOR_IO_Read>
 8002072:	4603      	mov	r3, r0
 8002074:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8002076:	7bfb      	ldrb	r3, [r7, #15]
 8002078:	f023 0310 	bic.w	r3, r3, #16
 800207c:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800207e:	88fb      	ldrh	r3, [r7, #6]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8002084:	7bfb      	ldrb	r3, [r7, #15]
 8002086:	f043 0310 	orr.w	r3, r3, #16
 800208a:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 800208c:	7bfb      	ldrb	r3, [r7, #15]
 800208e:	461a      	mov	r2, r3
 8002090:	2115      	movs	r1, #21
 8002092:	20d4      	movs	r0, #212	@ 0xd4
 8002094:	f7ff fb1e 	bl	80016d4 <SENSOR_IO_Write>
}
 8002098:	bf00      	nop
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b088      	sub	sp, #32
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80020a8:	2300      	movs	r3, #0
 80020aa:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80020b0:	f04f 0300 	mov.w	r3, #0
 80020b4:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80020b6:	2110      	movs	r1, #16
 80020b8:	20d4      	movs	r0, #212	@ 0xd4
 80020ba:	f7ff fb25 	bl	8001708 <SENSOR_IO_Read>
 80020be:	4603      	mov	r3, r0
 80020c0:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80020c2:	f107 0208 	add.w	r2, r7, #8
 80020c6:	2306      	movs	r3, #6
 80020c8:	2128      	movs	r1, #40	@ 0x28
 80020ca:	20d4      	movs	r0, #212	@ 0xd4
 80020cc:	f7ff fb3a 	bl	8001744 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80020d0:	2300      	movs	r3, #0
 80020d2:	77fb      	strb	r3, [r7, #31]
 80020d4:	e01a      	b.n	800210c <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80020d6:	7ffb      	ldrb	r3, [r7, #31]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	3301      	adds	r3, #1
 80020dc:	3320      	adds	r3, #32
 80020de:	443b      	add	r3, r7
 80020e0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80020e4:	021b      	lsls	r3, r3, #8
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	7ffa      	ldrb	r2, [r7, #31]
 80020ea:	0052      	lsls	r2, r2, #1
 80020ec:	3220      	adds	r2, #32
 80020ee:	443a      	add	r2, r7
 80020f0:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80020f4:	4413      	add	r3, r2
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	7ffb      	ldrb	r3, [r7, #31]
 80020fa:	b212      	sxth	r2, r2
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	3320      	adds	r3, #32
 8002100:	443b      	add	r3, r7
 8002102:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002106:	7ffb      	ldrb	r3, [r7, #31]
 8002108:	3301      	adds	r3, #1
 800210a:	77fb      	strb	r3, [r7, #31]
 800210c:	7ffb      	ldrb	r3, [r7, #31]
 800210e:	2b02      	cmp	r3, #2
 8002110:	d9e1      	bls.n	80020d6 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8002112:	7dfb      	ldrb	r3, [r7, #23]
 8002114:	f003 030c 	and.w	r3, r3, #12
 8002118:	2b0c      	cmp	r3, #12
 800211a:	d829      	bhi.n	8002170 <LSM6DSL_AccReadXYZ+0xd0>
 800211c:	a201      	add	r2, pc, #4	@ (adr r2, 8002124 <LSM6DSL_AccReadXYZ+0x84>)
 800211e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002122:	bf00      	nop
 8002124:	08002159 	.word	0x08002159
 8002128:	08002171 	.word	0x08002171
 800212c:	08002171 	.word	0x08002171
 8002130:	08002171 	.word	0x08002171
 8002134:	0800216b 	.word	0x0800216b
 8002138:	08002171 	.word	0x08002171
 800213c:	08002171 	.word	0x08002171
 8002140:	08002171 	.word	0x08002171
 8002144:	0800215f 	.word	0x0800215f
 8002148:	08002171 	.word	0x08002171
 800214c:	08002171 	.word	0x08002171
 8002150:	08002171 	.word	0x08002171
 8002154:	08002165 	.word	0x08002165
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8002158:	4b18      	ldr	r3, [pc, #96]	@ (80021bc <LSM6DSL_AccReadXYZ+0x11c>)
 800215a:	61bb      	str	r3, [r7, #24]
    break;
 800215c:	e008      	b.n	8002170 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 800215e:	4b18      	ldr	r3, [pc, #96]	@ (80021c0 <LSM6DSL_AccReadXYZ+0x120>)
 8002160:	61bb      	str	r3, [r7, #24]
    break;
 8002162:	e005      	b.n	8002170 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8002164:	4b17      	ldr	r3, [pc, #92]	@ (80021c4 <LSM6DSL_AccReadXYZ+0x124>)
 8002166:	61bb      	str	r3, [r7, #24]
    break;
 8002168:	e002      	b.n	8002170 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800216a:	4b17      	ldr	r3, [pc, #92]	@ (80021c8 <LSM6DSL_AccReadXYZ+0x128>)
 800216c:	61bb      	str	r3, [r7, #24]
    break;    
 800216e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002170:	2300      	movs	r3, #0
 8002172:	77fb      	strb	r3, [r7, #31]
 8002174:	e01a      	b.n	80021ac <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002176:	7ffb      	ldrb	r3, [r7, #31]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	3320      	adds	r3, #32
 800217c:	443b      	add	r3, r7
 800217e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002182:	ee07 3a90 	vmov	s15, r3
 8002186:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800218a:	edd7 7a06 	vldr	s15, [r7, #24]
 800218e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002192:	7ffb      	ldrb	r3, [r7, #31]
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	4413      	add	r3, r2
 800219a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800219e:	ee17 2a90 	vmov	r2, s15
 80021a2:	b212      	sxth	r2, r2
 80021a4:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80021a6:	7ffb      	ldrb	r3, [r7, #31]
 80021a8:	3301      	adds	r3, #1
 80021aa:	77fb      	strb	r3, [r7, #31]
 80021ac:	7ffb      	ldrb	r3, [r7, #31]
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d9e1      	bls.n	8002176 <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 80021b2:	bf00      	nop
 80021b4:	bf00      	nop
 80021b6:	3720      	adds	r7, #32
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	3d79db23 	.word	0x3d79db23
 80021c0:	3df9db23 	.word	0x3df9db23
 80021c4:	3e79db23 	.word	0x3e79db23
 80021c8:	3ef9db23 	.word	0x3ef9db23

080021cc <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80021d6:	2300      	movs	r3, #0
 80021d8:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80021da:	2111      	movs	r1, #17
 80021dc:	20d4      	movs	r0, #212	@ 0xd4
 80021de:	f7ff fa93 	bl	8001708 <SENSOR_IO_Read>
 80021e2:	4603      	mov	r3, r0
 80021e4:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80021e6:	88fb      	ldrh	r3, [r7, #6]
 80021e8:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80021ea:	7bbb      	ldrb	r3, [r7, #14]
 80021ec:	f003 0303 	and.w	r3, r3, #3
 80021f0:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80021f2:	7bba      	ldrb	r2, [r7, #14]
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 80021fa:	7bbb      	ldrb	r3, [r7, #14]
 80021fc:	461a      	mov	r2, r3
 80021fe:	2111      	movs	r1, #17
 8002200:	20d4      	movs	r0, #212	@ 0xd4
 8002202:	f7ff fa67 	bl	80016d4 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002206:	2112      	movs	r1, #18
 8002208:	20d4      	movs	r0, #212	@ 0xd4
 800220a:	f7ff fa7d 	bl	8001708 <SENSOR_IO_Read>
 800220e:	4603      	mov	r3, r0
 8002210:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002212:	88fb      	ldrh	r3, [r7, #6]
 8002214:	0a1b      	lsrs	r3, r3, #8
 8002216:	b29b      	uxth	r3, r3
 8002218:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800221a:	7bbb      	ldrb	r3, [r7, #14]
 800221c:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8002220:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8002222:	7bba      	ldrb	r2, [r7, #14]
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	4313      	orrs	r3, r2
 8002228:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800222a:	7bbb      	ldrb	r3, [r7, #14]
 800222c:	461a      	mov	r2, r3
 800222e:	2112      	movs	r1, #18
 8002230:	20d4      	movs	r0, #212	@ 0xd4
 8002232:	f7ff fa4f 	bl	80016d4 <SENSOR_IO_Write>
}
 8002236:	bf00      	nop
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b082      	sub	sp, #8
 8002242:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002244:	2300      	movs	r3, #0
 8002246:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002248:	2111      	movs	r1, #17
 800224a:	20d4      	movs	r0, #212	@ 0xd4
 800224c:	f7ff fa5c 	bl	8001708 <SENSOR_IO_Read>
 8002250:	4603      	mov	r3, r0
 8002252:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 800225c:	79fb      	ldrb	r3, [r7, #7]
 800225e:	461a      	mov	r2, r3
 8002260:	2111      	movs	r1, #17
 8002262:	20d4      	movs	r0, #212	@ 0xd4
 8002264:	f7ff fa36 	bl	80016d4 <SENSOR_IO_Write>
}
 8002268:	bf00      	nop
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002274:	f7ff fa24 	bl	80016c0 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8002278:	210f      	movs	r1, #15
 800227a:	20d4      	movs	r0, #212	@ 0xd4
 800227c:	f7ff fa44 	bl	8001708 <SENSOR_IO_Read>
 8002280:	4603      	mov	r3, r0
}
 8002282:	4618      	mov	r0, r3
 8002284:	bd80      	pop	{r7, pc}

08002286 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8002286:	b580      	push	{r7, lr}
 8002288:	b084      	sub	sp, #16
 800228a:	af00      	add	r7, sp, #0
 800228c:	4603      	mov	r3, r0
 800228e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002290:	2300      	movs	r3, #0
 8002292:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8002294:	2116      	movs	r1, #22
 8002296:	20d4      	movs	r0, #212	@ 0xd4
 8002298:	f7ff fa36 	bl	8001708 <SENSOR_IO_Read>
 800229c:	4603      	mov	r3, r0
 800229e:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
 80022a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80022a6:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80022a8:	88fb      	ldrh	r3, [r7, #6]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
 80022b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80022b4:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	461a      	mov	r2, r3
 80022ba:	2116      	movs	r1, #22
 80022bc:	20d4      	movs	r0, #212	@ 0xd4
 80022be:	f7ff fa09 	bl	80016d4 <SENSOR_IO_Write>
}
 80022c2:	bf00      	nop
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b088      	sub	sp, #32
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80022dc:	f04f 0300 	mov.w	r3, #0
 80022e0:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80022e2:	2111      	movs	r1, #17
 80022e4:	20d4      	movs	r0, #212	@ 0xd4
 80022e6:	f7ff fa0f 	bl	8001708 <SENSOR_IO_Read>
 80022ea:	4603      	mov	r3, r0
 80022ec:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 80022ee:	f107 0208 	add.w	r2, r7, #8
 80022f2:	2306      	movs	r3, #6
 80022f4:	2122      	movs	r1, #34	@ 0x22
 80022f6:	20d4      	movs	r0, #212	@ 0xd4
 80022f8:	f7ff fa24 	bl	8001744 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80022fc:	2300      	movs	r3, #0
 80022fe:	77fb      	strb	r3, [r7, #31]
 8002300:	e01a      	b.n	8002338 <LSM6DSL_GyroReadXYZAngRate+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002302:	7ffb      	ldrb	r3, [r7, #31]
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	3301      	adds	r3, #1
 8002308:	3320      	adds	r3, #32
 800230a:	443b      	add	r3, r7
 800230c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002310:	021b      	lsls	r3, r3, #8
 8002312:	b29b      	uxth	r3, r3
 8002314:	7ffa      	ldrb	r2, [r7, #31]
 8002316:	0052      	lsls	r2, r2, #1
 8002318:	3220      	adds	r2, #32
 800231a:	443a      	add	r2, r7
 800231c:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002320:	4413      	add	r3, r2
 8002322:	b29a      	uxth	r2, r3
 8002324:	7ffb      	ldrb	r3, [r7, #31]
 8002326:	b212      	sxth	r2, r2
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	3320      	adds	r3, #32
 800232c:	443b      	add	r3, r7
 800232e:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002332:	7ffb      	ldrb	r3, [r7, #31]
 8002334:	3301      	adds	r3, #1
 8002336:	77fb      	strb	r3, [r7, #31]
 8002338:	7ffb      	ldrb	r3, [r7, #31]
 800233a:	2b02      	cmp	r3, #2
 800233c:	d9e1      	bls.n	8002302 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 800233e:	7dfb      	ldrb	r3, [r7, #23]
 8002340:	f003 030c 	and.w	r3, r3, #12
 8002344:	2b0c      	cmp	r3, #12
 8002346:	d829      	bhi.n	800239c <LSM6DSL_GyroReadXYZAngRate+0xd0>
 8002348:	a201      	add	r2, pc, #4	@ (adr r2, 8002350 <LSM6DSL_GyroReadXYZAngRate+0x84>)
 800234a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800234e:	bf00      	nop
 8002350:	08002385 	.word	0x08002385
 8002354:	0800239d 	.word	0x0800239d
 8002358:	0800239d 	.word	0x0800239d
 800235c:	0800239d 	.word	0x0800239d
 8002360:	0800238b 	.word	0x0800238b
 8002364:	0800239d 	.word	0x0800239d
 8002368:	0800239d 	.word	0x0800239d
 800236c:	0800239d 	.word	0x0800239d
 8002370:	08002391 	.word	0x08002391
 8002374:	0800239d 	.word	0x0800239d
 8002378:	0800239d 	.word	0x0800239d
 800237c:	0800239d 	.word	0x0800239d
 8002380:	08002397 	.word	0x08002397
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8002384:	4b16      	ldr	r3, [pc, #88]	@ (80023e0 <LSM6DSL_GyroReadXYZAngRate+0x114>)
 8002386:	61bb      	str	r3, [r7, #24]
    break;
 8002388:	e008      	b.n	800239c <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 800238a:	4b16      	ldr	r3, [pc, #88]	@ (80023e4 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 800238c:	61bb      	str	r3, [r7, #24]
    break;
 800238e:	e005      	b.n	800239c <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8002390:	4b15      	ldr	r3, [pc, #84]	@ (80023e8 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8002392:	61bb      	str	r3, [r7, #24]
    break;
 8002394:	e002      	b.n	800239c <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8002396:	4b15      	ldr	r3, [pc, #84]	@ (80023ec <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8002398:	61bb      	str	r3, [r7, #24]
    break;    
 800239a:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800239c:	2300      	movs	r3, #0
 800239e:	77fb      	strb	r3, [r7, #31]
 80023a0:	e016      	b.n	80023d0 <LSM6DSL_GyroReadXYZAngRate+0x104>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 80023a2:	7ffb      	ldrb	r3, [r7, #31]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	3320      	adds	r3, #32
 80023a8:	443b      	add	r3, r7
 80023aa:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80023ae:	ee07 3a90 	vmov	s15, r3
 80023b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023b6:	7ffb      	ldrb	r3, [r7, #31]
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	4413      	add	r3, r2
 80023be:	edd7 7a06 	vldr	s15, [r7, #24]
 80023c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023c6:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 80023ca:	7ffb      	ldrb	r3, [r7, #31]
 80023cc:	3301      	adds	r3, #1
 80023ce:	77fb      	strb	r3, [r7, #31]
 80023d0:	7ffb      	ldrb	r3, [r7, #31]
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d9e5      	bls.n	80023a2 <LSM6DSL_GyroReadXYZAngRate+0xd6>
  }
}
 80023d6:	bf00      	nop
 80023d8:	bf00      	nop
 80023da:	3720      	adds	r7, #32
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	410c0000 	.word	0x410c0000
 80023e4:	418c0000 	.word	0x418c0000
 80023e8:	420c0000 	.word	0x420c0000
 80023ec:	428c0000 	.word	0x428c0000

080023f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023f6:	2300      	movs	r3, #0
 80023f8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023fa:	2003      	movs	r0, #3
 80023fc:	f000 f901 	bl	8002602 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002400:	200f      	movs	r0, #15
 8002402:	f7ff fb79 	bl	8001af8 <HAL_InitTick>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d002      	beq.n	8002412 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	71fb      	strb	r3, [r7, #7]
 8002410:	e001      	b.n	8002416 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002412:	f7ff fa69 	bl	80018e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002416:	79fb      	ldrb	r3, [r7, #7]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002424:	4b06      	ldr	r3, [pc, #24]	@ (8002440 <HAL_IncTick+0x20>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	461a      	mov	r2, r3
 800242a:	4b06      	ldr	r3, [pc, #24]	@ (8002444 <HAL_IncTick+0x24>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4413      	add	r3, r2
 8002430:	4a04      	ldr	r2, [pc, #16]	@ (8002444 <HAL_IncTick+0x24>)
 8002432:	6013      	str	r3, [r2, #0]
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	20000080 	.word	0x20000080
 8002444:	200003c4 	.word	0x200003c4

08002448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return uwTick;
 800244c:	4b03      	ldr	r3, [pc, #12]	@ (800245c <HAL_GetTick+0x14>)
 800244e:	681b      	ldr	r3, [r3, #0]
}
 8002450:	4618      	mov	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	200003c4 	.word	0x200003c4

08002460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002468:	f7ff ffee 	bl	8002448 <HAL_GetTick>
 800246c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002478:	d005      	beq.n	8002486 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800247a:	4b0a      	ldr	r3, [pc, #40]	@ (80024a4 <HAL_Delay+0x44>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	461a      	mov	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4413      	add	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002486:	bf00      	nop
 8002488:	f7ff ffde 	bl	8002448 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	429a      	cmp	r2, r3
 8002496:	d8f7      	bhi.n	8002488 <HAL_Delay+0x28>
  {
  }
}
 8002498:	bf00      	nop
 800249a:	bf00      	nop
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20000080 	.word	0x20000080

080024a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024b8:	4b0c      	ldr	r3, [pc, #48]	@ (80024ec <__NVIC_SetPriorityGrouping+0x44>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024c4:	4013      	ands	r3, r2
 80024c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024da:	4a04      	ldr	r2, [pc, #16]	@ (80024ec <__NVIC_SetPriorityGrouping+0x44>)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	60d3      	str	r3, [r2, #12]
}
 80024e0:	bf00      	nop
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024f4:	4b04      	ldr	r3, [pc, #16]	@ (8002508 <__NVIC_GetPriorityGrouping+0x18>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	0a1b      	lsrs	r3, r3, #8
 80024fa:	f003 0307 	and.w	r3, r3, #7
}
 80024fe:	4618      	mov	r0, r3
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	e000ed00 	.word	0xe000ed00

0800250c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251a:	2b00      	cmp	r3, #0
 800251c:	db0b      	blt.n	8002536 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	f003 021f 	and.w	r2, r3, #31
 8002524:	4907      	ldr	r1, [pc, #28]	@ (8002544 <__NVIC_EnableIRQ+0x38>)
 8002526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252a:	095b      	lsrs	r3, r3, #5
 800252c:	2001      	movs	r0, #1
 800252e:	fa00 f202 	lsl.w	r2, r0, r2
 8002532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	e000e100 	.word	0xe000e100

08002548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	6039      	str	r1, [r7, #0]
 8002552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002558:	2b00      	cmp	r3, #0
 800255a:	db0a      	blt.n	8002572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	b2da      	uxtb	r2, r3
 8002560:	490c      	ldr	r1, [pc, #48]	@ (8002594 <__NVIC_SetPriority+0x4c>)
 8002562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002566:	0112      	lsls	r2, r2, #4
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	440b      	add	r3, r1
 800256c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002570:	e00a      	b.n	8002588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	b2da      	uxtb	r2, r3
 8002576:	4908      	ldr	r1, [pc, #32]	@ (8002598 <__NVIC_SetPriority+0x50>)
 8002578:	79fb      	ldrb	r3, [r7, #7]
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	3b04      	subs	r3, #4
 8002580:	0112      	lsls	r2, r2, #4
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	440b      	add	r3, r1
 8002586:	761a      	strb	r2, [r3, #24]
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000e100 	.word	0xe000e100
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800259c:	b480      	push	{r7}
 800259e:	b089      	sub	sp, #36	@ 0x24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	f1c3 0307 	rsb	r3, r3, #7
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	bf28      	it	cs
 80025ba:	2304      	movcs	r3, #4
 80025bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	3304      	adds	r3, #4
 80025c2:	2b06      	cmp	r3, #6
 80025c4:	d902      	bls.n	80025cc <NVIC_EncodePriority+0x30>
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	3b03      	subs	r3, #3
 80025ca:	e000      	b.n	80025ce <NVIC_EncodePriority+0x32>
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43da      	mvns	r2, r3
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	401a      	ands	r2, r3
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025e4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	fa01 f303 	lsl.w	r3, r1, r3
 80025ee:	43d9      	mvns	r1, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f4:	4313      	orrs	r3, r2
         );
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3724      	adds	r7, #36	@ 0x24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b082      	sub	sp, #8
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7ff ff4c 	bl	80024a8 <__NVIC_SetPriorityGrouping>
}
 8002610:	bf00      	nop
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
 8002624:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002626:	2300      	movs	r3, #0
 8002628:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800262a:	f7ff ff61 	bl	80024f0 <__NVIC_GetPriorityGrouping>
 800262e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	68b9      	ldr	r1, [r7, #8]
 8002634:	6978      	ldr	r0, [r7, #20]
 8002636:	f7ff ffb1 	bl	800259c <NVIC_EncodePriority>
 800263a:	4602      	mov	r2, r0
 800263c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002640:	4611      	mov	r1, r2
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff ff80 	bl	8002548 <__NVIC_SetPriority>
}
 8002648:	bf00      	nop
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800265a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff ff54 	bl	800250c <__NVIC_EnableIRQ>
}
 8002664:	bf00      	nop
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800266c:	b480      	push	{r7}
 800266e:	b087      	sub	sp, #28
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002676:	2300      	movs	r3, #0
 8002678:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800267a:	e166      	b.n	800294a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	2101      	movs	r1, #1
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	fa01 f303 	lsl.w	r3, r1, r3
 8002688:	4013      	ands	r3, r2
 800268a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2b00      	cmp	r3, #0
 8002690:	f000 8158 	beq.w	8002944 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 0303 	and.w	r3, r3, #3
 800269c:	2b01      	cmp	r3, #1
 800269e:	d005      	beq.n	80026ac <HAL_GPIO_Init+0x40>
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 0303 	and.w	r3, r3, #3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d130      	bne.n	800270e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	2203      	movs	r2, #3
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43db      	mvns	r3, r3
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	4013      	ands	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026e2:	2201      	movs	r2, #1
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43db      	mvns	r3, r3
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	4013      	ands	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	091b      	lsrs	r3, r3, #4
 80026f8:	f003 0201 	and.w	r2, r3, #1
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	4313      	orrs	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	2b03      	cmp	r3, #3
 8002718:	d017      	beq.n	800274a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	2203      	movs	r2, #3
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43db      	mvns	r3, r3
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	4013      	ands	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	4313      	orrs	r3, r2
 8002742:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d123      	bne.n	800279e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	08da      	lsrs	r2, r3, #3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3208      	adds	r2, #8
 800275e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002762:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	220f      	movs	r2, #15
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43db      	mvns	r3, r3
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	4013      	ands	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	08da      	lsrs	r2, r3, #3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3208      	adds	r2, #8
 8002798:	6939      	ldr	r1, [r7, #16]
 800279a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	2203      	movs	r2, #3
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43db      	mvns	r3, r3
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4013      	ands	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 0203 	and.w	r2, r3, #3
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 80b2 	beq.w	8002944 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027e0:	4b61      	ldr	r3, [pc, #388]	@ (8002968 <HAL_GPIO_Init+0x2fc>)
 80027e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027e4:	4a60      	ldr	r2, [pc, #384]	@ (8002968 <HAL_GPIO_Init+0x2fc>)
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	6613      	str	r3, [r2, #96]	@ 0x60
 80027ec:	4b5e      	ldr	r3, [pc, #376]	@ (8002968 <HAL_GPIO_Init+0x2fc>)
 80027ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	60bb      	str	r3, [r7, #8]
 80027f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80027f8:	4a5c      	ldr	r2, [pc, #368]	@ (800296c <HAL_GPIO_Init+0x300>)
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	089b      	lsrs	r3, r3, #2
 80027fe:	3302      	adds	r3, #2
 8002800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002804:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f003 0303 	and.w	r3, r3, #3
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	220f      	movs	r2, #15
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	43db      	mvns	r3, r3
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	4013      	ands	r3, r2
 800281a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002822:	d02b      	beq.n	800287c <HAL_GPIO_Init+0x210>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a52      	ldr	r2, [pc, #328]	@ (8002970 <HAL_GPIO_Init+0x304>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d025      	beq.n	8002878 <HAL_GPIO_Init+0x20c>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a51      	ldr	r2, [pc, #324]	@ (8002974 <HAL_GPIO_Init+0x308>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d01f      	beq.n	8002874 <HAL_GPIO_Init+0x208>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a50      	ldr	r2, [pc, #320]	@ (8002978 <HAL_GPIO_Init+0x30c>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d019      	beq.n	8002870 <HAL_GPIO_Init+0x204>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a4f      	ldr	r2, [pc, #316]	@ (800297c <HAL_GPIO_Init+0x310>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d013      	beq.n	800286c <HAL_GPIO_Init+0x200>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a4e      	ldr	r2, [pc, #312]	@ (8002980 <HAL_GPIO_Init+0x314>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d00d      	beq.n	8002868 <HAL_GPIO_Init+0x1fc>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a4d      	ldr	r2, [pc, #308]	@ (8002984 <HAL_GPIO_Init+0x318>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d007      	beq.n	8002864 <HAL_GPIO_Init+0x1f8>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a4c      	ldr	r2, [pc, #304]	@ (8002988 <HAL_GPIO_Init+0x31c>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d101      	bne.n	8002860 <HAL_GPIO_Init+0x1f4>
 800285c:	2307      	movs	r3, #7
 800285e:	e00e      	b.n	800287e <HAL_GPIO_Init+0x212>
 8002860:	2308      	movs	r3, #8
 8002862:	e00c      	b.n	800287e <HAL_GPIO_Init+0x212>
 8002864:	2306      	movs	r3, #6
 8002866:	e00a      	b.n	800287e <HAL_GPIO_Init+0x212>
 8002868:	2305      	movs	r3, #5
 800286a:	e008      	b.n	800287e <HAL_GPIO_Init+0x212>
 800286c:	2304      	movs	r3, #4
 800286e:	e006      	b.n	800287e <HAL_GPIO_Init+0x212>
 8002870:	2303      	movs	r3, #3
 8002872:	e004      	b.n	800287e <HAL_GPIO_Init+0x212>
 8002874:	2302      	movs	r3, #2
 8002876:	e002      	b.n	800287e <HAL_GPIO_Init+0x212>
 8002878:	2301      	movs	r3, #1
 800287a:	e000      	b.n	800287e <HAL_GPIO_Init+0x212>
 800287c:	2300      	movs	r3, #0
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	f002 0203 	and.w	r2, r2, #3
 8002884:	0092      	lsls	r2, r2, #2
 8002886:	4093      	lsls	r3, r2
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	4313      	orrs	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800288e:	4937      	ldr	r1, [pc, #220]	@ (800296c <HAL_GPIO_Init+0x300>)
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	089b      	lsrs	r3, r3, #2
 8002894:	3302      	adds	r3, #2
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800289c:	4b3b      	ldr	r3, [pc, #236]	@ (800298c <HAL_GPIO_Init+0x320>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	43db      	mvns	r3, r3
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	4013      	ands	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	4313      	orrs	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028c0:	4a32      	ldr	r2, [pc, #200]	@ (800298c <HAL_GPIO_Init+0x320>)
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80028c6:	4b31      	ldr	r3, [pc, #196]	@ (800298c <HAL_GPIO_Init+0x320>)
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	43db      	mvns	r3, r3
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	4013      	ands	r3, r2
 80028d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028ea:	4a28      	ldr	r2, [pc, #160]	@ (800298c <HAL_GPIO_Init+0x320>)
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80028f0:	4b26      	ldr	r3, [pc, #152]	@ (800298c <HAL_GPIO_Init+0x320>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	43db      	mvns	r3, r3
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4013      	ands	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d003      	beq.n	8002914 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	4313      	orrs	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002914:	4a1d      	ldr	r2, [pc, #116]	@ (800298c <HAL_GPIO_Init+0x320>)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800291a:	4b1c      	ldr	r3, [pc, #112]	@ (800298c <HAL_GPIO_Init+0x320>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	43db      	mvns	r3, r3
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	4013      	ands	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4313      	orrs	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800293e:	4a13      	ldr	r2, [pc, #76]	@ (800298c <HAL_GPIO_Init+0x320>)
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	3301      	adds	r3, #1
 8002948:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	fa22 f303 	lsr.w	r3, r2, r3
 8002954:	2b00      	cmp	r3, #0
 8002956:	f47f ae91 	bne.w	800267c <HAL_GPIO_Init+0x10>
  }
}
 800295a:	bf00      	nop
 800295c:	bf00      	nop
 800295e:	371c      	adds	r7, #28
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	40021000 	.word	0x40021000
 800296c:	40010000 	.word	0x40010000
 8002970:	48000400 	.word	0x48000400
 8002974:	48000800 	.word	0x48000800
 8002978:	48000c00 	.word	0x48000c00
 800297c:	48001000 	.word	0x48001000
 8002980:	48001400 	.word	0x48001400
 8002984:	48001800 	.word	0x48001800
 8002988:	48001c00 	.word	0x48001c00
 800298c:	40010400 	.word	0x40010400

08002990 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002990:	b480      	push	{r7}
 8002992:	b087      	sub	sp, #28
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800299a:	2300      	movs	r3, #0
 800299c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800299e:	e0c9      	b.n	8002b34 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80029a0:	2201      	movs	r2, #1
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	4013      	ands	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 80bc 	beq.w	8002b2e <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80029b6:	4a66      	ldr	r2, [pc, #408]	@ (8002b50 <HAL_GPIO_DeInit+0x1c0>)
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	089b      	lsrs	r3, r3, #2
 80029bc:	3302      	adds	r3, #2
 80029be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	220f      	movs	r2, #15
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	4013      	ands	r3, r2
 80029d6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80029de:	d02b      	beq.n	8002a38 <HAL_GPIO_DeInit+0xa8>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a5c      	ldr	r2, [pc, #368]	@ (8002b54 <HAL_GPIO_DeInit+0x1c4>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d025      	beq.n	8002a34 <HAL_GPIO_DeInit+0xa4>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a5b      	ldr	r2, [pc, #364]	@ (8002b58 <HAL_GPIO_DeInit+0x1c8>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d01f      	beq.n	8002a30 <HAL_GPIO_DeInit+0xa0>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a5a      	ldr	r2, [pc, #360]	@ (8002b5c <HAL_GPIO_DeInit+0x1cc>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d019      	beq.n	8002a2c <HAL_GPIO_DeInit+0x9c>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a59      	ldr	r2, [pc, #356]	@ (8002b60 <HAL_GPIO_DeInit+0x1d0>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d013      	beq.n	8002a28 <HAL_GPIO_DeInit+0x98>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a58      	ldr	r2, [pc, #352]	@ (8002b64 <HAL_GPIO_DeInit+0x1d4>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d00d      	beq.n	8002a24 <HAL_GPIO_DeInit+0x94>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a57      	ldr	r2, [pc, #348]	@ (8002b68 <HAL_GPIO_DeInit+0x1d8>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d007      	beq.n	8002a20 <HAL_GPIO_DeInit+0x90>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a56      	ldr	r2, [pc, #344]	@ (8002b6c <HAL_GPIO_DeInit+0x1dc>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d101      	bne.n	8002a1c <HAL_GPIO_DeInit+0x8c>
 8002a18:	2307      	movs	r3, #7
 8002a1a:	e00e      	b.n	8002a3a <HAL_GPIO_DeInit+0xaa>
 8002a1c:	2308      	movs	r3, #8
 8002a1e:	e00c      	b.n	8002a3a <HAL_GPIO_DeInit+0xaa>
 8002a20:	2306      	movs	r3, #6
 8002a22:	e00a      	b.n	8002a3a <HAL_GPIO_DeInit+0xaa>
 8002a24:	2305      	movs	r3, #5
 8002a26:	e008      	b.n	8002a3a <HAL_GPIO_DeInit+0xaa>
 8002a28:	2304      	movs	r3, #4
 8002a2a:	e006      	b.n	8002a3a <HAL_GPIO_DeInit+0xaa>
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e004      	b.n	8002a3a <HAL_GPIO_DeInit+0xaa>
 8002a30:	2302      	movs	r3, #2
 8002a32:	e002      	b.n	8002a3a <HAL_GPIO_DeInit+0xaa>
 8002a34:	2301      	movs	r3, #1
 8002a36:	e000      	b.n	8002a3a <HAL_GPIO_DeInit+0xaa>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	f002 0203 	and.w	r2, r2, #3
 8002a40:	0092      	lsls	r2, r2, #2
 8002a42:	4093      	lsls	r3, r2
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d132      	bne.n	8002ab0 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002a4a:	4b49      	ldr	r3, [pc, #292]	@ (8002b70 <HAL_GPIO_DeInit+0x1e0>)
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	43db      	mvns	r3, r3
 8002a52:	4947      	ldr	r1, [pc, #284]	@ (8002b70 <HAL_GPIO_DeInit+0x1e0>)
 8002a54:	4013      	ands	r3, r2
 8002a56:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002a58:	4b45      	ldr	r3, [pc, #276]	@ (8002b70 <HAL_GPIO_DeInit+0x1e0>)
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	4943      	ldr	r1, [pc, #268]	@ (8002b70 <HAL_GPIO_DeInit+0x1e0>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002a66:	4b42      	ldr	r3, [pc, #264]	@ (8002b70 <HAL_GPIO_DeInit+0x1e0>)
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	4940      	ldr	r1, [pc, #256]	@ (8002b70 <HAL_GPIO_DeInit+0x1e0>)
 8002a70:	4013      	ands	r3, r2
 8002a72:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002a74:	4b3e      	ldr	r3, [pc, #248]	@ (8002b70 <HAL_GPIO_DeInit+0x1e0>)
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	493c      	ldr	r1, [pc, #240]	@ (8002b70 <HAL_GPIO_DeInit+0x1e0>)
 8002a7e:	4013      	ands	r3, r2
 8002a80:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	220f      	movs	r2, #15
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002a92:	4a2f      	ldr	r2, [pc, #188]	@ (8002b50 <HAL_GPIO_DeInit+0x1c0>)
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	089b      	lsrs	r3, r3, #2
 8002a98:	3302      	adds	r3, #2
 8002a9a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	43da      	mvns	r2, r3
 8002aa2:	482b      	ldr	r0, [pc, #172]	@ (8002b50 <HAL_GPIO_DeInit+0x1c0>)
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	089b      	lsrs	r3, r3, #2
 8002aa8:	400a      	ands	r2, r1
 8002aaa:	3302      	adds	r3, #2
 8002aac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	2103      	movs	r1, #3
 8002aba:	fa01 f303 	lsl.w	r3, r1, r3
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	08da      	lsrs	r2, r3, #3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3208      	adds	r2, #8
 8002acc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	220f      	movs	r2, #15
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	08d2      	lsrs	r2, r2, #3
 8002ae4:	4019      	ands	r1, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	3208      	adds	r2, #8
 8002aea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689a      	ldr	r2, [r3, #8]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	2103      	movs	r1, #3
 8002af8:	fa01 f303 	lsl.w	r3, r1, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	401a      	ands	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	2101      	movs	r1, #1
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b10:	43db      	mvns	r3, r3
 8002b12:	401a      	ands	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	2103      	movs	r1, #3
 8002b22:	fa01 f303 	lsl.w	r3, r1, r3
 8002b26:	43db      	mvns	r3, r3
 8002b28:	401a      	ands	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	3301      	adds	r3, #1
 8002b32:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	fa22 f303 	lsr.w	r3, r2, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f47f af2f 	bne.w	80029a0 <HAL_GPIO_DeInit+0x10>
  }
}
 8002b42:	bf00      	nop
 8002b44:	bf00      	nop
 8002b46:	371c      	adds	r7, #28
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	40010000 	.word	0x40010000
 8002b54:	48000400 	.word	0x48000400
 8002b58:	48000800 	.word	0x48000800
 8002b5c:	48000c00 	.word	0x48000c00
 8002b60:	48001000 	.word	0x48001000
 8002b64:	48001400 	.word	0x48001400
 8002b68:	48001800 	.word	0x48001800
 8002b6c:	48001c00 	.word	0x48001c00
 8002b70:	40010400 	.word	0x40010400

08002b74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e08d      	b.n	8002ca2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d106      	bne.n	8002ba0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7fe fecc 	bl	8001938 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2224      	movs	r2, #36	@ 0x24
 8002ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0201 	bic.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002bc4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bd4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d107      	bne.n	8002bee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689a      	ldr	r2, [r3, #8]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	e006      	b.n	8002bfc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002bfa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d108      	bne.n	8002c16 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c12:	605a      	str	r2, [r3, #4]
 8002c14:	e007      	b.n	8002c26 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6812      	ldr	r2, [r2, #0]
 8002c30:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68da      	ldr	r2, [r3, #12]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	691a      	ldr	r2, [r3, #16]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	69d9      	ldr	r1, [r3, #28]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a1a      	ldr	r2, [r3, #32]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f042 0201 	orr.w	r2, r2, #1
 8002c82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b082      	sub	sp, #8
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e021      	b.n	8002d00 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2224      	movs	r2, #36	@ 0x24
 8002cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0201 	bic.w	r2, r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f7fe fe8d 	bl	80019f4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	4608      	mov	r0, r1
 8002d12:	4611      	mov	r1, r2
 8002d14:	461a      	mov	r2, r3
 8002d16:	4603      	mov	r3, r0
 8002d18:	817b      	strh	r3, [r7, #10]
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	813b      	strh	r3, [r7, #8]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b20      	cmp	r3, #32
 8002d2c:	f040 80f9 	bne.w	8002f22 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d30:	6a3b      	ldr	r3, [r7, #32]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d002      	beq.n	8002d3c <HAL_I2C_Mem_Write+0x34>
 8002d36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d105      	bne.n	8002d48 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d42:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e0ed      	b.n	8002f24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d101      	bne.n	8002d56 <HAL_I2C_Mem_Write+0x4e>
 8002d52:	2302      	movs	r3, #2
 8002d54:	e0e6      	b.n	8002f24 <HAL_I2C_Mem_Write+0x21c>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d5e:	f7ff fb73 	bl	8002448 <HAL_GetTick>
 8002d62:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	2319      	movs	r3, #25
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 fac3 	bl	80032fc <I2C_WaitOnFlagUntilTimeout>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e0d1      	b.n	8002f24 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2221      	movs	r2, #33	@ 0x21
 8002d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2240      	movs	r2, #64	@ 0x40
 8002d8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6a3a      	ldr	r2, [r7, #32]
 8002d9a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002da0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002da8:	88f8      	ldrh	r0, [r7, #6]
 8002daa:	893a      	ldrh	r2, [r7, #8]
 8002dac:	8979      	ldrh	r1, [r7, #10]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	9301      	str	r3, [sp, #4]
 8002db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	4603      	mov	r3, r0
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 f9d3 	bl	8003164 <I2C_RequestMemoryWrite>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d005      	beq.n	8002dd0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e0a9      	b.n	8002f24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	2bff      	cmp	r3, #255	@ 0xff
 8002dd8:	d90e      	bls.n	8002df8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	22ff      	movs	r2, #255	@ 0xff
 8002dde:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	8979      	ldrh	r1, [r7, #10]
 8002de8:	2300      	movs	r3, #0
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 fc47 	bl	8003684 <I2C_TransferConfig>
 8002df6:	e00f      	b.n	8002e18 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	8979      	ldrh	r1, [r7, #10]
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 fc36 	bl	8003684 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 fac6 	bl	80033ae <I2C_WaitOnTXISFlagUntilTimeout>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e07b      	b.n	8002f24 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e30:	781a      	ldrb	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3c:	1c5a      	adds	r2, r3, #1
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e54:	3b01      	subs	r3, #1
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d034      	beq.n	8002ed0 <HAL_I2C_Mem_Write+0x1c8>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d130      	bne.n	8002ed0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e74:	2200      	movs	r2, #0
 8002e76:	2180      	movs	r1, #128	@ 0x80
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f000 fa3f 	bl	80032fc <I2C_WaitOnFlagUntilTimeout>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e04d      	b.n	8002f24 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	2bff      	cmp	r3, #255	@ 0xff
 8002e90:	d90e      	bls.n	8002eb0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	22ff      	movs	r2, #255	@ 0xff
 8002e96:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	8979      	ldrh	r1, [r7, #10]
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 fbeb 	bl	8003684 <I2C_TransferConfig>
 8002eae:	e00f      	b.n	8002ed0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	8979      	ldrh	r1, [r7, #10]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 fbda 	bl	8003684 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d19e      	bne.n	8002e18 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 faac 	bl	800343c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e01a      	b.n	8002f24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6859      	ldr	r1, [r3, #4]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	4b0a      	ldr	r3, [pc, #40]	@ (8002f2c <HAL_I2C_Mem_Write+0x224>)
 8002f02:	400b      	ands	r3, r1
 8002f04:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	e000      	b.n	8002f24 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002f22:	2302      	movs	r3, #2
  }
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3718      	adds	r7, #24
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	fe00e800 	.word	0xfe00e800

08002f30 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b088      	sub	sp, #32
 8002f34:	af02      	add	r7, sp, #8
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	4608      	mov	r0, r1
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4603      	mov	r3, r0
 8002f40:	817b      	strh	r3, [r7, #10]
 8002f42:	460b      	mov	r3, r1
 8002f44:	813b      	strh	r3, [r7, #8]
 8002f46:	4613      	mov	r3, r2
 8002f48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b20      	cmp	r3, #32
 8002f54:	f040 80fd 	bne.w	8003152 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f58:	6a3b      	ldr	r3, [r7, #32]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <HAL_I2C_Mem_Read+0x34>
 8002f5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d105      	bne.n	8002f70 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f6a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e0f1      	b.n	8003154 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d101      	bne.n	8002f7e <HAL_I2C_Mem_Read+0x4e>
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	e0ea      	b.n	8003154 <HAL_I2C_Mem_Read+0x224>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f86:	f7ff fa5f 	bl	8002448 <HAL_GetTick>
 8002f8a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	2319      	movs	r3, #25
 8002f92:	2201      	movs	r2, #1
 8002f94:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 f9af 	bl	80032fc <I2C_WaitOnFlagUntilTimeout>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e0d5      	b.n	8003154 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2222      	movs	r2, #34	@ 0x22
 8002fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2240      	movs	r2, #64	@ 0x40
 8002fb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6a3a      	ldr	r2, [r7, #32]
 8002fc2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002fc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fd0:	88f8      	ldrh	r0, [r7, #6]
 8002fd2:	893a      	ldrh	r2, [r7, #8]
 8002fd4:	8979      	ldrh	r1, [r7, #10]
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	9301      	str	r3, [sp, #4]
 8002fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	4603      	mov	r3, r0
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 f913 	bl	800320c <I2C_RequestMemoryRead>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d005      	beq.n	8002ff8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e0ad      	b.n	8003154 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	2bff      	cmp	r3, #255	@ 0xff
 8003000:	d90e      	bls.n	8003020 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2201      	movs	r2, #1
 8003006:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800300c:	b2da      	uxtb	r2, r3
 800300e:	8979      	ldrh	r1, [r7, #10]
 8003010:	4b52      	ldr	r3, [pc, #328]	@ (800315c <HAL_I2C_Mem_Read+0x22c>)
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 fb33 	bl	8003684 <I2C_TransferConfig>
 800301e:	e00f      	b.n	8003040 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003024:	b29a      	uxth	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800302e:	b2da      	uxtb	r2, r3
 8003030:	8979      	ldrh	r1, [r7, #10]
 8003032:	4b4a      	ldr	r3, [pc, #296]	@ (800315c <HAL_I2C_Mem_Read+0x22c>)
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f000 fb22 	bl	8003684 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003046:	2200      	movs	r2, #0
 8003048:	2104      	movs	r1, #4
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 f956 	bl	80032fc <I2C_WaitOnFlagUntilTimeout>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e07c      	b.n	8003154 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003064:	b2d2      	uxtb	r2, r2
 8003066:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306c:	1c5a      	adds	r2, r3, #1
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003076:	3b01      	subs	r3, #1
 8003078:	b29a      	uxth	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003082:	b29b      	uxth	r3, r3
 8003084:	3b01      	subs	r3, #1
 8003086:	b29a      	uxth	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003090:	b29b      	uxth	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d034      	beq.n	8003100 <HAL_I2C_Mem_Read+0x1d0>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800309a:	2b00      	cmp	r3, #0
 800309c:	d130      	bne.n	8003100 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a4:	2200      	movs	r2, #0
 80030a6:	2180      	movs	r1, #128	@ 0x80
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f000 f927 	bl	80032fc <I2C_WaitOnFlagUntilTimeout>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e04d      	b.n	8003154 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030bc:	b29b      	uxth	r3, r3
 80030be:	2bff      	cmp	r3, #255	@ 0xff
 80030c0:	d90e      	bls.n	80030e0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2201      	movs	r2, #1
 80030c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	8979      	ldrh	r1, [r7, #10]
 80030d0:	2300      	movs	r3, #0
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 fad3 	bl	8003684 <I2C_TransferConfig>
 80030de:	e00f      	b.n	8003100 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	8979      	ldrh	r1, [r7, #10]
 80030f2:	2300      	movs	r3, #0
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 fac2 	bl	8003684 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003104:	b29b      	uxth	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d19a      	bne.n	8003040 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 f994 	bl	800343c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e01a      	b.n	8003154 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2220      	movs	r2, #32
 8003124:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6859      	ldr	r1, [r3, #4]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	4b0b      	ldr	r3, [pc, #44]	@ (8003160 <HAL_I2C_Mem_Read+0x230>)
 8003132:	400b      	ands	r3, r1
 8003134:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2220      	movs	r2, #32
 800313a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800314e:	2300      	movs	r3, #0
 8003150:	e000      	b.n	8003154 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003152:	2302      	movs	r3, #2
  }
}
 8003154:	4618      	mov	r0, r3
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	80002400 	.word	0x80002400
 8003160:	fe00e800 	.word	0xfe00e800

08003164 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af02      	add	r7, sp, #8
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	4608      	mov	r0, r1
 800316e:	4611      	mov	r1, r2
 8003170:	461a      	mov	r2, r3
 8003172:	4603      	mov	r3, r0
 8003174:	817b      	strh	r3, [r7, #10]
 8003176:	460b      	mov	r3, r1
 8003178:	813b      	strh	r3, [r7, #8]
 800317a:	4613      	mov	r3, r2
 800317c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800317e:	88fb      	ldrh	r3, [r7, #6]
 8003180:	b2da      	uxtb	r2, r3
 8003182:	8979      	ldrh	r1, [r7, #10]
 8003184:	4b20      	ldr	r3, [pc, #128]	@ (8003208 <I2C_RequestMemoryWrite+0xa4>)
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f000 fa79 	bl	8003684 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003192:	69fa      	ldr	r2, [r7, #28]
 8003194:	69b9      	ldr	r1, [r7, #24]
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f000 f909 	bl	80033ae <I2C_WaitOnTXISFlagUntilTimeout>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e02c      	b.n	8003200 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031a6:	88fb      	ldrh	r3, [r7, #6]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d105      	bne.n	80031b8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031ac:	893b      	ldrh	r3, [r7, #8]
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80031b6:	e015      	b.n	80031e4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80031b8:	893b      	ldrh	r3, [r7, #8]
 80031ba:	0a1b      	lsrs	r3, r3, #8
 80031bc:	b29b      	uxth	r3, r3
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031c6:	69fa      	ldr	r2, [r7, #28]
 80031c8:	69b9      	ldr	r1, [r7, #24]
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 f8ef 	bl	80033ae <I2C_WaitOnTXISFlagUntilTimeout>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e012      	b.n	8003200 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031da:	893b      	ldrh	r3, [r7, #8]
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	2200      	movs	r2, #0
 80031ec:	2180      	movs	r1, #128	@ 0x80
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 f884 	bl	80032fc <I2C_WaitOnFlagUntilTimeout>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	80002000 	.word	0x80002000

0800320c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af02      	add	r7, sp, #8
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	4608      	mov	r0, r1
 8003216:	4611      	mov	r1, r2
 8003218:	461a      	mov	r2, r3
 800321a:	4603      	mov	r3, r0
 800321c:	817b      	strh	r3, [r7, #10]
 800321e:	460b      	mov	r3, r1
 8003220:	813b      	strh	r3, [r7, #8]
 8003222:	4613      	mov	r3, r2
 8003224:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003226:	88fb      	ldrh	r3, [r7, #6]
 8003228:	b2da      	uxtb	r2, r3
 800322a:	8979      	ldrh	r1, [r7, #10]
 800322c:	4b20      	ldr	r3, [pc, #128]	@ (80032b0 <I2C_RequestMemoryRead+0xa4>)
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	2300      	movs	r3, #0
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f000 fa26 	bl	8003684 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003238:	69fa      	ldr	r2, [r7, #28]
 800323a:	69b9      	ldr	r1, [r7, #24]
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 f8b6 	bl	80033ae <I2C_WaitOnTXISFlagUntilTimeout>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e02c      	b.n	80032a6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800324c:	88fb      	ldrh	r3, [r7, #6]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d105      	bne.n	800325e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003252:	893b      	ldrh	r3, [r7, #8]
 8003254:	b2da      	uxtb	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	629a      	str	r2, [r3, #40]	@ 0x28
 800325c:	e015      	b.n	800328a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800325e:	893b      	ldrh	r3, [r7, #8]
 8003260:	0a1b      	lsrs	r3, r3, #8
 8003262:	b29b      	uxth	r3, r3
 8003264:	b2da      	uxtb	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800326c:	69fa      	ldr	r2, [r7, #28]
 800326e:	69b9      	ldr	r1, [r7, #24]
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 f89c 	bl	80033ae <I2C_WaitOnTXISFlagUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e012      	b.n	80032a6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003280:	893b      	ldrh	r3, [r7, #8]
 8003282:	b2da      	uxtb	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	2200      	movs	r2, #0
 8003292:	2140      	movs	r1, #64	@ 0x40
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 f831 	bl	80032fc <I2C_WaitOnFlagUntilTimeout>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e000      	b.n	80032a6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	80002000 	.word	0x80002000

080032b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d103      	bne.n	80032d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2200      	movs	r2, #0
 80032d0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d007      	beq.n	80032f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	699a      	ldr	r2, [r3, #24]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 0201 	orr.w	r2, r2, #1
 80032ee:	619a      	str	r2, [r3, #24]
  }
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	603b      	str	r3, [r7, #0]
 8003308:	4613      	mov	r3, r2
 800330a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800330c:	e03b      	b.n	8003386 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	6839      	ldr	r1, [r7, #0]
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 f8d6 	bl	80034c4 <I2C_IsErrorOccurred>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e041      	b.n	80033a6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003328:	d02d      	beq.n	8003386 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332a:	f7ff f88d 	bl	8002448 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	429a      	cmp	r2, r3
 8003338:	d302      	bcc.n	8003340 <I2C_WaitOnFlagUntilTimeout+0x44>
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d122      	bne.n	8003386 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699a      	ldr	r2, [r3, #24]
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	4013      	ands	r3, r2
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	429a      	cmp	r2, r3
 800334e:	bf0c      	ite	eq
 8003350:	2301      	moveq	r3, #1
 8003352:	2300      	movne	r3, #0
 8003354:	b2db      	uxtb	r3, r3
 8003356:	461a      	mov	r2, r3
 8003358:	79fb      	ldrb	r3, [r7, #7]
 800335a:	429a      	cmp	r2, r3
 800335c:	d113      	bne.n	8003386 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003362:	f043 0220 	orr.w	r2, r3, #32
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2220      	movs	r2, #32
 800336e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e00f      	b.n	80033a6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	699a      	ldr	r2, [r3, #24]
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	4013      	ands	r3, r2
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	429a      	cmp	r2, r3
 8003394:	bf0c      	ite	eq
 8003396:	2301      	moveq	r3, #1
 8003398:	2300      	movne	r3, #0
 800339a:	b2db      	uxtb	r3, r3
 800339c:	461a      	mov	r2, r3
 800339e:	79fb      	ldrb	r3, [r7, #7]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d0b4      	beq.n	800330e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b084      	sub	sp, #16
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	60f8      	str	r0, [r7, #12]
 80033b6:	60b9      	str	r1, [r7, #8]
 80033b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033ba:	e033      	b.n	8003424 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	68b9      	ldr	r1, [r7, #8]
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 f87f 	bl	80034c4 <I2C_IsErrorOccurred>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e031      	b.n	8003434 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033d6:	d025      	beq.n	8003424 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d8:	f7ff f836 	bl	8002448 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d302      	bcc.n	80033ee <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d11a      	bne.n	8003424 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d013      	beq.n	8003424 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003400:	f043 0220 	orr.w	r2, r3, #32
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2220      	movs	r2, #32
 800340c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e007      	b.n	8003434 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b02      	cmp	r3, #2
 8003430:	d1c4      	bne.n	80033bc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003448:	e02f      	b.n	80034aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	68b9      	ldr	r1, [r7, #8]
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 f838 	bl	80034c4 <I2C_IsErrorOccurred>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e02d      	b.n	80034ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800345e:	f7fe fff3 	bl	8002448 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	429a      	cmp	r2, r3
 800346c:	d302      	bcc.n	8003474 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d11a      	bne.n	80034aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	f003 0320 	and.w	r3, r3, #32
 800347e:	2b20      	cmp	r3, #32
 8003480:	d013      	beq.n	80034aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003486:	f043 0220 	orr.w	r2, r3, #32
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2220      	movs	r2, #32
 8003492:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e007      	b.n	80034ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	f003 0320 	and.w	r3, r3, #32
 80034b4:	2b20      	cmp	r3, #32
 80034b6:	d1c8      	bne.n	800344a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
	...

080034c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b08a      	sub	sp, #40	@ 0x28
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034d0:	2300      	movs	r3, #0
 80034d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80034de:	2300      	movs	r3, #0
 80034e0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	f003 0310 	and.w	r3, r3, #16
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d068      	beq.n	80035c2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2210      	movs	r2, #16
 80034f6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80034f8:	e049      	b.n	800358e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003500:	d045      	beq.n	800358e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003502:	f7fe ffa1 	bl	8002448 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	429a      	cmp	r2, r3
 8003510:	d302      	bcc.n	8003518 <I2C_IsErrorOccurred+0x54>
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d13a      	bne.n	800358e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003522:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800352a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003536:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800353a:	d121      	bne.n	8003580 <I2C_IsErrorOccurred+0xbc>
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003542:	d01d      	beq.n	8003580 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003544:	7cfb      	ldrb	r3, [r7, #19]
 8003546:	2b20      	cmp	r3, #32
 8003548:	d01a      	beq.n	8003580 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003558:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800355a:	f7fe ff75 	bl	8002448 <HAL_GetTick>
 800355e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003560:	e00e      	b.n	8003580 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003562:	f7fe ff71 	bl	8002448 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b19      	cmp	r3, #25
 800356e:	d907      	bls.n	8003580 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	f043 0320 	orr.w	r3, r3, #32
 8003576:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800357e:	e006      	b.n	800358e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	f003 0320 	and.w	r3, r3, #32
 800358a:	2b20      	cmp	r3, #32
 800358c:	d1e9      	bne.n	8003562 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	f003 0320 	and.w	r3, r3, #32
 8003598:	2b20      	cmp	r3, #32
 800359a:	d003      	beq.n	80035a4 <I2C_IsErrorOccurred+0xe0>
 800359c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0aa      	beq.n	80034fa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80035a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d103      	bne.n	80035b4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2220      	movs	r2, #32
 80035b2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	f043 0304 	orr.w	r3, r3, #4
 80035ba:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00b      	beq.n	80035ec <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	f043 0301 	orr.w	r3, r3, #1
 80035da:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80035e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00b      	beq.n	800360e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	f043 0308 	orr.w	r3, r3, #8
 80035fc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003606:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00b      	beq.n	8003630 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003618:	6a3b      	ldr	r3, [r7, #32]
 800361a:	f043 0302 	orr.w	r3, r3, #2
 800361e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003628:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003630:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003634:	2b00      	cmp	r3, #0
 8003636:	d01c      	beq.n	8003672 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f7ff fe3b 	bl	80032b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6859      	ldr	r1, [r3, #4]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	4b0d      	ldr	r3, [pc, #52]	@ (8003680 <I2C_IsErrorOccurred+0x1bc>)
 800364a:	400b      	ands	r3, r1
 800364c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	431a      	orrs	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2220      	movs	r2, #32
 800365e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003672:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003676:	4618      	mov	r0, r3
 8003678:	3728      	adds	r7, #40	@ 0x28
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	fe00e800 	.word	0xfe00e800

08003684 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	607b      	str	r3, [r7, #4]
 800368e:	460b      	mov	r3, r1
 8003690:	817b      	strh	r3, [r7, #10]
 8003692:	4613      	mov	r3, r2
 8003694:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003696:	897b      	ldrh	r3, [r7, #10]
 8003698:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800369c:	7a7b      	ldrb	r3, [r7, #9]
 800369e:	041b      	lsls	r3, r3, #16
 80036a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036a4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036aa:	6a3b      	ldr	r3, [r7, #32]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80036b2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	0d5b      	lsrs	r3, r3, #21
 80036be:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80036c2:	4b08      	ldr	r3, [pc, #32]	@ (80036e4 <I2C_TransferConfig+0x60>)
 80036c4:	430b      	orrs	r3, r1
 80036c6:	43db      	mvns	r3, r3
 80036c8:	ea02 0103 	and.w	r1, r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80036d6:	bf00      	nop
 80036d8:	371c      	adds	r7, #28
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	03ff63ff 	.word	0x03ff63ff

080036e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b20      	cmp	r3, #32
 80036fc:	d138      	bne.n	8003770 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003704:	2b01      	cmp	r3, #1
 8003706:	d101      	bne.n	800370c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003708:	2302      	movs	r3, #2
 800370a:	e032      	b.n	8003772 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2224      	movs	r2, #36	@ 0x24
 8003718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0201 	bic.w	r2, r2, #1
 800372a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800373a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6819      	ldr	r1, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	430a      	orrs	r2, r1
 800374a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f042 0201 	orr.w	r2, r2, #1
 800375a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2220      	movs	r2, #32
 8003760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800376c:	2300      	movs	r3, #0
 800376e:	e000      	b.n	8003772 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003770:	2302      	movs	r3, #2
  }
}
 8003772:	4618      	mov	r0, r3
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
	...

08003780 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003784:	4b0d      	ldr	r3, [pc, #52]	@ (80037bc <HAL_PWREx_GetVoltageRange+0x3c>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800378c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003790:	d102      	bne.n	8003798 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003792:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003796:	e00b      	b.n	80037b0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003798:	4b08      	ldr	r3, [pc, #32]	@ (80037bc <HAL_PWREx_GetVoltageRange+0x3c>)
 800379a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800379e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037a6:	d102      	bne.n	80037ae <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80037a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80037ac:	e000      	b.n	80037b0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80037ae:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	40007000 	.word	0x40007000

080037c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d141      	bne.n	8003852 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80037ce:	4b4b      	ldr	r3, [pc, #300]	@ (80038fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80037d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037da:	d131      	bne.n	8003840 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037dc:	4b47      	ldr	r3, [pc, #284]	@ (80038fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037e2:	4a46      	ldr	r2, [pc, #280]	@ (80038fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037ec:	4b43      	ldr	r3, [pc, #268]	@ (80038fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80037f4:	4a41      	ldr	r2, [pc, #260]	@ (80038fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80037fc:	4b40      	ldr	r3, [pc, #256]	@ (8003900 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2232      	movs	r2, #50	@ 0x32
 8003802:	fb02 f303 	mul.w	r3, r2, r3
 8003806:	4a3f      	ldr	r2, [pc, #252]	@ (8003904 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003808:	fba2 2303 	umull	r2, r3, r2, r3
 800380c:	0c9b      	lsrs	r3, r3, #18
 800380e:	3301      	adds	r3, #1
 8003810:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003812:	e002      	b.n	800381a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	3b01      	subs	r3, #1
 8003818:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800381a:	4b38      	ldr	r3, [pc, #224]	@ (80038fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003822:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003826:	d102      	bne.n	800382e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1f2      	bne.n	8003814 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800382e:	4b33      	ldr	r3, [pc, #204]	@ (80038fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003836:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800383a:	d158      	bne.n	80038ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e057      	b.n	80038f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003840:	4b2e      	ldr	r3, [pc, #184]	@ (80038fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003842:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003846:	4a2d      	ldr	r2, [pc, #180]	@ (80038fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003848:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800384c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003850:	e04d      	b.n	80038ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003858:	d141      	bne.n	80038de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800385a:	4b28      	ldr	r3, [pc, #160]	@ (80038fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003862:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003866:	d131      	bne.n	80038cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003868:	4b24      	ldr	r3, [pc, #144]	@ (80038fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800386a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800386e:	4a23      	ldr	r2, [pc, #140]	@ (80038fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003870:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003874:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003878:	4b20      	ldr	r3, [pc, #128]	@ (80038fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003880:	4a1e      	ldr	r2, [pc, #120]	@ (80038fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003882:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003886:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003888:	4b1d      	ldr	r3, [pc, #116]	@ (8003900 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2232      	movs	r2, #50	@ 0x32
 800388e:	fb02 f303 	mul.w	r3, r2, r3
 8003892:	4a1c      	ldr	r2, [pc, #112]	@ (8003904 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003894:	fba2 2303 	umull	r2, r3, r2, r3
 8003898:	0c9b      	lsrs	r3, r3, #18
 800389a:	3301      	adds	r3, #1
 800389c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800389e:	e002      	b.n	80038a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038a6:	4b15      	ldr	r3, [pc, #84]	@ (80038fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038b2:	d102      	bne.n	80038ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1f2      	bne.n	80038a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038ba:	4b10      	ldr	r3, [pc, #64]	@ (80038fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038c6:	d112      	bne.n	80038ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e011      	b.n	80038f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038cc:	4b0b      	ldr	r3, [pc, #44]	@ (80038fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038d2:	4a0a      	ldr	r2, [pc, #40]	@ (80038fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80038dc:	e007      	b.n	80038ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038de:	4b07      	ldr	r3, [pc, #28]	@ (80038fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80038e6:	4a05      	ldr	r2, [pc, #20]	@ (80038fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038ec:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	40007000 	.word	0x40007000
 8003900:	20000000 	.word	0x20000000
 8003904:	431bde83 	.word	0x431bde83

08003908 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b088      	sub	sp, #32
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d102      	bne.n	800391c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	f000 bc08 	b.w	800412c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800391c:	4b96      	ldr	r3, [pc, #600]	@ (8003b78 <HAL_RCC_OscConfig+0x270>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f003 030c 	and.w	r3, r3, #12
 8003924:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003926:	4b94      	ldr	r3, [pc, #592]	@ (8003b78 <HAL_RCC_OscConfig+0x270>)
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	f003 0303 	and.w	r3, r3, #3
 800392e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0310 	and.w	r3, r3, #16
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 80e4 	beq.w	8003b06 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d007      	beq.n	8003954 <HAL_RCC_OscConfig+0x4c>
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	2b0c      	cmp	r3, #12
 8003948:	f040 808b 	bne.w	8003a62 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	2b01      	cmp	r3, #1
 8003950:	f040 8087 	bne.w	8003a62 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003954:	4b88      	ldr	r3, [pc, #544]	@ (8003b78 <HAL_RCC_OscConfig+0x270>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d005      	beq.n	800396c <HAL_RCC_OscConfig+0x64>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e3df      	b.n	800412c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a1a      	ldr	r2, [r3, #32]
 8003970:	4b81      	ldr	r3, [pc, #516]	@ (8003b78 <HAL_RCC_OscConfig+0x270>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0308 	and.w	r3, r3, #8
 8003978:	2b00      	cmp	r3, #0
 800397a:	d004      	beq.n	8003986 <HAL_RCC_OscConfig+0x7e>
 800397c:	4b7e      	ldr	r3, [pc, #504]	@ (8003b78 <HAL_RCC_OscConfig+0x270>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003984:	e005      	b.n	8003992 <HAL_RCC_OscConfig+0x8a>
 8003986:	4b7c      	ldr	r3, [pc, #496]	@ (8003b78 <HAL_RCC_OscConfig+0x270>)
 8003988:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800398c:	091b      	lsrs	r3, r3, #4
 800398e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003992:	4293      	cmp	r3, r2
 8003994:	d223      	bcs.n	80039de <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	4618      	mov	r0, r3
 800399c:	f000 fdfe 	bl	800459c <RCC_SetFlashLatencyFromMSIRange>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e3c0      	b.n	800412c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039aa:	4b73      	ldr	r3, [pc, #460]	@ (8003b78 <HAL_RCC_OscConfig+0x270>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a72      	ldr	r2, [pc, #456]	@ (8003b78 <HAL_RCC_OscConfig+0x270>)
 80039b0:	f043 0308 	orr.w	r3, r3, #8
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	4b70      	ldr	r3, [pc, #448]	@ (8003b78 <HAL_RCC_OscConfig+0x270>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	496d      	ldr	r1, [pc, #436]	@ (8003b78 <HAL_RCC_OscConfig+0x270>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039c8:	4b6b      	ldr	r3, [pc, #428]	@ (8003b78 <HAL_RCC_OscConfig+0x270>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	021b      	lsls	r3, r3, #8
 80039d6:	4968      	ldr	r1, [pc, #416]	@ (8003b78 <HAL_RCC_OscConfig+0x270>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	604b      	str	r3, [r1, #4]
 80039dc:	e025      	b.n	8003a2a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039de:	4b66      	ldr	r3, [pc, #408]	@ (8003b78 <HAL_RCC_OscConfig+0x270>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a65      	ldr	r2, [pc, #404]	@ (8003b78 <HAL_RCC_OscConfig+0x270>)
 80039e4:	f043 0308 	orr.w	r3, r3, #8
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	4b63      	ldr	r3, [pc, #396]	@ (8003b78 <HAL_RCC_OscConfig+0x270>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	4960      	ldr	r1, [pc, #384]	@ (8003b78 <HAL_RCC_OscConfig+0x270>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039fc:	4b5e      	ldr	r3, [pc, #376]	@ (8003b78 <HAL_RCC_OscConfig+0x270>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	021b      	lsls	r3, r3, #8
 8003a0a:	495b      	ldr	r1, [pc, #364]	@ (8003b78 <HAL_RCC_OscConfig+0x270>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d109      	bne.n	8003a2a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 fdbe 	bl	800459c <RCC_SetFlashLatencyFromMSIRange>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e380      	b.n	800412c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a2a:	f000 fcc1 	bl	80043b0 <HAL_RCC_GetSysClockFreq>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	4b51      	ldr	r3, [pc, #324]	@ (8003b78 <HAL_RCC_OscConfig+0x270>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	091b      	lsrs	r3, r3, #4
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	4950      	ldr	r1, [pc, #320]	@ (8003b7c <HAL_RCC_OscConfig+0x274>)
 8003a3c:	5ccb      	ldrb	r3, [r1, r3]
 8003a3e:	f003 031f 	and.w	r3, r3, #31
 8003a42:	fa22 f303 	lsr.w	r3, r2, r3
 8003a46:	4a4e      	ldr	r2, [pc, #312]	@ (8003b80 <HAL_RCC_OscConfig+0x278>)
 8003a48:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a4a:	4b4e      	ldr	r3, [pc, #312]	@ (8003b84 <HAL_RCC_OscConfig+0x27c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fe f852 	bl	8001af8 <HAL_InitTick>
 8003a54:	4603      	mov	r3, r0
 8003a56:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a58:	7bfb      	ldrb	r3, [r7, #15]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d052      	beq.n	8003b04 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003a5e:	7bfb      	ldrb	r3, [r7, #15]
 8003a60:	e364      	b.n	800412c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d032      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a6a:	4b43      	ldr	r3, [pc, #268]	@ (8003b78 <HAL_RCC_OscConfig+0x270>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a42      	ldr	r2, [pc, #264]	@ (8003b78 <HAL_RCC_OscConfig+0x270>)
 8003a70:	f043 0301 	orr.w	r3, r3, #1
 8003a74:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a76:	f7fe fce7 	bl	8002448 <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a7c:	e008      	b.n	8003a90 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a7e:	f7fe fce3 	bl	8002448 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e34d      	b.n	800412c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a90:	4b39      	ldr	r3, [pc, #228]	@ (8003b78 <HAL_RCC_OscConfig+0x270>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0f0      	beq.n	8003a7e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a9c:	4b36      	ldr	r3, [pc, #216]	@ (8003b78 <HAL_RCC_OscConfig+0x270>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a35      	ldr	r2, [pc, #212]	@ (8003b78 <HAL_RCC_OscConfig+0x270>)
 8003aa2:	f043 0308 	orr.w	r3, r3, #8
 8003aa6:	6013      	str	r3, [r2, #0]
 8003aa8:	4b33      	ldr	r3, [pc, #204]	@ (8003b78 <HAL_RCC_OscConfig+0x270>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	4930      	ldr	r1, [pc, #192]	@ (8003b78 <HAL_RCC_OscConfig+0x270>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003aba:	4b2f      	ldr	r3, [pc, #188]	@ (8003b78 <HAL_RCC_OscConfig+0x270>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	021b      	lsls	r3, r3, #8
 8003ac8:	492b      	ldr	r1, [pc, #172]	@ (8003b78 <HAL_RCC_OscConfig+0x270>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	604b      	str	r3, [r1, #4]
 8003ace:	e01a      	b.n	8003b06 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ad0:	4b29      	ldr	r3, [pc, #164]	@ (8003b78 <HAL_RCC_OscConfig+0x270>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a28      	ldr	r2, [pc, #160]	@ (8003b78 <HAL_RCC_OscConfig+0x270>)
 8003ad6:	f023 0301 	bic.w	r3, r3, #1
 8003ada:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003adc:	f7fe fcb4 	bl	8002448 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ae4:	f7fe fcb0 	bl	8002448 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e31a      	b.n	800412c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003af6:	4b20      	ldr	r3, [pc, #128]	@ (8003b78 <HAL_RCC_OscConfig+0x270>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1f0      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x1dc>
 8003b02:	e000      	b.n	8003b06 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b04:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d073      	beq.n	8003bfa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d005      	beq.n	8003b24 <HAL_RCC_OscConfig+0x21c>
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	2b0c      	cmp	r3, #12
 8003b1c:	d10e      	bne.n	8003b3c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2b03      	cmp	r3, #3
 8003b22:	d10b      	bne.n	8003b3c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b24:	4b14      	ldr	r3, [pc, #80]	@ (8003b78 <HAL_RCC_OscConfig+0x270>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d063      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x2f0>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d15f      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e2f7      	b.n	800412c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b44:	d106      	bne.n	8003b54 <HAL_RCC_OscConfig+0x24c>
 8003b46:	4b0c      	ldr	r3, [pc, #48]	@ (8003b78 <HAL_RCC_OscConfig+0x270>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a0b      	ldr	r2, [pc, #44]	@ (8003b78 <HAL_RCC_OscConfig+0x270>)
 8003b4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b50:	6013      	str	r3, [r2, #0]
 8003b52:	e025      	b.n	8003ba0 <HAL_RCC_OscConfig+0x298>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b5c:	d114      	bne.n	8003b88 <HAL_RCC_OscConfig+0x280>
 8003b5e:	4b06      	ldr	r3, [pc, #24]	@ (8003b78 <HAL_RCC_OscConfig+0x270>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a05      	ldr	r2, [pc, #20]	@ (8003b78 <HAL_RCC_OscConfig+0x270>)
 8003b64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	4b03      	ldr	r3, [pc, #12]	@ (8003b78 <HAL_RCC_OscConfig+0x270>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a02      	ldr	r2, [pc, #8]	@ (8003b78 <HAL_RCC_OscConfig+0x270>)
 8003b70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b74:	6013      	str	r3, [r2, #0]
 8003b76:	e013      	b.n	8003ba0 <HAL_RCC_OscConfig+0x298>
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	08009334 	.word	0x08009334
 8003b80:	20000000 	.word	0x20000000
 8003b84:	2000007c 	.word	0x2000007c
 8003b88:	4ba0      	ldr	r3, [pc, #640]	@ (8003e0c <HAL_RCC_OscConfig+0x504>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a9f      	ldr	r2, [pc, #636]	@ (8003e0c <HAL_RCC_OscConfig+0x504>)
 8003b8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b92:	6013      	str	r3, [r2, #0]
 8003b94:	4b9d      	ldr	r3, [pc, #628]	@ (8003e0c <HAL_RCC_OscConfig+0x504>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a9c      	ldr	r2, [pc, #624]	@ (8003e0c <HAL_RCC_OscConfig+0x504>)
 8003b9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d013      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba8:	f7fe fc4e 	bl	8002448 <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb0:	f7fe fc4a 	bl	8002448 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b64      	cmp	r3, #100	@ 0x64
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e2b4      	b.n	800412c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bc2:	4b92      	ldr	r3, [pc, #584]	@ (8003e0c <HAL_RCC_OscConfig+0x504>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0f0      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x2a8>
 8003bce:	e014      	b.n	8003bfa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd0:	f7fe fc3a 	bl	8002448 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bd8:	f7fe fc36 	bl	8002448 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b64      	cmp	r3, #100	@ 0x64
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e2a0      	b.n	800412c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bea:	4b88      	ldr	r3, [pc, #544]	@ (8003e0c <HAL_RCC_OscConfig+0x504>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1f0      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x2d0>
 8003bf6:	e000      	b.n	8003bfa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d060      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	2b04      	cmp	r3, #4
 8003c0a:	d005      	beq.n	8003c18 <HAL_RCC_OscConfig+0x310>
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	2b0c      	cmp	r3, #12
 8003c10:	d119      	bne.n	8003c46 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d116      	bne.n	8003c46 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c18:	4b7c      	ldr	r3, [pc, #496]	@ (8003e0c <HAL_RCC_OscConfig+0x504>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d005      	beq.n	8003c30 <HAL_RCC_OscConfig+0x328>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e27d      	b.n	800412c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c30:	4b76      	ldr	r3, [pc, #472]	@ (8003e0c <HAL_RCC_OscConfig+0x504>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	061b      	lsls	r3, r3, #24
 8003c3e:	4973      	ldr	r1, [pc, #460]	@ (8003e0c <HAL_RCC_OscConfig+0x504>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c44:	e040      	b.n	8003cc8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d023      	beq.n	8003c96 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c4e:	4b6f      	ldr	r3, [pc, #444]	@ (8003e0c <HAL_RCC_OscConfig+0x504>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a6e      	ldr	r2, [pc, #440]	@ (8003e0c <HAL_RCC_OscConfig+0x504>)
 8003c54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5a:	f7fe fbf5 	bl	8002448 <HAL_GetTick>
 8003c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c60:	e008      	b.n	8003c74 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c62:	f7fe fbf1 	bl	8002448 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e25b      	b.n	800412c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c74:	4b65      	ldr	r3, [pc, #404]	@ (8003e0c <HAL_RCC_OscConfig+0x504>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d0f0      	beq.n	8003c62 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c80:	4b62      	ldr	r3, [pc, #392]	@ (8003e0c <HAL_RCC_OscConfig+0x504>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	061b      	lsls	r3, r3, #24
 8003c8e:	495f      	ldr	r1, [pc, #380]	@ (8003e0c <HAL_RCC_OscConfig+0x504>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	604b      	str	r3, [r1, #4]
 8003c94:	e018      	b.n	8003cc8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c96:	4b5d      	ldr	r3, [pc, #372]	@ (8003e0c <HAL_RCC_OscConfig+0x504>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a5c      	ldr	r2, [pc, #368]	@ (8003e0c <HAL_RCC_OscConfig+0x504>)
 8003c9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ca0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca2:	f7fe fbd1 	bl	8002448 <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ca8:	e008      	b.n	8003cbc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003caa:	f7fe fbcd 	bl	8002448 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e237      	b.n	800412c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cbc:	4b53      	ldr	r3, [pc, #332]	@ (8003e0c <HAL_RCC_OscConfig+0x504>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1f0      	bne.n	8003caa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0308 	and.w	r3, r3, #8
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d03c      	beq.n	8003d4e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d01c      	beq.n	8003d16 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cdc:	4b4b      	ldr	r3, [pc, #300]	@ (8003e0c <HAL_RCC_OscConfig+0x504>)
 8003cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ce2:	4a4a      	ldr	r2, [pc, #296]	@ (8003e0c <HAL_RCC_OscConfig+0x504>)
 8003ce4:	f043 0301 	orr.w	r3, r3, #1
 8003ce8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cec:	f7fe fbac 	bl	8002448 <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cf4:	f7fe fba8 	bl	8002448 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e212      	b.n	800412c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d06:	4b41      	ldr	r3, [pc, #260]	@ (8003e0c <HAL_RCC_OscConfig+0x504>)
 8003d08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0ef      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x3ec>
 8003d14:	e01b      	b.n	8003d4e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d16:	4b3d      	ldr	r3, [pc, #244]	@ (8003e0c <HAL_RCC_OscConfig+0x504>)
 8003d18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d1c:	4a3b      	ldr	r2, [pc, #236]	@ (8003e0c <HAL_RCC_OscConfig+0x504>)
 8003d1e:	f023 0301 	bic.w	r3, r3, #1
 8003d22:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d26:	f7fe fb8f 	bl	8002448 <HAL_GetTick>
 8003d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d2c:	e008      	b.n	8003d40 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d2e:	f7fe fb8b 	bl	8002448 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e1f5      	b.n	800412c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d40:	4b32      	ldr	r3, [pc, #200]	@ (8003e0c <HAL_RCC_OscConfig+0x504>)
 8003d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1ef      	bne.n	8003d2e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0304 	and.w	r3, r3, #4
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 80a6 	beq.w	8003ea8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d60:	4b2a      	ldr	r3, [pc, #168]	@ (8003e0c <HAL_RCC_OscConfig+0x504>)
 8003d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10d      	bne.n	8003d88 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d6c:	4b27      	ldr	r3, [pc, #156]	@ (8003e0c <HAL_RCC_OscConfig+0x504>)
 8003d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d70:	4a26      	ldr	r2, [pc, #152]	@ (8003e0c <HAL_RCC_OscConfig+0x504>)
 8003d72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d76:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d78:	4b24      	ldr	r3, [pc, #144]	@ (8003e0c <HAL_RCC_OscConfig+0x504>)
 8003d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d80:	60bb      	str	r3, [r7, #8]
 8003d82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d84:	2301      	movs	r3, #1
 8003d86:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d88:	4b21      	ldr	r3, [pc, #132]	@ (8003e10 <HAL_RCC_OscConfig+0x508>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d118      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d94:	4b1e      	ldr	r3, [pc, #120]	@ (8003e10 <HAL_RCC_OscConfig+0x508>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a1d      	ldr	r2, [pc, #116]	@ (8003e10 <HAL_RCC_OscConfig+0x508>)
 8003d9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003da0:	f7fe fb52 	bl	8002448 <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003da8:	f7fe fb4e 	bl	8002448 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e1b8      	b.n	800412c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dba:	4b15      	ldr	r3, [pc, #84]	@ (8003e10 <HAL_RCC_OscConfig+0x508>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0f0      	beq.n	8003da8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d108      	bne.n	8003de0 <HAL_RCC_OscConfig+0x4d8>
 8003dce:	4b0f      	ldr	r3, [pc, #60]	@ (8003e0c <HAL_RCC_OscConfig+0x504>)
 8003dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8003e0c <HAL_RCC_OscConfig+0x504>)
 8003dd6:	f043 0301 	orr.w	r3, r3, #1
 8003dda:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dde:	e029      	b.n	8003e34 <HAL_RCC_OscConfig+0x52c>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	2b05      	cmp	r3, #5
 8003de6:	d115      	bne.n	8003e14 <HAL_RCC_OscConfig+0x50c>
 8003de8:	4b08      	ldr	r3, [pc, #32]	@ (8003e0c <HAL_RCC_OscConfig+0x504>)
 8003dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dee:	4a07      	ldr	r2, [pc, #28]	@ (8003e0c <HAL_RCC_OscConfig+0x504>)
 8003df0:	f043 0304 	orr.w	r3, r3, #4
 8003df4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003df8:	4b04      	ldr	r3, [pc, #16]	@ (8003e0c <HAL_RCC_OscConfig+0x504>)
 8003dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dfe:	4a03      	ldr	r2, [pc, #12]	@ (8003e0c <HAL_RCC_OscConfig+0x504>)
 8003e00:	f043 0301 	orr.w	r3, r3, #1
 8003e04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e08:	e014      	b.n	8003e34 <HAL_RCC_OscConfig+0x52c>
 8003e0a:	bf00      	nop
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	40007000 	.word	0x40007000
 8003e14:	4b9d      	ldr	r3, [pc, #628]	@ (800408c <HAL_RCC_OscConfig+0x784>)
 8003e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e1a:	4a9c      	ldr	r2, [pc, #624]	@ (800408c <HAL_RCC_OscConfig+0x784>)
 8003e1c:	f023 0301 	bic.w	r3, r3, #1
 8003e20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e24:	4b99      	ldr	r3, [pc, #612]	@ (800408c <HAL_RCC_OscConfig+0x784>)
 8003e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e2a:	4a98      	ldr	r2, [pc, #608]	@ (800408c <HAL_RCC_OscConfig+0x784>)
 8003e2c:	f023 0304 	bic.w	r3, r3, #4
 8003e30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d016      	beq.n	8003e6a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e3c:	f7fe fb04 	bl	8002448 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e42:	e00a      	b.n	8003e5a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e44:	f7fe fb00 	bl	8002448 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e168      	b.n	800412c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e5a:	4b8c      	ldr	r3, [pc, #560]	@ (800408c <HAL_RCC_OscConfig+0x784>)
 8003e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0ed      	beq.n	8003e44 <HAL_RCC_OscConfig+0x53c>
 8003e68:	e015      	b.n	8003e96 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6a:	f7fe faed 	bl	8002448 <HAL_GetTick>
 8003e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e70:	e00a      	b.n	8003e88 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e72:	f7fe fae9 	bl	8002448 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d901      	bls.n	8003e88 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e151      	b.n	800412c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e88:	4b80      	ldr	r3, [pc, #512]	@ (800408c <HAL_RCC_OscConfig+0x784>)
 8003e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1ed      	bne.n	8003e72 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e96:	7ffb      	ldrb	r3, [r7, #31]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d105      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e9c:	4b7b      	ldr	r3, [pc, #492]	@ (800408c <HAL_RCC_OscConfig+0x784>)
 8003e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ea0:	4a7a      	ldr	r2, [pc, #488]	@ (800408c <HAL_RCC_OscConfig+0x784>)
 8003ea2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ea6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0320 	and.w	r3, r3, #32
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d03c      	beq.n	8003f2e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d01c      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ebc:	4b73      	ldr	r3, [pc, #460]	@ (800408c <HAL_RCC_OscConfig+0x784>)
 8003ebe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ec2:	4a72      	ldr	r2, [pc, #456]	@ (800408c <HAL_RCC_OscConfig+0x784>)
 8003ec4:	f043 0301 	orr.w	r3, r3, #1
 8003ec8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ecc:	f7fe fabc 	bl	8002448 <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ed4:	f7fe fab8 	bl	8002448 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e122      	b.n	800412c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ee6:	4b69      	ldr	r3, [pc, #420]	@ (800408c <HAL_RCC_OscConfig+0x784>)
 8003ee8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d0ef      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x5cc>
 8003ef4:	e01b      	b.n	8003f2e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ef6:	4b65      	ldr	r3, [pc, #404]	@ (800408c <HAL_RCC_OscConfig+0x784>)
 8003ef8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003efc:	4a63      	ldr	r2, [pc, #396]	@ (800408c <HAL_RCC_OscConfig+0x784>)
 8003efe:	f023 0301 	bic.w	r3, r3, #1
 8003f02:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f06:	f7fe fa9f 	bl	8002448 <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f0c:	e008      	b.n	8003f20 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f0e:	f7fe fa9b 	bl	8002448 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e105      	b.n	800412c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f20:	4b5a      	ldr	r3, [pc, #360]	@ (800408c <HAL_RCC_OscConfig+0x784>)
 8003f22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1ef      	bne.n	8003f0e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 80f9 	beq.w	800412a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	f040 80cf 	bne.w	80040e0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f42:	4b52      	ldr	r3, [pc, #328]	@ (800408c <HAL_RCC_OscConfig+0x784>)
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f003 0203 	and.w	r2, r3, #3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d12c      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f60:	3b01      	subs	r3, #1
 8003f62:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d123      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f72:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d11b      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f82:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d113      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f92:	085b      	lsrs	r3, r3, #1
 8003f94:	3b01      	subs	r3, #1
 8003f96:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d109      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa6:	085b      	lsrs	r3, r3, #1
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d071      	beq.n	8004094 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	2b0c      	cmp	r3, #12
 8003fb4:	d068      	beq.n	8004088 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003fb6:	4b35      	ldr	r3, [pc, #212]	@ (800408c <HAL_RCC_OscConfig+0x784>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d105      	bne.n	8003fce <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003fc2:	4b32      	ldr	r3, [pc, #200]	@ (800408c <HAL_RCC_OscConfig+0x784>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e0ac      	b.n	800412c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003fd2:	4b2e      	ldr	r3, [pc, #184]	@ (800408c <HAL_RCC_OscConfig+0x784>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a2d      	ldr	r2, [pc, #180]	@ (800408c <HAL_RCC_OscConfig+0x784>)
 8003fd8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fdc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fde:	f7fe fa33 	bl	8002448 <HAL_GetTick>
 8003fe2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fe6:	f7fe fa2f 	bl	8002448 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e099      	b.n	800412c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ff8:	4b24      	ldr	r3, [pc, #144]	@ (800408c <HAL_RCC_OscConfig+0x784>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1f0      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004004:	4b21      	ldr	r3, [pc, #132]	@ (800408c <HAL_RCC_OscConfig+0x784>)
 8004006:	68da      	ldr	r2, [r3, #12]
 8004008:	4b21      	ldr	r3, [pc, #132]	@ (8004090 <HAL_RCC_OscConfig+0x788>)
 800400a:	4013      	ands	r3, r2
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004014:	3a01      	subs	r2, #1
 8004016:	0112      	lsls	r2, r2, #4
 8004018:	4311      	orrs	r1, r2
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800401e:	0212      	lsls	r2, r2, #8
 8004020:	4311      	orrs	r1, r2
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004026:	0852      	lsrs	r2, r2, #1
 8004028:	3a01      	subs	r2, #1
 800402a:	0552      	lsls	r2, r2, #21
 800402c:	4311      	orrs	r1, r2
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004032:	0852      	lsrs	r2, r2, #1
 8004034:	3a01      	subs	r2, #1
 8004036:	0652      	lsls	r2, r2, #25
 8004038:	4311      	orrs	r1, r2
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800403e:	06d2      	lsls	r2, r2, #27
 8004040:	430a      	orrs	r2, r1
 8004042:	4912      	ldr	r1, [pc, #72]	@ (800408c <HAL_RCC_OscConfig+0x784>)
 8004044:	4313      	orrs	r3, r2
 8004046:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004048:	4b10      	ldr	r3, [pc, #64]	@ (800408c <HAL_RCC_OscConfig+0x784>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a0f      	ldr	r2, [pc, #60]	@ (800408c <HAL_RCC_OscConfig+0x784>)
 800404e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004052:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004054:	4b0d      	ldr	r3, [pc, #52]	@ (800408c <HAL_RCC_OscConfig+0x784>)
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	4a0c      	ldr	r2, [pc, #48]	@ (800408c <HAL_RCC_OscConfig+0x784>)
 800405a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800405e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004060:	f7fe f9f2 	bl	8002448 <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004066:	e008      	b.n	800407a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004068:	f7fe f9ee 	bl	8002448 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b02      	cmp	r3, #2
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e058      	b.n	800412c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800407a:	4b04      	ldr	r3, [pc, #16]	@ (800408c <HAL_RCC_OscConfig+0x784>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d0f0      	beq.n	8004068 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004086:	e050      	b.n	800412a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e04f      	b.n	800412c <HAL_RCC_OscConfig+0x824>
 800408c:	40021000 	.word	0x40021000
 8004090:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004094:	4b27      	ldr	r3, [pc, #156]	@ (8004134 <HAL_RCC_OscConfig+0x82c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d144      	bne.n	800412a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80040a0:	4b24      	ldr	r3, [pc, #144]	@ (8004134 <HAL_RCC_OscConfig+0x82c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a23      	ldr	r2, [pc, #140]	@ (8004134 <HAL_RCC_OscConfig+0x82c>)
 80040a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040ac:	4b21      	ldr	r3, [pc, #132]	@ (8004134 <HAL_RCC_OscConfig+0x82c>)
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	4a20      	ldr	r2, [pc, #128]	@ (8004134 <HAL_RCC_OscConfig+0x82c>)
 80040b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040b8:	f7fe f9c6 	bl	8002448 <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c0:	f7fe f9c2 	bl	8002448 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e02c      	b.n	800412c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040d2:	4b18      	ldr	r3, [pc, #96]	@ (8004134 <HAL_RCC_OscConfig+0x82c>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0f0      	beq.n	80040c0 <HAL_RCC_OscConfig+0x7b8>
 80040de:	e024      	b.n	800412a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	2b0c      	cmp	r3, #12
 80040e4:	d01f      	beq.n	8004126 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e6:	4b13      	ldr	r3, [pc, #76]	@ (8004134 <HAL_RCC_OscConfig+0x82c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a12      	ldr	r2, [pc, #72]	@ (8004134 <HAL_RCC_OscConfig+0x82c>)
 80040ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f2:	f7fe f9a9 	bl	8002448 <HAL_GetTick>
 80040f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040f8:	e008      	b.n	800410c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040fa:	f7fe f9a5 	bl	8002448 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e00f      	b.n	800412c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800410c:	4b09      	ldr	r3, [pc, #36]	@ (8004134 <HAL_RCC_OscConfig+0x82c>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1f0      	bne.n	80040fa <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004118:	4b06      	ldr	r3, [pc, #24]	@ (8004134 <HAL_RCC_OscConfig+0x82c>)
 800411a:	68da      	ldr	r2, [r3, #12]
 800411c:	4905      	ldr	r1, [pc, #20]	@ (8004134 <HAL_RCC_OscConfig+0x82c>)
 800411e:	4b06      	ldr	r3, [pc, #24]	@ (8004138 <HAL_RCC_OscConfig+0x830>)
 8004120:	4013      	ands	r3, r2
 8004122:	60cb      	str	r3, [r1, #12]
 8004124:	e001      	b.n	800412a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e000      	b.n	800412c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3720      	adds	r7, #32
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	40021000 	.word	0x40021000
 8004138:	feeefffc 	.word	0xfeeefffc

0800413c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004146:	2300      	movs	r3, #0
 8004148:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e11d      	b.n	8004390 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004154:	4b90      	ldr	r3, [pc, #576]	@ (8004398 <HAL_RCC_ClockConfig+0x25c>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 030f 	and.w	r3, r3, #15
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	429a      	cmp	r2, r3
 8004160:	d910      	bls.n	8004184 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004162:	4b8d      	ldr	r3, [pc, #564]	@ (8004398 <HAL_RCC_ClockConfig+0x25c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f023 020f 	bic.w	r2, r3, #15
 800416a:	498b      	ldr	r1, [pc, #556]	@ (8004398 <HAL_RCC_ClockConfig+0x25c>)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	4313      	orrs	r3, r2
 8004170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004172:	4b89      	ldr	r3, [pc, #548]	@ (8004398 <HAL_RCC_ClockConfig+0x25c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 030f 	and.w	r3, r3, #15
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	429a      	cmp	r2, r3
 800417e:	d001      	beq.n	8004184 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e105      	b.n	8004390 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b00      	cmp	r3, #0
 800418e:	d010      	beq.n	80041b2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	4b81      	ldr	r3, [pc, #516]	@ (800439c <HAL_RCC_ClockConfig+0x260>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800419c:	429a      	cmp	r2, r3
 800419e:	d908      	bls.n	80041b2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a0:	4b7e      	ldr	r3, [pc, #504]	@ (800439c <HAL_RCC_ClockConfig+0x260>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	497b      	ldr	r1, [pc, #492]	@ (800439c <HAL_RCC_ClockConfig+0x260>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d079      	beq.n	80042b2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2b03      	cmp	r3, #3
 80041c4:	d11e      	bne.n	8004204 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041c6:	4b75      	ldr	r3, [pc, #468]	@ (800439c <HAL_RCC_ClockConfig+0x260>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e0dc      	b.n	8004390 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80041d6:	f000 fa3b 	bl	8004650 <RCC_GetSysClockFreqFromPLLSource>
 80041da:	4603      	mov	r3, r0
 80041dc:	4a70      	ldr	r2, [pc, #448]	@ (80043a0 <HAL_RCC_ClockConfig+0x264>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d946      	bls.n	8004270 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80041e2:	4b6e      	ldr	r3, [pc, #440]	@ (800439c <HAL_RCC_ClockConfig+0x260>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d140      	bne.n	8004270 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80041ee:	4b6b      	ldr	r3, [pc, #428]	@ (800439c <HAL_RCC_ClockConfig+0x260>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041f6:	4a69      	ldr	r2, [pc, #420]	@ (800439c <HAL_RCC_ClockConfig+0x260>)
 80041f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80041fe:	2380      	movs	r3, #128	@ 0x80
 8004200:	617b      	str	r3, [r7, #20]
 8004202:	e035      	b.n	8004270 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	2b02      	cmp	r3, #2
 800420a:	d107      	bne.n	800421c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800420c:	4b63      	ldr	r3, [pc, #396]	@ (800439c <HAL_RCC_ClockConfig+0x260>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d115      	bne.n	8004244 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e0b9      	b.n	8004390 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d107      	bne.n	8004234 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004224:	4b5d      	ldr	r3, [pc, #372]	@ (800439c <HAL_RCC_ClockConfig+0x260>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d109      	bne.n	8004244 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e0ad      	b.n	8004390 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004234:	4b59      	ldr	r3, [pc, #356]	@ (800439c <HAL_RCC_ClockConfig+0x260>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e0a5      	b.n	8004390 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004244:	f000 f8b4 	bl	80043b0 <HAL_RCC_GetSysClockFreq>
 8004248:	4603      	mov	r3, r0
 800424a:	4a55      	ldr	r2, [pc, #340]	@ (80043a0 <HAL_RCC_ClockConfig+0x264>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d90f      	bls.n	8004270 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004250:	4b52      	ldr	r3, [pc, #328]	@ (800439c <HAL_RCC_ClockConfig+0x260>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d109      	bne.n	8004270 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800425c:	4b4f      	ldr	r3, [pc, #316]	@ (800439c <HAL_RCC_ClockConfig+0x260>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004264:	4a4d      	ldr	r2, [pc, #308]	@ (800439c <HAL_RCC_ClockConfig+0x260>)
 8004266:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800426a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800426c:	2380      	movs	r3, #128	@ 0x80
 800426e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004270:	4b4a      	ldr	r3, [pc, #296]	@ (800439c <HAL_RCC_ClockConfig+0x260>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f023 0203 	bic.w	r2, r3, #3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	4947      	ldr	r1, [pc, #284]	@ (800439c <HAL_RCC_ClockConfig+0x260>)
 800427e:	4313      	orrs	r3, r2
 8004280:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004282:	f7fe f8e1 	bl	8002448 <HAL_GetTick>
 8004286:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004288:	e00a      	b.n	80042a0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800428a:	f7fe f8dd 	bl	8002448 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004298:	4293      	cmp	r3, r2
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e077      	b.n	8004390 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042a0:	4b3e      	ldr	r3, [pc, #248]	@ (800439c <HAL_RCC_ClockConfig+0x260>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f003 020c 	and.w	r2, r3, #12
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d1eb      	bne.n	800428a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2b80      	cmp	r3, #128	@ 0x80
 80042b6:	d105      	bne.n	80042c4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80042b8:	4b38      	ldr	r3, [pc, #224]	@ (800439c <HAL_RCC_ClockConfig+0x260>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	4a37      	ldr	r2, [pc, #220]	@ (800439c <HAL_RCC_ClockConfig+0x260>)
 80042be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042c2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d010      	beq.n	80042f2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	4b31      	ldr	r3, [pc, #196]	@ (800439c <HAL_RCC_ClockConfig+0x260>)
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042dc:	429a      	cmp	r2, r3
 80042de:	d208      	bcs.n	80042f2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042e0:	4b2e      	ldr	r3, [pc, #184]	@ (800439c <HAL_RCC_ClockConfig+0x260>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	492b      	ldr	r1, [pc, #172]	@ (800439c <HAL_RCC_ClockConfig+0x260>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042f2:	4b29      	ldr	r3, [pc, #164]	@ (8004398 <HAL_RCC_ClockConfig+0x25c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 030f 	and.w	r3, r3, #15
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d210      	bcs.n	8004322 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004300:	4b25      	ldr	r3, [pc, #148]	@ (8004398 <HAL_RCC_ClockConfig+0x25c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f023 020f 	bic.w	r2, r3, #15
 8004308:	4923      	ldr	r1, [pc, #140]	@ (8004398 <HAL_RCC_ClockConfig+0x25c>)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	4313      	orrs	r3, r2
 800430e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004310:	4b21      	ldr	r3, [pc, #132]	@ (8004398 <HAL_RCC_ClockConfig+0x25c>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 030f 	and.w	r3, r3, #15
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	429a      	cmp	r2, r3
 800431c:	d001      	beq.n	8004322 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e036      	b.n	8004390 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0304 	and.w	r3, r3, #4
 800432a:	2b00      	cmp	r3, #0
 800432c:	d008      	beq.n	8004340 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800432e:	4b1b      	ldr	r3, [pc, #108]	@ (800439c <HAL_RCC_ClockConfig+0x260>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	4918      	ldr	r1, [pc, #96]	@ (800439c <HAL_RCC_ClockConfig+0x260>)
 800433c:	4313      	orrs	r3, r2
 800433e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0308 	and.w	r3, r3, #8
 8004348:	2b00      	cmp	r3, #0
 800434a:	d009      	beq.n	8004360 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800434c:	4b13      	ldr	r3, [pc, #76]	@ (800439c <HAL_RCC_ClockConfig+0x260>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	00db      	lsls	r3, r3, #3
 800435a:	4910      	ldr	r1, [pc, #64]	@ (800439c <HAL_RCC_ClockConfig+0x260>)
 800435c:	4313      	orrs	r3, r2
 800435e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004360:	f000 f826 	bl	80043b0 <HAL_RCC_GetSysClockFreq>
 8004364:	4602      	mov	r2, r0
 8004366:	4b0d      	ldr	r3, [pc, #52]	@ (800439c <HAL_RCC_ClockConfig+0x260>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	091b      	lsrs	r3, r3, #4
 800436c:	f003 030f 	and.w	r3, r3, #15
 8004370:	490c      	ldr	r1, [pc, #48]	@ (80043a4 <HAL_RCC_ClockConfig+0x268>)
 8004372:	5ccb      	ldrb	r3, [r1, r3]
 8004374:	f003 031f 	and.w	r3, r3, #31
 8004378:	fa22 f303 	lsr.w	r3, r2, r3
 800437c:	4a0a      	ldr	r2, [pc, #40]	@ (80043a8 <HAL_RCC_ClockConfig+0x26c>)
 800437e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004380:	4b0a      	ldr	r3, [pc, #40]	@ (80043ac <HAL_RCC_ClockConfig+0x270>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4618      	mov	r0, r3
 8004386:	f7fd fbb7 	bl	8001af8 <HAL_InitTick>
 800438a:	4603      	mov	r3, r0
 800438c:	73fb      	strb	r3, [r7, #15]

  return status;
 800438e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004390:	4618      	mov	r0, r3
 8004392:	3718      	adds	r7, #24
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	40022000 	.word	0x40022000
 800439c:	40021000 	.word	0x40021000
 80043a0:	04c4b400 	.word	0x04c4b400
 80043a4:	08009334 	.word	0x08009334
 80043a8:	20000000 	.word	0x20000000
 80043ac:	2000007c 	.word	0x2000007c

080043b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b089      	sub	sp, #36	@ 0x24
 80043b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	61fb      	str	r3, [r7, #28]
 80043ba:	2300      	movs	r3, #0
 80043bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043be:	4b3e      	ldr	r3, [pc, #248]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 030c 	and.w	r3, r3, #12
 80043c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043c8:	4b3b      	ldr	r3, [pc, #236]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f003 0303 	and.w	r3, r3, #3
 80043d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d005      	beq.n	80043e4 <HAL_RCC_GetSysClockFreq+0x34>
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	2b0c      	cmp	r3, #12
 80043dc:	d121      	bne.n	8004422 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d11e      	bne.n	8004422 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80043e4:	4b34      	ldr	r3, [pc, #208]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0308 	and.w	r3, r3, #8
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d107      	bne.n	8004400 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80043f0:	4b31      	ldr	r3, [pc, #196]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043f6:	0a1b      	lsrs	r3, r3, #8
 80043f8:	f003 030f 	and.w	r3, r3, #15
 80043fc:	61fb      	str	r3, [r7, #28]
 80043fe:	e005      	b.n	800440c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004400:	4b2d      	ldr	r3, [pc, #180]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	091b      	lsrs	r3, r3, #4
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800440c:	4a2b      	ldr	r2, [pc, #172]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004414:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10d      	bne.n	8004438 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004420:	e00a      	b.n	8004438 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	2b04      	cmp	r3, #4
 8004426:	d102      	bne.n	800442e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004428:	4b25      	ldr	r3, [pc, #148]	@ (80044c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800442a:	61bb      	str	r3, [r7, #24]
 800442c:	e004      	b.n	8004438 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	2b08      	cmp	r3, #8
 8004432:	d101      	bne.n	8004438 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004434:	4b23      	ldr	r3, [pc, #140]	@ (80044c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004436:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	2b0c      	cmp	r3, #12
 800443c:	d134      	bne.n	80044a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800443e:	4b1e      	ldr	r3, [pc, #120]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f003 0303 	and.w	r3, r3, #3
 8004446:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	2b02      	cmp	r3, #2
 800444c:	d003      	beq.n	8004456 <HAL_RCC_GetSysClockFreq+0xa6>
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2b03      	cmp	r3, #3
 8004452:	d003      	beq.n	800445c <HAL_RCC_GetSysClockFreq+0xac>
 8004454:	e005      	b.n	8004462 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004456:	4b1a      	ldr	r3, [pc, #104]	@ (80044c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004458:	617b      	str	r3, [r7, #20]
      break;
 800445a:	e005      	b.n	8004468 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800445c:	4b19      	ldr	r3, [pc, #100]	@ (80044c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800445e:	617b      	str	r3, [r7, #20]
      break;
 8004460:	e002      	b.n	8004468 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	617b      	str	r3, [r7, #20]
      break;
 8004466:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004468:	4b13      	ldr	r3, [pc, #76]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	091b      	lsrs	r3, r3, #4
 800446e:	f003 030f 	and.w	r3, r3, #15
 8004472:	3301      	adds	r3, #1
 8004474:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004476:	4b10      	ldr	r3, [pc, #64]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	0a1b      	lsrs	r3, r3, #8
 800447c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	fb03 f202 	mul.w	r2, r3, r2
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	fbb2 f3f3 	udiv	r3, r2, r3
 800448c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800448e:	4b0a      	ldr	r3, [pc, #40]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	0e5b      	lsrs	r3, r3, #25
 8004494:	f003 0303 	and.w	r3, r3, #3
 8004498:	3301      	adds	r3, #1
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80044a8:	69bb      	ldr	r3, [r7, #24]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3724      	adds	r7, #36	@ 0x24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	40021000 	.word	0x40021000
 80044bc:	0800934c 	.word	0x0800934c
 80044c0:	00f42400 	.word	0x00f42400
 80044c4:	007a1200 	.word	0x007a1200

080044c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044cc:	4b03      	ldr	r3, [pc, #12]	@ (80044dc <HAL_RCC_GetHCLKFreq+0x14>)
 80044ce:	681b      	ldr	r3, [r3, #0]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	20000000 	.word	0x20000000

080044e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80044e4:	f7ff fff0 	bl	80044c8 <HAL_RCC_GetHCLKFreq>
 80044e8:	4602      	mov	r2, r0
 80044ea:	4b06      	ldr	r3, [pc, #24]	@ (8004504 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	0a1b      	lsrs	r3, r3, #8
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	4904      	ldr	r1, [pc, #16]	@ (8004508 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044f6:	5ccb      	ldrb	r3, [r1, r3]
 80044f8:	f003 031f 	and.w	r3, r3, #31
 80044fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004500:	4618      	mov	r0, r3
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40021000 	.word	0x40021000
 8004508:	08009344 	.word	0x08009344

0800450c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004510:	f7ff ffda 	bl	80044c8 <HAL_RCC_GetHCLKFreq>
 8004514:	4602      	mov	r2, r0
 8004516:	4b06      	ldr	r3, [pc, #24]	@ (8004530 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	0adb      	lsrs	r3, r3, #11
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	4904      	ldr	r1, [pc, #16]	@ (8004534 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004522:	5ccb      	ldrb	r3, [r1, r3]
 8004524:	f003 031f 	and.w	r3, r3, #31
 8004528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800452c:	4618      	mov	r0, r3
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40021000 	.word	0x40021000
 8004534:	08009344 	.word	0x08009344

08004538 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	220f      	movs	r2, #15
 8004546:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004548:	4b12      	ldr	r3, [pc, #72]	@ (8004594 <HAL_RCC_GetClockConfig+0x5c>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f003 0203 	and.w	r2, r3, #3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004554:	4b0f      	ldr	r3, [pc, #60]	@ (8004594 <HAL_RCC_GetClockConfig+0x5c>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004560:	4b0c      	ldr	r3, [pc, #48]	@ (8004594 <HAL_RCC_GetClockConfig+0x5c>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800456c:	4b09      	ldr	r3, [pc, #36]	@ (8004594 <HAL_RCC_GetClockConfig+0x5c>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	08db      	lsrs	r3, r3, #3
 8004572:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800457a:	4b07      	ldr	r3, [pc, #28]	@ (8004598 <HAL_RCC_GetClockConfig+0x60>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 020f 	and.w	r2, r3, #15
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	601a      	str	r2, [r3, #0]
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	40021000 	.word	0x40021000
 8004598:	40022000 	.word	0x40022000

0800459c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80045a4:	2300      	movs	r3, #0
 80045a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80045a8:	4b27      	ldr	r3, [pc, #156]	@ (8004648 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80045aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80045b4:	f7ff f8e4 	bl	8003780 <HAL_PWREx_GetVoltageRange>
 80045b8:	6178      	str	r0, [r7, #20]
 80045ba:	e014      	b.n	80045e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80045bc:	4b22      	ldr	r3, [pc, #136]	@ (8004648 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80045be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045c0:	4a21      	ldr	r2, [pc, #132]	@ (8004648 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80045c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80045c8:	4b1f      	ldr	r3, [pc, #124]	@ (8004648 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80045ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80045d4:	f7ff f8d4 	bl	8003780 <HAL_PWREx_GetVoltageRange>
 80045d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80045da:	4b1b      	ldr	r3, [pc, #108]	@ (8004648 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80045dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045de:	4a1a      	ldr	r2, [pc, #104]	@ (8004648 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80045e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045ec:	d10b      	bne.n	8004606 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b80      	cmp	r3, #128	@ 0x80
 80045f2:	d913      	bls.n	800461c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2ba0      	cmp	r3, #160	@ 0xa0
 80045f8:	d902      	bls.n	8004600 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045fa:	2302      	movs	r3, #2
 80045fc:	613b      	str	r3, [r7, #16]
 80045fe:	e00d      	b.n	800461c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004600:	2301      	movs	r3, #1
 8004602:	613b      	str	r3, [r7, #16]
 8004604:	e00a      	b.n	800461c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b7f      	cmp	r3, #127	@ 0x7f
 800460a:	d902      	bls.n	8004612 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800460c:	2302      	movs	r3, #2
 800460e:	613b      	str	r3, [r7, #16]
 8004610:	e004      	b.n	800461c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b70      	cmp	r3, #112	@ 0x70
 8004616:	d101      	bne.n	800461c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004618:	2301      	movs	r3, #1
 800461a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800461c:	4b0b      	ldr	r3, [pc, #44]	@ (800464c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f023 020f 	bic.w	r2, r3, #15
 8004624:	4909      	ldr	r1, [pc, #36]	@ (800464c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	4313      	orrs	r3, r2
 800462a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800462c:	4b07      	ldr	r3, [pc, #28]	@ (800464c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 030f 	and.w	r3, r3, #15
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	429a      	cmp	r2, r3
 8004638:	d001      	beq.n	800463e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e000      	b.n	8004640 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3718      	adds	r7, #24
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	40021000 	.word	0x40021000
 800464c:	40022000 	.word	0x40022000

08004650 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004650:	b480      	push	{r7}
 8004652:	b087      	sub	sp, #28
 8004654:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004656:	4b2d      	ldr	r3, [pc, #180]	@ (800470c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f003 0303 	and.w	r3, r3, #3
 800465e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2b03      	cmp	r3, #3
 8004664:	d00b      	beq.n	800467e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2b03      	cmp	r3, #3
 800466a:	d825      	bhi.n	80046b8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d008      	beq.n	8004684 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2b02      	cmp	r3, #2
 8004676:	d11f      	bne.n	80046b8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004678:	4b25      	ldr	r3, [pc, #148]	@ (8004710 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800467a:	613b      	str	r3, [r7, #16]
    break;
 800467c:	e01f      	b.n	80046be <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800467e:	4b25      	ldr	r3, [pc, #148]	@ (8004714 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004680:	613b      	str	r3, [r7, #16]
    break;
 8004682:	e01c      	b.n	80046be <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004684:	4b21      	ldr	r3, [pc, #132]	@ (800470c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0308 	and.w	r3, r3, #8
 800468c:	2b00      	cmp	r3, #0
 800468e:	d107      	bne.n	80046a0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004690:	4b1e      	ldr	r3, [pc, #120]	@ (800470c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004692:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004696:	0a1b      	lsrs	r3, r3, #8
 8004698:	f003 030f 	and.w	r3, r3, #15
 800469c:	617b      	str	r3, [r7, #20]
 800469e:	e005      	b.n	80046ac <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80046a0:	4b1a      	ldr	r3, [pc, #104]	@ (800470c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	091b      	lsrs	r3, r3, #4
 80046a6:	f003 030f 	and.w	r3, r3, #15
 80046aa:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80046ac:	4a1a      	ldr	r2, [pc, #104]	@ (8004718 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b4:	613b      	str	r3, [r7, #16]
    break;
 80046b6:	e002      	b.n	80046be <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80046b8:	2300      	movs	r3, #0
 80046ba:	613b      	str	r3, [r7, #16]
    break;
 80046bc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046be:	4b13      	ldr	r3, [pc, #76]	@ (800470c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	091b      	lsrs	r3, r3, #4
 80046c4:	f003 030f 	and.w	r3, r3, #15
 80046c8:	3301      	adds	r3, #1
 80046ca:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80046cc:	4b0f      	ldr	r3, [pc, #60]	@ (800470c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	0a1b      	lsrs	r3, r3, #8
 80046d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	fb03 f202 	mul.w	r2, r3, r2
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046e4:	4b09      	ldr	r3, [pc, #36]	@ (800470c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	0e5b      	lsrs	r3, r3, #25
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	3301      	adds	r3, #1
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80046fe:	683b      	ldr	r3, [r7, #0]
}
 8004700:	4618      	mov	r0, r3
 8004702:	371c      	adds	r7, #28
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	40021000 	.word	0x40021000
 8004710:	00f42400 	.word	0x00f42400
 8004714:	007a1200 	.word	0x007a1200
 8004718:	0800934c 	.word	0x0800934c

0800471c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004724:	2300      	movs	r3, #0
 8004726:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004728:	2300      	movs	r3, #0
 800472a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004734:	2b00      	cmp	r3, #0
 8004736:	d040      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800473c:	2b80      	cmp	r3, #128	@ 0x80
 800473e:	d02a      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004740:	2b80      	cmp	r3, #128	@ 0x80
 8004742:	d825      	bhi.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004744:	2b60      	cmp	r3, #96	@ 0x60
 8004746:	d026      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004748:	2b60      	cmp	r3, #96	@ 0x60
 800474a:	d821      	bhi.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800474c:	2b40      	cmp	r3, #64	@ 0x40
 800474e:	d006      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004750:	2b40      	cmp	r3, #64	@ 0x40
 8004752:	d81d      	bhi.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004754:	2b00      	cmp	r3, #0
 8004756:	d009      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004758:	2b20      	cmp	r3, #32
 800475a:	d010      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800475c:	e018      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800475e:	4b89      	ldr	r3, [pc, #548]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	4a88      	ldr	r2, [pc, #544]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004764:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004768:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800476a:	e015      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	3304      	adds	r3, #4
 8004770:	2100      	movs	r1, #0
 8004772:	4618      	mov	r0, r3
 8004774:	f000 fb02 	bl	8004d7c <RCCEx_PLLSAI1_Config>
 8004778:	4603      	mov	r3, r0
 800477a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800477c:	e00c      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	3320      	adds	r3, #32
 8004782:	2100      	movs	r1, #0
 8004784:	4618      	mov	r0, r3
 8004786:	f000 fbed 	bl	8004f64 <RCCEx_PLLSAI2_Config>
 800478a:	4603      	mov	r3, r0
 800478c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800478e:	e003      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	74fb      	strb	r3, [r7, #19]
      break;
 8004794:	e000      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004796:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004798:	7cfb      	ldrb	r3, [r7, #19]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10b      	bne.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800479e:	4b79      	ldr	r3, [pc, #484]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80047a4:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047ac:	4975      	ldr	r1, [pc, #468]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80047b4:	e001      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b6:	7cfb      	ldrb	r3, [r7, #19]
 80047b8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d047      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047ce:	d030      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80047d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047d4:	d82a      	bhi.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80047d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047da:	d02a      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80047dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047e0:	d824      	bhi.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80047e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047e6:	d008      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xde>
 80047e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047ec:	d81e      	bhi.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00a      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80047f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047f6:	d010      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80047f8:	e018      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80047fa:	4b62      	ldr	r3, [pc, #392]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	4a61      	ldr	r2, [pc, #388]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004800:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004804:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004806:	e015      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	3304      	adds	r3, #4
 800480c:	2100      	movs	r1, #0
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fab4 	bl	8004d7c <RCCEx_PLLSAI1_Config>
 8004814:	4603      	mov	r3, r0
 8004816:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004818:	e00c      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	3320      	adds	r3, #32
 800481e:	2100      	movs	r1, #0
 8004820:	4618      	mov	r0, r3
 8004822:	f000 fb9f 	bl	8004f64 <RCCEx_PLLSAI2_Config>
 8004826:	4603      	mov	r3, r0
 8004828:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800482a:	e003      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	74fb      	strb	r3, [r7, #19]
      break;
 8004830:	e000      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004832:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004834:	7cfb      	ldrb	r3, [r7, #19]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10b      	bne.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800483a:	4b52      	ldr	r3, [pc, #328]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800483c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004840:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004848:	494e      	ldr	r1, [pc, #312]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800484a:	4313      	orrs	r3, r2
 800484c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004850:	e001      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004852:	7cfb      	ldrb	r3, [r7, #19]
 8004854:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800485e:	2b00      	cmp	r3, #0
 8004860:	f000 809f 	beq.w	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004864:	2300      	movs	r3, #0
 8004866:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004868:	4b46      	ldr	r3, [pc, #280]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800486a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800486c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d101      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004874:	2301      	movs	r3, #1
 8004876:	e000      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004878:	2300      	movs	r3, #0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00d      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800487e:	4b41      	ldr	r3, [pc, #260]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004882:	4a40      	ldr	r2, [pc, #256]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004888:	6593      	str	r3, [r2, #88]	@ 0x58
 800488a:	4b3e      	ldr	r3, [pc, #248]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800488c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800488e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004892:	60bb      	str	r3, [r7, #8]
 8004894:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004896:	2301      	movs	r3, #1
 8004898:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800489a:	4b3b      	ldr	r3, [pc, #236]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a3a      	ldr	r2, [pc, #232]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80048a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048a6:	f7fd fdcf 	bl	8002448 <HAL_GetTick>
 80048aa:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048ac:	e009      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ae:	f7fd fdcb 	bl	8002448 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d902      	bls.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	74fb      	strb	r3, [r7, #19]
        break;
 80048c0:	e005      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048c2:	4b31      	ldr	r3, [pc, #196]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d0ef      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80048ce:	7cfb      	ldrb	r3, [r7, #19]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d15b      	bne.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048d4:	4b2b      	ldr	r3, [pc, #172]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048de:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d01f      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d019      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80048f2:	4b24      	ldr	r3, [pc, #144]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048fc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048fe:	4b21      	ldr	r3, [pc, #132]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004900:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004904:	4a1f      	ldr	r2, [pc, #124]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004906:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800490a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800490e:	4b1d      	ldr	r3, [pc, #116]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004910:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004914:	4a1b      	ldr	r2, [pc, #108]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004916:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800491a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800491e:	4a19      	ldr	r2, [pc, #100]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f003 0301 	and.w	r3, r3, #1
 800492c:	2b00      	cmp	r3, #0
 800492e:	d016      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004930:	f7fd fd8a 	bl	8002448 <HAL_GetTick>
 8004934:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004936:	e00b      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004938:	f7fd fd86 	bl	8002448 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004946:	4293      	cmp	r3, r2
 8004948:	d902      	bls.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	74fb      	strb	r3, [r7, #19]
            break;
 800494e:	e006      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004950:	4b0c      	ldr	r3, [pc, #48]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0ec      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800495e:	7cfb      	ldrb	r3, [r7, #19]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10c      	bne.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004964:	4b07      	ldr	r3, [pc, #28]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800496a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004974:	4903      	ldr	r1, [pc, #12]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004976:	4313      	orrs	r3, r2
 8004978:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800497c:	e008      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800497e:	7cfb      	ldrb	r3, [r7, #19]
 8004980:	74bb      	strb	r3, [r7, #18]
 8004982:	e005      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004984:	40021000 	.word	0x40021000
 8004988:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800498c:	7cfb      	ldrb	r3, [r7, #19]
 800498e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004990:	7c7b      	ldrb	r3, [r7, #17]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d105      	bne.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004996:	4ba0      	ldr	r3, [pc, #640]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800499a:	4a9f      	ldr	r2, [pc, #636]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800499c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049a0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00a      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049ae:	4b9a      	ldr	r3, [pc, #616]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b4:	f023 0203 	bic.w	r2, r3, #3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049bc:	4996      	ldr	r1, [pc, #600]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0302 	and.w	r3, r3, #2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00a      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049d0:	4b91      	ldr	r3, [pc, #580]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049d6:	f023 020c 	bic.w	r2, r3, #12
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049de:	498e      	ldr	r1, [pc, #568]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0304 	and.w	r3, r3, #4
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00a      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049f2:	4b89      	ldr	r3, [pc, #548]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049f8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a00:	4985      	ldr	r1, [pc, #532]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0308 	and.w	r3, r3, #8
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00a      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a14:	4b80      	ldr	r3, [pc, #512]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a1a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a22:	497d      	ldr	r1, [pc, #500]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0310 	and.w	r3, r3, #16
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00a      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a36:	4b78      	ldr	r3, [pc, #480]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a3c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a44:	4974      	ldr	r1, [pc, #464]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0320 	and.w	r3, r3, #32
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00a      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a58:	4b6f      	ldr	r3, [pc, #444]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a5e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a66:	496c      	ldr	r1, [pc, #432]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00a      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a7a:	4b67      	ldr	r3, [pc, #412]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a80:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a88:	4963      	ldr	r1, [pc, #396]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00a      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a9c:	4b5e      	ldr	r3, [pc, #376]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aa2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004aaa:	495b      	ldr	r1, [pc, #364]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00a      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004abe:	4b56      	ldr	r3, [pc, #344]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ac4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004acc:	4952      	ldr	r1, [pc, #328]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00a      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ae0:	4b4d      	ldr	r3, [pc, #308]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ae6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aee:	494a      	ldr	r1, [pc, #296]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00a      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b02:	4b45      	ldr	r3, [pc, #276]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b08:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b10:	4941      	ldr	r1, [pc, #260]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00a      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b24:	4b3c      	ldr	r3, [pc, #240]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b2a:	f023 0203 	bic.w	r2, r3, #3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b32:	4939      	ldr	r1, [pc, #228]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d028      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b46:	4b34      	ldr	r3, [pc, #208]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b4c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b54:	4930      	ldr	r1, [pc, #192]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b64:	d106      	bne.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b66:	4b2c      	ldr	r3, [pc, #176]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	4a2b      	ldr	r2, [pc, #172]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b6c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b70:	60d3      	str	r3, [r2, #12]
 8004b72:	e011      	b.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b7c:	d10c      	bne.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	3304      	adds	r3, #4
 8004b82:	2101      	movs	r1, #1
 8004b84:	4618      	mov	r0, r3
 8004b86:	f000 f8f9 	bl	8004d7c <RCCEx_PLLSAI1_Config>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004b8e:	7cfb      	ldrb	r3, [r7, #19]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d001      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004b94:	7cfb      	ldrb	r3, [r7, #19]
 8004b96:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d04d      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ba8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bac:	d108      	bne.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004bae:	4b1a      	ldr	r3, [pc, #104]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004bb4:	4a18      	ldr	r2, [pc, #96]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bb6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004bba:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004bbe:	e012      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004bc0:	4b15      	ldr	r3, [pc, #84]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004bc6:	4a14      	ldr	r2, [pc, #80]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bc8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004bcc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004bd0:	4b11      	ldr	r3, [pc, #68]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bd6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bde:	490e      	ldr	r1, [pc, #56]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bee:	d106      	bne.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bf0:	4b09      	ldr	r3, [pc, #36]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	4a08      	ldr	r2, [pc, #32]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bf6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bfa:	60d3      	str	r3, [r2, #12]
 8004bfc:	e020      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c06:	d109      	bne.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c08:	4b03      	ldr	r3, [pc, #12]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	4a02      	ldr	r2, [pc, #8]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c12:	60d3      	str	r3, [r2, #12]
 8004c14:	e014      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004c16:	bf00      	nop
 8004c18:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c24:	d10c      	bne.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	3304      	adds	r3, #4
 8004c2a:	2101      	movs	r1, #1
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f000 f8a5 	bl	8004d7c <RCCEx_PLLSAI1_Config>
 8004c32:	4603      	mov	r3, r0
 8004c34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c36:	7cfb      	ldrb	r3, [r7, #19]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d001      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004c3c:	7cfb      	ldrb	r3, [r7, #19]
 8004c3e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d028      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c4c:	4b4a      	ldr	r3, [pc, #296]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c52:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c5a:	4947      	ldr	r1, [pc, #284]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c6a:	d106      	bne.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c6c:	4b42      	ldr	r3, [pc, #264]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	4a41      	ldr	r2, [pc, #260]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c76:	60d3      	str	r3, [r2, #12]
 8004c78:	e011      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c7e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c82:	d10c      	bne.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	3304      	adds	r3, #4
 8004c88:	2101      	movs	r1, #1
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 f876 	bl	8004d7c <RCCEx_PLLSAI1_Config>
 8004c90:	4603      	mov	r3, r0
 8004c92:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c94:	7cfb      	ldrb	r3, [r7, #19]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004c9a:	7cfb      	ldrb	r3, [r7, #19]
 8004c9c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d01e      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004caa:	4b33      	ldr	r3, [pc, #204]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cb0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cba:	492f      	ldr	r1, [pc, #188]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ccc:	d10c      	bne.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	3304      	adds	r3, #4
 8004cd2:	2102      	movs	r1, #2
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f000 f851 	bl	8004d7c <RCCEx_PLLSAI1_Config>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cde:	7cfb      	ldrb	r3, [r7, #19]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004ce4:	7cfb      	ldrb	r3, [r7, #19]
 8004ce6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00b      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004cf4:	4b20      	ldr	r3, [pc, #128]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cfa:	f023 0204 	bic.w	r2, r3, #4
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d04:	491c      	ldr	r1, [pc, #112]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00b      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004d18:	4b17      	ldr	r3, [pc, #92]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d1e:	f023 0218 	bic.w	r2, r3, #24
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d28:	4913      	ldr	r1, [pc, #76]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d017      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d42:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d4c:	490a      	ldr	r1, [pc, #40]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d5e:	d105      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d60:	4b05      	ldr	r3, [pc, #20]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	4a04      	ldr	r2, [pc, #16]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d6a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004d6c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3718      	adds	r7, #24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	40021000 	.word	0x40021000

08004d7c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d86:	2300      	movs	r3, #0
 8004d88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d8a:	4b72      	ldr	r3, [pc, #456]	@ (8004f54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	f003 0303 	and.w	r3, r3, #3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00e      	beq.n	8004db4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004d96:	4b6f      	ldr	r3, [pc, #444]	@ (8004f54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	f003 0203 	and.w	r2, r3, #3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d103      	bne.n	8004dae <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
       ||
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d142      	bne.n	8004e34 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	73fb      	strb	r3, [r7, #15]
 8004db2:	e03f      	b.n	8004e34 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2b03      	cmp	r3, #3
 8004dba:	d018      	beq.n	8004dee <RCCEx_PLLSAI1_Config+0x72>
 8004dbc:	2b03      	cmp	r3, #3
 8004dbe:	d825      	bhi.n	8004e0c <RCCEx_PLLSAI1_Config+0x90>
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d002      	beq.n	8004dca <RCCEx_PLLSAI1_Config+0x4e>
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d009      	beq.n	8004ddc <RCCEx_PLLSAI1_Config+0x60>
 8004dc8:	e020      	b.n	8004e0c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004dca:	4b62      	ldr	r3, [pc, #392]	@ (8004f54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d11d      	bne.n	8004e12 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dda:	e01a      	b.n	8004e12 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ddc:	4b5d      	ldr	r3, [pc, #372]	@ (8004f54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d116      	bne.n	8004e16 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dec:	e013      	b.n	8004e16 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004dee:	4b59      	ldr	r3, [pc, #356]	@ (8004f54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10f      	bne.n	8004e1a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004dfa:	4b56      	ldr	r3, [pc, #344]	@ (8004f54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d109      	bne.n	8004e1a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e0a:	e006      	b.n	8004e1a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e10:	e004      	b.n	8004e1c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004e12:	bf00      	nop
 8004e14:	e002      	b.n	8004e1c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004e16:	bf00      	nop
 8004e18:	e000      	b.n	8004e1c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004e1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e1c:	7bfb      	ldrb	r3, [r7, #15]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d108      	bne.n	8004e34 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004e22:	4b4c      	ldr	r3, [pc, #304]	@ (8004f54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	f023 0203 	bic.w	r2, r3, #3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4949      	ldr	r1, [pc, #292]	@ (8004f54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004e34:	7bfb      	ldrb	r3, [r7, #15]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f040 8086 	bne.w	8004f48 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004e3c:	4b45      	ldr	r3, [pc, #276]	@ (8004f54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a44      	ldr	r2, [pc, #272]	@ (8004f54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e42:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e48:	f7fd fafe 	bl	8002448 <HAL_GetTick>
 8004e4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e4e:	e009      	b.n	8004e64 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e50:	f7fd fafa 	bl	8002448 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d902      	bls.n	8004e64 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	73fb      	strb	r3, [r7, #15]
        break;
 8004e62:	e005      	b.n	8004e70 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e64:	4b3b      	ldr	r3, [pc, #236]	@ (8004f54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1ef      	bne.n	8004e50 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004e70:	7bfb      	ldrb	r3, [r7, #15]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d168      	bne.n	8004f48 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d113      	bne.n	8004ea4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e7c:	4b35      	ldr	r3, [pc, #212]	@ (8004f54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e7e:	691a      	ldr	r2, [r3, #16]
 8004e80:	4b35      	ldr	r3, [pc, #212]	@ (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e82:	4013      	ands	r3, r2
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6892      	ldr	r2, [r2, #8]
 8004e88:	0211      	lsls	r1, r2, #8
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	68d2      	ldr	r2, [r2, #12]
 8004e8e:	06d2      	lsls	r2, r2, #27
 8004e90:	4311      	orrs	r1, r2
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	6852      	ldr	r2, [r2, #4]
 8004e96:	3a01      	subs	r2, #1
 8004e98:	0112      	lsls	r2, r2, #4
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	492d      	ldr	r1, [pc, #180]	@ (8004f54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	610b      	str	r3, [r1, #16]
 8004ea2:	e02d      	b.n	8004f00 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d115      	bne.n	8004ed6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004eaa:	4b2a      	ldr	r3, [pc, #168]	@ (8004f54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004eac:	691a      	ldr	r2, [r3, #16]
 8004eae:	4b2b      	ldr	r3, [pc, #172]	@ (8004f5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6892      	ldr	r2, [r2, #8]
 8004eb6:	0211      	lsls	r1, r2, #8
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	6912      	ldr	r2, [r2, #16]
 8004ebc:	0852      	lsrs	r2, r2, #1
 8004ebe:	3a01      	subs	r2, #1
 8004ec0:	0552      	lsls	r2, r2, #21
 8004ec2:	4311      	orrs	r1, r2
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	6852      	ldr	r2, [r2, #4]
 8004ec8:	3a01      	subs	r2, #1
 8004eca:	0112      	lsls	r2, r2, #4
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	4921      	ldr	r1, [pc, #132]	@ (8004f54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	610b      	str	r3, [r1, #16]
 8004ed4:	e014      	b.n	8004f00 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ed6:	4b1f      	ldr	r3, [pc, #124]	@ (8004f54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ed8:	691a      	ldr	r2, [r3, #16]
 8004eda:	4b21      	ldr	r3, [pc, #132]	@ (8004f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004edc:	4013      	ands	r3, r2
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	6892      	ldr	r2, [r2, #8]
 8004ee2:	0211      	lsls	r1, r2, #8
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	6952      	ldr	r2, [r2, #20]
 8004ee8:	0852      	lsrs	r2, r2, #1
 8004eea:	3a01      	subs	r2, #1
 8004eec:	0652      	lsls	r2, r2, #25
 8004eee:	4311      	orrs	r1, r2
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6852      	ldr	r2, [r2, #4]
 8004ef4:	3a01      	subs	r2, #1
 8004ef6:	0112      	lsls	r2, r2, #4
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	4916      	ldr	r1, [pc, #88]	@ (8004f54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f00:	4b14      	ldr	r3, [pc, #80]	@ (8004f54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a13      	ldr	r2, [pc, #76]	@ (8004f54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f06:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f0c:	f7fd fa9c 	bl	8002448 <HAL_GetTick>
 8004f10:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f12:	e009      	b.n	8004f28 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f14:	f7fd fa98 	bl	8002448 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d902      	bls.n	8004f28 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	73fb      	strb	r3, [r7, #15]
          break;
 8004f26:	e005      	b.n	8004f34 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f28:	4b0a      	ldr	r3, [pc, #40]	@ (8004f54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d0ef      	beq.n	8004f14 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004f34:	7bfb      	ldrb	r3, [r7, #15]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d106      	bne.n	8004f48 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f3a:	4b06      	ldr	r3, [pc, #24]	@ (8004f54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f3c:	691a      	ldr	r2, [r3, #16]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	4904      	ldr	r1, [pc, #16]	@ (8004f54 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	40021000 	.word	0x40021000
 8004f58:	07ff800f 	.word	0x07ff800f
 8004f5c:	ff9f800f 	.word	0xff9f800f
 8004f60:	f9ff800f 	.word	0xf9ff800f

08004f64 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f72:	4b72      	ldr	r3, [pc, #456]	@ (800513c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	f003 0303 	and.w	r3, r3, #3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00e      	beq.n	8004f9c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004f7e:	4b6f      	ldr	r3, [pc, #444]	@ (800513c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	f003 0203 	and.w	r2, r3, #3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d103      	bne.n	8004f96 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
       ||
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d142      	bne.n	800501c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	73fb      	strb	r3, [r7, #15]
 8004f9a:	e03f      	b.n	800501c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2b03      	cmp	r3, #3
 8004fa2:	d018      	beq.n	8004fd6 <RCCEx_PLLSAI2_Config+0x72>
 8004fa4:	2b03      	cmp	r3, #3
 8004fa6:	d825      	bhi.n	8004ff4 <RCCEx_PLLSAI2_Config+0x90>
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d002      	beq.n	8004fb2 <RCCEx_PLLSAI2_Config+0x4e>
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d009      	beq.n	8004fc4 <RCCEx_PLLSAI2_Config+0x60>
 8004fb0:	e020      	b.n	8004ff4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004fb2:	4b62      	ldr	r3, [pc, #392]	@ (800513c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d11d      	bne.n	8004ffa <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fc2:	e01a      	b.n	8004ffa <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004fc4:	4b5d      	ldr	r3, [pc, #372]	@ (800513c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d116      	bne.n	8004ffe <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fd4:	e013      	b.n	8004ffe <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004fd6:	4b59      	ldr	r3, [pc, #356]	@ (800513c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10f      	bne.n	8005002 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004fe2:	4b56      	ldr	r3, [pc, #344]	@ (800513c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d109      	bne.n	8005002 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ff2:	e006      	b.n	8005002 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ff8:	e004      	b.n	8005004 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004ffa:	bf00      	nop
 8004ffc:	e002      	b.n	8005004 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004ffe:	bf00      	nop
 8005000:	e000      	b.n	8005004 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005002:	bf00      	nop
    }

    if(status == HAL_OK)
 8005004:	7bfb      	ldrb	r3, [r7, #15]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d108      	bne.n	800501c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800500a:	4b4c      	ldr	r3, [pc, #304]	@ (800513c <RCCEx_PLLSAI2_Config+0x1d8>)
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	f023 0203 	bic.w	r2, r3, #3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4949      	ldr	r1, [pc, #292]	@ (800513c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005018:	4313      	orrs	r3, r2
 800501a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800501c:	7bfb      	ldrb	r3, [r7, #15]
 800501e:	2b00      	cmp	r3, #0
 8005020:	f040 8086 	bne.w	8005130 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005024:	4b45      	ldr	r3, [pc, #276]	@ (800513c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a44      	ldr	r2, [pc, #272]	@ (800513c <RCCEx_PLLSAI2_Config+0x1d8>)
 800502a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800502e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005030:	f7fd fa0a 	bl	8002448 <HAL_GetTick>
 8005034:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005036:	e009      	b.n	800504c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005038:	f7fd fa06 	bl	8002448 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b02      	cmp	r3, #2
 8005044:	d902      	bls.n	800504c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	73fb      	strb	r3, [r7, #15]
        break;
 800504a:	e005      	b.n	8005058 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800504c:	4b3b      	ldr	r3, [pc, #236]	@ (800513c <RCCEx_PLLSAI2_Config+0x1d8>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1ef      	bne.n	8005038 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005058:	7bfb      	ldrb	r3, [r7, #15]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d168      	bne.n	8005130 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d113      	bne.n	800508c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005064:	4b35      	ldr	r3, [pc, #212]	@ (800513c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005066:	695a      	ldr	r2, [r3, #20]
 8005068:	4b35      	ldr	r3, [pc, #212]	@ (8005140 <RCCEx_PLLSAI2_Config+0x1dc>)
 800506a:	4013      	ands	r3, r2
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6892      	ldr	r2, [r2, #8]
 8005070:	0211      	lsls	r1, r2, #8
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	68d2      	ldr	r2, [r2, #12]
 8005076:	06d2      	lsls	r2, r2, #27
 8005078:	4311      	orrs	r1, r2
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	6852      	ldr	r2, [r2, #4]
 800507e:	3a01      	subs	r2, #1
 8005080:	0112      	lsls	r2, r2, #4
 8005082:	430a      	orrs	r2, r1
 8005084:	492d      	ldr	r1, [pc, #180]	@ (800513c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005086:	4313      	orrs	r3, r2
 8005088:	614b      	str	r3, [r1, #20]
 800508a:	e02d      	b.n	80050e8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d115      	bne.n	80050be <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005092:	4b2a      	ldr	r3, [pc, #168]	@ (800513c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005094:	695a      	ldr	r2, [r3, #20]
 8005096:	4b2b      	ldr	r3, [pc, #172]	@ (8005144 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005098:	4013      	ands	r3, r2
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	6892      	ldr	r2, [r2, #8]
 800509e:	0211      	lsls	r1, r2, #8
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	6912      	ldr	r2, [r2, #16]
 80050a4:	0852      	lsrs	r2, r2, #1
 80050a6:	3a01      	subs	r2, #1
 80050a8:	0552      	lsls	r2, r2, #21
 80050aa:	4311      	orrs	r1, r2
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	6852      	ldr	r2, [r2, #4]
 80050b0:	3a01      	subs	r2, #1
 80050b2:	0112      	lsls	r2, r2, #4
 80050b4:	430a      	orrs	r2, r1
 80050b6:	4921      	ldr	r1, [pc, #132]	@ (800513c <RCCEx_PLLSAI2_Config+0x1d8>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	614b      	str	r3, [r1, #20]
 80050bc:	e014      	b.n	80050e8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050be:	4b1f      	ldr	r3, [pc, #124]	@ (800513c <RCCEx_PLLSAI2_Config+0x1d8>)
 80050c0:	695a      	ldr	r2, [r3, #20]
 80050c2:	4b21      	ldr	r3, [pc, #132]	@ (8005148 <RCCEx_PLLSAI2_Config+0x1e4>)
 80050c4:	4013      	ands	r3, r2
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	6892      	ldr	r2, [r2, #8]
 80050ca:	0211      	lsls	r1, r2, #8
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	6952      	ldr	r2, [r2, #20]
 80050d0:	0852      	lsrs	r2, r2, #1
 80050d2:	3a01      	subs	r2, #1
 80050d4:	0652      	lsls	r2, r2, #25
 80050d6:	4311      	orrs	r1, r2
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	6852      	ldr	r2, [r2, #4]
 80050dc:	3a01      	subs	r2, #1
 80050de:	0112      	lsls	r2, r2, #4
 80050e0:	430a      	orrs	r2, r1
 80050e2:	4916      	ldr	r1, [pc, #88]	@ (800513c <RCCEx_PLLSAI2_Config+0x1d8>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80050e8:	4b14      	ldr	r3, [pc, #80]	@ (800513c <RCCEx_PLLSAI2_Config+0x1d8>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a13      	ldr	r2, [pc, #76]	@ (800513c <RCCEx_PLLSAI2_Config+0x1d8>)
 80050ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050f4:	f7fd f9a8 	bl	8002448 <HAL_GetTick>
 80050f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80050fa:	e009      	b.n	8005110 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80050fc:	f7fd f9a4 	bl	8002448 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b02      	cmp	r3, #2
 8005108:	d902      	bls.n	8005110 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	73fb      	strb	r3, [r7, #15]
          break;
 800510e:	e005      	b.n	800511c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005110:	4b0a      	ldr	r3, [pc, #40]	@ (800513c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d0ef      	beq.n	80050fc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800511c:	7bfb      	ldrb	r3, [r7, #15]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d106      	bne.n	8005130 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005122:	4b06      	ldr	r3, [pc, #24]	@ (800513c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005124:	695a      	ldr	r2, [r3, #20]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	4904      	ldr	r1, [pc, #16]	@ (800513c <RCCEx_PLLSAI2_Config+0x1d8>)
 800512c:	4313      	orrs	r3, r2
 800512e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005130:	7bfb      	ldrb	r3, [r7, #15]
}
 8005132:	4618      	mov	r0, r3
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	40021000 	.word	0x40021000
 8005140:	07ff800f 	.word	0x07ff800f
 8005144:	ff9f800f 	.word	0xff9f800f
 8005148:	f9ff800f 	.word	0xf9ff800f

0800514c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e049      	b.n	80051f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f841 	bl	80051fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	3304      	adds	r3, #4
 8005188:	4619      	mov	r1, r3
 800518a:	4610      	mov	r0, r2
 800518c:	f000 f9e0 	bl	8005550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b083      	sub	sp, #12
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005202:	bf00      	nop
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
	...

08005210 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b01      	cmp	r3, #1
 8005222:	d001      	beq.n	8005228 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e04f      	b.n	80052c8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2202      	movs	r2, #2
 800522c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68da      	ldr	r2, [r3, #12]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f042 0201 	orr.w	r2, r2, #1
 800523e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a23      	ldr	r2, [pc, #140]	@ (80052d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d01d      	beq.n	8005286 <HAL_TIM_Base_Start_IT+0x76>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005252:	d018      	beq.n	8005286 <HAL_TIM_Base_Start_IT+0x76>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a1f      	ldr	r2, [pc, #124]	@ (80052d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d013      	beq.n	8005286 <HAL_TIM_Base_Start_IT+0x76>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a1e      	ldr	r2, [pc, #120]	@ (80052dc <HAL_TIM_Base_Start_IT+0xcc>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d00e      	beq.n	8005286 <HAL_TIM_Base_Start_IT+0x76>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a1c      	ldr	r2, [pc, #112]	@ (80052e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d009      	beq.n	8005286 <HAL_TIM_Base_Start_IT+0x76>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a1b      	ldr	r2, [pc, #108]	@ (80052e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d004      	beq.n	8005286 <HAL_TIM_Base_Start_IT+0x76>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a19      	ldr	r2, [pc, #100]	@ (80052e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d115      	bne.n	80052b2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	4b17      	ldr	r3, [pc, #92]	@ (80052ec <HAL_TIM_Base_Start_IT+0xdc>)
 800528e:	4013      	ands	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2b06      	cmp	r3, #6
 8005296:	d015      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0xb4>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800529e:	d011      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f042 0201 	orr.w	r2, r2, #1
 80052ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b0:	e008      	b.n	80052c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f042 0201 	orr.w	r2, r2, #1
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	e000      	b.n	80052c6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	40012c00 	.word	0x40012c00
 80052d8:	40000400 	.word	0x40000400
 80052dc:	40000800 	.word	0x40000800
 80052e0:	40000c00 	.word	0x40000c00
 80052e4:	40013400 	.word	0x40013400
 80052e8:	40014000 	.word	0x40014000
 80052ec:	00010007 	.word	0x00010007

080052f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d020      	beq.n	8005354 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d01b      	beq.n	8005354 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f06f 0202 	mvn.w	r2, #2
 8005324:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	f003 0303 	and.w	r3, r3, #3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f8e9 	bl	8005512 <HAL_TIM_IC_CaptureCallback>
 8005340:	e005      	b.n	800534e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f8db 	bl	80054fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 f8ec 	bl	8005526 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	f003 0304 	and.w	r3, r3, #4
 800535a:	2b00      	cmp	r3, #0
 800535c:	d020      	beq.n	80053a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f003 0304 	and.w	r3, r3, #4
 8005364:	2b00      	cmp	r3, #0
 8005366:	d01b      	beq.n	80053a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f06f 0204 	mvn.w	r2, #4
 8005370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2202      	movs	r2, #2
 8005376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005382:	2b00      	cmp	r3, #0
 8005384:	d003      	beq.n	800538e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f8c3 	bl	8005512 <HAL_TIM_IC_CaptureCallback>
 800538c:	e005      	b.n	800539a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f8b5 	bl	80054fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 f8c6 	bl	8005526 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	f003 0308 	and.w	r3, r3, #8
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d020      	beq.n	80053ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f003 0308 	and.w	r3, r3, #8
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d01b      	beq.n	80053ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f06f 0208 	mvn.w	r2, #8
 80053bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2204      	movs	r2, #4
 80053c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	f003 0303 	and.w	r3, r3, #3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f89d 	bl	8005512 <HAL_TIM_IC_CaptureCallback>
 80053d8:	e005      	b.n	80053e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f88f 	bl	80054fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f8a0 	bl	8005526 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	f003 0310 	and.w	r3, r3, #16
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d020      	beq.n	8005438 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f003 0310 	and.w	r3, r3, #16
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d01b      	beq.n	8005438 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f06f 0210 	mvn.w	r2, #16
 8005408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2208      	movs	r2, #8
 800540e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f877 	bl	8005512 <HAL_TIM_IC_CaptureCallback>
 8005424:	e005      	b.n	8005432 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f869 	bl	80054fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f87a 	bl	8005526 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00c      	beq.n	800545c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f003 0301 	and.w	r3, r3, #1
 8005448:	2b00      	cmp	r3, #0
 800544a:	d007      	beq.n	800545c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f06f 0201 	mvn.w	r2, #1
 8005454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f7fc f82a 	bl	80014b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005462:	2b00      	cmp	r3, #0
 8005464:	d104      	bne.n	8005470 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00c      	beq.n	800548a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005476:	2b00      	cmp	r3, #0
 8005478:	d007      	beq.n	800548a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005482:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 f913 	bl	80056b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00c      	beq.n	80054ae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800549a:	2b00      	cmp	r3, #0
 800549c:	d007      	beq.n	80054ae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80054a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 f90b 	bl	80056c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00c      	beq.n	80054d2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d007      	beq.n	80054d2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80054ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 f834 	bl	800553a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	f003 0320 	and.w	r3, r3, #32
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00c      	beq.n	80054f6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f003 0320 	and.w	r3, r3, #32
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d007      	beq.n	80054f6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f06f 0220 	mvn.w	r2, #32
 80054ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 f8d3 	bl	800569c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054f6:	bf00      	nop
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054fe:	b480      	push	{r7}
 8005500:	b083      	sub	sp, #12
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005506:	bf00      	nop
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005512:	b480      	push	{r7}
 8005514:	b083      	sub	sp, #12
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800551a:	bf00      	nop
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005526:	b480      	push	{r7}
 8005528:	b083      	sub	sp, #12
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800552e:	bf00      	nop
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800553a:	b480      	push	{r7}
 800553c:	b083      	sub	sp, #12
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005542:	bf00      	nop
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
	...

08005550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a46      	ldr	r2, [pc, #280]	@ (800567c <TIM_Base_SetConfig+0x12c>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d013      	beq.n	8005590 <TIM_Base_SetConfig+0x40>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800556e:	d00f      	beq.n	8005590 <TIM_Base_SetConfig+0x40>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a43      	ldr	r2, [pc, #268]	@ (8005680 <TIM_Base_SetConfig+0x130>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d00b      	beq.n	8005590 <TIM_Base_SetConfig+0x40>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a42      	ldr	r2, [pc, #264]	@ (8005684 <TIM_Base_SetConfig+0x134>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d007      	beq.n	8005590 <TIM_Base_SetConfig+0x40>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a41      	ldr	r2, [pc, #260]	@ (8005688 <TIM_Base_SetConfig+0x138>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d003      	beq.n	8005590 <TIM_Base_SetConfig+0x40>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a40      	ldr	r2, [pc, #256]	@ (800568c <TIM_Base_SetConfig+0x13c>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d108      	bne.n	80055a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005596:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	4313      	orrs	r3, r2
 80055a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a35      	ldr	r2, [pc, #212]	@ (800567c <TIM_Base_SetConfig+0x12c>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d01f      	beq.n	80055ea <TIM_Base_SetConfig+0x9a>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055b0:	d01b      	beq.n	80055ea <TIM_Base_SetConfig+0x9a>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a32      	ldr	r2, [pc, #200]	@ (8005680 <TIM_Base_SetConfig+0x130>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d017      	beq.n	80055ea <TIM_Base_SetConfig+0x9a>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a31      	ldr	r2, [pc, #196]	@ (8005684 <TIM_Base_SetConfig+0x134>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d013      	beq.n	80055ea <TIM_Base_SetConfig+0x9a>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a30      	ldr	r2, [pc, #192]	@ (8005688 <TIM_Base_SetConfig+0x138>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d00f      	beq.n	80055ea <TIM_Base_SetConfig+0x9a>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a2f      	ldr	r2, [pc, #188]	@ (800568c <TIM_Base_SetConfig+0x13c>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d00b      	beq.n	80055ea <TIM_Base_SetConfig+0x9a>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a2e      	ldr	r2, [pc, #184]	@ (8005690 <TIM_Base_SetConfig+0x140>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d007      	beq.n	80055ea <TIM_Base_SetConfig+0x9a>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a2d      	ldr	r2, [pc, #180]	@ (8005694 <TIM_Base_SetConfig+0x144>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d003      	beq.n	80055ea <TIM_Base_SetConfig+0x9a>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a2c      	ldr	r2, [pc, #176]	@ (8005698 <TIM_Base_SetConfig+0x148>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d108      	bne.n	80055fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	4313      	orrs	r3, r2
 8005608:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	689a      	ldr	r2, [r3, #8]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a16      	ldr	r2, [pc, #88]	@ (800567c <TIM_Base_SetConfig+0x12c>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d00f      	beq.n	8005648 <TIM_Base_SetConfig+0xf8>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a18      	ldr	r2, [pc, #96]	@ (800568c <TIM_Base_SetConfig+0x13c>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d00b      	beq.n	8005648 <TIM_Base_SetConfig+0xf8>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a17      	ldr	r2, [pc, #92]	@ (8005690 <TIM_Base_SetConfig+0x140>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d007      	beq.n	8005648 <TIM_Base_SetConfig+0xf8>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a16      	ldr	r2, [pc, #88]	@ (8005694 <TIM_Base_SetConfig+0x144>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d003      	beq.n	8005648 <TIM_Base_SetConfig+0xf8>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a15      	ldr	r2, [pc, #84]	@ (8005698 <TIM_Base_SetConfig+0x148>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d103      	bne.n	8005650 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	691a      	ldr	r2, [r3, #16]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	2b01      	cmp	r3, #1
 8005660:	d105      	bne.n	800566e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	f023 0201 	bic.w	r2, r3, #1
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	611a      	str	r2, [r3, #16]
  }
}
 800566e:	bf00      	nop
 8005670:	3714      	adds	r7, #20
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	40012c00 	.word	0x40012c00
 8005680:	40000400 	.word	0x40000400
 8005684:	40000800 	.word	0x40000800
 8005688:	40000c00 	.word	0x40000c00
 800568c:	40013400 	.word	0x40013400
 8005690:	40014000 	.word	0x40014000
 8005694:	40014400 	.word	0x40014400
 8005698:	40014800 	.word	0x40014800

0800569c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e042      	b.n	8005770 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d106      	bne.n	8005702 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f7fc f99d 	bl	8001a3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2224      	movs	r2, #36	@ 0x24
 8005706:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f022 0201 	bic.w	r2, r2, #1
 8005718:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800571e:	2b00      	cmp	r3, #0
 8005720:	d002      	beq.n	8005728 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 fbb2 	bl	8005e8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f8b3 	bl	8005894 <UART_SetConfig>
 800572e:	4603      	mov	r3, r0
 8005730:	2b01      	cmp	r3, #1
 8005732:	d101      	bne.n	8005738 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e01b      	b.n	8005770 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005746:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689a      	ldr	r2, [r3, #8]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005756:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f042 0201 	orr.w	r2, r2, #1
 8005766:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 fc31 	bl	8005fd0 <UART_CheckIdleState>
 800576e:	4603      	mov	r3, r0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3708      	adds	r7, #8
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b08a      	sub	sp, #40	@ 0x28
 800577c:	af02      	add	r7, sp, #8
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	603b      	str	r3, [r7, #0]
 8005784:	4613      	mov	r3, r2
 8005786:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800578e:	2b20      	cmp	r3, #32
 8005790:	d17b      	bne.n	800588a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d002      	beq.n	800579e <HAL_UART_Transmit+0x26>
 8005798:	88fb      	ldrh	r3, [r7, #6]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d101      	bne.n	80057a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e074      	b.n	800588c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2221      	movs	r2, #33	@ 0x21
 80057ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057b2:	f7fc fe49 	bl	8002448 <HAL_GetTick>
 80057b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	88fa      	ldrh	r2, [r7, #6]
 80057bc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	88fa      	ldrh	r2, [r7, #6]
 80057c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057d0:	d108      	bne.n	80057e4 <HAL_UART_Transmit+0x6c>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d104      	bne.n	80057e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80057da:	2300      	movs	r3, #0
 80057dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	61bb      	str	r3, [r7, #24]
 80057e2:	e003      	b.n	80057ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057e8:	2300      	movs	r3, #0
 80057ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057ec:	e030      	b.n	8005850 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	2200      	movs	r2, #0
 80057f6:	2180      	movs	r1, #128	@ 0x80
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	f000 fc93 	bl	8006124 <UART_WaitOnFlagUntilTimeout>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d005      	beq.n	8005810 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2220      	movs	r2, #32
 8005808:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e03d      	b.n	800588c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d10b      	bne.n	800582e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	881a      	ldrh	r2, [r3, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005822:	b292      	uxth	r2, r2
 8005824:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	3302      	adds	r3, #2
 800582a:	61bb      	str	r3, [r7, #24]
 800582c:	e007      	b.n	800583e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	781a      	ldrb	r2, [r3, #0]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	3301      	adds	r3, #1
 800583c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005844:	b29b      	uxth	r3, r3
 8005846:	3b01      	subs	r3, #1
 8005848:	b29a      	uxth	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005856:	b29b      	uxth	r3, r3
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1c8      	bne.n	80057ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	9300      	str	r3, [sp, #0]
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	2200      	movs	r2, #0
 8005864:	2140      	movs	r1, #64	@ 0x40
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f000 fc5c 	bl	8006124 <UART_WaitOnFlagUntilTimeout>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d005      	beq.n	800587e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2220      	movs	r2, #32
 8005876:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e006      	b.n	800588c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2220      	movs	r2, #32
 8005882:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005886:	2300      	movs	r3, #0
 8005888:	e000      	b.n	800588c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800588a:	2302      	movs	r3, #2
  }
}
 800588c:	4618      	mov	r0, r3
 800588e:	3720      	adds	r7, #32
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005898:	b08c      	sub	sp, #48	@ 0x30
 800589a:	af00      	add	r7, sp, #0
 800589c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800589e:	2300      	movs	r3, #0
 80058a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	689a      	ldr	r2, [r3, #8]
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	431a      	orrs	r2, r3
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	431a      	orrs	r2, r3
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	69db      	ldr	r3, [r3, #28]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	4baa      	ldr	r3, [pc, #680]	@ (8005b6c <UART_SetConfig+0x2d8>)
 80058c4:	4013      	ands	r3, r2
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	6812      	ldr	r2, [r2, #0]
 80058ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058cc:	430b      	orrs	r3, r1
 80058ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	68da      	ldr	r2, [r3, #12]
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	430a      	orrs	r2, r1
 80058e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a9f      	ldr	r2, [pc, #636]	@ (8005b70 <UART_SetConfig+0x2dc>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d004      	beq.n	8005900 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058fc:	4313      	orrs	r3, r2
 80058fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800590a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	6812      	ldr	r2, [r2, #0]
 8005912:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005914:	430b      	orrs	r3, r1
 8005916:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800591e:	f023 010f 	bic.w	r1, r3, #15
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	430a      	orrs	r2, r1
 800592c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a90      	ldr	r2, [pc, #576]	@ (8005b74 <UART_SetConfig+0x2e0>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d125      	bne.n	8005984 <UART_SetConfig+0xf0>
 8005938:	4b8f      	ldr	r3, [pc, #572]	@ (8005b78 <UART_SetConfig+0x2e4>)
 800593a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800593e:	f003 0303 	and.w	r3, r3, #3
 8005942:	2b03      	cmp	r3, #3
 8005944:	d81a      	bhi.n	800597c <UART_SetConfig+0xe8>
 8005946:	a201      	add	r2, pc, #4	@ (adr r2, 800594c <UART_SetConfig+0xb8>)
 8005948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800594c:	0800595d 	.word	0x0800595d
 8005950:	0800596d 	.word	0x0800596d
 8005954:	08005965 	.word	0x08005965
 8005958:	08005975 	.word	0x08005975
 800595c:	2301      	movs	r3, #1
 800595e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005962:	e116      	b.n	8005b92 <UART_SetConfig+0x2fe>
 8005964:	2302      	movs	r3, #2
 8005966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800596a:	e112      	b.n	8005b92 <UART_SetConfig+0x2fe>
 800596c:	2304      	movs	r3, #4
 800596e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005972:	e10e      	b.n	8005b92 <UART_SetConfig+0x2fe>
 8005974:	2308      	movs	r3, #8
 8005976:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800597a:	e10a      	b.n	8005b92 <UART_SetConfig+0x2fe>
 800597c:	2310      	movs	r3, #16
 800597e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005982:	e106      	b.n	8005b92 <UART_SetConfig+0x2fe>
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a7c      	ldr	r2, [pc, #496]	@ (8005b7c <UART_SetConfig+0x2e8>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d138      	bne.n	8005a00 <UART_SetConfig+0x16c>
 800598e:	4b7a      	ldr	r3, [pc, #488]	@ (8005b78 <UART_SetConfig+0x2e4>)
 8005990:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005994:	f003 030c 	and.w	r3, r3, #12
 8005998:	2b0c      	cmp	r3, #12
 800599a:	d82d      	bhi.n	80059f8 <UART_SetConfig+0x164>
 800599c:	a201      	add	r2, pc, #4	@ (adr r2, 80059a4 <UART_SetConfig+0x110>)
 800599e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a2:	bf00      	nop
 80059a4:	080059d9 	.word	0x080059d9
 80059a8:	080059f9 	.word	0x080059f9
 80059ac:	080059f9 	.word	0x080059f9
 80059b0:	080059f9 	.word	0x080059f9
 80059b4:	080059e9 	.word	0x080059e9
 80059b8:	080059f9 	.word	0x080059f9
 80059bc:	080059f9 	.word	0x080059f9
 80059c0:	080059f9 	.word	0x080059f9
 80059c4:	080059e1 	.word	0x080059e1
 80059c8:	080059f9 	.word	0x080059f9
 80059cc:	080059f9 	.word	0x080059f9
 80059d0:	080059f9 	.word	0x080059f9
 80059d4:	080059f1 	.word	0x080059f1
 80059d8:	2300      	movs	r3, #0
 80059da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059de:	e0d8      	b.n	8005b92 <UART_SetConfig+0x2fe>
 80059e0:	2302      	movs	r3, #2
 80059e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059e6:	e0d4      	b.n	8005b92 <UART_SetConfig+0x2fe>
 80059e8:	2304      	movs	r3, #4
 80059ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059ee:	e0d0      	b.n	8005b92 <UART_SetConfig+0x2fe>
 80059f0:	2308      	movs	r3, #8
 80059f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059f6:	e0cc      	b.n	8005b92 <UART_SetConfig+0x2fe>
 80059f8:	2310      	movs	r3, #16
 80059fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059fe:	e0c8      	b.n	8005b92 <UART_SetConfig+0x2fe>
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a5e      	ldr	r2, [pc, #376]	@ (8005b80 <UART_SetConfig+0x2ec>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d125      	bne.n	8005a56 <UART_SetConfig+0x1c2>
 8005a0a:	4b5b      	ldr	r3, [pc, #364]	@ (8005b78 <UART_SetConfig+0x2e4>)
 8005a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a10:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005a14:	2b30      	cmp	r3, #48	@ 0x30
 8005a16:	d016      	beq.n	8005a46 <UART_SetConfig+0x1b2>
 8005a18:	2b30      	cmp	r3, #48	@ 0x30
 8005a1a:	d818      	bhi.n	8005a4e <UART_SetConfig+0x1ba>
 8005a1c:	2b20      	cmp	r3, #32
 8005a1e:	d00a      	beq.n	8005a36 <UART_SetConfig+0x1a2>
 8005a20:	2b20      	cmp	r3, #32
 8005a22:	d814      	bhi.n	8005a4e <UART_SetConfig+0x1ba>
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d002      	beq.n	8005a2e <UART_SetConfig+0x19a>
 8005a28:	2b10      	cmp	r3, #16
 8005a2a:	d008      	beq.n	8005a3e <UART_SetConfig+0x1aa>
 8005a2c:	e00f      	b.n	8005a4e <UART_SetConfig+0x1ba>
 8005a2e:	2300      	movs	r3, #0
 8005a30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a34:	e0ad      	b.n	8005b92 <UART_SetConfig+0x2fe>
 8005a36:	2302      	movs	r3, #2
 8005a38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a3c:	e0a9      	b.n	8005b92 <UART_SetConfig+0x2fe>
 8005a3e:	2304      	movs	r3, #4
 8005a40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a44:	e0a5      	b.n	8005b92 <UART_SetConfig+0x2fe>
 8005a46:	2308      	movs	r3, #8
 8005a48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a4c:	e0a1      	b.n	8005b92 <UART_SetConfig+0x2fe>
 8005a4e:	2310      	movs	r3, #16
 8005a50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a54:	e09d      	b.n	8005b92 <UART_SetConfig+0x2fe>
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a4a      	ldr	r2, [pc, #296]	@ (8005b84 <UART_SetConfig+0x2f0>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d125      	bne.n	8005aac <UART_SetConfig+0x218>
 8005a60:	4b45      	ldr	r3, [pc, #276]	@ (8005b78 <UART_SetConfig+0x2e4>)
 8005a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a66:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005a6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a6c:	d016      	beq.n	8005a9c <UART_SetConfig+0x208>
 8005a6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a70:	d818      	bhi.n	8005aa4 <UART_SetConfig+0x210>
 8005a72:	2b80      	cmp	r3, #128	@ 0x80
 8005a74:	d00a      	beq.n	8005a8c <UART_SetConfig+0x1f8>
 8005a76:	2b80      	cmp	r3, #128	@ 0x80
 8005a78:	d814      	bhi.n	8005aa4 <UART_SetConfig+0x210>
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d002      	beq.n	8005a84 <UART_SetConfig+0x1f0>
 8005a7e:	2b40      	cmp	r3, #64	@ 0x40
 8005a80:	d008      	beq.n	8005a94 <UART_SetConfig+0x200>
 8005a82:	e00f      	b.n	8005aa4 <UART_SetConfig+0x210>
 8005a84:	2300      	movs	r3, #0
 8005a86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a8a:	e082      	b.n	8005b92 <UART_SetConfig+0x2fe>
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a92:	e07e      	b.n	8005b92 <UART_SetConfig+0x2fe>
 8005a94:	2304      	movs	r3, #4
 8005a96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a9a:	e07a      	b.n	8005b92 <UART_SetConfig+0x2fe>
 8005a9c:	2308      	movs	r3, #8
 8005a9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005aa2:	e076      	b.n	8005b92 <UART_SetConfig+0x2fe>
 8005aa4:	2310      	movs	r3, #16
 8005aa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005aaa:	e072      	b.n	8005b92 <UART_SetConfig+0x2fe>
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a35      	ldr	r2, [pc, #212]	@ (8005b88 <UART_SetConfig+0x2f4>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d12a      	bne.n	8005b0c <UART_SetConfig+0x278>
 8005ab6:	4b30      	ldr	r3, [pc, #192]	@ (8005b78 <UART_SetConfig+0x2e4>)
 8005ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005abc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ac0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ac4:	d01a      	beq.n	8005afc <UART_SetConfig+0x268>
 8005ac6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005aca:	d81b      	bhi.n	8005b04 <UART_SetConfig+0x270>
 8005acc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ad0:	d00c      	beq.n	8005aec <UART_SetConfig+0x258>
 8005ad2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ad6:	d815      	bhi.n	8005b04 <UART_SetConfig+0x270>
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d003      	beq.n	8005ae4 <UART_SetConfig+0x250>
 8005adc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ae0:	d008      	beq.n	8005af4 <UART_SetConfig+0x260>
 8005ae2:	e00f      	b.n	8005b04 <UART_SetConfig+0x270>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005aea:	e052      	b.n	8005b92 <UART_SetConfig+0x2fe>
 8005aec:	2302      	movs	r3, #2
 8005aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005af2:	e04e      	b.n	8005b92 <UART_SetConfig+0x2fe>
 8005af4:	2304      	movs	r3, #4
 8005af6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005afa:	e04a      	b.n	8005b92 <UART_SetConfig+0x2fe>
 8005afc:	2308      	movs	r3, #8
 8005afe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b02:	e046      	b.n	8005b92 <UART_SetConfig+0x2fe>
 8005b04:	2310      	movs	r3, #16
 8005b06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b0a:	e042      	b.n	8005b92 <UART_SetConfig+0x2fe>
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a17      	ldr	r2, [pc, #92]	@ (8005b70 <UART_SetConfig+0x2dc>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d13a      	bne.n	8005b8c <UART_SetConfig+0x2f8>
 8005b16:	4b18      	ldr	r3, [pc, #96]	@ (8005b78 <UART_SetConfig+0x2e4>)
 8005b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b1c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005b20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b24:	d01a      	beq.n	8005b5c <UART_SetConfig+0x2c8>
 8005b26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b2a:	d81b      	bhi.n	8005b64 <UART_SetConfig+0x2d0>
 8005b2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b30:	d00c      	beq.n	8005b4c <UART_SetConfig+0x2b8>
 8005b32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b36:	d815      	bhi.n	8005b64 <UART_SetConfig+0x2d0>
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d003      	beq.n	8005b44 <UART_SetConfig+0x2b0>
 8005b3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b40:	d008      	beq.n	8005b54 <UART_SetConfig+0x2c0>
 8005b42:	e00f      	b.n	8005b64 <UART_SetConfig+0x2d0>
 8005b44:	2300      	movs	r3, #0
 8005b46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b4a:	e022      	b.n	8005b92 <UART_SetConfig+0x2fe>
 8005b4c:	2302      	movs	r3, #2
 8005b4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b52:	e01e      	b.n	8005b92 <UART_SetConfig+0x2fe>
 8005b54:	2304      	movs	r3, #4
 8005b56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b5a:	e01a      	b.n	8005b92 <UART_SetConfig+0x2fe>
 8005b5c:	2308      	movs	r3, #8
 8005b5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b62:	e016      	b.n	8005b92 <UART_SetConfig+0x2fe>
 8005b64:	2310      	movs	r3, #16
 8005b66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b6a:	e012      	b.n	8005b92 <UART_SetConfig+0x2fe>
 8005b6c:	cfff69f3 	.word	0xcfff69f3
 8005b70:	40008000 	.word	0x40008000
 8005b74:	40013800 	.word	0x40013800
 8005b78:	40021000 	.word	0x40021000
 8005b7c:	40004400 	.word	0x40004400
 8005b80:	40004800 	.word	0x40004800
 8005b84:	40004c00 	.word	0x40004c00
 8005b88:	40005000 	.word	0x40005000
 8005b8c:	2310      	movs	r3, #16
 8005b8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4aae      	ldr	r2, [pc, #696]	@ (8005e50 <UART_SetConfig+0x5bc>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	f040 8097 	bne.w	8005ccc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b9e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005ba2:	2b08      	cmp	r3, #8
 8005ba4:	d823      	bhi.n	8005bee <UART_SetConfig+0x35a>
 8005ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8005bac <UART_SetConfig+0x318>)
 8005ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bac:	08005bd1 	.word	0x08005bd1
 8005bb0:	08005bef 	.word	0x08005bef
 8005bb4:	08005bd9 	.word	0x08005bd9
 8005bb8:	08005bef 	.word	0x08005bef
 8005bbc:	08005bdf 	.word	0x08005bdf
 8005bc0:	08005bef 	.word	0x08005bef
 8005bc4:	08005bef 	.word	0x08005bef
 8005bc8:	08005bef 	.word	0x08005bef
 8005bcc:	08005be7 	.word	0x08005be7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bd0:	f7fe fc86 	bl	80044e0 <HAL_RCC_GetPCLK1Freq>
 8005bd4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005bd6:	e010      	b.n	8005bfa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bd8:	4b9e      	ldr	r3, [pc, #632]	@ (8005e54 <UART_SetConfig+0x5c0>)
 8005bda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005bdc:	e00d      	b.n	8005bfa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bde:	f7fe fbe7 	bl	80043b0 <HAL_RCC_GetSysClockFreq>
 8005be2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005be4:	e009      	b.n	8005bfa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005be6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005bec:	e005      	b.n	8005bfa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005bf8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f000 8130 	beq.w	8005e62 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c06:	4a94      	ldr	r2, [pc, #592]	@ (8005e58 <UART_SetConfig+0x5c4>)
 8005c08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c10:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c14:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	685a      	ldr	r2, [r3, #4]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	005b      	lsls	r3, r3, #1
 8005c1e:	4413      	add	r3, r2
 8005c20:	69ba      	ldr	r2, [r7, #24]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d305      	bcc.n	8005c32 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d903      	bls.n	8005c3a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005c38:	e113      	b.n	8005e62 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	60bb      	str	r3, [r7, #8]
 8005c40:	60fa      	str	r2, [r7, #12]
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c46:	4a84      	ldr	r2, [pc, #528]	@ (8005e58 <UART_SetConfig+0x5c4>)
 8005c48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	2200      	movs	r2, #0
 8005c50:	603b      	str	r3, [r7, #0]
 8005c52:	607a      	str	r2, [r7, #4]
 8005c54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c5c:	f7fa ffc6 	bl	8000bec <__aeabi_uldivmod>
 8005c60:	4602      	mov	r2, r0
 8005c62:	460b      	mov	r3, r1
 8005c64:	4610      	mov	r0, r2
 8005c66:	4619      	mov	r1, r3
 8005c68:	f04f 0200 	mov.w	r2, #0
 8005c6c:	f04f 0300 	mov.w	r3, #0
 8005c70:	020b      	lsls	r3, r1, #8
 8005c72:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005c76:	0202      	lsls	r2, r0, #8
 8005c78:	6979      	ldr	r1, [r7, #20]
 8005c7a:	6849      	ldr	r1, [r1, #4]
 8005c7c:	0849      	lsrs	r1, r1, #1
 8005c7e:	2000      	movs	r0, #0
 8005c80:	460c      	mov	r4, r1
 8005c82:	4605      	mov	r5, r0
 8005c84:	eb12 0804 	adds.w	r8, r2, r4
 8005c88:	eb43 0905 	adc.w	r9, r3, r5
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	469a      	mov	sl, r3
 8005c94:	4693      	mov	fp, r2
 8005c96:	4652      	mov	r2, sl
 8005c98:	465b      	mov	r3, fp
 8005c9a:	4640      	mov	r0, r8
 8005c9c:	4649      	mov	r1, r9
 8005c9e:	f7fa ffa5 	bl	8000bec <__aeabi_uldivmod>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005caa:	6a3b      	ldr	r3, [r7, #32]
 8005cac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005cb0:	d308      	bcc.n	8005cc4 <UART_SetConfig+0x430>
 8005cb2:	6a3b      	ldr	r3, [r7, #32]
 8005cb4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cb8:	d204      	bcs.n	8005cc4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	6a3a      	ldr	r2, [r7, #32]
 8005cc0:	60da      	str	r2, [r3, #12]
 8005cc2:	e0ce      	b.n	8005e62 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005cca:	e0ca      	b.n	8005e62 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	69db      	ldr	r3, [r3, #28]
 8005cd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cd4:	d166      	bne.n	8005da4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005cd6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005cda:	2b08      	cmp	r3, #8
 8005cdc:	d827      	bhi.n	8005d2e <UART_SetConfig+0x49a>
 8005cde:	a201      	add	r2, pc, #4	@ (adr r2, 8005ce4 <UART_SetConfig+0x450>)
 8005ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce4:	08005d09 	.word	0x08005d09
 8005ce8:	08005d11 	.word	0x08005d11
 8005cec:	08005d19 	.word	0x08005d19
 8005cf0:	08005d2f 	.word	0x08005d2f
 8005cf4:	08005d1f 	.word	0x08005d1f
 8005cf8:	08005d2f 	.word	0x08005d2f
 8005cfc:	08005d2f 	.word	0x08005d2f
 8005d00:	08005d2f 	.word	0x08005d2f
 8005d04:	08005d27 	.word	0x08005d27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d08:	f7fe fbea 	bl	80044e0 <HAL_RCC_GetPCLK1Freq>
 8005d0c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d0e:	e014      	b.n	8005d3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d10:	f7fe fbfc 	bl	800450c <HAL_RCC_GetPCLK2Freq>
 8005d14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d16:	e010      	b.n	8005d3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d18:	4b4e      	ldr	r3, [pc, #312]	@ (8005e54 <UART_SetConfig+0x5c0>)
 8005d1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005d1c:	e00d      	b.n	8005d3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d1e:	f7fe fb47 	bl	80043b0 <HAL_RCC_GetSysClockFreq>
 8005d22:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d24:	e009      	b.n	8005d3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005d2c:	e005      	b.n	8005d3a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005d38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f000 8090 	beq.w	8005e62 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d46:	4a44      	ldr	r2, [pc, #272]	@ (8005e58 <UART_SetConfig+0x5c4>)
 8005d48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d50:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d54:	005a      	lsls	r2, r3, #1
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	085b      	lsrs	r3, r3, #1
 8005d5c:	441a      	add	r2, r3
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d66:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d68:	6a3b      	ldr	r3, [r7, #32]
 8005d6a:	2b0f      	cmp	r3, #15
 8005d6c:	d916      	bls.n	8005d9c <UART_SetConfig+0x508>
 8005d6e:	6a3b      	ldr	r3, [r7, #32]
 8005d70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d74:	d212      	bcs.n	8005d9c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d76:	6a3b      	ldr	r3, [r7, #32]
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	f023 030f 	bic.w	r3, r3, #15
 8005d7e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d80:	6a3b      	ldr	r3, [r7, #32]
 8005d82:	085b      	lsrs	r3, r3, #1
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	f003 0307 	and.w	r3, r3, #7
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	8bfb      	ldrh	r3, [r7, #30]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	8bfa      	ldrh	r2, [r7, #30]
 8005d98:	60da      	str	r2, [r3, #12]
 8005d9a:	e062      	b.n	8005e62 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005da2:	e05e      	b.n	8005e62 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005da4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005da8:	2b08      	cmp	r3, #8
 8005daa:	d828      	bhi.n	8005dfe <UART_SetConfig+0x56a>
 8005dac:	a201      	add	r2, pc, #4	@ (adr r2, 8005db4 <UART_SetConfig+0x520>)
 8005dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db2:	bf00      	nop
 8005db4:	08005dd9 	.word	0x08005dd9
 8005db8:	08005de1 	.word	0x08005de1
 8005dbc:	08005de9 	.word	0x08005de9
 8005dc0:	08005dff 	.word	0x08005dff
 8005dc4:	08005def 	.word	0x08005def
 8005dc8:	08005dff 	.word	0x08005dff
 8005dcc:	08005dff 	.word	0x08005dff
 8005dd0:	08005dff 	.word	0x08005dff
 8005dd4:	08005df7 	.word	0x08005df7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dd8:	f7fe fb82 	bl	80044e0 <HAL_RCC_GetPCLK1Freq>
 8005ddc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005dde:	e014      	b.n	8005e0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005de0:	f7fe fb94 	bl	800450c <HAL_RCC_GetPCLK2Freq>
 8005de4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005de6:	e010      	b.n	8005e0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005de8:	4b1a      	ldr	r3, [pc, #104]	@ (8005e54 <UART_SetConfig+0x5c0>)
 8005dea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005dec:	e00d      	b.n	8005e0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dee:	f7fe fadf 	bl	80043b0 <HAL_RCC_GetSysClockFreq>
 8005df2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005df4:	e009      	b.n	8005e0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005df6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dfa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005dfc:	e005      	b.n	8005e0a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005e08:	bf00      	nop
    }

    if (pclk != 0U)
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d028      	beq.n	8005e62 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e14:	4a10      	ldr	r2, [pc, #64]	@ (8005e58 <UART_SetConfig+0x5c4>)
 8005e16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e1e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	085b      	lsrs	r3, r3, #1
 8005e28:	441a      	add	r2, r3
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e32:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e34:	6a3b      	ldr	r3, [r7, #32]
 8005e36:	2b0f      	cmp	r3, #15
 8005e38:	d910      	bls.n	8005e5c <UART_SetConfig+0x5c8>
 8005e3a:	6a3b      	ldr	r3, [r7, #32]
 8005e3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e40:	d20c      	bcs.n	8005e5c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e42:	6a3b      	ldr	r3, [r7, #32]
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	60da      	str	r2, [r3, #12]
 8005e4c:	e009      	b.n	8005e62 <UART_SetConfig+0x5ce>
 8005e4e:	bf00      	nop
 8005e50:	40008000 	.word	0x40008000
 8005e54:	00f42400 	.word	0x00f42400
 8005e58:	0800937c 	.word	0x0800937c
      }
      else
      {
        ret = HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	2200      	movs	r2, #0
 8005e76:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005e7e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3730      	adds	r7, #48	@ 0x30
 8005e86:	46bd      	mov	sp, r7
 8005e88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005e8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e98:	f003 0308 	and.w	r3, r3, #8
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00a      	beq.n	8005eb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00a      	beq.n	8005ed8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	430a      	orrs	r2, r1
 8005ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005edc:	f003 0302 	and.w	r3, r3, #2
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00a      	beq.n	8005efa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	430a      	orrs	r2, r1
 8005ef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005efe:	f003 0304 	and.w	r3, r3, #4
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00a      	beq.n	8005f1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f20:	f003 0310 	and.w	r3, r3, #16
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00a      	beq.n	8005f3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f42:	f003 0320 	and.w	r3, r3, #32
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00a      	beq.n	8005f60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d01a      	beq.n	8005fa2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f8a:	d10a      	bne.n	8005fa2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00a      	beq.n	8005fc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	605a      	str	r2, [r3, #4]
  }
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b098      	sub	sp, #96	@ 0x60
 8005fd4:	af02      	add	r7, sp, #8
 8005fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fe0:	f7fc fa32 	bl	8002448 <HAL_GetTick>
 8005fe4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0308 	and.w	r3, r3, #8
 8005ff0:	2b08      	cmp	r3, #8
 8005ff2:	d12f      	bne.n	8006054 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ff4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f88e 	bl	8006124 <UART_WaitOnFlagUntilTimeout>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d022      	beq.n	8006054 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006016:	e853 3f00 	ldrex	r3, [r3]
 800601a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800601c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800601e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006022:	653b      	str	r3, [r7, #80]	@ 0x50
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	461a      	mov	r2, r3
 800602a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800602c:	647b      	str	r3, [r7, #68]	@ 0x44
 800602e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006030:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006032:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006034:	e841 2300 	strex	r3, r2, [r1]
 8006038:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800603a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1e6      	bne.n	800600e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2220      	movs	r2, #32
 8006044:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e063      	b.n	800611c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0304 	and.w	r3, r3, #4
 800605e:	2b04      	cmp	r3, #4
 8006060:	d149      	bne.n	80060f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006062:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800606a:	2200      	movs	r2, #0
 800606c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 f857 	bl	8006124 <UART_WaitOnFlagUntilTimeout>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d03c      	beq.n	80060f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006084:	e853 3f00 	ldrex	r3, [r3]
 8006088:	623b      	str	r3, [r7, #32]
   return(result);
 800608a:	6a3b      	ldr	r3, [r7, #32]
 800608c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006090:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	461a      	mov	r2, r3
 8006098:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800609a:	633b      	str	r3, [r7, #48]	@ 0x30
 800609c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060a2:	e841 2300 	strex	r3, r2, [r1]
 80060a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80060a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1e6      	bne.n	800607c <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	3308      	adds	r3, #8
 80060b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	e853 3f00 	ldrex	r3, [r3]
 80060bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f023 0301 	bic.w	r3, r3, #1
 80060c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	3308      	adds	r3, #8
 80060cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060ce:	61fa      	str	r2, [r7, #28]
 80060d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d2:	69b9      	ldr	r1, [r7, #24]
 80060d4:	69fa      	ldr	r2, [r7, #28]
 80060d6:	e841 2300 	strex	r3, r2, [r1]
 80060da:	617b      	str	r3, [r7, #20]
   return(result);
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1e5      	bne.n	80060ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2220      	movs	r2, #32
 80060e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e012      	b.n	800611c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2220      	movs	r2, #32
 80060fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2220      	movs	r2, #32
 8006102:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3758      	adds	r7, #88	@ 0x58
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	603b      	str	r3, [r7, #0]
 8006130:	4613      	mov	r3, r2
 8006132:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006134:	e04f      	b.n	80061d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800613c:	d04b      	beq.n	80061d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800613e:	f7fc f983 	bl	8002448 <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	429a      	cmp	r2, r3
 800614c:	d302      	bcc.n	8006154 <UART_WaitOnFlagUntilTimeout+0x30>
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d101      	bne.n	8006158 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e04e      	b.n	80061f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0304 	and.w	r3, r3, #4
 8006162:	2b00      	cmp	r3, #0
 8006164:	d037      	beq.n	80061d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	2b80      	cmp	r3, #128	@ 0x80
 800616a:	d034      	beq.n	80061d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	2b40      	cmp	r3, #64	@ 0x40
 8006170:	d031      	beq.n	80061d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	69db      	ldr	r3, [r3, #28]
 8006178:	f003 0308 	and.w	r3, r3, #8
 800617c:	2b08      	cmp	r3, #8
 800617e:	d110      	bne.n	80061a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2208      	movs	r2, #8
 8006186:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f000 f838 	bl	80061fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2208      	movs	r2, #8
 8006192:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e029      	b.n	80061f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	69db      	ldr	r3, [r3, #28]
 80061a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061b0:	d111      	bne.n	80061d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80061ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 f81e 	bl	80061fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2220      	movs	r2, #32
 80061c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e00f      	b.n	80061f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	69da      	ldr	r2, [r3, #28]
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	4013      	ands	r3, r2
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	bf0c      	ite	eq
 80061e6:	2301      	moveq	r3, #1
 80061e8:	2300      	movne	r3, #0
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	461a      	mov	r2, r3
 80061ee:	79fb      	ldrb	r3, [r7, #7]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d0a0      	beq.n	8006136 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061fe:	b480      	push	{r7}
 8006200:	b095      	sub	sp, #84	@ 0x54
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800620e:	e853 3f00 	ldrex	r3, [r3]
 8006212:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006216:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800621a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	461a      	mov	r2, r3
 8006222:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006224:	643b      	str	r3, [r7, #64]	@ 0x40
 8006226:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006228:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800622a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800622c:	e841 2300 	strex	r3, r2, [r1]
 8006230:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006234:	2b00      	cmp	r3, #0
 8006236:	d1e6      	bne.n	8006206 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	3308      	adds	r3, #8
 800623e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006240:	6a3b      	ldr	r3, [r7, #32]
 8006242:	e853 3f00 	ldrex	r3, [r3]
 8006246:	61fb      	str	r3, [r7, #28]
   return(result);
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800624e:	f023 0301 	bic.w	r3, r3, #1
 8006252:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	3308      	adds	r3, #8
 800625a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800625c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800625e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006260:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006262:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006264:	e841 2300 	strex	r3, r2, [r1]
 8006268:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800626a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1e3      	bne.n	8006238 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006274:	2b01      	cmp	r3, #1
 8006276:	d118      	bne.n	80062aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	e853 3f00 	ldrex	r3, [r3]
 8006284:	60bb      	str	r3, [r7, #8]
   return(result);
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	f023 0310 	bic.w	r3, r3, #16
 800628c:	647b      	str	r3, [r7, #68]	@ 0x44
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	461a      	mov	r2, r3
 8006294:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006296:	61bb      	str	r3, [r7, #24]
 8006298:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629a:	6979      	ldr	r1, [r7, #20]
 800629c:	69ba      	ldr	r2, [r7, #24]
 800629e:	e841 2300 	strex	r3, r2, [r1]
 80062a2:	613b      	str	r3, [r7, #16]
   return(result);
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1e6      	bne.n	8006278 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2220      	movs	r2, #32
 80062ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80062be:	bf00      	nop
 80062c0:	3754      	adds	r7, #84	@ 0x54
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80062ca:	b480      	push	{r7}
 80062cc:	b085      	sub	sp, #20
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d101      	bne.n	80062e0 <HAL_UARTEx_DisableFifoMode+0x16>
 80062dc:	2302      	movs	r3, #2
 80062de:	e027      	b.n	8006330 <HAL_UARTEx_DisableFifoMode+0x66>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2224      	movs	r2, #36	@ 0x24
 80062ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f022 0201 	bic.w	r2, r2, #1
 8006306:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800630e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2220      	movs	r2, #32
 8006322:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3714      	adds	r7, #20
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800634c:	2b01      	cmp	r3, #1
 800634e:	d101      	bne.n	8006354 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006350:	2302      	movs	r3, #2
 8006352:	e02d      	b.n	80063b0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2224      	movs	r2, #36	@ 0x24
 8006360:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f022 0201 	bic.w	r2, r2, #1
 800637a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	683a      	ldr	r2, [r7, #0]
 800638c:	430a      	orrs	r2, r1
 800638e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 f84f 	bl	8006434 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2220      	movs	r2, #32
 80063a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d101      	bne.n	80063d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80063cc:	2302      	movs	r3, #2
 80063ce:	e02d      	b.n	800642c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2224      	movs	r2, #36	@ 0x24
 80063dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f022 0201 	bic.w	r2, r2, #1
 80063f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	683a      	ldr	r2, [r7, #0]
 8006408:	430a      	orrs	r2, r1
 800640a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 f811 	bl	8006434 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2220      	movs	r2, #32
 800641e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3710      	adds	r7, #16
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006440:	2b00      	cmp	r3, #0
 8006442:	d108      	bne.n	8006456 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006454:	e031      	b.n	80064ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006456:	2308      	movs	r3, #8
 8006458:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800645a:	2308      	movs	r3, #8
 800645c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	0e5b      	lsrs	r3, r3, #25
 8006466:	b2db      	uxtb	r3, r3
 8006468:	f003 0307 	and.w	r3, r3, #7
 800646c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	0f5b      	lsrs	r3, r3, #29
 8006476:	b2db      	uxtb	r3, r3
 8006478:	f003 0307 	and.w	r3, r3, #7
 800647c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800647e:	7bbb      	ldrb	r3, [r7, #14]
 8006480:	7b3a      	ldrb	r2, [r7, #12]
 8006482:	4911      	ldr	r1, [pc, #68]	@ (80064c8 <UARTEx_SetNbDataToProcess+0x94>)
 8006484:	5c8a      	ldrb	r2, [r1, r2]
 8006486:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800648a:	7b3a      	ldrb	r2, [r7, #12]
 800648c:	490f      	ldr	r1, [pc, #60]	@ (80064cc <UARTEx_SetNbDataToProcess+0x98>)
 800648e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006490:	fb93 f3f2 	sdiv	r3, r3, r2
 8006494:	b29a      	uxth	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800649c:	7bfb      	ldrb	r3, [r7, #15]
 800649e:	7b7a      	ldrb	r2, [r7, #13]
 80064a0:	4909      	ldr	r1, [pc, #36]	@ (80064c8 <UARTEx_SetNbDataToProcess+0x94>)
 80064a2:	5c8a      	ldrb	r2, [r1, r2]
 80064a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80064a8:	7b7a      	ldrb	r2, [r7, #13]
 80064aa:	4908      	ldr	r1, [pc, #32]	@ (80064cc <UARTEx_SetNbDataToProcess+0x98>)
 80064ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80064ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80064ba:	bf00      	nop
 80064bc:	3714      	adds	r7, #20
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	08009394 	.word	0x08009394
 80064cc:	0800939c 	.word	0x0800939c

080064d0 <__cvt>:
 80064d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064d4:	ec57 6b10 	vmov	r6, r7, d0
 80064d8:	2f00      	cmp	r7, #0
 80064da:	460c      	mov	r4, r1
 80064dc:	4619      	mov	r1, r3
 80064de:	463b      	mov	r3, r7
 80064e0:	bfbb      	ittet	lt
 80064e2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80064e6:	461f      	movlt	r7, r3
 80064e8:	2300      	movge	r3, #0
 80064ea:	232d      	movlt	r3, #45	@ 0x2d
 80064ec:	700b      	strb	r3, [r1, #0]
 80064ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80064f0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80064f4:	4691      	mov	r9, r2
 80064f6:	f023 0820 	bic.w	r8, r3, #32
 80064fa:	bfbc      	itt	lt
 80064fc:	4632      	movlt	r2, r6
 80064fe:	4616      	movlt	r6, r2
 8006500:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006504:	d005      	beq.n	8006512 <__cvt+0x42>
 8006506:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800650a:	d100      	bne.n	800650e <__cvt+0x3e>
 800650c:	3401      	adds	r4, #1
 800650e:	2102      	movs	r1, #2
 8006510:	e000      	b.n	8006514 <__cvt+0x44>
 8006512:	2103      	movs	r1, #3
 8006514:	ab03      	add	r3, sp, #12
 8006516:	9301      	str	r3, [sp, #4]
 8006518:	ab02      	add	r3, sp, #8
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	ec47 6b10 	vmov	d0, r6, r7
 8006520:	4653      	mov	r3, sl
 8006522:	4622      	mov	r2, r4
 8006524:	f000 fe90 	bl	8007248 <_dtoa_r>
 8006528:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800652c:	4605      	mov	r5, r0
 800652e:	d119      	bne.n	8006564 <__cvt+0x94>
 8006530:	f019 0f01 	tst.w	r9, #1
 8006534:	d00e      	beq.n	8006554 <__cvt+0x84>
 8006536:	eb00 0904 	add.w	r9, r0, r4
 800653a:	2200      	movs	r2, #0
 800653c:	2300      	movs	r3, #0
 800653e:	4630      	mov	r0, r6
 8006540:	4639      	mov	r1, r7
 8006542:	f7fa fae3 	bl	8000b0c <__aeabi_dcmpeq>
 8006546:	b108      	cbz	r0, 800654c <__cvt+0x7c>
 8006548:	f8cd 900c 	str.w	r9, [sp, #12]
 800654c:	2230      	movs	r2, #48	@ 0x30
 800654e:	9b03      	ldr	r3, [sp, #12]
 8006550:	454b      	cmp	r3, r9
 8006552:	d31e      	bcc.n	8006592 <__cvt+0xc2>
 8006554:	9b03      	ldr	r3, [sp, #12]
 8006556:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006558:	1b5b      	subs	r3, r3, r5
 800655a:	4628      	mov	r0, r5
 800655c:	6013      	str	r3, [r2, #0]
 800655e:	b004      	add	sp, #16
 8006560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006564:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006568:	eb00 0904 	add.w	r9, r0, r4
 800656c:	d1e5      	bne.n	800653a <__cvt+0x6a>
 800656e:	7803      	ldrb	r3, [r0, #0]
 8006570:	2b30      	cmp	r3, #48	@ 0x30
 8006572:	d10a      	bne.n	800658a <__cvt+0xba>
 8006574:	2200      	movs	r2, #0
 8006576:	2300      	movs	r3, #0
 8006578:	4630      	mov	r0, r6
 800657a:	4639      	mov	r1, r7
 800657c:	f7fa fac6 	bl	8000b0c <__aeabi_dcmpeq>
 8006580:	b918      	cbnz	r0, 800658a <__cvt+0xba>
 8006582:	f1c4 0401 	rsb	r4, r4, #1
 8006586:	f8ca 4000 	str.w	r4, [sl]
 800658a:	f8da 3000 	ldr.w	r3, [sl]
 800658e:	4499      	add	r9, r3
 8006590:	e7d3      	b.n	800653a <__cvt+0x6a>
 8006592:	1c59      	adds	r1, r3, #1
 8006594:	9103      	str	r1, [sp, #12]
 8006596:	701a      	strb	r2, [r3, #0]
 8006598:	e7d9      	b.n	800654e <__cvt+0x7e>

0800659a <__exponent>:
 800659a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800659c:	2900      	cmp	r1, #0
 800659e:	bfba      	itte	lt
 80065a0:	4249      	neglt	r1, r1
 80065a2:	232d      	movlt	r3, #45	@ 0x2d
 80065a4:	232b      	movge	r3, #43	@ 0x2b
 80065a6:	2909      	cmp	r1, #9
 80065a8:	7002      	strb	r2, [r0, #0]
 80065aa:	7043      	strb	r3, [r0, #1]
 80065ac:	dd29      	ble.n	8006602 <__exponent+0x68>
 80065ae:	f10d 0307 	add.w	r3, sp, #7
 80065b2:	461d      	mov	r5, r3
 80065b4:	270a      	movs	r7, #10
 80065b6:	461a      	mov	r2, r3
 80065b8:	fbb1 f6f7 	udiv	r6, r1, r7
 80065bc:	fb07 1416 	mls	r4, r7, r6, r1
 80065c0:	3430      	adds	r4, #48	@ 0x30
 80065c2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80065c6:	460c      	mov	r4, r1
 80065c8:	2c63      	cmp	r4, #99	@ 0x63
 80065ca:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80065ce:	4631      	mov	r1, r6
 80065d0:	dcf1      	bgt.n	80065b6 <__exponent+0x1c>
 80065d2:	3130      	adds	r1, #48	@ 0x30
 80065d4:	1e94      	subs	r4, r2, #2
 80065d6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80065da:	1c41      	adds	r1, r0, #1
 80065dc:	4623      	mov	r3, r4
 80065de:	42ab      	cmp	r3, r5
 80065e0:	d30a      	bcc.n	80065f8 <__exponent+0x5e>
 80065e2:	f10d 0309 	add.w	r3, sp, #9
 80065e6:	1a9b      	subs	r3, r3, r2
 80065e8:	42ac      	cmp	r4, r5
 80065ea:	bf88      	it	hi
 80065ec:	2300      	movhi	r3, #0
 80065ee:	3302      	adds	r3, #2
 80065f0:	4403      	add	r3, r0
 80065f2:	1a18      	subs	r0, r3, r0
 80065f4:	b003      	add	sp, #12
 80065f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065f8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80065fc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006600:	e7ed      	b.n	80065de <__exponent+0x44>
 8006602:	2330      	movs	r3, #48	@ 0x30
 8006604:	3130      	adds	r1, #48	@ 0x30
 8006606:	7083      	strb	r3, [r0, #2]
 8006608:	70c1      	strb	r1, [r0, #3]
 800660a:	1d03      	adds	r3, r0, #4
 800660c:	e7f1      	b.n	80065f2 <__exponent+0x58>
	...

08006610 <_printf_float>:
 8006610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006614:	b08d      	sub	sp, #52	@ 0x34
 8006616:	460c      	mov	r4, r1
 8006618:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800661c:	4616      	mov	r6, r2
 800661e:	461f      	mov	r7, r3
 8006620:	4605      	mov	r5, r0
 8006622:	f000 fd37 	bl	8007094 <_localeconv_r>
 8006626:	6803      	ldr	r3, [r0, #0]
 8006628:	9304      	str	r3, [sp, #16]
 800662a:	4618      	mov	r0, r3
 800662c:	f7f9 fe38 	bl	80002a0 <strlen>
 8006630:	2300      	movs	r3, #0
 8006632:	930a      	str	r3, [sp, #40]	@ 0x28
 8006634:	f8d8 3000 	ldr.w	r3, [r8]
 8006638:	9005      	str	r0, [sp, #20]
 800663a:	3307      	adds	r3, #7
 800663c:	f023 0307 	bic.w	r3, r3, #7
 8006640:	f103 0208 	add.w	r2, r3, #8
 8006644:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006648:	f8d4 b000 	ldr.w	fp, [r4]
 800664c:	f8c8 2000 	str.w	r2, [r8]
 8006650:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006654:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006658:	9307      	str	r3, [sp, #28]
 800665a:	f8cd 8018 	str.w	r8, [sp, #24]
 800665e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006662:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006666:	4b9c      	ldr	r3, [pc, #624]	@ (80068d8 <_printf_float+0x2c8>)
 8006668:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800666c:	f7fa fa80 	bl	8000b70 <__aeabi_dcmpun>
 8006670:	bb70      	cbnz	r0, 80066d0 <_printf_float+0xc0>
 8006672:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006676:	4b98      	ldr	r3, [pc, #608]	@ (80068d8 <_printf_float+0x2c8>)
 8006678:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800667c:	f7fa fa5a 	bl	8000b34 <__aeabi_dcmple>
 8006680:	bb30      	cbnz	r0, 80066d0 <_printf_float+0xc0>
 8006682:	2200      	movs	r2, #0
 8006684:	2300      	movs	r3, #0
 8006686:	4640      	mov	r0, r8
 8006688:	4649      	mov	r1, r9
 800668a:	f7fa fa49 	bl	8000b20 <__aeabi_dcmplt>
 800668e:	b110      	cbz	r0, 8006696 <_printf_float+0x86>
 8006690:	232d      	movs	r3, #45	@ 0x2d
 8006692:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006696:	4a91      	ldr	r2, [pc, #580]	@ (80068dc <_printf_float+0x2cc>)
 8006698:	4b91      	ldr	r3, [pc, #580]	@ (80068e0 <_printf_float+0x2d0>)
 800669a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800669e:	bf94      	ite	ls
 80066a0:	4690      	movls	r8, r2
 80066a2:	4698      	movhi	r8, r3
 80066a4:	2303      	movs	r3, #3
 80066a6:	6123      	str	r3, [r4, #16]
 80066a8:	f02b 0304 	bic.w	r3, fp, #4
 80066ac:	6023      	str	r3, [r4, #0]
 80066ae:	f04f 0900 	mov.w	r9, #0
 80066b2:	9700      	str	r7, [sp, #0]
 80066b4:	4633      	mov	r3, r6
 80066b6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80066b8:	4621      	mov	r1, r4
 80066ba:	4628      	mov	r0, r5
 80066bc:	f000 f9d2 	bl	8006a64 <_printf_common>
 80066c0:	3001      	adds	r0, #1
 80066c2:	f040 808d 	bne.w	80067e0 <_printf_float+0x1d0>
 80066c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80066ca:	b00d      	add	sp, #52	@ 0x34
 80066cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066d0:	4642      	mov	r2, r8
 80066d2:	464b      	mov	r3, r9
 80066d4:	4640      	mov	r0, r8
 80066d6:	4649      	mov	r1, r9
 80066d8:	f7fa fa4a 	bl	8000b70 <__aeabi_dcmpun>
 80066dc:	b140      	cbz	r0, 80066f0 <_printf_float+0xe0>
 80066de:	464b      	mov	r3, r9
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	bfbc      	itt	lt
 80066e4:	232d      	movlt	r3, #45	@ 0x2d
 80066e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80066ea:	4a7e      	ldr	r2, [pc, #504]	@ (80068e4 <_printf_float+0x2d4>)
 80066ec:	4b7e      	ldr	r3, [pc, #504]	@ (80068e8 <_printf_float+0x2d8>)
 80066ee:	e7d4      	b.n	800669a <_printf_float+0x8a>
 80066f0:	6863      	ldr	r3, [r4, #4]
 80066f2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80066f6:	9206      	str	r2, [sp, #24]
 80066f8:	1c5a      	adds	r2, r3, #1
 80066fa:	d13b      	bne.n	8006774 <_printf_float+0x164>
 80066fc:	2306      	movs	r3, #6
 80066fe:	6063      	str	r3, [r4, #4]
 8006700:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006704:	2300      	movs	r3, #0
 8006706:	6022      	str	r2, [r4, #0]
 8006708:	9303      	str	r3, [sp, #12]
 800670a:	ab0a      	add	r3, sp, #40	@ 0x28
 800670c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006710:	ab09      	add	r3, sp, #36	@ 0x24
 8006712:	9300      	str	r3, [sp, #0]
 8006714:	6861      	ldr	r1, [r4, #4]
 8006716:	ec49 8b10 	vmov	d0, r8, r9
 800671a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800671e:	4628      	mov	r0, r5
 8006720:	f7ff fed6 	bl	80064d0 <__cvt>
 8006724:	9b06      	ldr	r3, [sp, #24]
 8006726:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006728:	2b47      	cmp	r3, #71	@ 0x47
 800672a:	4680      	mov	r8, r0
 800672c:	d129      	bne.n	8006782 <_printf_float+0x172>
 800672e:	1cc8      	adds	r0, r1, #3
 8006730:	db02      	blt.n	8006738 <_printf_float+0x128>
 8006732:	6863      	ldr	r3, [r4, #4]
 8006734:	4299      	cmp	r1, r3
 8006736:	dd41      	ble.n	80067bc <_printf_float+0x1ac>
 8006738:	f1aa 0a02 	sub.w	sl, sl, #2
 800673c:	fa5f fa8a 	uxtb.w	sl, sl
 8006740:	3901      	subs	r1, #1
 8006742:	4652      	mov	r2, sl
 8006744:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006748:	9109      	str	r1, [sp, #36]	@ 0x24
 800674a:	f7ff ff26 	bl	800659a <__exponent>
 800674e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006750:	1813      	adds	r3, r2, r0
 8006752:	2a01      	cmp	r2, #1
 8006754:	4681      	mov	r9, r0
 8006756:	6123      	str	r3, [r4, #16]
 8006758:	dc02      	bgt.n	8006760 <_printf_float+0x150>
 800675a:	6822      	ldr	r2, [r4, #0]
 800675c:	07d2      	lsls	r2, r2, #31
 800675e:	d501      	bpl.n	8006764 <_printf_float+0x154>
 8006760:	3301      	adds	r3, #1
 8006762:	6123      	str	r3, [r4, #16]
 8006764:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006768:	2b00      	cmp	r3, #0
 800676a:	d0a2      	beq.n	80066b2 <_printf_float+0xa2>
 800676c:	232d      	movs	r3, #45	@ 0x2d
 800676e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006772:	e79e      	b.n	80066b2 <_printf_float+0xa2>
 8006774:	9a06      	ldr	r2, [sp, #24]
 8006776:	2a47      	cmp	r2, #71	@ 0x47
 8006778:	d1c2      	bne.n	8006700 <_printf_float+0xf0>
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1c0      	bne.n	8006700 <_printf_float+0xf0>
 800677e:	2301      	movs	r3, #1
 8006780:	e7bd      	b.n	80066fe <_printf_float+0xee>
 8006782:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006786:	d9db      	bls.n	8006740 <_printf_float+0x130>
 8006788:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800678c:	d118      	bne.n	80067c0 <_printf_float+0x1b0>
 800678e:	2900      	cmp	r1, #0
 8006790:	6863      	ldr	r3, [r4, #4]
 8006792:	dd0b      	ble.n	80067ac <_printf_float+0x19c>
 8006794:	6121      	str	r1, [r4, #16]
 8006796:	b913      	cbnz	r3, 800679e <_printf_float+0x18e>
 8006798:	6822      	ldr	r2, [r4, #0]
 800679a:	07d0      	lsls	r0, r2, #31
 800679c:	d502      	bpl.n	80067a4 <_printf_float+0x194>
 800679e:	3301      	adds	r3, #1
 80067a0:	440b      	add	r3, r1
 80067a2:	6123      	str	r3, [r4, #16]
 80067a4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80067a6:	f04f 0900 	mov.w	r9, #0
 80067aa:	e7db      	b.n	8006764 <_printf_float+0x154>
 80067ac:	b913      	cbnz	r3, 80067b4 <_printf_float+0x1a4>
 80067ae:	6822      	ldr	r2, [r4, #0]
 80067b0:	07d2      	lsls	r2, r2, #31
 80067b2:	d501      	bpl.n	80067b8 <_printf_float+0x1a8>
 80067b4:	3302      	adds	r3, #2
 80067b6:	e7f4      	b.n	80067a2 <_printf_float+0x192>
 80067b8:	2301      	movs	r3, #1
 80067ba:	e7f2      	b.n	80067a2 <_printf_float+0x192>
 80067bc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80067c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067c2:	4299      	cmp	r1, r3
 80067c4:	db05      	blt.n	80067d2 <_printf_float+0x1c2>
 80067c6:	6823      	ldr	r3, [r4, #0]
 80067c8:	6121      	str	r1, [r4, #16]
 80067ca:	07d8      	lsls	r0, r3, #31
 80067cc:	d5ea      	bpl.n	80067a4 <_printf_float+0x194>
 80067ce:	1c4b      	adds	r3, r1, #1
 80067d0:	e7e7      	b.n	80067a2 <_printf_float+0x192>
 80067d2:	2900      	cmp	r1, #0
 80067d4:	bfd4      	ite	le
 80067d6:	f1c1 0202 	rsble	r2, r1, #2
 80067da:	2201      	movgt	r2, #1
 80067dc:	4413      	add	r3, r2
 80067de:	e7e0      	b.n	80067a2 <_printf_float+0x192>
 80067e0:	6823      	ldr	r3, [r4, #0]
 80067e2:	055a      	lsls	r2, r3, #21
 80067e4:	d407      	bmi.n	80067f6 <_printf_float+0x1e6>
 80067e6:	6923      	ldr	r3, [r4, #16]
 80067e8:	4642      	mov	r2, r8
 80067ea:	4631      	mov	r1, r6
 80067ec:	4628      	mov	r0, r5
 80067ee:	47b8      	blx	r7
 80067f0:	3001      	adds	r0, #1
 80067f2:	d12b      	bne.n	800684c <_printf_float+0x23c>
 80067f4:	e767      	b.n	80066c6 <_printf_float+0xb6>
 80067f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80067fa:	f240 80dd 	bls.w	80069b8 <_printf_float+0x3a8>
 80067fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006802:	2200      	movs	r2, #0
 8006804:	2300      	movs	r3, #0
 8006806:	f7fa f981 	bl	8000b0c <__aeabi_dcmpeq>
 800680a:	2800      	cmp	r0, #0
 800680c:	d033      	beq.n	8006876 <_printf_float+0x266>
 800680e:	4a37      	ldr	r2, [pc, #220]	@ (80068ec <_printf_float+0x2dc>)
 8006810:	2301      	movs	r3, #1
 8006812:	4631      	mov	r1, r6
 8006814:	4628      	mov	r0, r5
 8006816:	47b8      	blx	r7
 8006818:	3001      	adds	r0, #1
 800681a:	f43f af54 	beq.w	80066c6 <_printf_float+0xb6>
 800681e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006822:	4543      	cmp	r3, r8
 8006824:	db02      	blt.n	800682c <_printf_float+0x21c>
 8006826:	6823      	ldr	r3, [r4, #0]
 8006828:	07d8      	lsls	r0, r3, #31
 800682a:	d50f      	bpl.n	800684c <_printf_float+0x23c>
 800682c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006830:	4631      	mov	r1, r6
 8006832:	4628      	mov	r0, r5
 8006834:	47b8      	blx	r7
 8006836:	3001      	adds	r0, #1
 8006838:	f43f af45 	beq.w	80066c6 <_printf_float+0xb6>
 800683c:	f04f 0900 	mov.w	r9, #0
 8006840:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006844:	f104 0a1a 	add.w	sl, r4, #26
 8006848:	45c8      	cmp	r8, r9
 800684a:	dc09      	bgt.n	8006860 <_printf_float+0x250>
 800684c:	6823      	ldr	r3, [r4, #0]
 800684e:	079b      	lsls	r3, r3, #30
 8006850:	f100 8103 	bmi.w	8006a5a <_printf_float+0x44a>
 8006854:	68e0      	ldr	r0, [r4, #12]
 8006856:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006858:	4298      	cmp	r0, r3
 800685a:	bfb8      	it	lt
 800685c:	4618      	movlt	r0, r3
 800685e:	e734      	b.n	80066ca <_printf_float+0xba>
 8006860:	2301      	movs	r3, #1
 8006862:	4652      	mov	r2, sl
 8006864:	4631      	mov	r1, r6
 8006866:	4628      	mov	r0, r5
 8006868:	47b8      	blx	r7
 800686a:	3001      	adds	r0, #1
 800686c:	f43f af2b 	beq.w	80066c6 <_printf_float+0xb6>
 8006870:	f109 0901 	add.w	r9, r9, #1
 8006874:	e7e8      	b.n	8006848 <_printf_float+0x238>
 8006876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006878:	2b00      	cmp	r3, #0
 800687a:	dc39      	bgt.n	80068f0 <_printf_float+0x2e0>
 800687c:	4a1b      	ldr	r2, [pc, #108]	@ (80068ec <_printf_float+0x2dc>)
 800687e:	2301      	movs	r3, #1
 8006880:	4631      	mov	r1, r6
 8006882:	4628      	mov	r0, r5
 8006884:	47b8      	blx	r7
 8006886:	3001      	adds	r0, #1
 8006888:	f43f af1d 	beq.w	80066c6 <_printf_float+0xb6>
 800688c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006890:	ea59 0303 	orrs.w	r3, r9, r3
 8006894:	d102      	bne.n	800689c <_printf_float+0x28c>
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	07d9      	lsls	r1, r3, #31
 800689a:	d5d7      	bpl.n	800684c <_printf_float+0x23c>
 800689c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068a0:	4631      	mov	r1, r6
 80068a2:	4628      	mov	r0, r5
 80068a4:	47b8      	blx	r7
 80068a6:	3001      	adds	r0, #1
 80068a8:	f43f af0d 	beq.w	80066c6 <_printf_float+0xb6>
 80068ac:	f04f 0a00 	mov.w	sl, #0
 80068b0:	f104 0b1a 	add.w	fp, r4, #26
 80068b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068b6:	425b      	negs	r3, r3
 80068b8:	4553      	cmp	r3, sl
 80068ba:	dc01      	bgt.n	80068c0 <_printf_float+0x2b0>
 80068bc:	464b      	mov	r3, r9
 80068be:	e793      	b.n	80067e8 <_printf_float+0x1d8>
 80068c0:	2301      	movs	r3, #1
 80068c2:	465a      	mov	r2, fp
 80068c4:	4631      	mov	r1, r6
 80068c6:	4628      	mov	r0, r5
 80068c8:	47b8      	blx	r7
 80068ca:	3001      	adds	r0, #1
 80068cc:	f43f aefb 	beq.w	80066c6 <_printf_float+0xb6>
 80068d0:	f10a 0a01 	add.w	sl, sl, #1
 80068d4:	e7ee      	b.n	80068b4 <_printf_float+0x2a4>
 80068d6:	bf00      	nop
 80068d8:	7fefffff 	.word	0x7fefffff
 80068dc:	080093a4 	.word	0x080093a4
 80068e0:	080093a8 	.word	0x080093a8
 80068e4:	080093ac 	.word	0x080093ac
 80068e8:	080093b0 	.word	0x080093b0
 80068ec:	080093b4 	.word	0x080093b4
 80068f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80068f2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80068f6:	4553      	cmp	r3, sl
 80068f8:	bfa8      	it	ge
 80068fa:	4653      	movge	r3, sl
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	4699      	mov	r9, r3
 8006900:	dc36      	bgt.n	8006970 <_printf_float+0x360>
 8006902:	f04f 0b00 	mov.w	fp, #0
 8006906:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800690a:	f104 021a 	add.w	r2, r4, #26
 800690e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006910:	9306      	str	r3, [sp, #24]
 8006912:	eba3 0309 	sub.w	r3, r3, r9
 8006916:	455b      	cmp	r3, fp
 8006918:	dc31      	bgt.n	800697e <_printf_float+0x36e>
 800691a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800691c:	459a      	cmp	sl, r3
 800691e:	dc3a      	bgt.n	8006996 <_printf_float+0x386>
 8006920:	6823      	ldr	r3, [r4, #0]
 8006922:	07da      	lsls	r2, r3, #31
 8006924:	d437      	bmi.n	8006996 <_printf_float+0x386>
 8006926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006928:	ebaa 0903 	sub.w	r9, sl, r3
 800692c:	9b06      	ldr	r3, [sp, #24]
 800692e:	ebaa 0303 	sub.w	r3, sl, r3
 8006932:	4599      	cmp	r9, r3
 8006934:	bfa8      	it	ge
 8006936:	4699      	movge	r9, r3
 8006938:	f1b9 0f00 	cmp.w	r9, #0
 800693c:	dc33      	bgt.n	80069a6 <_printf_float+0x396>
 800693e:	f04f 0800 	mov.w	r8, #0
 8006942:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006946:	f104 0b1a 	add.w	fp, r4, #26
 800694a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800694c:	ebaa 0303 	sub.w	r3, sl, r3
 8006950:	eba3 0309 	sub.w	r3, r3, r9
 8006954:	4543      	cmp	r3, r8
 8006956:	f77f af79 	ble.w	800684c <_printf_float+0x23c>
 800695a:	2301      	movs	r3, #1
 800695c:	465a      	mov	r2, fp
 800695e:	4631      	mov	r1, r6
 8006960:	4628      	mov	r0, r5
 8006962:	47b8      	blx	r7
 8006964:	3001      	adds	r0, #1
 8006966:	f43f aeae 	beq.w	80066c6 <_printf_float+0xb6>
 800696a:	f108 0801 	add.w	r8, r8, #1
 800696e:	e7ec      	b.n	800694a <_printf_float+0x33a>
 8006970:	4642      	mov	r2, r8
 8006972:	4631      	mov	r1, r6
 8006974:	4628      	mov	r0, r5
 8006976:	47b8      	blx	r7
 8006978:	3001      	adds	r0, #1
 800697a:	d1c2      	bne.n	8006902 <_printf_float+0x2f2>
 800697c:	e6a3      	b.n	80066c6 <_printf_float+0xb6>
 800697e:	2301      	movs	r3, #1
 8006980:	4631      	mov	r1, r6
 8006982:	4628      	mov	r0, r5
 8006984:	9206      	str	r2, [sp, #24]
 8006986:	47b8      	blx	r7
 8006988:	3001      	adds	r0, #1
 800698a:	f43f ae9c 	beq.w	80066c6 <_printf_float+0xb6>
 800698e:	9a06      	ldr	r2, [sp, #24]
 8006990:	f10b 0b01 	add.w	fp, fp, #1
 8006994:	e7bb      	b.n	800690e <_printf_float+0x2fe>
 8006996:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800699a:	4631      	mov	r1, r6
 800699c:	4628      	mov	r0, r5
 800699e:	47b8      	blx	r7
 80069a0:	3001      	adds	r0, #1
 80069a2:	d1c0      	bne.n	8006926 <_printf_float+0x316>
 80069a4:	e68f      	b.n	80066c6 <_printf_float+0xb6>
 80069a6:	9a06      	ldr	r2, [sp, #24]
 80069a8:	464b      	mov	r3, r9
 80069aa:	4442      	add	r2, r8
 80069ac:	4631      	mov	r1, r6
 80069ae:	4628      	mov	r0, r5
 80069b0:	47b8      	blx	r7
 80069b2:	3001      	adds	r0, #1
 80069b4:	d1c3      	bne.n	800693e <_printf_float+0x32e>
 80069b6:	e686      	b.n	80066c6 <_printf_float+0xb6>
 80069b8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80069bc:	f1ba 0f01 	cmp.w	sl, #1
 80069c0:	dc01      	bgt.n	80069c6 <_printf_float+0x3b6>
 80069c2:	07db      	lsls	r3, r3, #31
 80069c4:	d536      	bpl.n	8006a34 <_printf_float+0x424>
 80069c6:	2301      	movs	r3, #1
 80069c8:	4642      	mov	r2, r8
 80069ca:	4631      	mov	r1, r6
 80069cc:	4628      	mov	r0, r5
 80069ce:	47b8      	blx	r7
 80069d0:	3001      	adds	r0, #1
 80069d2:	f43f ae78 	beq.w	80066c6 <_printf_float+0xb6>
 80069d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069da:	4631      	mov	r1, r6
 80069dc:	4628      	mov	r0, r5
 80069de:	47b8      	blx	r7
 80069e0:	3001      	adds	r0, #1
 80069e2:	f43f ae70 	beq.w	80066c6 <_printf_float+0xb6>
 80069e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80069ea:	2200      	movs	r2, #0
 80069ec:	2300      	movs	r3, #0
 80069ee:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80069f2:	f7fa f88b 	bl	8000b0c <__aeabi_dcmpeq>
 80069f6:	b9c0      	cbnz	r0, 8006a2a <_printf_float+0x41a>
 80069f8:	4653      	mov	r3, sl
 80069fa:	f108 0201 	add.w	r2, r8, #1
 80069fe:	4631      	mov	r1, r6
 8006a00:	4628      	mov	r0, r5
 8006a02:	47b8      	blx	r7
 8006a04:	3001      	adds	r0, #1
 8006a06:	d10c      	bne.n	8006a22 <_printf_float+0x412>
 8006a08:	e65d      	b.n	80066c6 <_printf_float+0xb6>
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	465a      	mov	r2, fp
 8006a0e:	4631      	mov	r1, r6
 8006a10:	4628      	mov	r0, r5
 8006a12:	47b8      	blx	r7
 8006a14:	3001      	adds	r0, #1
 8006a16:	f43f ae56 	beq.w	80066c6 <_printf_float+0xb6>
 8006a1a:	f108 0801 	add.w	r8, r8, #1
 8006a1e:	45d0      	cmp	r8, sl
 8006a20:	dbf3      	blt.n	8006a0a <_printf_float+0x3fa>
 8006a22:	464b      	mov	r3, r9
 8006a24:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006a28:	e6df      	b.n	80067ea <_printf_float+0x1da>
 8006a2a:	f04f 0800 	mov.w	r8, #0
 8006a2e:	f104 0b1a 	add.w	fp, r4, #26
 8006a32:	e7f4      	b.n	8006a1e <_printf_float+0x40e>
 8006a34:	2301      	movs	r3, #1
 8006a36:	4642      	mov	r2, r8
 8006a38:	e7e1      	b.n	80069fe <_printf_float+0x3ee>
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	464a      	mov	r2, r9
 8006a3e:	4631      	mov	r1, r6
 8006a40:	4628      	mov	r0, r5
 8006a42:	47b8      	blx	r7
 8006a44:	3001      	adds	r0, #1
 8006a46:	f43f ae3e 	beq.w	80066c6 <_printf_float+0xb6>
 8006a4a:	f108 0801 	add.w	r8, r8, #1
 8006a4e:	68e3      	ldr	r3, [r4, #12]
 8006a50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006a52:	1a5b      	subs	r3, r3, r1
 8006a54:	4543      	cmp	r3, r8
 8006a56:	dcf0      	bgt.n	8006a3a <_printf_float+0x42a>
 8006a58:	e6fc      	b.n	8006854 <_printf_float+0x244>
 8006a5a:	f04f 0800 	mov.w	r8, #0
 8006a5e:	f104 0919 	add.w	r9, r4, #25
 8006a62:	e7f4      	b.n	8006a4e <_printf_float+0x43e>

08006a64 <_printf_common>:
 8006a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a68:	4616      	mov	r6, r2
 8006a6a:	4698      	mov	r8, r3
 8006a6c:	688a      	ldr	r2, [r1, #8]
 8006a6e:	690b      	ldr	r3, [r1, #16]
 8006a70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a74:	4293      	cmp	r3, r2
 8006a76:	bfb8      	it	lt
 8006a78:	4613      	movlt	r3, r2
 8006a7a:	6033      	str	r3, [r6, #0]
 8006a7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a80:	4607      	mov	r7, r0
 8006a82:	460c      	mov	r4, r1
 8006a84:	b10a      	cbz	r2, 8006a8a <_printf_common+0x26>
 8006a86:	3301      	adds	r3, #1
 8006a88:	6033      	str	r3, [r6, #0]
 8006a8a:	6823      	ldr	r3, [r4, #0]
 8006a8c:	0699      	lsls	r1, r3, #26
 8006a8e:	bf42      	ittt	mi
 8006a90:	6833      	ldrmi	r3, [r6, #0]
 8006a92:	3302      	addmi	r3, #2
 8006a94:	6033      	strmi	r3, [r6, #0]
 8006a96:	6825      	ldr	r5, [r4, #0]
 8006a98:	f015 0506 	ands.w	r5, r5, #6
 8006a9c:	d106      	bne.n	8006aac <_printf_common+0x48>
 8006a9e:	f104 0a19 	add.w	sl, r4, #25
 8006aa2:	68e3      	ldr	r3, [r4, #12]
 8006aa4:	6832      	ldr	r2, [r6, #0]
 8006aa6:	1a9b      	subs	r3, r3, r2
 8006aa8:	42ab      	cmp	r3, r5
 8006aaa:	dc26      	bgt.n	8006afa <_printf_common+0x96>
 8006aac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006ab0:	6822      	ldr	r2, [r4, #0]
 8006ab2:	3b00      	subs	r3, #0
 8006ab4:	bf18      	it	ne
 8006ab6:	2301      	movne	r3, #1
 8006ab8:	0692      	lsls	r2, r2, #26
 8006aba:	d42b      	bmi.n	8006b14 <_printf_common+0xb0>
 8006abc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006ac0:	4641      	mov	r1, r8
 8006ac2:	4638      	mov	r0, r7
 8006ac4:	47c8      	blx	r9
 8006ac6:	3001      	adds	r0, #1
 8006ac8:	d01e      	beq.n	8006b08 <_printf_common+0xa4>
 8006aca:	6823      	ldr	r3, [r4, #0]
 8006acc:	6922      	ldr	r2, [r4, #16]
 8006ace:	f003 0306 	and.w	r3, r3, #6
 8006ad2:	2b04      	cmp	r3, #4
 8006ad4:	bf02      	ittt	eq
 8006ad6:	68e5      	ldreq	r5, [r4, #12]
 8006ad8:	6833      	ldreq	r3, [r6, #0]
 8006ada:	1aed      	subeq	r5, r5, r3
 8006adc:	68a3      	ldr	r3, [r4, #8]
 8006ade:	bf0c      	ite	eq
 8006ae0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ae4:	2500      	movne	r5, #0
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	bfc4      	itt	gt
 8006aea:	1a9b      	subgt	r3, r3, r2
 8006aec:	18ed      	addgt	r5, r5, r3
 8006aee:	2600      	movs	r6, #0
 8006af0:	341a      	adds	r4, #26
 8006af2:	42b5      	cmp	r5, r6
 8006af4:	d11a      	bne.n	8006b2c <_printf_common+0xc8>
 8006af6:	2000      	movs	r0, #0
 8006af8:	e008      	b.n	8006b0c <_printf_common+0xa8>
 8006afa:	2301      	movs	r3, #1
 8006afc:	4652      	mov	r2, sl
 8006afe:	4641      	mov	r1, r8
 8006b00:	4638      	mov	r0, r7
 8006b02:	47c8      	blx	r9
 8006b04:	3001      	adds	r0, #1
 8006b06:	d103      	bne.n	8006b10 <_printf_common+0xac>
 8006b08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b10:	3501      	adds	r5, #1
 8006b12:	e7c6      	b.n	8006aa2 <_printf_common+0x3e>
 8006b14:	18e1      	adds	r1, r4, r3
 8006b16:	1c5a      	adds	r2, r3, #1
 8006b18:	2030      	movs	r0, #48	@ 0x30
 8006b1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006b1e:	4422      	add	r2, r4
 8006b20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006b24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006b28:	3302      	adds	r3, #2
 8006b2a:	e7c7      	b.n	8006abc <_printf_common+0x58>
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	4622      	mov	r2, r4
 8006b30:	4641      	mov	r1, r8
 8006b32:	4638      	mov	r0, r7
 8006b34:	47c8      	blx	r9
 8006b36:	3001      	adds	r0, #1
 8006b38:	d0e6      	beq.n	8006b08 <_printf_common+0xa4>
 8006b3a:	3601      	adds	r6, #1
 8006b3c:	e7d9      	b.n	8006af2 <_printf_common+0x8e>
	...

08006b40 <_printf_i>:
 8006b40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b44:	7e0f      	ldrb	r7, [r1, #24]
 8006b46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006b48:	2f78      	cmp	r7, #120	@ 0x78
 8006b4a:	4691      	mov	r9, r2
 8006b4c:	4680      	mov	r8, r0
 8006b4e:	460c      	mov	r4, r1
 8006b50:	469a      	mov	sl, r3
 8006b52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006b56:	d807      	bhi.n	8006b68 <_printf_i+0x28>
 8006b58:	2f62      	cmp	r7, #98	@ 0x62
 8006b5a:	d80a      	bhi.n	8006b72 <_printf_i+0x32>
 8006b5c:	2f00      	cmp	r7, #0
 8006b5e:	f000 80d2 	beq.w	8006d06 <_printf_i+0x1c6>
 8006b62:	2f58      	cmp	r7, #88	@ 0x58
 8006b64:	f000 80b9 	beq.w	8006cda <_printf_i+0x19a>
 8006b68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b70:	e03a      	b.n	8006be8 <_printf_i+0xa8>
 8006b72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b76:	2b15      	cmp	r3, #21
 8006b78:	d8f6      	bhi.n	8006b68 <_printf_i+0x28>
 8006b7a:	a101      	add	r1, pc, #4	@ (adr r1, 8006b80 <_printf_i+0x40>)
 8006b7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b80:	08006bd9 	.word	0x08006bd9
 8006b84:	08006bed 	.word	0x08006bed
 8006b88:	08006b69 	.word	0x08006b69
 8006b8c:	08006b69 	.word	0x08006b69
 8006b90:	08006b69 	.word	0x08006b69
 8006b94:	08006b69 	.word	0x08006b69
 8006b98:	08006bed 	.word	0x08006bed
 8006b9c:	08006b69 	.word	0x08006b69
 8006ba0:	08006b69 	.word	0x08006b69
 8006ba4:	08006b69 	.word	0x08006b69
 8006ba8:	08006b69 	.word	0x08006b69
 8006bac:	08006ced 	.word	0x08006ced
 8006bb0:	08006c17 	.word	0x08006c17
 8006bb4:	08006ca7 	.word	0x08006ca7
 8006bb8:	08006b69 	.word	0x08006b69
 8006bbc:	08006b69 	.word	0x08006b69
 8006bc0:	08006d0f 	.word	0x08006d0f
 8006bc4:	08006b69 	.word	0x08006b69
 8006bc8:	08006c17 	.word	0x08006c17
 8006bcc:	08006b69 	.word	0x08006b69
 8006bd0:	08006b69 	.word	0x08006b69
 8006bd4:	08006caf 	.word	0x08006caf
 8006bd8:	6833      	ldr	r3, [r6, #0]
 8006bda:	1d1a      	adds	r2, r3, #4
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	6032      	str	r2, [r6, #0]
 8006be0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006be4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006be8:	2301      	movs	r3, #1
 8006bea:	e09d      	b.n	8006d28 <_printf_i+0x1e8>
 8006bec:	6833      	ldr	r3, [r6, #0]
 8006bee:	6820      	ldr	r0, [r4, #0]
 8006bf0:	1d19      	adds	r1, r3, #4
 8006bf2:	6031      	str	r1, [r6, #0]
 8006bf4:	0606      	lsls	r6, r0, #24
 8006bf6:	d501      	bpl.n	8006bfc <_printf_i+0xbc>
 8006bf8:	681d      	ldr	r5, [r3, #0]
 8006bfa:	e003      	b.n	8006c04 <_printf_i+0xc4>
 8006bfc:	0645      	lsls	r5, r0, #25
 8006bfe:	d5fb      	bpl.n	8006bf8 <_printf_i+0xb8>
 8006c00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006c04:	2d00      	cmp	r5, #0
 8006c06:	da03      	bge.n	8006c10 <_printf_i+0xd0>
 8006c08:	232d      	movs	r3, #45	@ 0x2d
 8006c0a:	426d      	negs	r5, r5
 8006c0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c10:	4859      	ldr	r0, [pc, #356]	@ (8006d78 <_printf_i+0x238>)
 8006c12:	230a      	movs	r3, #10
 8006c14:	e011      	b.n	8006c3a <_printf_i+0xfa>
 8006c16:	6821      	ldr	r1, [r4, #0]
 8006c18:	6833      	ldr	r3, [r6, #0]
 8006c1a:	0608      	lsls	r0, r1, #24
 8006c1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006c20:	d402      	bmi.n	8006c28 <_printf_i+0xe8>
 8006c22:	0649      	lsls	r1, r1, #25
 8006c24:	bf48      	it	mi
 8006c26:	b2ad      	uxthmi	r5, r5
 8006c28:	2f6f      	cmp	r7, #111	@ 0x6f
 8006c2a:	4853      	ldr	r0, [pc, #332]	@ (8006d78 <_printf_i+0x238>)
 8006c2c:	6033      	str	r3, [r6, #0]
 8006c2e:	bf14      	ite	ne
 8006c30:	230a      	movne	r3, #10
 8006c32:	2308      	moveq	r3, #8
 8006c34:	2100      	movs	r1, #0
 8006c36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006c3a:	6866      	ldr	r6, [r4, #4]
 8006c3c:	60a6      	str	r6, [r4, #8]
 8006c3e:	2e00      	cmp	r6, #0
 8006c40:	bfa2      	ittt	ge
 8006c42:	6821      	ldrge	r1, [r4, #0]
 8006c44:	f021 0104 	bicge.w	r1, r1, #4
 8006c48:	6021      	strge	r1, [r4, #0]
 8006c4a:	b90d      	cbnz	r5, 8006c50 <_printf_i+0x110>
 8006c4c:	2e00      	cmp	r6, #0
 8006c4e:	d04b      	beq.n	8006ce8 <_printf_i+0x1a8>
 8006c50:	4616      	mov	r6, r2
 8006c52:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c56:	fb03 5711 	mls	r7, r3, r1, r5
 8006c5a:	5dc7      	ldrb	r7, [r0, r7]
 8006c5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c60:	462f      	mov	r7, r5
 8006c62:	42bb      	cmp	r3, r7
 8006c64:	460d      	mov	r5, r1
 8006c66:	d9f4      	bls.n	8006c52 <_printf_i+0x112>
 8006c68:	2b08      	cmp	r3, #8
 8006c6a:	d10b      	bne.n	8006c84 <_printf_i+0x144>
 8006c6c:	6823      	ldr	r3, [r4, #0]
 8006c6e:	07df      	lsls	r7, r3, #31
 8006c70:	d508      	bpl.n	8006c84 <_printf_i+0x144>
 8006c72:	6923      	ldr	r3, [r4, #16]
 8006c74:	6861      	ldr	r1, [r4, #4]
 8006c76:	4299      	cmp	r1, r3
 8006c78:	bfde      	ittt	le
 8006c7a:	2330      	movle	r3, #48	@ 0x30
 8006c7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c80:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006c84:	1b92      	subs	r2, r2, r6
 8006c86:	6122      	str	r2, [r4, #16]
 8006c88:	f8cd a000 	str.w	sl, [sp]
 8006c8c:	464b      	mov	r3, r9
 8006c8e:	aa03      	add	r2, sp, #12
 8006c90:	4621      	mov	r1, r4
 8006c92:	4640      	mov	r0, r8
 8006c94:	f7ff fee6 	bl	8006a64 <_printf_common>
 8006c98:	3001      	adds	r0, #1
 8006c9a:	d14a      	bne.n	8006d32 <_printf_i+0x1f2>
 8006c9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006ca0:	b004      	add	sp, #16
 8006ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ca6:	6823      	ldr	r3, [r4, #0]
 8006ca8:	f043 0320 	orr.w	r3, r3, #32
 8006cac:	6023      	str	r3, [r4, #0]
 8006cae:	4833      	ldr	r0, [pc, #204]	@ (8006d7c <_printf_i+0x23c>)
 8006cb0:	2778      	movs	r7, #120	@ 0x78
 8006cb2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006cb6:	6823      	ldr	r3, [r4, #0]
 8006cb8:	6831      	ldr	r1, [r6, #0]
 8006cba:	061f      	lsls	r7, r3, #24
 8006cbc:	f851 5b04 	ldr.w	r5, [r1], #4
 8006cc0:	d402      	bmi.n	8006cc8 <_printf_i+0x188>
 8006cc2:	065f      	lsls	r7, r3, #25
 8006cc4:	bf48      	it	mi
 8006cc6:	b2ad      	uxthmi	r5, r5
 8006cc8:	6031      	str	r1, [r6, #0]
 8006cca:	07d9      	lsls	r1, r3, #31
 8006ccc:	bf44      	itt	mi
 8006cce:	f043 0320 	orrmi.w	r3, r3, #32
 8006cd2:	6023      	strmi	r3, [r4, #0]
 8006cd4:	b11d      	cbz	r5, 8006cde <_printf_i+0x19e>
 8006cd6:	2310      	movs	r3, #16
 8006cd8:	e7ac      	b.n	8006c34 <_printf_i+0xf4>
 8006cda:	4827      	ldr	r0, [pc, #156]	@ (8006d78 <_printf_i+0x238>)
 8006cdc:	e7e9      	b.n	8006cb2 <_printf_i+0x172>
 8006cde:	6823      	ldr	r3, [r4, #0]
 8006ce0:	f023 0320 	bic.w	r3, r3, #32
 8006ce4:	6023      	str	r3, [r4, #0]
 8006ce6:	e7f6      	b.n	8006cd6 <_printf_i+0x196>
 8006ce8:	4616      	mov	r6, r2
 8006cea:	e7bd      	b.n	8006c68 <_printf_i+0x128>
 8006cec:	6833      	ldr	r3, [r6, #0]
 8006cee:	6825      	ldr	r5, [r4, #0]
 8006cf0:	6961      	ldr	r1, [r4, #20]
 8006cf2:	1d18      	adds	r0, r3, #4
 8006cf4:	6030      	str	r0, [r6, #0]
 8006cf6:	062e      	lsls	r6, r5, #24
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	d501      	bpl.n	8006d00 <_printf_i+0x1c0>
 8006cfc:	6019      	str	r1, [r3, #0]
 8006cfe:	e002      	b.n	8006d06 <_printf_i+0x1c6>
 8006d00:	0668      	lsls	r0, r5, #25
 8006d02:	d5fb      	bpl.n	8006cfc <_printf_i+0x1bc>
 8006d04:	8019      	strh	r1, [r3, #0]
 8006d06:	2300      	movs	r3, #0
 8006d08:	6123      	str	r3, [r4, #16]
 8006d0a:	4616      	mov	r6, r2
 8006d0c:	e7bc      	b.n	8006c88 <_printf_i+0x148>
 8006d0e:	6833      	ldr	r3, [r6, #0]
 8006d10:	1d1a      	adds	r2, r3, #4
 8006d12:	6032      	str	r2, [r6, #0]
 8006d14:	681e      	ldr	r6, [r3, #0]
 8006d16:	6862      	ldr	r2, [r4, #4]
 8006d18:	2100      	movs	r1, #0
 8006d1a:	4630      	mov	r0, r6
 8006d1c:	f7f9 fa70 	bl	8000200 <memchr>
 8006d20:	b108      	cbz	r0, 8006d26 <_printf_i+0x1e6>
 8006d22:	1b80      	subs	r0, r0, r6
 8006d24:	6060      	str	r0, [r4, #4]
 8006d26:	6863      	ldr	r3, [r4, #4]
 8006d28:	6123      	str	r3, [r4, #16]
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d30:	e7aa      	b.n	8006c88 <_printf_i+0x148>
 8006d32:	6923      	ldr	r3, [r4, #16]
 8006d34:	4632      	mov	r2, r6
 8006d36:	4649      	mov	r1, r9
 8006d38:	4640      	mov	r0, r8
 8006d3a:	47d0      	blx	sl
 8006d3c:	3001      	adds	r0, #1
 8006d3e:	d0ad      	beq.n	8006c9c <_printf_i+0x15c>
 8006d40:	6823      	ldr	r3, [r4, #0]
 8006d42:	079b      	lsls	r3, r3, #30
 8006d44:	d413      	bmi.n	8006d6e <_printf_i+0x22e>
 8006d46:	68e0      	ldr	r0, [r4, #12]
 8006d48:	9b03      	ldr	r3, [sp, #12]
 8006d4a:	4298      	cmp	r0, r3
 8006d4c:	bfb8      	it	lt
 8006d4e:	4618      	movlt	r0, r3
 8006d50:	e7a6      	b.n	8006ca0 <_printf_i+0x160>
 8006d52:	2301      	movs	r3, #1
 8006d54:	4632      	mov	r2, r6
 8006d56:	4649      	mov	r1, r9
 8006d58:	4640      	mov	r0, r8
 8006d5a:	47d0      	blx	sl
 8006d5c:	3001      	adds	r0, #1
 8006d5e:	d09d      	beq.n	8006c9c <_printf_i+0x15c>
 8006d60:	3501      	adds	r5, #1
 8006d62:	68e3      	ldr	r3, [r4, #12]
 8006d64:	9903      	ldr	r1, [sp, #12]
 8006d66:	1a5b      	subs	r3, r3, r1
 8006d68:	42ab      	cmp	r3, r5
 8006d6a:	dcf2      	bgt.n	8006d52 <_printf_i+0x212>
 8006d6c:	e7eb      	b.n	8006d46 <_printf_i+0x206>
 8006d6e:	2500      	movs	r5, #0
 8006d70:	f104 0619 	add.w	r6, r4, #25
 8006d74:	e7f5      	b.n	8006d62 <_printf_i+0x222>
 8006d76:	bf00      	nop
 8006d78:	080093b6 	.word	0x080093b6
 8006d7c:	080093c7 	.word	0x080093c7

08006d80 <sniprintf>:
 8006d80:	b40c      	push	{r2, r3}
 8006d82:	b530      	push	{r4, r5, lr}
 8006d84:	4b17      	ldr	r3, [pc, #92]	@ (8006de4 <sniprintf+0x64>)
 8006d86:	1e0c      	subs	r4, r1, #0
 8006d88:	681d      	ldr	r5, [r3, #0]
 8006d8a:	b09d      	sub	sp, #116	@ 0x74
 8006d8c:	da08      	bge.n	8006da0 <sniprintf+0x20>
 8006d8e:	238b      	movs	r3, #139	@ 0x8b
 8006d90:	602b      	str	r3, [r5, #0]
 8006d92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006d96:	b01d      	add	sp, #116	@ 0x74
 8006d98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d9c:	b002      	add	sp, #8
 8006d9e:	4770      	bx	lr
 8006da0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006da4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006da8:	bf14      	ite	ne
 8006daa:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8006dae:	4623      	moveq	r3, r4
 8006db0:	9304      	str	r3, [sp, #16]
 8006db2:	9307      	str	r3, [sp, #28]
 8006db4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006db8:	9002      	str	r0, [sp, #8]
 8006dba:	9006      	str	r0, [sp, #24]
 8006dbc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006dc0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006dc2:	ab21      	add	r3, sp, #132	@ 0x84
 8006dc4:	a902      	add	r1, sp, #8
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	9301      	str	r3, [sp, #4]
 8006dca:	f001 f85d 	bl	8007e88 <_svfiprintf_r>
 8006dce:	1c43      	adds	r3, r0, #1
 8006dd0:	bfbc      	itt	lt
 8006dd2:	238b      	movlt	r3, #139	@ 0x8b
 8006dd4:	602b      	strlt	r3, [r5, #0]
 8006dd6:	2c00      	cmp	r4, #0
 8006dd8:	d0dd      	beq.n	8006d96 <sniprintf+0x16>
 8006dda:	9b02      	ldr	r3, [sp, #8]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	701a      	strb	r2, [r3, #0]
 8006de0:	e7d9      	b.n	8006d96 <sniprintf+0x16>
 8006de2:	bf00      	nop
 8006de4:	20000090 	.word	0x20000090

08006de8 <siprintf>:
 8006de8:	b40e      	push	{r1, r2, r3}
 8006dea:	b500      	push	{lr}
 8006dec:	b09c      	sub	sp, #112	@ 0x70
 8006dee:	ab1d      	add	r3, sp, #116	@ 0x74
 8006df0:	9002      	str	r0, [sp, #8]
 8006df2:	9006      	str	r0, [sp, #24]
 8006df4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006df8:	4809      	ldr	r0, [pc, #36]	@ (8006e20 <siprintf+0x38>)
 8006dfa:	9107      	str	r1, [sp, #28]
 8006dfc:	9104      	str	r1, [sp, #16]
 8006dfe:	4909      	ldr	r1, [pc, #36]	@ (8006e24 <siprintf+0x3c>)
 8006e00:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e04:	9105      	str	r1, [sp, #20]
 8006e06:	6800      	ldr	r0, [r0, #0]
 8006e08:	9301      	str	r3, [sp, #4]
 8006e0a:	a902      	add	r1, sp, #8
 8006e0c:	f001 f83c 	bl	8007e88 <_svfiprintf_r>
 8006e10:	9b02      	ldr	r3, [sp, #8]
 8006e12:	2200      	movs	r2, #0
 8006e14:	701a      	strb	r2, [r3, #0]
 8006e16:	b01c      	add	sp, #112	@ 0x70
 8006e18:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e1c:	b003      	add	sp, #12
 8006e1e:	4770      	bx	lr
 8006e20:	20000090 	.word	0x20000090
 8006e24:	ffff0208 	.word	0xffff0208

08006e28 <srand>:
 8006e28:	b538      	push	{r3, r4, r5, lr}
 8006e2a:	4b10      	ldr	r3, [pc, #64]	@ (8006e6c <srand+0x44>)
 8006e2c:	681d      	ldr	r5, [r3, #0]
 8006e2e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8006e30:	4604      	mov	r4, r0
 8006e32:	b9b3      	cbnz	r3, 8006e62 <srand+0x3a>
 8006e34:	2018      	movs	r0, #24
 8006e36:	f001 f923 	bl	8008080 <malloc>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	6328      	str	r0, [r5, #48]	@ 0x30
 8006e3e:	b920      	cbnz	r0, 8006e4a <srand+0x22>
 8006e40:	4b0b      	ldr	r3, [pc, #44]	@ (8006e70 <srand+0x48>)
 8006e42:	480c      	ldr	r0, [pc, #48]	@ (8006e74 <srand+0x4c>)
 8006e44:	2146      	movs	r1, #70	@ 0x46
 8006e46:	f000 f957 	bl	80070f8 <__assert_func>
 8006e4a:	490b      	ldr	r1, [pc, #44]	@ (8006e78 <srand+0x50>)
 8006e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8006e7c <srand+0x54>)
 8006e4e:	e9c0 1300 	strd	r1, r3, [r0]
 8006e52:	4b0b      	ldr	r3, [pc, #44]	@ (8006e80 <srand+0x58>)
 8006e54:	6083      	str	r3, [r0, #8]
 8006e56:	230b      	movs	r3, #11
 8006e58:	8183      	strh	r3, [r0, #12]
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	2001      	movs	r0, #1
 8006e5e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006e62:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8006e64:	2200      	movs	r2, #0
 8006e66:	611c      	str	r4, [r3, #16]
 8006e68:	615a      	str	r2, [r3, #20]
 8006e6a:	bd38      	pop	{r3, r4, r5, pc}
 8006e6c:	20000090 	.word	0x20000090
 8006e70:	080093d8 	.word	0x080093d8
 8006e74:	080093ef 	.word	0x080093ef
 8006e78:	abcd330e 	.word	0xabcd330e
 8006e7c:	e66d1234 	.word	0xe66d1234
 8006e80:	0005deec 	.word	0x0005deec

08006e84 <rand>:
 8006e84:	4b16      	ldr	r3, [pc, #88]	@ (8006ee0 <rand+0x5c>)
 8006e86:	b510      	push	{r4, lr}
 8006e88:	681c      	ldr	r4, [r3, #0]
 8006e8a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006e8c:	b9b3      	cbnz	r3, 8006ebc <rand+0x38>
 8006e8e:	2018      	movs	r0, #24
 8006e90:	f001 f8f6 	bl	8008080 <malloc>
 8006e94:	4602      	mov	r2, r0
 8006e96:	6320      	str	r0, [r4, #48]	@ 0x30
 8006e98:	b920      	cbnz	r0, 8006ea4 <rand+0x20>
 8006e9a:	4b12      	ldr	r3, [pc, #72]	@ (8006ee4 <rand+0x60>)
 8006e9c:	4812      	ldr	r0, [pc, #72]	@ (8006ee8 <rand+0x64>)
 8006e9e:	2152      	movs	r1, #82	@ 0x52
 8006ea0:	f000 f92a 	bl	80070f8 <__assert_func>
 8006ea4:	4911      	ldr	r1, [pc, #68]	@ (8006eec <rand+0x68>)
 8006ea6:	4b12      	ldr	r3, [pc, #72]	@ (8006ef0 <rand+0x6c>)
 8006ea8:	e9c0 1300 	strd	r1, r3, [r0]
 8006eac:	4b11      	ldr	r3, [pc, #68]	@ (8006ef4 <rand+0x70>)
 8006eae:	6083      	str	r3, [r0, #8]
 8006eb0:	230b      	movs	r3, #11
 8006eb2:	8183      	strh	r3, [r0, #12]
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	2001      	movs	r0, #1
 8006eb8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006ebc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006ebe:	480e      	ldr	r0, [pc, #56]	@ (8006ef8 <rand+0x74>)
 8006ec0:	690b      	ldr	r3, [r1, #16]
 8006ec2:	694c      	ldr	r4, [r1, #20]
 8006ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8006efc <rand+0x78>)
 8006ec6:	4358      	muls	r0, r3
 8006ec8:	fb02 0004 	mla	r0, r2, r4, r0
 8006ecc:	fba3 3202 	umull	r3, r2, r3, r2
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	eb40 0002 	adc.w	r0, r0, r2
 8006ed6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8006eda:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8006ede:	bd10      	pop	{r4, pc}
 8006ee0:	20000090 	.word	0x20000090
 8006ee4:	080093d8 	.word	0x080093d8
 8006ee8:	080093ef 	.word	0x080093ef
 8006eec:	abcd330e 	.word	0xabcd330e
 8006ef0:	e66d1234 	.word	0xe66d1234
 8006ef4:	0005deec 	.word	0x0005deec
 8006ef8:	5851f42d 	.word	0x5851f42d
 8006efc:	4c957f2d 	.word	0x4c957f2d

08006f00 <std>:
 8006f00:	2300      	movs	r3, #0
 8006f02:	b510      	push	{r4, lr}
 8006f04:	4604      	mov	r4, r0
 8006f06:	e9c0 3300 	strd	r3, r3, [r0]
 8006f0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f0e:	6083      	str	r3, [r0, #8]
 8006f10:	8181      	strh	r1, [r0, #12]
 8006f12:	6643      	str	r3, [r0, #100]	@ 0x64
 8006f14:	81c2      	strh	r2, [r0, #14]
 8006f16:	6183      	str	r3, [r0, #24]
 8006f18:	4619      	mov	r1, r3
 8006f1a:	2208      	movs	r2, #8
 8006f1c:	305c      	adds	r0, #92	@ 0x5c
 8006f1e:	f000 f8b1 	bl	8007084 <memset>
 8006f22:	4b0d      	ldr	r3, [pc, #52]	@ (8006f58 <std+0x58>)
 8006f24:	6263      	str	r3, [r4, #36]	@ 0x24
 8006f26:	4b0d      	ldr	r3, [pc, #52]	@ (8006f5c <std+0x5c>)
 8006f28:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8006f60 <std+0x60>)
 8006f2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006f64 <std+0x64>)
 8006f30:	6323      	str	r3, [r4, #48]	@ 0x30
 8006f32:	4b0d      	ldr	r3, [pc, #52]	@ (8006f68 <std+0x68>)
 8006f34:	6224      	str	r4, [r4, #32]
 8006f36:	429c      	cmp	r4, r3
 8006f38:	d006      	beq.n	8006f48 <std+0x48>
 8006f3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006f3e:	4294      	cmp	r4, r2
 8006f40:	d002      	beq.n	8006f48 <std+0x48>
 8006f42:	33d0      	adds	r3, #208	@ 0xd0
 8006f44:	429c      	cmp	r4, r3
 8006f46:	d105      	bne.n	8006f54 <std+0x54>
 8006f48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f50:	f000 b8ce 	b.w	80070f0 <__retarget_lock_init_recursive>
 8006f54:	bd10      	pop	{r4, pc}
 8006f56:	bf00      	nop
 8006f58:	08008a49 	.word	0x08008a49
 8006f5c:	08008a6b 	.word	0x08008a6b
 8006f60:	08008aa3 	.word	0x08008aa3
 8006f64:	08008ac7 	.word	0x08008ac7
 8006f68:	200003c8 	.word	0x200003c8

08006f6c <stdio_exit_handler>:
 8006f6c:	4a02      	ldr	r2, [pc, #8]	@ (8006f78 <stdio_exit_handler+0xc>)
 8006f6e:	4903      	ldr	r1, [pc, #12]	@ (8006f7c <stdio_exit_handler+0x10>)
 8006f70:	4803      	ldr	r0, [pc, #12]	@ (8006f80 <stdio_exit_handler+0x14>)
 8006f72:	f000 b869 	b.w	8007048 <_fwalk_sglue>
 8006f76:	bf00      	nop
 8006f78:	20000084 	.word	0x20000084
 8006f7c:	080082dd 	.word	0x080082dd
 8006f80:	20000094 	.word	0x20000094

08006f84 <cleanup_stdio>:
 8006f84:	6841      	ldr	r1, [r0, #4]
 8006f86:	4b0c      	ldr	r3, [pc, #48]	@ (8006fb8 <cleanup_stdio+0x34>)
 8006f88:	4299      	cmp	r1, r3
 8006f8a:	b510      	push	{r4, lr}
 8006f8c:	4604      	mov	r4, r0
 8006f8e:	d001      	beq.n	8006f94 <cleanup_stdio+0x10>
 8006f90:	f001 f9a4 	bl	80082dc <_fflush_r>
 8006f94:	68a1      	ldr	r1, [r4, #8]
 8006f96:	4b09      	ldr	r3, [pc, #36]	@ (8006fbc <cleanup_stdio+0x38>)
 8006f98:	4299      	cmp	r1, r3
 8006f9a:	d002      	beq.n	8006fa2 <cleanup_stdio+0x1e>
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	f001 f99d 	bl	80082dc <_fflush_r>
 8006fa2:	68e1      	ldr	r1, [r4, #12]
 8006fa4:	4b06      	ldr	r3, [pc, #24]	@ (8006fc0 <cleanup_stdio+0x3c>)
 8006fa6:	4299      	cmp	r1, r3
 8006fa8:	d004      	beq.n	8006fb4 <cleanup_stdio+0x30>
 8006faa:	4620      	mov	r0, r4
 8006fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fb0:	f001 b994 	b.w	80082dc <_fflush_r>
 8006fb4:	bd10      	pop	{r4, pc}
 8006fb6:	bf00      	nop
 8006fb8:	200003c8 	.word	0x200003c8
 8006fbc:	20000430 	.word	0x20000430
 8006fc0:	20000498 	.word	0x20000498

08006fc4 <global_stdio_init.part.0>:
 8006fc4:	b510      	push	{r4, lr}
 8006fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ff4 <global_stdio_init.part.0+0x30>)
 8006fc8:	4c0b      	ldr	r4, [pc, #44]	@ (8006ff8 <global_stdio_init.part.0+0x34>)
 8006fca:	4a0c      	ldr	r2, [pc, #48]	@ (8006ffc <global_stdio_init.part.0+0x38>)
 8006fcc:	601a      	str	r2, [r3, #0]
 8006fce:	4620      	mov	r0, r4
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	2104      	movs	r1, #4
 8006fd4:	f7ff ff94 	bl	8006f00 <std>
 8006fd8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006fdc:	2201      	movs	r2, #1
 8006fde:	2109      	movs	r1, #9
 8006fe0:	f7ff ff8e 	bl	8006f00 <std>
 8006fe4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006fe8:	2202      	movs	r2, #2
 8006fea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fee:	2112      	movs	r1, #18
 8006ff0:	f7ff bf86 	b.w	8006f00 <std>
 8006ff4:	20000500 	.word	0x20000500
 8006ff8:	200003c8 	.word	0x200003c8
 8006ffc:	08006f6d 	.word	0x08006f6d

08007000 <__sfp_lock_acquire>:
 8007000:	4801      	ldr	r0, [pc, #4]	@ (8007008 <__sfp_lock_acquire+0x8>)
 8007002:	f000 b876 	b.w	80070f2 <__retarget_lock_acquire_recursive>
 8007006:	bf00      	nop
 8007008:	20000505 	.word	0x20000505

0800700c <__sfp_lock_release>:
 800700c:	4801      	ldr	r0, [pc, #4]	@ (8007014 <__sfp_lock_release+0x8>)
 800700e:	f000 b871 	b.w	80070f4 <__retarget_lock_release_recursive>
 8007012:	bf00      	nop
 8007014:	20000505 	.word	0x20000505

08007018 <__sinit>:
 8007018:	b510      	push	{r4, lr}
 800701a:	4604      	mov	r4, r0
 800701c:	f7ff fff0 	bl	8007000 <__sfp_lock_acquire>
 8007020:	6a23      	ldr	r3, [r4, #32]
 8007022:	b11b      	cbz	r3, 800702c <__sinit+0x14>
 8007024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007028:	f7ff bff0 	b.w	800700c <__sfp_lock_release>
 800702c:	4b04      	ldr	r3, [pc, #16]	@ (8007040 <__sinit+0x28>)
 800702e:	6223      	str	r3, [r4, #32]
 8007030:	4b04      	ldr	r3, [pc, #16]	@ (8007044 <__sinit+0x2c>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1f5      	bne.n	8007024 <__sinit+0xc>
 8007038:	f7ff ffc4 	bl	8006fc4 <global_stdio_init.part.0>
 800703c:	e7f2      	b.n	8007024 <__sinit+0xc>
 800703e:	bf00      	nop
 8007040:	08006f85 	.word	0x08006f85
 8007044:	20000500 	.word	0x20000500

08007048 <_fwalk_sglue>:
 8007048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800704c:	4607      	mov	r7, r0
 800704e:	4688      	mov	r8, r1
 8007050:	4614      	mov	r4, r2
 8007052:	2600      	movs	r6, #0
 8007054:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007058:	f1b9 0901 	subs.w	r9, r9, #1
 800705c:	d505      	bpl.n	800706a <_fwalk_sglue+0x22>
 800705e:	6824      	ldr	r4, [r4, #0]
 8007060:	2c00      	cmp	r4, #0
 8007062:	d1f7      	bne.n	8007054 <_fwalk_sglue+0xc>
 8007064:	4630      	mov	r0, r6
 8007066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800706a:	89ab      	ldrh	r3, [r5, #12]
 800706c:	2b01      	cmp	r3, #1
 800706e:	d907      	bls.n	8007080 <_fwalk_sglue+0x38>
 8007070:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007074:	3301      	adds	r3, #1
 8007076:	d003      	beq.n	8007080 <_fwalk_sglue+0x38>
 8007078:	4629      	mov	r1, r5
 800707a:	4638      	mov	r0, r7
 800707c:	47c0      	blx	r8
 800707e:	4306      	orrs	r6, r0
 8007080:	3568      	adds	r5, #104	@ 0x68
 8007082:	e7e9      	b.n	8007058 <_fwalk_sglue+0x10>

08007084 <memset>:
 8007084:	4402      	add	r2, r0
 8007086:	4603      	mov	r3, r0
 8007088:	4293      	cmp	r3, r2
 800708a:	d100      	bne.n	800708e <memset+0xa>
 800708c:	4770      	bx	lr
 800708e:	f803 1b01 	strb.w	r1, [r3], #1
 8007092:	e7f9      	b.n	8007088 <memset+0x4>

08007094 <_localeconv_r>:
 8007094:	4800      	ldr	r0, [pc, #0]	@ (8007098 <_localeconv_r+0x4>)
 8007096:	4770      	bx	lr
 8007098:	200001d0 	.word	0x200001d0

0800709c <__errno>:
 800709c:	4b01      	ldr	r3, [pc, #4]	@ (80070a4 <__errno+0x8>)
 800709e:	6818      	ldr	r0, [r3, #0]
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	20000090 	.word	0x20000090

080070a8 <__libc_init_array>:
 80070a8:	b570      	push	{r4, r5, r6, lr}
 80070aa:	4d0d      	ldr	r5, [pc, #52]	@ (80070e0 <__libc_init_array+0x38>)
 80070ac:	4c0d      	ldr	r4, [pc, #52]	@ (80070e4 <__libc_init_array+0x3c>)
 80070ae:	1b64      	subs	r4, r4, r5
 80070b0:	10a4      	asrs	r4, r4, #2
 80070b2:	2600      	movs	r6, #0
 80070b4:	42a6      	cmp	r6, r4
 80070b6:	d109      	bne.n	80070cc <__libc_init_array+0x24>
 80070b8:	4d0b      	ldr	r5, [pc, #44]	@ (80070e8 <__libc_init_array+0x40>)
 80070ba:	4c0c      	ldr	r4, [pc, #48]	@ (80070ec <__libc_init_array+0x44>)
 80070bc:	f002 f8f2 	bl	80092a4 <_init>
 80070c0:	1b64      	subs	r4, r4, r5
 80070c2:	10a4      	asrs	r4, r4, #2
 80070c4:	2600      	movs	r6, #0
 80070c6:	42a6      	cmp	r6, r4
 80070c8:	d105      	bne.n	80070d6 <__libc_init_array+0x2e>
 80070ca:	bd70      	pop	{r4, r5, r6, pc}
 80070cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80070d0:	4798      	blx	r3
 80070d2:	3601      	adds	r6, #1
 80070d4:	e7ee      	b.n	80070b4 <__libc_init_array+0xc>
 80070d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80070da:	4798      	blx	r3
 80070dc:	3601      	adds	r6, #1
 80070de:	e7f2      	b.n	80070c6 <__libc_init_array+0x1e>
 80070e0:	08009774 	.word	0x08009774
 80070e4:	08009774 	.word	0x08009774
 80070e8:	08009774 	.word	0x08009774
 80070ec:	08009778 	.word	0x08009778

080070f0 <__retarget_lock_init_recursive>:
 80070f0:	4770      	bx	lr

080070f2 <__retarget_lock_acquire_recursive>:
 80070f2:	4770      	bx	lr

080070f4 <__retarget_lock_release_recursive>:
 80070f4:	4770      	bx	lr
	...

080070f8 <__assert_func>:
 80070f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80070fa:	4614      	mov	r4, r2
 80070fc:	461a      	mov	r2, r3
 80070fe:	4b09      	ldr	r3, [pc, #36]	@ (8007124 <__assert_func+0x2c>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4605      	mov	r5, r0
 8007104:	68d8      	ldr	r0, [r3, #12]
 8007106:	b954      	cbnz	r4, 800711e <__assert_func+0x26>
 8007108:	4b07      	ldr	r3, [pc, #28]	@ (8007128 <__assert_func+0x30>)
 800710a:	461c      	mov	r4, r3
 800710c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007110:	9100      	str	r1, [sp, #0]
 8007112:	462b      	mov	r3, r5
 8007114:	4905      	ldr	r1, [pc, #20]	@ (800712c <__assert_func+0x34>)
 8007116:	f001 fcdb 	bl	8008ad0 <fiprintf>
 800711a:	f001 fd97 	bl	8008c4c <abort>
 800711e:	4b04      	ldr	r3, [pc, #16]	@ (8007130 <__assert_func+0x38>)
 8007120:	e7f4      	b.n	800710c <__assert_func+0x14>
 8007122:	bf00      	nop
 8007124:	20000090 	.word	0x20000090
 8007128:	08009482 	.word	0x08009482
 800712c:	08009454 	.word	0x08009454
 8007130:	08009447 	.word	0x08009447

08007134 <quorem>:
 8007134:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007138:	6903      	ldr	r3, [r0, #16]
 800713a:	690c      	ldr	r4, [r1, #16]
 800713c:	42a3      	cmp	r3, r4
 800713e:	4607      	mov	r7, r0
 8007140:	db7e      	blt.n	8007240 <quorem+0x10c>
 8007142:	3c01      	subs	r4, #1
 8007144:	f101 0814 	add.w	r8, r1, #20
 8007148:	00a3      	lsls	r3, r4, #2
 800714a:	f100 0514 	add.w	r5, r0, #20
 800714e:	9300      	str	r3, [sp, #0]
 8007150:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007154:	9301      	str	r3, [sp, #4]
 8007156:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800715a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800715e:	3301      	adds	r3, #1
 8007160:	429a      	cmp	r2, r3
 8007162:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007166:	fbb2 f6f3 	udiv	r6, r2, r3
 800716a:	d32e      	bcc.n	80071ca <quorem+0x96>
 800716c:	f04f 0a00 	mov.w	sl, #0
 8007170:	46c4      	mov	ip, r8
 8007172:	46ae      	mov	lr, r5
 8007174:	46d3      	mov	fp, sl
 8007176:	f85c 3b04 	ldr.w	r3, [ip], #4
 800717a:	b298      	uxth	r0, r3
 800717c:	fb06 a000 	mla	r0, r6, r0, sl
 8007180:	0c02      	lsrs	r2, r0, #16
 8007182:	0c1b      	lsrs	r3, r3, #16
 8007184:	fb06 2303 	mla	r3, r6, r3, r2
 8007188:	f8de 2000 	ldr.w	r2, [lr]
 800718c:	b280      	uxth	r0, r0
 800718e:	b292      	uxth	r2, r2
 8007190:	1a12      	subs	r2, r2, r0
 8007192:	445a      	add	r2, fp
 8007194:	f8de 0000 	ldr.w	r0, [lr]
 8007198:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800719c:	b29b      	uxth	r3, r3
 800719e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80071a2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80071a6:	b292      	uxth	r2, r2
 80071a8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80071ac:	45e1      	cmp	r9, ip
 80071ae:	f84e 2b04 	str.w	r2, [lr], #4
 80071b2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80071b6:	d2de      	bcs.n	8007176 <quorem+0x42>
 80071b8:	9b00      	ldr	r3, [sp, #0]
 80071ba:	58eb      	ldr	r3, [r5, r3]
 80071bc:	b92b      	cbnz	r3, 80071ca <quorem+0x96>
 80071be:	9b01      	ldr	r3, [sp, #4]
 80071c0:	3b04      	subs	r3, #4
 80071c2:	429d      	cmp	r5, r3
 80071c4:	461a      	mov	r2, r3
 80071c6:	d32f      	bcc.n	8007228 <quorem+0xf4>
 80071c8:	613c      	str	r4, [r7, #16]
 80071ca:	4638      	mov	r0, r7
 80071cc:	f001 fb34 	bl	8008838 <__mcmp>
 80071d0:	2800      	cmp	r0, #0
 80071d2:	db25      	blt.n	8007220 <quorem+0xec>
 80071d4:	4629      	mov	r1, r5
 80071d6:	2000      	movs	r0, #0
 80071d8:	f858 2b04 	ldr.w	r2, [r8], #4
 80071dc:	f8d1 c000 	ldr.w	ip, [r1]
 80071e0:	fa1f fe82 	uxth.w	lr, r2
 80071e4:	fa1f f38c 	uxth.w	r3, ip
 80071e8:	eba3 030e 	sub.w	r3, r3, lr
 80071ec:	4403      	add	r3, r0
 80071ee:	0c12      	lsrs	r2, r2, #16
 80071f0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80071f4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071fe:	45c1      	cmp	r9, r8
 8007200:	f841 3b04 	str.w	r3, [r1], #4
 8007204:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007208:	d2e6      	bcs.n	80071d8 <quorem+0xa4>
 800720a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800720e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007212:	b922      	cbnz	r2, 800721e <quorem+0xea>
 8007214:	3b04      	subs	r3, #4
 8007216:	429d      	cmp	r5, r3
 8007218:	461a      	mov	r2, r3
 800721a:	d30b      	bcc.n	8007234 <quorem+0x100>
 800721c:	613c      	str	r4, [r7, #16]
 800721e:	3601      	adds	r6, #1
 8007220:	4630      	mov	r0, r6
 8007222:	b003      	add	sp, #12
 8007224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007228:	6812      	ldr	r2, [r2, #0]
 800722a:	3b04      	subs	r3, #4
 800722c:	2a00      	cmp	r2, #0
 800722e:	d1cb      	bne.n	80071c8 <quorem+0x94>
 8007230:	3c01      	subs	r4, #1
 8007232:	e7c6      	b.n	80071c2 <quorem+0x8e>
 8007234:	6812      	ldr	r2, [r2, #0]
 8007236:	3b04      	subs	r3, #4
 8007238:	2a00      	cmp	r2, #0
 800723a:	d1ef      	bne.n	800721c <quorem+0xe8>
 800723c:	3c01      	subs	r4, #1
 800723e:	e7ea      	b.n	8007216 <quorem+0xe2>
 8007240:	2000      	movs	r0, #0
 8007242:	e7ee      	b.n	8007222 <quorem+0xee>
 8007244:	0000      	movs	r0, r0
	...

08007248 <_dtoa_r>:
 8007248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800724c:	69c7      	ldr	r7, [r0, #28]
 800724e:	b099      	sub	sp, #100	@ 0x64
 8007250:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007254:	ec55 4b10 	vmov	r4, r5, d0
 8007258:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800725a:	9109      	str	r1, [sp, #36]	@ 0x24
 800725c:	4683      	mov	fp, r0
 800725e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007260:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007262:	b97f      	cbnz	r7, 8007284 <_dtoa_r+0x3c>
 8007264:	2010      	movs	r0, #16
 8007266:	f000 ff0b 	bl	8008080 <malloc>
 800726a:	4602      	mov	r2, r0
 800726c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007270:	b920      	cbnz	r0, 800727c <_dtoa_r+0x34>
 8007272:	4ba7      	ldr	r3, [pc, #668]	@ (8007510 <_dtoa_r+0x2c8>)
 8007274:	21ef      	movs	r1, #239	@ 0xef
 8007276:	48a7      	ldr	r0, [pc, #668]	@ (8007514 <_dtoa_r+0x2cc>)
 8007278:	f7ff ff3e 	bl	80070f8 <__assert_func>
 800727c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007280:	6007      	str	r7, [r0, #0]
 8007282:	60c7      	str	r7, [r0, #12]
 8007284:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007288:	6819      	ldr	r1, [r3, #0]
 800728a:	b159      	cbz	r1, 80072a4 <_dtoa_r+0x5c>
 800728c:	685a      	ldr	r2, [r3, #4]
 800728e:	604a      	str	r2, [r1, #4]
 8007290:	2301      	movs	r3, #1
 8007292:	4093      	lsls	r3, r2
 8007294:	608b      	str	r3, [r1, #8]
 8007296:	4658      	mov	r0, fp
 8007298:	f001 f894 	bl	80083c4 <_Bfree>
 800729c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80072a0:	2200      	movs	r2, #0
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	1e2b      	subs	r3, r5, #0
 80072a6:	bfb9      	ittee	lt
 80072a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80072ac:	9303      	strlt	r3, [sp, #12]
 80072ae:	2300      	movge	r3, #0
 80072b0:	6033      	strge	r3, [r6, #0]
 80072b2:	9f03      	ldr	r7, [sp, #12]
 80072b4:	4b98      	ldr	r3, [pc, #608]	@ (8007518 <_dtoa_r+0x2d0>)
 80072b6:	bfbc      	itt	lt
 80072b8:	2201      	movlt	r2, #1
 80072ba:	6032      	strlt	r2, [r6, #0]
 80072bc:	43bb      	bics	r3, r7
 80072be:	d112      	bne.n	80072e6 <_dtoa_r+0x9e>
 80072c0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80072c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80072c6:	6013      	str	r3, [r2, #0]
 80072c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80072cc:	4323      	orrs	r3, r4
 80072ce:	f000 854d 	beq.w	8007d6c <_dtoa_r+0xb24>
 80072d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80072d4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800752c <_dtoa_r+0x2e4>
 80072d8:	2b00      	cmp	r3, #0
 80072da:	f000 854f 	beq.w	8007d7c <_dtoa_r+0xb34>
 80072de:	f10a 0303 	add.w	r3, sl, #3
 80072e2:	f000 bd49 	b.w	8007d78 <_dtoa_r+0xb30>
 80072e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80072ea:	2200      	movs	r2, #0
 80072ec:	ec51 0b17 	vmov	r0, r1, d7
 80072f0:	2300      	movs	r3, #0
 80072f2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80072f6:	f7f9 fc09 	bl	8000b0c <__aeabi_dcmpeq>
 80072fa:	4680      	mov	r8, r0
 80072fc:	b158      	cbz	r0, 8007316 <_dtoa_r+0xce>
 80072fe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007300:	2301      	movs	r3, #1
 8007302:	6013      	str	r3, [r2, #0]
 8007304:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007306:	b113      	cbz	r3, 800730e <_dtoa_r+0xc6>
 8007308:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800730a:	4b84      	ldr	r3, [pc, #528]	@ (800751c <_dtoa_r+0x2d4>)
 800730c:	6013      	str	r3, [r2, #0]
 800730e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007530 <_dtoa_r+0x2e8>
 8007312:	f000 bd33 	b.w	8007d7c <_dtoa_r+0xb34>
 8007316:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800731a:	aa16      	add	r2, sp, #88	@ 0x58
 800731c:	a917      	add	r1, sp, #92	@ 0x5c
 800731e:	4658      	mov	r0, fp
 8007320:	f001 fb3a 	bl	8008998 <__d2b>
 8007324:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007328:	4681      	mov	r9, r0
 800732a:	2e00      	cmp	r6, #0
 800732c:	d077      	beq.n	800741e <_dtoa_r+0x1d6>
 800732e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007330:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007338:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800733c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007340:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007344:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007348:	4619      	mov	r1, r3
 800734a:	2200      	movs	r2, #0
 800734c:	4b74      	ldr	r3, [pc, #464]	@ (8007520 <_dtoa_r+0x2d8>)
 800734e:	f7f8 ffbd 	bl	80002cc <__aeabi_dsub>
 8007352:	a369      	add	r3, pc, #420	@ (adr r3, 80074f8 <_dtoa_r+0x2b0>)
 8007354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007358:	f7f9 f970 	bl	800063c <__aeabi_dmul>
 800735c:	a368      	add	r3, pc, #416	@ (adr r3, 8007500 <_dtoa_r+0x2b8>)
 800735e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007362:	f7f8 ffb5 	bl	80002d0 <__adddf3>
 8007366:	4604      	mov	r4, r0
 8007368:	4630      	mov	r0, r6
 800736a:	460d      	mov	r5, r1
 800736c:	f7f9 f8fc 	bl	8000568 <__aeabi_i2d>
 8007370:	a365      	add	r3, pc, #404	@ (adr r3, 8007508 <_dtoa_r+0x2c0>)
 8007372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007376:	f7f9 f961 	bl	800063c <__aeabi_dmul>
 800737a:	4602      	mov	r2, r0
 800737c:	460b      	mov	r3, r1
 800737e:	4620      	mov	r0, r4
 8007380:	4629      	mov	r1, r5
 8007382:	f7f8 ffa5 	bl	80002d0 <__adddf3>
 8007386:	4604      	mov	r4, r0
 8007388:	460d      	mov	r5, r1
 800738a:	f7f9 fc07 	bl	8000b9c <__aeabi_d2iz>
 800738e:	2200      	movs	r2, #0
 8007390:	4607      	mov	r7, r0
 8007392:	2300      	movs	r3, #0
 8007394:	4620      	mov	r0, r4
 8007396:	4629      	mov	r1, r5
 8007398:	f7f9 fbc2 	bl	8000b20 <__aeabi_dcmplt>
 800739c:	b140      	cbz	r0, 80073b0 <_dtoa_r+0x168>
 800739e:	4638      	mov	r0, r7
 80073a0:	f7f9 f8e2 	bl	8000568 <__aeabi_i2d>
 80073a4:	4622      	mov	r2, r4
 80073a6:	462b      	mov	r3, r5
 80073a8:	f7f9 fbb0 	bl	8000b0c <__aeabi_dcmpeq>
 80073ac:	b900      	cbnz	r0, 80073b0 <_dtoa_r+0x168>
 80073ae:	3f01      	subs	r7, #1
 80073b0:	2f16      	cmp	r7, #22
 80073b2:	d851      	bhi.n	8007458 <_dtoa_r+0x210>
 80073b4:	4b5b      	ldr	r3, [pc, #364]	@ (8007524 <_dtoa_r+0x2dc>)
 80073b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80073ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073c2:	f7f9 fbad 	bl	8000b20 <__aeabi_dcmplt>
 80073c6:	2800      	cmp	r0, #0
 80073c8:	d048      	beq.n	800745c <_dtoa_r+0x214>
 80073ca:	3f01      	subs	r7, #1
 80073cc:	2300      	movs	r3, #0
 80073ce:	9312      	str	r3, [sp, #72]	@ 0x48
 80073d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80073d2:	1b9b      	subs	r3, r3, r6
 80073d4:	1e5a      	subs	r2, r3, #1
 80073d6:	bf44      	itt	mi
 80073d8:	f1c3 0801 	rsbmi	r8, r3, #1
 80073dc:	2300      	movmi	r3, #0
 80073de:	9208      	str	r2, [sp, #32]
 80073e0:	bf54      	ite	pl
 80073e2:	f04f 0800 	movpl.w	r8, #0
 80073e6:	9308      	strmi	r3, [sp, #32]
 80073e8:	2f00      	cmp	r7, #0
 80073ea:	db39      	blt.n	8007460 <_dtoa_r+0x218>
 80073ec:	9b08      	ldr	r3, [sp, #32]
 80073ee:	970f      	str	r7, [sp, #60]	@ 0x3c
 80073f0:	443b      	add	r3, r7
 80073f2:	9308      	str	r3, [sp, #32]
 80073f4:	2300      	movs	r3, #0
 80073f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80073f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073fa:	2b09      	cmp	r3, #9
 80073fc:	d864      	bhi.n	80074c8 <_dtoa_r+0x280>
 80073fe:	2b05      	cmp	r3, #5
 8007400:	bfc4      	itt	gt
 8007402:	3b04      	subgt	r3, #4
 8007404:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007408:	f1a3 0302 	sub.w	r3, r3, #2
 800740c:	bfcc      	ite	gt
 800740e:	2400      	movgt	r4, #0
 8007410:	2401      	movle	r4, #1
 8007412:	2b03      	cmp	r3, #3
 8007414:	d863      	bhi.n	80074de <_dtoa_r+0x296>
 8007416:	e8df f003 	tbb	[pc, r3]
 800741a:	372a      	.short	0x372a
 800741c:	5535      	.short	0x5535
 800741e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007422:	441e      	add	r6, r3
 8007424:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007428:	2b20      	cmp	r3, #32
 800742a:	bfc1      	itttt	gt
 800742c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007430:	409f      	lslgt	r7, r3
 8007432:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007436:	fa24 f303 	lsrgt.w	r3, r4, r3
 800743a:	bfd6      	itet	le
 800743c:	f1c3 0320 	rsble	r3, r3, #32
 8007440:	ea47 0003 	orrgt.w	r0, r7, r3
 8007444:	fa04 f003 	lslle.w	r0, r4, r3
 8007448:	f7f9 f87e 	bl	8000548 <__aeabi_ui2d>
 800744c:	2201      	movs	r2, #1
 800744e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007452:	3e01      	subs	r6, #1
 8007454:	9214      	str	r2, [sp, #80]	@ 0x50
 8007456:	e777      	b.n	8007348 <_dtoa_r+0x100>
 8007458:	2301      	movs	r3, #1
 800745a:	e7b8      	b.n	80073ce <_dtoa_r+0x186>
 800745c:	9012      	str	r0, [sp, #72]	@ 0x48
 800745e:	e7b7      	b.n	80073d0 <_dtoa_r+0x188>
 8007460:	427b      	negs	r3, r7
 8007462:	930a      	str	r3, [sp, #40]	@ 0x28
 8007464:	2300      	movs	r3, #0
 8007466:	eba8 0807 	sub.w	r8, r8, r7
 800746a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800746c:	e7c4      	b.n	80073f8 <_dtoa_r+0x1b0>
 800746e:	2300      	movs	r3, #0
 8007470:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007472:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007474:	2b00      	cmp	r3, #0
 8007476:	dc35      	bgt.n	80074e4 <_dtoa_r+0x29c>
 8007478:	2301      	movs	r3, #1
 800747a:	9300      	str	r3, [sp, #0]
 800747c:	9307      	str	r3, [sp, #28]
 800747e:	461a      	mov	r2, r3
 8007480:	920e      	str	r2, [sp, #56]	@ 0x38
 8007482:	e00b      	b.n	800749c <_dtoa_r+0x254>
 8007484:	2301      	movs	r3, #1
 8007486:	e7f3      	b.n	8007470 <_dtoa_r+0x228>
 8007488:	2300      	movs	r3, #0
 800748a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800748c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800748e:	18fb      	adds	r3, r7, r3
 8007490:	9300      	str	r3, [sp, #0]
 8007492:	3301      	adds	r3, #1
 8007494:	2b01      	cmp	r3, #1
 8007496:	9307      	str	r3, [sp, #28]
 8007498:	bfb8      	it	lt
 800749a:	2301      	movlt	r3, #1
 800749c:	f8db 001c 	ldr.w	r0, [fp, #28]
 80074a0:	2100      	movs	r1, #0
 80074a2:	2204      	movs	r2, #4
 80074a4:	f102 0514 	add.w	r5, r2, #20
 80074a8:	429d      	cmp	r5, r3
 80074aa:	d91f      	bls.n	80074ec <_dtoa_r+0x2a4>
 80074ac:	6041      	str	r1, [r0, #4]
 80074ae:	4658      	mov	r0, fp
 80074b0:	f000 ff48 	bl	8008344 <_Balloc>
 80074b4:	4682      	mov	sl, r0
 80074b6:	2800      	cmp	r0, #0
 80074b8:	d13c      	bne.n	8007534 <_dtoa_r+0x2ec>
 80074ba:	4b1b      	ldr	r3, [pc, #108]	@ (8007528 <_dtoa_r+0x2e0>)
 80074bc:	4602      	mov	r2, r0
 80074be:	f240 11af 	movw	r1, #431	@ 0x1af
 80074c2:	e6d8      	b.n	8007276 <_dtoa_r+0x2e>
 80074c4:	2301      	movs	r3, #1
 80074c6:	e7e0      	b.n	800748a <_dtoa_r+0x242>
 80074c8:	2401      	movs	r4, #1
 80074ca:	2300      	movs	r3, #0
 80074cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80074ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 80074d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80074d4:	9300      	str	r3, [sp, #0]
 80074d6:	9307      	str	r3, [sp, #28]
 80074d8:	2200      	movs	r2, #0
 80074da:	2312      	movs	r3, #18
 80074dc:	e7d0      	b.n	8007480 <_dtoa_r+0x238>
 80074de:	2301      	movs	r3, #1
 80074e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074e2:	e7f5      	b.n	80074d0 <_dtoa_r+0x288>
 80074e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074e6:	9300      	str	r3, [sp, #0]
 80074e8:	9307      	str	r3, [sp, #28]
 80074ea:	e7d7      	b.n	800749c <_dtoa_r+0x254>
 80074ec:	3101      	adds	r1, #1
 80074ee:	0052      	lsls	r2, r2, #1
 80074f0:	e7d8      	b.n	80074a4 <_dtoa_r+0x25c>
 80074f2:	bf00      	nop
 80074f4:	f3af 8000 	nop.w
 80074f8:	636f4361 	.word	0x636f4361
 80074fc:	3fd287a7 	.word	0x3fd287a7
 8007500:	8b60c8b3 	.word	0x8b60c8b3
 8007504:	3fc68a28 	.word	0x3fc68a28
 8007508:	509f79fb 	.word	0x509f79fb
 800750c:	3fd34413 	.word	0x3fd34413
 8007510:	080093d8 	.word	0x080093d8
 8007514:	08009490 	.word	0x08009490
 8007518:	7ff00000 	.word	0x7ff00000
 800751c:	080093b5 	.word	0x080093b5
 8007520:	3ff80000 	.word	0x3ff80000
 8007524:	08009598 	.word	0x08009598
 8007528:	080094e8 	.word	0x080094e8
 800752c:	0800948c 	.word	0x0800948c
 8007530:	080093b4 	.word	0x080093b4
 8007534:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007538:	6018      	str	r0, [r3, #0]
 800753a:	9b07      	ldr	r3, [sp, #28]
 800753c:	2b0e      	cmp	r3, #14
 800753e:	f200 80a4 	bhi.w	800768a <_dtoa_r+0x442>
 8007542:	2c00      	cmp	r4, #0
 8007544:	f000 80a1 	beq.w	800768a <_dtoa_r+0x442>
 8007548:	2f00      	cmp	r7, #0
 800754a:	dd33      	ble.n	80075b4 <_dtoa_r+0x36c>
 800754c:	4bad      	ldr	r3, [pc, #692]	@ (8007804 <_dtoa_r+0x5bc>)
 800754e:	f007 020f 	and.w	r2, r7, #15
 8007552:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007556:	ed93 7b00 	vldr	d7, [r3]
 800755a:	05f8      	lsls	r0, r7, #23
 800755c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007560:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007564:	d516      	bpl.n	8007594 <_dtoa_r+0x34c>
 8007566:	4ba8      	ldr	r3, [pc, #672]	@ (8007808 <_dtoa_r+0x5c0>)
 8007568:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800756c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007570:	f7f9 f98e 	bl	8000890 <__aeabi_ddiv>
 8007574:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007578:	f004 040f 	and.w	r4, r4, #15
 800757c:	2603      	movs	r6, #3
 800757e:	4da2      	ldr	r5, [pc, #648]	@ (8007808 <_dtoa_r+0x5c0>)
 8007580:	b954      	cbnz	r4, 8007598 <_dtoa_r+0x350>
 8007582:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007586:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800758a:	f7f9 f981 	bl	8000890 <__aeabi_ddiv>
 800758e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007592:	e028      	b.n	80075e6 <_dtoa_r+0x39e>
 8007594:	2602      	movs	r6, #2
 8007596:	e7f2      	b.n	800757e <_dtoa_r+0x336>
 8007598:	07e1      	lsls	r1, r4, #31
 800759a:	d508      	bpl.n	80075ae <_dtoa_r+0x366>
 800759c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80075a4:	f7f9 f84a 	bl	800063c <__aeabi_dmul>
 80075a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075ac:	3601      	adds	r6, #1
 80075ae:	1064      	asrs	r4, r4, #1
 80075b0:	3508      	adds	r5, #8
 80075b2:	e7e5      	b.n	8007580 <_dtoa_r+0x338>
 80075b4:	f000 80d2 	beq.w	800775c <_dtoa_r+0x514>
 80075b8:	427c      	negs	r4, r7
 80075ba:	4b92      	ldr	r3, [pc, #584]	@ (8007804 <_dtoa_r+0x5bc>)
 80075bc:	4d92      	ldr	r5, [pc, #584]	@ (8007808 <_dtoa_r+0x5c0>)
 80075be:	f004 020f 	and.w	r2, r4, #15
 80075c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075ce:	f7f9 f835 	bl	800063c <__aeabi_dmul>
 80075d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075d6:	1124      	asrs	r4, r4, #4
 80075d8:	2300      	movs	r3, #0
 80075da:	2602      	movs	r6, #2
 80075dc:	2c00      	cmp	r4, #0
 80075de:	f040 80b2 	bne.w	8007746 <_dtoa_r+0x4fe>
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1d3      	bne.n	800758e <_dtoa_r+0x346>
 80075e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80075e8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f000 80b7 	beq.w	8007760 <_dtoa_r+0x518>
 80075f2:	4b86      	ldr	r3, [pc, #536]	@ (800780c <_dtoa_r+0x5c4>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	4620      	mov	r0, r4
 80075f8:	4629      	mov	r1, r5
 80075fa:	f7f9 fa91 	bl	8000b20 <__aeabi_dcmplt>
 80075fe:	2800      	cmp	r0, #0
 8007600:	f000 80ae 	beq.w	8007760 <_dtoa_r+0x518>
 8007604:	9b07      	ldr	r3, [sp, #28]
 8007606:	2b00      	cmp	r3, #0
 8007608:	f000 80aa 	beq.w	8007760 <_dtoa_r+0x518>
 800760c:	9b00      	ldr	r3, [sp, #0]
 800760e:	2b00      	cmp	r3, #0
 8007610:	dd37      	ble.n	8007682 <_dtoa_r+0x43a>
 8007612:	1e7b      	subs	r3, r7, #1
 8007614:	9304      	str	r3, [sp, #16]
 8007616:	4620      	mov	r0, r4
 8007618:	4b7d      	ldr	r3, [pc, #500]	@ (8007810 <_dtoa_r+0x5c8>)
 800761a:	2200      	movs	r2, #0
 800761c:	4629      	mov	r1, r5
 800761e:	f7f9 f80d 	bl	800063c <__aeabi_dmul>
 8007622:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007626:	9c00      	ldr	r4, [sp, #0]
 8007628:	3601      	adds	r6, #1
 800762a:	4630      	mov	r0, r6
 800762c:	f7f8 ff9c 	bl	8000568 <__aeabi_i2d>
 8007630:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007634:	f7f9 f802 	bl	800063c <__aeabi_dmul>
 8007638:	4b76      	ldr	r3, [pc, #472]	@ (8007814 <_dtoa_r+0x5cc>)
 800763a:	2200      	movs	r2, #0
 800763c:	f7f8 fe48 	bl	80002d0 <__adddf3>
 8007640:	4605      	mov	r5, r0
 8007642:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007646:	2c00      	cmp	r4, #0
 8007648:	f040 808d 	bne.w	8007766 <_dtoa_r+0x51e>
 800764c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007650:	4b71      	ldr	r3, [pc, #452]	@ (8007818 <_dtoa_r+0x5d0>)
 8007652:	2200      	movs	r2, #0
 8007654:	f7f8 fe3a 	bl	80002cc <__aeabi_dsub>
 8007658:	4602      	mov	r2, r0
 800765a:	460b      	mov	r3, r1
 800765c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007660:	462a      	mov	r2, r5
 8007662:	4633      	mov	r3, r6
 8007664:	f7f9 fa7a 	bl	8000b5c <__aeabi_dcmpgt>
 8007668:	2800      	cmp	r0, #0
 800766a:	f040 828b 	bne.w	8007b84 <_dtoa_r+0x93c>
 800766e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007672:	462a      	mov	r2, r5
 8007674:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007678:	f7f9 fa52 	bl	8000b20 <__aeabi_dcmplt>
 800767c:	2800      	cmp	r0, #0
 800767e:	f040 8128 	bne.w	80078d2 <_dtoa_r+0x68a>
 8007682:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007686:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800768a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800768c:	2b00      	cmp	r3, #0
 800768e:	f2c0 815a 	blt.w	8007946 <_dtoa_r+0x6fe>
 8007692:	2f0e      	cmp	r7, #14
 8007694:	f300 8157 	bgt.w	8007946 <_dtoa_r+0x6fe>
 8007698:	4b5a      	ldr	r3, [pc, #360]	@ (8007804 <_dtoa_r+0x5bc>)
 800769a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800769e:	ed93 7b00 	vldr	d7, [r3]
 80076a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	ed8d 7b00 	vstr	d7, [sp]
 80076aa:	da03      	bge.n	80076b4 <_dtoa_r+0x46c>
 80076ac:	9b07      	ldr	r3, [sp, #28]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	f340 8101 	ble.w	80078b6 <_dtoa_r+0x66e>
 80076b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80076b8:	4656      	mov	r6, sl
 80076ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076be:	4620      	mov	r0, r4
 80076c0:	4629      	mov	r1, r5
 80076c2:	f7f9 f8e5 	bl	8000890 <__aeabi_ddiv>
 80076c6:	f7f9 fa69 	bl	8000b9c <__aeabi_d2iz>
 80076ca:	4680      	mov	r8, r0
 80076cc:	f7f8 ff4c 	bl	8000568 <__aeabi_i2d>
 80076d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076d4:	f7f8 ffb2 	bl	800063c <__aeabi_dmul>
 80076d8:	4602      	mov	r2, r0
 80076da:	460b      	mov	r3, r1
 80076dc:	4620      	mov	r0, r4
 80076de:	4629      	mov	r1, r5
 80076e0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80076e4:	f7f8 fdf2 	bl	80002cc <__aeabi_dsub>
 80076e8:	f806 4b01 	strb.w	r4, [r6], #1
 80076ec:	9d07      	ldr	r5, [sp, #28]
 80076ee:	eba6 040a 	sub.w	r4, r6, sl
 80076f2:	42a5      	cmp	r5, r4
 80076f4:	4602      	mov	r2, r0
 80076f6:	460b      	mov	r3, r1
 80076f8:	f040 8117 	bne.w	800792a <_dtoa_r+0x6e2>
 80076fc:	f7f8 fde8 	bl	80002d0 <__adddf3>
 8007700:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007704:	4604      	mov	r4, r0
 8007706:	460d      	mov	r5, r1
 8007708:	f7f9 fa28 	bl	8000b5c <__aeabi_dcmpgt>
 800770c:	2800      	cmp	r0, #0
 800770e:	f040 80f9 	bne.w	8007904 <_dtoa_r+0x6bc>
 8007712:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007716:	4620      	mov	r0, r4
 8007718:	4629      	mov	r1, r5
 800771a:	f7f9 f9f7 	bl	8000b0c <__aeabi_dcmpeq>
 800771e:	b118      	cbz	r0, 8007728 <_dtoa_r+0x4e0>
 8007720:	f018 0f01 	tst.w	r8, #1
 8007724:	f040 80ee 	bne.w	8007904 <_dtoa_r+0x6bc>
 8007728:	4649      	mov	r1, r9
 800772a:	4658      	mov	r0, fp
 800772c:	f000 fe4a 	bl	80083c4 <_Bfree>
 8007730:	2300      	movs	r3, #0
 8007732:	7033      	strb	r3, [r6, #0]
 8007734:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007736:	3701      	adds	r7, #1
 8007738:	601f      	str	r7, [r3, #0]
 800773a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800773c:	2b00      	cmp	r3, #0
 800773e:	f000 831d 	beq.w	8007d7c <_dtoa_r+0xb34>
 8007742:	601e      	str	r6, [r3, #0]
 8007744:	e31a      	b.n	8007d7c <_dtoa_r+0xb34>
 8007746:	07e2      	lsls	r2, r4, #31
 8007748:	d505      	bpl.n	8007756 <_dtoa_r+0x50e>
 800774a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800774e:	f7f8 ff75 	bl	800063c <__aeabi_dmul>
 8007752:	3601      	adds	r6, #1
 8007754:	2301      	movs	r3, #1
 8007756:	1064      	asrs	r4, r4, #1
 8007758:	3508      	adds	r5, #8
 800775a:	e73f      	b.n	80075dc <_dtoa_r+0x394>
 800775c:	2602      	movs	r6, #2
 800775e:	e742      	b.n	80075e6 <_dtoa_r+0x39e>
 8007760:	9c07      	ldr	r4, [sp, #28]
 8007762:	9704      	str	r7, [sp, #16]
 8007764:	e761      	b.n	800762a <_dtoa_r+0x3e2>
 8007766:	4b27      	ldr	r3, [pc, #156]	@ (8007804 <_dtoa_r+0x5bc>)
 8007768:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800776a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800776e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007772:	4454      	add	r4, sl
 8007774:	2900      	cmp	r1, #0
 8007776:	d053      	beq.n	8007820 <_dtoa_r+0x5d8>
 8007778:	4928      	ldr	r1, [pc, #160]	@ (800781c <_dtoa_r+0x5d4>)
 800777a:	2000      	movs	r0, #0
 800777c:	f7f9 f888 	bl	8000890 <__aeabi_ddiv>
 8007780:	4633      	mov	r3, r6
 8007782:	462a      	mov	r2, r5
 8007784:	f7f8 fda2 	bl	80002cc <__aeabi_dsub>
 8007788:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800778c:	4656      	mov	r6, sl
 800778e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007792:	f7f9 fa03 	bl	8000b9c <__aeabi_d2iz>
 8007796:	4605      	mov	r5, r0
 8007798:	f7f8 fee6 	bl	8000568 <__aeabi_i2d>
 800779c:	4602      	mov	r2, r0
 800779e:	460b      	mov	r3, r1
 80077a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077a4:	f7f8 fd92 	bl	80002cc <__aeabi_dsub>
 80077a8:	3530      	adds	r5, #48	@ 0x30
 80077aa:	4602      	mov	r2, r0
 80077ac:	460b      	mov	r3, r1
 80077ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80077b2:	f806 5b01 	strb.w	r5, [r6], #1
 80077b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80077ba:	f7f9 f9b1 	bl	8000b20 <__aeabi_dcmplt>
 80077be:	2800      	cmp	r0, #0
 80077c0:	d171      	bne.n	80078a6 <_dtoa_r+0x65e>
 80077c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077c6:	4911      	ldr	r1, [pc, #68]	@ (800780c <_dtoa_r+0x5c4>)
 80077c8:	2000      	movs	r0, #0
 80077ca:	f7f8 fd7f 	bl	80002cc <__aeabi_dsub>
 80077ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80077d2:	f7f9 f9a5 	bl	8000b20 <__aeabi_dcmplt>
 80077d6:	2800      	cmp	r0, #0
 80077d8:	f040 8095 	bne.w	8007906 <_dtoa_r+0x6be>
 80077dc:	42a6      	cmp	r6, r4
 80077de:	f43f af50 	beq.w	8007682 <_dtoa_r+0x43a>
 80077e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80077e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007810 <_dtoa_r+0x5c8>)
 80077e8:	2200      	movs	r2, #0
 80077ea:	f7f8 ff27 	bl	800063c <__aeabi_dmul>
 80077ee:	4b08      	ldr	r3, [pc, #32]	@ (8007810 <_dtoa_r+0x5c8>)
 80077f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077f4:	2200      	movs	r2, #0
 80077f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077fa:	f7f8 ff1f 	bl	800063c <__aeabi_dmul>
 80077fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007802:	e7c4      	b.n	800778e <_dtoa_r+0x546>
 8007804:	08009598 	.word	0x08009598
 8007808:	08009570 	.word	0x08009570
 800780c:	3ff00000 	.word	0x3ff00000
 8007810:	40240000 	.word	0x40240000
 8007814:	401c0000 	.word	0x401c0000
 8007818:	40140000 	.word	0x40140000
 800781c:	3fe00000 	.word	0x3fe00000
 8007820:	4631      	mov	r1, r6
 8007822:	4628      	mov	r0, r5
 8007824:	f7f8 ff0a 	bl	800063c <__aeabi_dmul>
 8007828:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800782c:	9415      	str	r4, [sp, #84]	@ 0x54
 800782e:	4656      	mov	r6, sl
 8007830:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007834:	f7f9 f9b2 	bl	8000b9c <__aeabi_d2iz>
 8007838:	4605      	mov	r5, r0
 800783a:	f7f8 fe95 	bl	8000568 <__aeabi_i2d>
 800783e:	4602      	mov	r2, r0
 8007840:	460b      	mov	r3, r1
 8007842:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007846:	f7f8 fd41 	bl	80002cc <__aeabi_dsub>
 800784a:	3530      	adds	r5, #48	@ 0x30
 800784c:	f806 5b01 	strb.w	r5, [r6], #1
 8007850:	4602      	mov	r2, r0
 8007852:	460b      	mov	r3, r1
 8007854:	42a6      	cmp	r6, r4
 8007856:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800785a:	f04f 0200 	mov.w	r2, #0
 800785e:	d124      	bne.n	80078aa <_dtoa_r+0x662>
 8007860:	4bac      	ldr	r3, [pc, #688]	@ (8007b14 <_dtoa_r+0x8cc>)
 8007862:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007866:	f7f8 fd33 	bl	80002d0 <__adddf3>
 800786a:	4602      	mov	r2, r0
 800786c:	460b      	mov	r3, r1
 800786e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007872:	f7f9 f973 	bl	8000b5c <__aeabi_dcmpgt>
 8007876:	2800      	cmp	r0, #0
 8007878:	d145      	bne.n	8007906 <_dtoa_r+0x6be>
 800787a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800787e:	49a5      	ldr	r1, [pc, #660]	@ (8007b14 <_dtoa_r+0x8cc>)
 8007880:	2000      	movs	r0, #0
 8007882:	f7f8 fd23 	bl	80002cc <__aeabi_dsub>
 8007886:	4602      	mov	r2, r0
 8007888:	460b      	mov	r3, r1
 800788a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800788e:	f7f9 f947 	bl	8000b20 <__aeabi_dcmplt>
 8007892:	2800      	cmp	r0, #0
 8007894:	f43f aef5 	beq.w	8007682 <_dtoa_r+0x43a>
 8007898:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800789a:	1e73      	subs	r3, r6, #1
 800789c:	9315      	str	r3, [sp, #84]	@ 0x54
 800789e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80078a2:	2b30      	cmp	r3, #48	@ 0x30
 80078a4:	d0f8      	beq.n	8007898 <_dtoa_r+0x650>
 80078a6:	9f04      	ldr	r7, [sp, #16]
 80078a8:	e73e      	b.n	8007728 <_dtoa_r+0x4e0>
 80078aa:	4b9b      	ldr	r3, [pc, #620]	@ (8007b18 <_dtoa_r+0x8d0>)
 80078ac:	f7f8 fec6 	bl	800063c <__aeabi_dmul>
 80078b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078b4:	e7bc      	b.n	8007830 <_dtoa_r+0x5e8>
 80078b6:	d10c      	bne.n	80078d2 <_dtoa_r+0x68a>
 80078b8:	4b98      	ldr	r3, [pc, #608]	@ (8007b1c <_dtoa_r+0x8d4>)
 80078ba:	2200      	movs	r2, #0
 80078bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078c0:	f7f8 febc 	bl	800063c <__aeabi_dmul>
 80078c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078c8:	f7f9 f93e 	bl	8000b48 <__aeabi_dcmpge>
 80078cc:	2800      	cmp	r0, #0
 80078ce:	f000 8157 	beq.w	8007b80 <_dtoa_r+0x938>
 80078d2:	2400      	movs	r4, #0
 80078d4:	4625      	mov	r5, r4
 80078d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078d8:	43db      	mvns	r3, r3
 80078da:	9304      	str	r3, [sp, #16]
 80078dc:	4656      	mov	r6, sl
 80078de:	2700      	movs	r7, #0
 80078e0:	4621      	mov	r1, r4
 80078e2:	4658      	mov	r0, fp
 80078e4:	f000 fd6e 	bl	80083c4 <_Bfree>
 80078e8:	2d00      	cmp	r5, #0
 80078ea:	d0dc      	beq.n	80078a6 <_dtoa_r+0x65e>
 80078ec:	b12f      	cbz	r7, 80078fa <_dtoa_r+0x6b2>
 80078ee:	42af      	cmp	r7, r5
 80078f0:	d003      	beq.n	80078fa <_dtoa_r+0x6b2>
 80078f2:	4639      	mov	r1, r7
 80078f4:	4658      	mov	r0, fp
 80078f6:	f000 fd65 	bl	80083c4 <_Bfree>
 80078fa:	4629      	mov	r1, r5
 80078fc:	4658      	mov	r0, fp
 80078fe:	f000 fd61 	bl	80083c4 <_Bfree>
 8007902:	e7d0      	b.n	80078a6 <_dtoa_r+0x65e>
 8007904:	9704      	str	r7, [sp, #16]
 8007906:	4633      	mov	r3, r6
 8007908:	461e      	mov	r6, r3
 800790a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800790e:	2a39      	cmp	r2, #57	@ 0x39
 8007910:	d107      	bne.n	8007922 <_dtoa_r+0x6da>
 8007912:	459a      	cmp	sl, r3
 8007914:	d1f8      	bne.n	8007908 <_dtoa_r+0x6c0>
 8007916:	9a04      	ldr	r2, [sp, #16]
 8007918:	3201      	adds	r2, #1
 800791a:	9204      	str	r2, [sp, #16]
 800791c:	2230      	movs	r2, #48	@ 0x30
 800791e:	f88a 2000 	strb.w	r2, [sl]
 8007922:	781a      	ldrb	r2, [r3, #0]
 8007924:	3201      	adds	r2, #1
 8007926:	701a      	strb	r2, [r3, #0]
 8007928:	e7bd      	b.n	80078a6 <_dtoa_r+0x65e>
 800792a:	4b7b      	ldr	r3, [pc, #492]	@ (8007b18 <_dtoa_r+0x8d0>)
 800792c:	2200      	movs	r2, #0
 800792e:	f7f8 fe85 	bl	800063c <__aeabi_dmul>
 8007932:	2200      	movs	r2, #0
 8007934:	2300      	movs	r3, #0
 8007936:	4604      	mov	r4, r0
 8007938:	460d      	mov	r5, r1
 800793a:	f7f9 f8e7 	bl	8000b0c <__aeabi_dcmpeq>
 800793e:	2800      	cmp	r0, #0
 8007940:	f43f aebb 	beq.w	80076ba <_dtoa_r+0x472>
 8007944:	e6f0      	b.n	8007728 <_dtoa_r+0x4e0>
 8007946:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007948:	2a00      	cmp	r2, #0
 800794a:	f000 80db 	beq.w	8007b04 <_dtoa_r+0x8bc>
 800794e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007950:	2a01      	cmp	r2, #1
 8007952:	f300 80bf 	bgt.w	8007ad4 <_dtoa_r+0x88c>
 8007956:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007958:	2a00      	cmp	r2, #0
 800795a:	f000 80b7 	beq.w	8007acc <_dtoa_r+0x884>
 800795e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007962:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007964:	4646      	mov	r6, r8
 8007966:	9a08      	ldr	r2, [sp, #32]
 8007968:	2101      	movs	r1, #1
 800796a:	441a      	add	r2, r3
 800796c:	4658      	mov	r0, fp
 800796e:	4498      	add	r8, r3
 8007970:	9208      	str	r2, [sp, #32]
 8007972:	f000 fddb 	bl	800852c <__i2b>
 8007976:	4605      	mov	r5, r0
 8007978:	b15e      	cbz	r6, 8007992 <_dtoa_r+0x74a>
 800797a:	9b08      	ldr	r3, [sp, #32]
 800797c:	2b00      	cmp	r3, #0
 800797e:	dd08      	ble.n	8007992 <_dtoa_r+0x74a>
 8007980:	42b3      	cmp	r3, r6
 8007982:	9a08      	ldr	r2, [sp, #32]
 8007984:	bfa8      	it	ge
 8007986:	4633      	movge	r3, r6
 8007988:	eba8 0803 	sub.w	r8, r8, r3
 800798c:	1af6      	subs	r6, r6, r3
 800798e:	1ad3      	subs	r3, r2, r3
 8007990:	9308      	str	r3, [sp, #32]
 8007992:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007994:	b1f3      	cbz	r3, 80079d4 <_dtoa_r+0x78c>
 8007996:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007998:	2b00      	cmp	r3, #0
 800799a:	f000 80b7 	beq.w	8007b0c <_dtoa_r+0x8c4>
 800799e:	b18c      	cbz	r4, 80079c4 <_dtoa_r+0x77c>
 80079a0:	4629      	mov	r1, r5
 80079a2:	4622      	mov	r2, r4
 80079a4:	4658      	mov	r0, fp
 80079a6:	f000 fe81 	bl	80086ac <__pow5mult>
 80079aa:	464a      	mov	r2, r9
 80079ac:	4601      	mov	r1, r0
 80079ae:	4605      	mov	r5, r0
 80079b0:	4658      	mov	r0, fp
 80079b2:	f000 fdd1 	bl	8008558 <__multiply>
 80079b6:	4649      	mov	r1, r9
 80079b8:	9004      	str	r0, [sp, #16]
 80079ba:	4658      	mov	r0, fp
 80079bc:	f000 fd02 	bl	80083c4 <_Bfree>
 80079c0:	9b04      	ldr	r3, [sp, #16]
 80079c2:	4699      	mov	r9, r3
 80079c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079c6:	1b1a      	subs	r2, r3, r4
 80079c8:	d004      	beq.n	80079d4 <_dtoa_r+0x78c>
 80079ca:	4649      	mov	r1, r9
 80079cc:	4658      	mov	r0, fp
 80079ce:	f000 fe6d 	bl	80086ac <__pow5mult>
 80079d2:	4681      	mov	r9, r0
 80079d4:	2101      	movs	r1, #1
 80079d6:	4658      	mov	r0, fp
 80079d8:	f000 fda8 	bl	800852c <__i2b>
 80079dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079de:	4604      	mov	r4, r0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f000 81cf 	beq.w	8007d84 <_dtoa_r+0xb3c>
 80079e6:	461a      	mov	r2, r3
 80079e8:	4601      	mov	r1, r0
 80079ea:	4658      	mov	r0, fp
 80079ec:	f000 fe5e 	bl	80086ac <__pow5mult>
 80079f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	4604      	mov	r4, r0
 80079f6:	f300 8095 	bgt.w	8007b24 <_dtoa_r+0x8dc>
 80079fa:	9b02      	ldr	r3, [sp, #8]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f040 8087 	bne.w	8007b10 <_dtoa_r+0x8c8>
 8007a02:	9b03      	ldr	r3, [sp, #12]
 8007a04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f040 8089 	bne.w	8007b20 <_dtoa_r+0x8d8>
 8007a0e:	9b03      	ldr	r3, [sp, #12]
 8007a10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a14:	0d1b      	lsrs	r3, r3, #20
 8007a16:	051b      	lsls	r3, r3, #20
 8007a18:	b12b      	cbz	r3, 8007a26 <_dtoa_r+0x7de>
 8007a1a:	9b08      	ldr	r3, [sp, #32]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	9308      	str	r3, [sp, #32]
 8007a20:	f108 0801 	add.w	r8, r8, #1
 8007a24:	2301      	movs	r3, #1
 8007a26:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f000 81b0 	beq.w	8007d90 <_dtoa_r+0xb48>
 8007a30:	6923      	ldr	r3, [r4, #16]
 8007a32:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a36:	6918      	ldr	r0, [r3, #16]
 8007a38:	f000 fd2c 	bl	8008494 <__hi0bits>
 8007a3c:	f1c0 0020 	rsb	r0, r0, #32
 8007a40:	9b08      	ldr	r3, [sp, #32]
 8007a42:	4418      	add	r0, r3
 8007a44:	f010 001f 	ands.w	r0, r0, #31
 8007a48:	d077      	beq.n	8007b3a <_dtoa_r+0x8f2>
 8007a4a:	f1c0 0320 	rsb	r3, r0, #32
 8007a4e:	2b04      	cmp	r3, #4
 8007a50:	dd6b      	ble.n	8007b2a <_dtoa_r+0x8e2>
 8007a52:	9b08      	ldr	r3, [sp, #32]
 8007a54:	f1c0 001c 	rsb	r0, r0, #28
 8007a58:	4403      	add	r3, r0
 8007a5a:	4480      	add	r8, r0
 8007a5c:	4406      	add	r6, r0
 8007a5e:	9308      	str	r3, [sp, #32]
 8007a60:	f1b8 0f00 	cmp.w	r8, #0
 8007a64:	dd05      	ble.n	8007a72 <_dtoa_r+0x82a>
 8007a66:	4649      	mov	r1, r9
 8007a68:	4642      	mov	r2, r8
 8007a6a:	4658      	mov	r0, fp
 8007a6c:	f000 fe78 	bl	8008760 <__lshift>
 8007a70:	4681      	mov	r9, r0
 8007a72:	9b08      	ldr	r3, [sp, #32]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	dd05      	ble.n	8007a84 <_dtoa_r+0x83c>
 8007a78:	4621      	mov	r1, r4
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	4658      	mov	r0, fp
 8007a7e:	f000 fe6f 	bl	8008760 <__lshift>
 8007a82:	4604      	mov	r4, r0
 8007a84:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d059      	beq.n	8007b3e <_dtoa_r+0x8f6>
 8007a8a:	4621      	mov	r1, r4
 8007a8c:	4648      	mov	r0, r9
 8007a8e:	f000 fed3 	bl	8008838 <__mcmp>
 8007a92:	2800      	cmp	r0, #0
 8007a94:	da53      	bge.n	8007b3e <_dtoa_r+0x8f6>
 8007a96:	1e7b      	subs	r3, r7, #1
 8007a98:	9304      	str	r3, [sp, #16]
 8007a9a:	4649      	mov	r1, r9
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	220a      	movs	r2, #10
 8007aa0:	4658      	mov	r0, fp
 8007aa2:	f000 fcb1 	bl	8008408 <__multadd>
 8007aa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007aa8:	4681      	mov	r9, r0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f000 8172 	beq.w	8007d94 <_dtoa_r+0xb4c>
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	4629      	mov	r1, r5
 8007ab4:	220a      	movs	r2, #10
 8007ab6:	4658      	mov	r0, fp
 8007ab8:	f000 fca6 	bl	8008408 <__multadd>
 8007abc:	9b00      	ldr	r3, [sp, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	4605      	mov	r5, r0
 8007ac2:	dc67      	bgt.n	8007b94 <_dtoa_r+0x94c>
 8007ac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ac6:	2b02      	cmp	r3, #2
 8007ac8:	dc41      	bgt.n	8007b4e <_dtoa_r+0x906>
 8007aca:	e063      	b.n	8007b94 <_dtoa_r+0x94c>
 8007acc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007ace:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007ad2:	e746      	b.n	8007962 <_dtoa_r+0x71a>
 8007ad4:	9b07      	ldr	r3, [sp, #28]
 8007ad6:	1e5c      	subs	r4, r3, #1
 8007ad8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ada:	42a3      	cmp	r3, r4
 8007adc:	bfbf      	itttt	lt
 8007ade:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007ae0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007ae2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007ae4:	1ae3      	sublt	r3, r4, r3
 8007ae6:	bfb4      	ite	lt
 8007ae8:	18d2      	addlt	r2, r2, r3
 8007aea:	1b1c      	subge	r4, r3, r4
 8007aec:	9b07      	ldr	r3, [sp, #28]
 8007aee:	bfbc      	itt	lt
 8007af0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007af2:	2400      	movlt	r4, #0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	bfb5      	itete	lt
 8007af8:	eba8 0603 	sublt.w	r6, r8, r3
 8007afc:	9b07      	ldrge	r3, [sp, #28]
 8007afe:	2300      	movlt	r3, #0
 8007b00:	4646      	movge	r6, r8
 8007b02:	e730      	b.n	8007966 <_dtoa_r+0x71e>
 8007b04:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007b06:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007b08:	4646      	mov	r6, r8
 8007b0a:	e735      	b.n	8007978 <_dtoa_r+0x730>
 8007b0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b0e:	e75c      	b.n	80079ca <_dtoa_r+0x782>
 8007b10:	2300      	movs	r3, #0
 8007b12:	e788      	b.n	8007a26 <_dtoa_r+0x7de>
 8007b14:	3fe00000 	.word	0x3fe00000
 8007b18:	40240000 	.word	0x40240000
 8007b1c:	40140000 	.word	0x40140000
 8007b20:	9b02      	ldr	r3, [sp, #8]
 8007b22:	e780      	b.n	8007a26 <_dtoa_r+0x7de>
 8007b24:	2300      	movs	r3, #0
 8007b26:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b28:	e782      	b.n	8007a30 <_dtoa_r+0x7e8>
 8007b2a:	d099      	beq.n	8007a60 <_dtoa_r+0x818>
 8007b2c:	9a08      	ldr	r2, [sp, #32]
 8007b2e:	331c      	adds	r3, #28
 8007b30:	441a      	add	r2, r3
 8007b32:	4498      	add	r8, r3
 8007b34:	441e      	add	r6, r3
 8007b36:	9208      	str	r2, [sp, #32]
 8007b38:	e792      	b.n	8007a60 <_dtoa_r+0x818>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	e7f6      	b.n	8007b2c <_dtoa_r+0x8e4>
 8007b3e:	9b07      	ldr	r3, [sp, #28]
 8007b40:	9704      	str	r7, [sp, #16]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	dc20      	bgt.n	8007b88 <_dtoa_r+0x940>
 8007b46:	9300      	str	r3, [sp, #0]
 8007b48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	dd1e      	ble.n	8007b8c <_dtoa_r+0x944>
 8007b4e:	9b00      	ldr	r3, [sp, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f47f aec0 	bne.w	80078d6 <_dtoa_r+0x68e>
 8007b56:	4621      	mov	r1, r4
 8007b58:	2205      	movs	r2, #5
 8007b5a:	4658      	mov	r0, fp
 8007b5c:	f000 fc54 	bl	8008408 <__multadd>
 8007b60:	4601      	mov	r1, r0
 8007b62:	4604      	mov	r4, r0
 8007b64:	4648      	mov	r0, r9
 8007b66:	f000 fe67 	bl	8008838 <__mcmp>
 8007b6a:	2800      	cmp	r0, #0
 8007b6c:	f77f aeb3 	ble.w	80078d6 <_dtoa_r+0x68e>
 8007b70:	4656      	mov	r6, sl
 8007b72:	2331      	movs	r3, #49	@ 0x31
 8007b74:	f806 3b01 	strb.w	r3, [r6], #1
 8007b78:	9b04      	ldr	r3, [sp, #16]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	9304      	str	r3, [sp, #16]
 8007b7e:	e6ae      	b.n	80078de <_dtoa_r+0x696>
 8007b80:	9c07      	ldr	r4, [sp, #28]
 8007b82:	9704      	str	r7, [sp, #16]
 8007b84:	4625      	mov	r5, r4
 8007b86:	e7f3      	b.n	8007b70 <_dtoa_r+0x928>
 8007b88:	9b07      	ldr	r3, [sp, #28]
 8007b8a:	9300      	str	r3, [sp, #0]
 8007b8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	f000 8104 	beq.w	8007d9c <_dtoa_r+0xb54>
 8007b94:	2e00      	cmp	r6, #0
 8007b96:	dd05      	ble.n	8007ba4 <_dtoa_r+0x95c>
 8007b98:	4629      	mov	r1, r5
 8007b9a:	4632      	mov	r2, r6
 8007b9c:	4658      	mov	r0, fp
 8007b9e:	f000 fddf 	bl	8008760 <__lshift>
 8007ba2:	4605      	mov	r5, r0
 8007ba4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d05a      	beq.n	8007c60 <_dtoa_r+0xa18>
 8007baa:	6869      	ldr	r1, [r5, #4]
 8007bac:	4658      	mov	r0, fp
 8007bae:	f000 fbc9 	bl	8008344 <_Balloc>
 8007bb2:	4606      	mov	r6, r0
 8007bb4:	b928      	cbnz	r0, 8007bc2 <_dtoa_r+0x97a>
 8007bb6:	4b84      	ldr	r3, [pc, #528]	@ (8007dc8 <_dtoa_r+0xb80>)
 8007bb8:	4602      	mov	r2, r0
 8007bba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007bbe:	f7ff bb5a 	b.w	8007276 <_dtoa_r+0x2e>
 8007bc2:	692a      	ldr	r2, [r5, #16]
 8007bc4:	3202      	adds	r2, #2
 8007bc6:	0092      	lsls	r2, r2, #2
 8007bc8:	f105 010c 	add.w	r1, r5, #12
 8007bcc:	300c      	adds	r0, #12
 8007bce:	f001 f82f 	bl	8008c30 <memcpy>
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	4631      	mov	r1, r6
 8007bd6:	4658      	mov	r0, fp
 8007bd8:	f000 fdc2 	bl	8008760 <__lshift>
 8007bdc:	f10a 0301 	add.w	r3, sl, #1
 8007be0:	9307      	str	r3, [sp, #28]
 8007be2:	9b00      	ldr	r3, [sp, #0]
 8007be4:	4453      	add	r3, sl
 8007be6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007be8:	9b02      	ldr	r3, [sp, #8]
 8007bea:	f003 0301 	and.w	r3, r3, #1
 8007bee:	462f      	mov	r7, r5
 8007bf0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bf2:	4605      	mov	r5, r0
 8007bf4:	9b07      	ldr	r3, [sp, #28]
 8007bf6:	4621      	mov	r1, r4
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	4648      	mov	r0, r9
 8007bfc:	9300      	str	r3, [sp, #0]
 8007bfe:	f7ff fa99 	bl	8007134 <quorem>
 8007c02:	4639      	mov	r1, r7
 8007c04:	9002      	str	r0, [sp, #8]
 8007c06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007c0a:	4648      	mov	r0, r9
 8007c0c:	f000 fe14 	bl	8008838 <__mcmp>
 8007c10:	462a      	mov	r2, r5
 8007c12:	9008      	str	r0, [sp, #32]
 8007c14:	4621      	mov	r1, r4
 8007c16:	4658      	mov	r0, fp
 8007c18:	f000 fe2a 	bl	8008870 <__mdiff>
 8007c1c:	68c2      	ldr	r2, [r0, #12]
 8007c1e:	4606      	mov	r6, r0
 8007c20:	bb02      	cbnz	r2, 8007c64 <_dtoa_r+0xa1c>
 8007c22:	4601      	mov	r1, r0
 8007c24:	4648      	mov	r0, r9
 8007c26:	f000 fe07 	bl	8008838 <__mcmp>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	4631      	mov	r1, r6
 8007c2e:	4658      	mov	r0, fp
 8007c30:	920e      	str	r2, [sp, #56]	@ 0x38
 8007c32:	f000 fbc7 	bl	80083c4 <_Bfree>
 8007c36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c3a:	9e07      	ldr	r6, [sp, #28]
 8007c3c:	ea43 0102 	orr.w	r1, r3, r2
 8007c40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c42:	4319      	orrs	r1, r3
 8007c44:	d110      	bne.n	8007c68 <_dtoa_r+0xa20>
 8007c46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c4a:	d029      	beq.n	8007ca0 <_dtoa_r+0xa58>
 8007c4c:	9b08      	ldr	r3, [sp, #32]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	dd02      	ble.n	8007c58 <_dtoa_r+0xa10>
 8007c52:	9b02      	ldr	r3, [sp, #8]
 8007c54:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007c58:	9b00      	ldr	r3, [sp, #0]
 8007c5a:	f883 8000 	strb.w	r8, [r3]
 8007c5e:	e63f      	b.n	80078e0 <_dtoa_r+0x698>
 8007c60:	4628      	mov	r0, r5
 8007c62:	e7bb      	b.n	8007bdc <_dtoa_r+0x994>
 8007c64:	2201      	movs	r2, #1
 8007c66:	e7e1      	b.n	8007c2c <_dtoa_r+0x9e4>
 8007c68:	9b08      	ldr	r3, [sp, #32]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	db04      	blt.n	8007c78 <_dtoa_r+0xa30>
 8007c6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c70:	430b      	orrs	r3, r1
 8007c72:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c74:	430b      	orrs	r3, r1
 8007c76:	d120      	bne.n	8007cba <_dtoa_r+0xa72>
 8007c78:	2a00      	cmp	r2, #0
 8007c7a:	dded      	ble.n	8007c58 <_dtoa_r+0xa10>
 8007c7c:	4649      	mov	r1, r9
 8007c7e:	2201      	movs	r2, #1
 8007c80:	4658      	mov	r0, fp
 8007c82:	f000 fd6d 	bl	8008760 <__lshift>
 8007c86:	4621      	mov	r1, r4
 8007c88:	4681      	mov	r9, r0
 8007c8a:	f000 fdd5 	bl	8008838 <__mcmp>
 8007c8e:	2800      	cmp	r0, #0
 8007c90:	dc03      	bgt.n	8007c9a <_dtoa_r+0xa52>
 8007c92:	d1e1      	bne.n	8007c58 <_dtoa_r+0xa10>
 8007c94:	f018 0f01 	tst.w	r8, #1
 8007c98:	d0de      	beq.n	8007c58 <_dtoa_r+0xa10>
 8007c9a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c9e:	d1d8      	bne.n	8007c52 <_dtoa_r+0xa0a>
 8007ca0:	9a00      	ldr	r2, [sp, #0]
 8007ca2:	2339      	movs	r3, #57	@ 0x39
 8007ca4:	7013      	strb	r3, [r2, #0]
 8007ca6:	4633      	mov	r3, r6
 8007ca8:	461e      	mov	r6, r3
 8007caa:	3b01      	subs	r3, #1
 8007cac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007cb0:	2a39      	cmp	r2, #57	@ 0x39
 8007cb2:	d052      	beq.n	8007d5a <_dtoa_r+0xb12>
 8007cb4:	3201      	adds	r2, #1
 8007cb6:	701a      	strb	r2, [r3, #0]
 8007cb8:	e612      	b.n	80078e0 <_dtoa_r+0x698>
 8007cba:	2a00      	cmp	r2, #0
 8007cbc:	dd07      	ble.n	8007cce <_dtoa_r+0xa86>
 8007cbe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007cc2:	d0ed      	beq.n	8007ca0 <_dtoa_r+0xa58>
 8007cc4:	9a00      	ldr	r2, [sp, #0]
 8007cc6:	f108 0301 	add.w	r3, r8, #1
 8007cca:	7013      	strb	r3, [r2, #0]
 8007ccc:	e608      	b.n	80078e0 <_dtoa_r+0x698>
 8007cce:	9b07      	ldr	r3, [sp, #28]
 8007cd0:	9a07      	ldr	r2, [sp, #28]
 8007cd2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007cd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d028      	beq.n	8007d2e <_dtoa_r+0xae6>
 8007cdc:	4649      	mov	r1, r9
 8007cde:	2300      	movs	r3, #0
 8007ce0:	220a      	movs	r2, #10
 8007ce2:	4658      	mov	r0, fp
 8007ce4:	f000 fb90 	bl	8008408 <__multadd>
 8007ce8:	42af      	cmp	r7, r5
 8007cea:	4681      	mov	r9, r0
 8007cec:	f04f 0300 	mov.w	r3, #0
 8007cf0:	f04f 020a 	mov.w	r2, #10
 8007cf4:	4639      	mov	r1, r7
 8007cf6:	4658      	mov	r0, fp
 8007cf8:	d107      	bne.n	8007d0a <_dtoa_r+0xac2>
 8007cfa:	f000 fb85 	bl	8008408 <__multadd>
 8007cfe:	4607      	mov	r7, r0
 8007d00:	4605      	mov	r5, r0
 8007d02:	9b07      	ldr	r3, [sp, #28]
 8007d04:	3301      	adds	r3, #1
 8007d06:	9307      	str	r3, [sp, #28]
 8007d08:	e774      	b.n	8007bf4 <_dtoa_r+0x9ac>
 8007d0a:	f000 fb7d 	bl	8008408 <__multadd>
 8007d0e:	4629      	mov	r1, r5
 8007d10:	4607      	mov	r7, r0
 8007d12:	2300      	movs	r3, #0
 8007d14:	220a      	movs	r2, #10
 8007d16:	4658      	mov	r0, fp
 8007d18:	f000 fb76 	bl	8008408 <__multadd>
 8007d1c:	4605      	mov	r5, r0
 8007d1e:	e7f0      	b.n	8007d02 <_dtoa_r+0xaba>
 8007d20:	9b00      	ldr	r3, [sp, #0]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	bfcc      	ite	gt
 8007d26:	461e      	movgt	r6, r3
 8007d28:	2601      	movle	r6, #1
 8007d2a:	4456      	add	r6, sl
 8007d2c:	2700      	movs	r7, #0
 8007d2e:	4649      	mov	r1, r9
 8007d30:	2201      	movs	r2, #1
 8007d32:	4658      	mov	r0, fp
 8007d34:	f000 fd14 	bl	8008760 <__lshift>
 8007d38:	4621      	mov	r1, r4
 8007d3a:	4681      	mov	r9, r0
 8007d3c:	f000 fd7c 	bl	8008838 <__mcmp>
 8007d40:	2800      	cmp	r0, #0
 8007d42:	dcb0      	bgt.n	8007ca6 <_dtoa_r+0xa5e>
 8007d44:	d102      	bne.n	8007d4c <_dtoa_r+0xb04>
 8007d46:	f018 0f01 	tst.w	r8, #1
 8007d4a:	d1ac      	bne.n	8007ca6 <_dtoa_r+0xa5e>
 8007d4c:	4633      	mov	r3, r6
 8007d4e:	461e      	mov	r6, r3
 8007d50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d54:	2a30      	cmp	r2, #48	@ 0x30
 8007d56:	d0fa      	beq.n	8007d4e <_dtoa_r+0xb06>
 8007d58:	e5c2      	b.n	80078e0 <_dtoa_r+0x698>
 8007d5a:	459a      	cmp	sl, r3
 8007d5c:	d1a4      	bne.n	8007ca8 <_dtoa_r+0xa60>
 8007d5e:	9b04      	ldr	r3, [sp, #16]
 8007d60:	3301      	adds	r3, #1
 8007d62:	9304      	str	r3, [sp, #16]
 8007d64:	2331      	movs	r3, #49	@ 0x31
 8007d66:	f88a 3000 	strb.w	r3, [sl]
 8007d6a:	e5b9      	b.n	80078e0 <_dtoa_r+0x698>
 8007d6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d6e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007dcc <_dtoa_r+0xb84>
 8007d72:	b11b      	cbz	r3, 8007d7c <_dtoa_r+0xb34>
 8007d74:	f10a 0308 	add.w	r3, sl, #8
 8007d78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007d7a:	6013      	str	r3, [r2, #0]
 8007d7c:	4650      	mov	r0, sl
 8007d7e:	b019      	add	sp, #100	@ 0x64
 8007d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	f77f ae37 	ble.w	80079fa <_dtoa_r+0x7b2>
 8007d8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d90:	2001      	movs	r0, #1
 8007d92:	e655      	b.n	8007a40 <_dtoa_r+0x7f8>
 8007d94:	9b00      	ldr	r3, [sp, #0]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f77f aed6 	ble.w	8007b48 <_dtoa_r+0x900>
 8007d9c:	4656      	mov	r6, sl
 8007d9e:	4621      	mov	r1, r4
 8007da0:	4648      	mov	r0, r9
 8007da2:	f7ff f9c7 	bl	8007134 <quorem>
 8007da6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007daa:	f806 8b01 	strb.w	r8, [r6], #1
 8007dae:	9b00      	ldr	r3, [sp, #0]
 8007db0:	eba6 020a 	sub.w	r2, r6, sl
 8007db4:	4293      	cmp	r3, r2
 8007db6:	ddb3      	ble.n	8007d20 <_dtoa_r+0xad8>
 8007db8:	4649      	mov	r1, r9
 8007dba:	2300      	movs	r3, #0
 8007dbc:	220a      	movs	r2, #10
 8007dbe:	4658      	mov	r0, fp
 8007dc0:	f000 fb22 	bl	8008408 <__multadd>
 8007dc4:	4681      	mov	r9, r0
 8007dc6:	e7ea      	b.n	8007d9e <_dtoa_r+0xb56>
 8007dc8:	080094e8 	.word	0x080094e8
 8007dcc:	08009483 	.word	0x08009483

08007dd0 <__ssputs_r>:
 8007dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dd4:	688e      	ldr	r6, [r1, #8]
 8007dd6:	461f      	mov	r7, r3
 8007dd8:	42be      	cmp	r6, r7
 8007dda:	680b      	ldr	r3, [r1, #0]
 8007ddc:	4682      	mov	sl, r0
 8007dde:	460c      	mov	r4, r1
 8007de0:	4690      	mov	r8, r2
 8007de2:	d82d      	bhi.n	8007e40 <__ssputs_r+0x70>
 8007de4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007de8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007dec:	d026      	beq.n	8007e3c <__ssputs_r+0x6c>
 8007dee:	6965      	ldr	r5, [r4, #20]
 8007df0:	6909      	ldr	r1, [r1, #16]
 8007df2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007df6:	eba3 0901 	sub.w	r9, r3, r1
 8007dfa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007dfe:	1c7b      	adds	r3, r7, #1
 8007e00:	444b      	add	r3, r9
 8007e02:	106d      	asrs	r5, r5, #1
 8007e04:	429d      	cmp	r5, r3
 8007e06:	bf38      	it	cc
 8007e08:	461d      	movcc	r5, r3
 8007e0a:	0553      	lsls	r3, r2, #21
 8007e0c:	d527      	bpl.n	8007e5e <__ssputs_r+0x8e>
 8007e0e:	4629      	mov	r1, r5
 8007e10:	f000 f960 	bl	80080d4 <_malloc_r>
 8007e14:	4606      	mov	r6, r0
 8007e16:	b360      	cbz	r0, 8007e72 <__ssputs_r+0xa2>
 8007e18:	6921      	ldr	r1, [r4, #16]
 8007e1a:	464a      	mov	r2, r9
 8007e1c:	f000 ff08 	bl	8008c30 <memcpy>
 8007e20:	89a3      	ldrh	r3, [r4, #12]
 8007e22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007e26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e2a:	81a3      	strh	r3, [r4, #12]
 8007e2c:	6126      	str	r6, [r4, #16]
 8007e2e:	6165      	str	r5, [r4, #20]
 8007e30:	444e      	add	r6, r9
 8007e32:	eba5 0509 	sub.w	r5, r5, r9
 8007e36:	6026      	str	r6, [r4, #0]
 8007e38:	60a5      	str	r5, [r4, #8]
 8007e3a:	463e      	mov	r6, r7
 8007e3c:	42be      	cmp	r6, r7
 8007e3e:	d900      	bls.n	8007e42 <__ssputs_r+0x72>
 8007e40:	463e      	mov	r6, r7
 8007e42:	6820      	ldr	r0, [r4, #0]
 8007e44:	4632      	mov	r2, r6
 8007e46:	4641      	mov	r1, r8
 8007e48:	f000 fe82 	bl	8008b50 <memmove>
 8007e4c:	68a3      	ldr	r3, [r4, #8]
 8007e4e:	1b9b      	subs	r3, r3, r6
 8007e50:	60a3      	str	r3, [r4, #8]
 8007e52:	6823      	ldr	r3, [r4, #0]
 8007e54:	4433      	add	r3, r6
 8007e56:	6023      	str	r3, [r4, #0]
 8007e58:	2000      	movs	r0, #0
 8007e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e5e:	462a      	mov	r2, r5
 8007e60:	f000 fe48 	bl	8008af4 <_realloc_r>
 8007e64:	4606      	mov	r6, r0
 8007e66:	2800      	cmp	r0, #0
 8007e68:	d1e0      	bne.n	8007e2c <__ssputs_r+0x5c>
 8007e6a:	6921      	ldr	r1, [r4, #16]
 8007e6c:	4650      	mov	r0, sl
 8007e6e:	f000 ff09 	bl	8008c84 <_free_r>
 8007e72:	230c      	movs	r3, #12
 8007e74:	f8ca 3000 	str.w	r3, [sl]
 8007e78:	89a3      	ldrh	r3, [r4, #12]
 8007e7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e7e:	81a3      	strh	r3, [r4, #12]
 8007e80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e84:	e7e9      	b.n	8007e5a <__ssputs_r+0x8a>
	...

08007e88 <_svfiprintf_r>:
 8007e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e8c:	4698      	mov	r8, r3
 8007e8e:	898b      	ldrh	r3, [r1, #12]
 8007e90:	061b      	lsls	r3, r3, #24
 8007e92:	b09d      	sub	sp, #116	@ 0x74
 8007e94:	4607      	mov	r7, r0
 8007e96:	460d      	mov	r5, r1
 8007e98:	4614      	mov	r4, r2
 8007e9a:	d510      	bpl.n	8007ebe <_svfiprintf_r+0x36>
 8007e9c:	690b      	ldr	r3, [r1, #16]
 8007e9e:	b973      	cbnz	r3, 8007ebe <_svfiprintf_r+0x36>
 8007ea0:	2140      	movs	r1, #64	@ 0x40
 8007ea2:	f000 f917 	bl	80080d4 <_malloc_r>
 8007ea6:	6028      	str	r0, [r5, #0]
 8007ea8:	6128      	str	r0, [r5, #16]
 8007eaa:	b930      	cbnz	r0, 8007eba <_svfiprintf_r+0x32>
 8007eac:	230c      	movs	r3, #12
 8007eae:	603b      	str	r3, [r7, #0]
 8007eb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007eb4:	b01d      	add	sp, #116	@ 0x74
 8007eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eba:	2340      	movs	r3, #64	@ 0x40
 8007ebc:	616b      	str	r3, [r5, #20]
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ec2:	2320      	movs	r3, #32
 8007ec4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ec8:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ecc:	2330      	movs	r3, #48	@ 0x30
 8007ece:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800806c <_svfiprintf_r+0x1e4>
 8007ed2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007ed6:	f04f 0901 	mov.w	r9, #1
 8007eda:	4623      	mov	r3, r4
 8007edc:	469a      	mov	sl, r3
 8007ede:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ee2:	b10a      	cbz	r2, 8007ee8 <_svfiprintf_r+0x60>
 8007ee4:	2a25      	cmp	r2, #37	@ 0x25
 8007ee6:	d1f9      	bne.n	8007edc <_svfiprintf_r+0x54>
 8007ee8:	ebba 0b04 	subs.w	fp, sl, r4
 8007eec:	d00b      	beq.n	8007f06 <_svfiprintf_r+0x7e>
 8007eee:	465b      	mov	r3, fp
 8007ef0:	4622      	mov	r2, r4
 8007ef2:	4629      	mov	r1, r5
 8007ef4:	4638      	mov	r0, r7
 8007ef6:	f7ff ff6b 	bl	8007dd0 <__ssputs_r>
 8007efa:	3001      	adds	r0, #1
 8007efc:	f000 80a7 	beq.w	800804e <_svfiprintf_r+0x1c6>
 8007f00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f02:	445a      	add	r2, fp
 8007f04:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f06:	f89a 3000 	ldrb.w	r3, [sl]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	f000 809f 	beq.w	800804e <_svfiprintf_r+0x1c6>
 8007f10:	2300      	movs	r3, #0
 8007f12:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f1a:	f10a 0a01 	add.w	sl, sl, #1
 8007f1e:	9304      	str	r3, [sp, #16]
 8007f20:	9307      	str	r3, [sp, #28]
 8007f22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f26:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f28:	4654      	mov	r4, sl
 8007f2a:	2205      	movs	r2, #5
 8007f2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f30:	484e      	ldr	r0, [pc, #312]	@ (800806c <_svfiprintf_r+0x1e4>)
 8007f32:	f7f8 f965 	bl	8000200 <memchr>
 8007f36:	9a04      	ldr	r2, [sp, #16]
 8007f38:	b9d8      	cbnz	r0, 8007f72 <_svfiprintf_r+0xea>
 8007f3a:	06d0      	lsls	r0, r2, #27
 8007f3c:	bf44      	itt	mi
 8007f3e:	2320      	movmi	r3, #32
 8007f40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f44:	0711      	lsls	r1, r2, #28
 8007f46:	bf44      	itt	mi
 8007f48:	232b      	movmi	r3, #43	@ 0x2b
 8007f4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f4e:	f89a 3000 	ldrb.w	r3, [sl]
 8007f52:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f54:	d015      	beq.n	8007f82 <_svfiprintf_r+0xfa>
 8007f56:	9a07      	ldr	r2, [sp, #28]
 8007f58:	4654      	mov	r4, sl
 8007f5a:	2000      	movs	r0, #0
 8007f5c:	f04f 0c0a 	mov.w	ip, #10
 8007f60:	4621      	mov	r1, r4
 8007f62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f66:	3b30      	subs	r3, #48	@ 0x30
 8007f68:	2b09      	cmp	r3, #9
 8007f6a:	d94b      	bls.n	8008004 <_svfiprintf_r+0x17c>
 8007f6c:	b1b0      	cbz	r0, 8007f9c <_svfiprintf_r+0x114>
 8007f6e:	9207      	str	r2, [sp, #28]
 8007f70:	e014      	b.n	8007f9c <_svfiprintf_r+0x114>
 8007f72:	eba0 0308 	sub.w	r3, r0, r8
 8007f76:	fa09 f303 	lsl.w	r3, r9, r3
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	9304      	str	r3, [sp, #16]
 8007f7e:	46a2      	mov	sl, r4
 8007f80:	e7d2      	b.n	8007f28 <_svfiprintf_r+0xa0>
 8007f82:	9b03      	ldr	r3, [sp, #12]
 8007f84:	1d19      	adds	r1, r3, #4
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	9103      	str	r1, [sp, #12]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	bfbb      	ittet	lt
 8007f8e:	425b      	neglt	r3, r3
 8007f90:	f042 0202 	orrlt.w	r2, r2, #2
 8007f94:	9307      	strge	r3, [sp, #28]
 8007f96:	9307      	strlt	r3, [sp, #28]
 8007f98:	bfb8      	it	lt
 8007f9a:	9204      	strlt	r2, [sp, #16]
 8007f9c:	7823      	ldrb	r3, [r4, #0]
 8007f9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007fa0:	d10a      	bne.n	8007fb8 <_svfiprintf_r+0x130>
 8007fa2:	7863      	ldrb	r3, [r4, #1]
 8007fa4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fa6:	d132      	bne.n	800800e <_svfiprintf_r+0x186>
 8007fa8:	9b03      	ldr	r3, [sp, #12]
 8007faa:	1d1a      	adds	r2, r3, #4
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	9203      	str	r2, [sp, #12]
 8007fb0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007fb4:	3402      	adds	r4, #2
 8007fb6:	9305      	str	r3, [sp, #20]
 8007fb8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800807c <_svfiprintf_r+0x1f4>
 8007fbc:	7821      	ldrb	r1, [r4, #0]
 8007fbe:	2203      	movs	r2, #3
 8007fc0:	4650      	mov	r0, sl
 8007fc2:	f7f8 f91d 	bl	8000200 <memchr>
 8007fc6:	b138      	cbz	r0, 8007fd8 <_svfiprintf_r+0x150>
 8007fc8:	9b04      	ldr	r3, [sp, #16]
 8007fca:	eba0 000a 	sub.w	r0, r0, sl
 8007fce:	2240      	movs	r2, #64	@ 0x40
 8007fd0:	4082      	lsls	r2, r0
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	3401      	adds	r4, #1
 8007fd6:	9304      	str	r3, [sp, #16]
 8007fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fdc:	4824      	ldr	r0, [pc, #144]	@ (8008070 <_svfiprintf_r+0x1e8>)
 8007fde:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007fe2:	2206      	movs	r2, #6
 8007fe4:	f7f8 f90c 	bl	8000200 <memchr>
 8007fe8:	2800      	cmp	r0, #0
 8007fea:	d036      	beq.n	800805a <_svfiprintf_r+0x1d2>
 8007fec:	4b21      	ldr	r3, [pc, #132]	@ (8008074 <_svfiprintf_r+0x1ec>)
 8007fee:	bb1b      	cbnz	r3, 8008038 <_svfiprintf_r+0x1b0>
 8007ff0:	9b03      	ldr	r3, [sp, #12]
 8007ff2:	3307      	adds	r3, #7
 8007ff4:	f023 0307 	bic.w	r3, r3, #7
 8007ff8:	3308      	adds	r3, #8
 8007ffa:	9303      	str	r3, [sp, #12]
 8007ffc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ffe:	4433      	add	r3, r6
 8008000:	9309      	str	r3, [sp, #36]	@ 0x24
 8008002:	e76a      	b.n	8007eda <_svfiprintf_r+0x52>
 8008004:	fb0c 3202 	mla	r2, ip, r2, r3
 8008008:	460c      	mov	r4, r1
 800800a:	2001      	movs	r0, #1
 800800c:	e7a8      	b.n	8007f60 <_svfiprintf_r+0xd8>
 800800e:	2300      	movs	r3, #0
 8008010:	3401      	adds	r4, #1
 8008012:	9305      	str	r3, [sp, #20]
 8008014:	4619      	mov	r1, r3
 8008016:	f04f 0c0a 	mov.w	ip, #10
 800801a:	4620      	mov	r0, r4
 800801c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008020:	3a30      	subs	r2, #48	@ 0x30
 8008022:	2a09      	cmp	r2, #9
 8008024:	d903      	bls.n	800802e <_svfiprintf_r+0x1a6>
 8008026:	2b00      	cmp	r3, #0
 8008028:	d0c6      	beq.n	8007fb8 <_svfiprintf_r+0x130>
 800802a:	9105      	str	r1, [sp, #20]
 800802c:	e7c4      	b.n	8007fb8 <_svfiprintf_r+0x130>
 800802e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008032:	4604      	mov	r4, r0
 8008034:	2301      	movs	r3, #1
 8008036:	e7f0      	b.n	800801a <_svfiprintf_r+0x192>
 8008038:	ab03      	add	r3, sp, #12
 800803a:	9300      	str	r3, [sp, #0]
 800803c:	462a      	mov	r2, r5
 800803e:	4b0e      	ldr	r3, [pc, #56]	@ (8008078 <_svfiprintf_r+0x1f0>)
 8008040:	a904      	add	r1, sp, #16
 8008042:	4638      	mov	r0, r7
 8008044:	f7fe fae4 	bl	8006610 <_printf_float>
 8008048:	1c42      	adds	r2, r0, #1
 800804a:	4606      	mov	r6, r0
 800804c:	d1d6      	bne.n	8007ffc <_svfiprintf_r+0x174>
 800804e:	89ab      	ldrh	r3, [r5, #12]
 8008050:	065b      	lsls	r3, r3, #25
 8008052:	f53f af2d 	bmi.w	8007eb0 <_svfiprintf_r+0x28>
 8008056:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008058:	e72c      	b.n	8007eb4 <_svfiprintf_r+0x2c>
 800805a:	ab03      	add	r3, sp, #12
 800805c:	9300      	str	r3, [sp, #0]
 800805e:	462a      	mov	r2, r5
 8008060:	4b05      	ldr	r3, [pc, #20]	@ (8008078 <_svfiprintf_r+0x1f0>)
 8008062:	a904      	add	r1, sp, #16
 8008064:	4638      	mov	r0, r7
 8008066:	f7fe fd6b 	bl	8006b40 <_printf_i>
 800806a:	e7ed      	b.n	8008048 <_svfiprintf_r+0x1c0>
 800806c:	080094f9 	.word	0x080094f9
 8008070:	08009503 	.word	0x08009503
 8008074:	08006611 	.word	0x08006611
 8008078:	08007dd1 	.word	0x08007dd1
 800807c:	080094ff 	.word	0x080094ff

08008080 <malloc>:
 8008080:	4b02      	ldr	r3, [pc, #8]	@ (800808c <malloc+0xc>)
 8008082:	4601      	mov	r1, r0
 8008084:	6818      	ldr	r0, [r3, #0]
 8008086:	f000 b825 	b.w	80080d4 <_malloc_r>
 800808a:	bf00      	nop
 800808c:	20000090 	.word	0x20000090

08008090 <sbrk_aligned>:
 8008090:	b570      	push	{r4, r5, r6, lr}
 8008092:	4e0f      	ldr	r6, [pc, #60]	@ (80080d0 <sbrk_aligned+0x40>)
 8008094:	460c      	mov	r4, r1
 8008096:	6831      	ldr	r1, [r6, #0]
 8008098:	4605      	mov	r5, r0
 800809a:	b911      	cbnz	r1, 80080a2 <sbrk_aligned+0x12>
 800809c:	f000 fda6 	bl	8008bec <_sbrk_r>
 80080a0:	6030      	str	r0, [r6, #0]
 80080a2:	4621      	mov	r1, r4
 80080a4:	4628      	mov	r0, r5
 80080a6:	f000 fda1 	bl	8008bec <_sbrk_r>
 80080aa:	1c43      	adds	r3, r0, #1
 80080ac:	d103      	bne.n	80080b6 <sbrk_aligned+0x26>
 80080ae:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80080b2:	4620      	mov	r0, r4
 80080b4:	bd70      	pop	{r4, r5, r6, pc}
 80080b6:	1cc4      	adds	r4, r0, #3
 80080b8:	f024 0403 	bic.w	r4, r4, #3
 80080bc:	42a0      	cmp	r0, r4
 80080be:	d0f8      	beq.n	80080b2 <sbrk_aligned+0x22>
 80080c0:	1a21      	subs	r1, r4, r0
 80080c2:	4628      	mov	r0, r5
 80080c4:	f000 fd92 	bl	8008bec <_sbrk_r>
 80080c8:	3001      	adds	r0, #1
 80080ca:	d1f2      	bne.n	80080b2 <sbrk_aligned+0x22>
 80080cc:	e7ef      	b.n	80080ae <sbrk_aligned+0x1e>
 80080ce:	bf00      	nop
 80080d0:	20000508 	.word	0x20000508

080080d4 <_malloc_r>:
 80080d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080d8:	1ccd      	adds	r5, r1, #3
 80080da:	f025 0503 	bic.w	r5, r5, #3
 80080de:	3508      	adds	r5, #8
 80080e0:	2d0c      	cmp	r5, #12
 80080e2:	bf38      	it	cc
 80080e4:	250c      	movcc	r5, #12
 80080e6:	2d00      	cmp	r5, #0
 80080e8:	4606      	mov	r6, r0
 80080ea:	db01      	blt.n	80080f0 <_malloc_r+0x1c>
 80080ec:	42a9      	cmp	r1, r5
 80080ee:	d904      	bls.n	80080fa <_malloc_r+0x26>
 80080f0:	230c      	movs	r3, #12
 80080f2:	6033      	str	r3, [r6, #0]
 80080f4:	2000      	movs	r0, #0
 80080f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80081d0 <_malloc_r+0xfc>
 80080fe:	f000 f915 	bl	800832c <__malloc_lock>
 8008102:	f8d8 3000 	ldr.w	r3, [r8]
 8008106:	461c      	mov	r4, r3
 8008108:	bb44      	cbnz	r4, 800815c <_malloc_r+0x88>
 800810a:	4629      	mov	r1, r5
 800810c:	4630      	mov	r0, r6
 800810e:	f7ff ffbf 	bl	8008090 <sbrk_aligned>
 8008112:	1c43      	adds	r3, r0, #1
 8008114:	4604      	mov	r4, r0
 8008116:	d158      	bne.n	80081ca <_malloc_r+0xf6>
 8008118:	f8d8 4000 	ldr.w	r4, [r8]
 800811c:	4627      	mov	r7, r4
 800811e:	2f00      	cmp	r7, #0
 8008120:	d143      	bne.n	80081aa <_malloc_r+0xd6>
 8008122:	2c00      	cmp	r4, #0
 8008124:	d04b      	beq.n	80081be <_malloc_r+0xea>
 8008126:	6823      	ldr	r3, [r4, #0]
 8008128:	4639      	mov	r1, r7
 800812a:	4630      	mov	r0, r6
 800812c:	eb04 0903 	add.w	r9, r4, r3
 8008130:	f000 fd5c 	bl	8008bec <_sbrk_r>
 8008134:	4581      	cmp	r9, r0
 8008136:	d142      	bne.n	80081be <_malloc_r+0xea>
 8008138:	6821      	ldr	r1, [r4, #0]
 800813a:	1a6d      	subs	r5, r5, r1
 800813c:	4629      	mov	r1, r5
 800813e:	4630      	mov	r0, r6
 8008140:	f7ff ffa6 	bl	8008090 <sbrk_aligned>
 8008144:	3001      	adds	r0, #1
 8008146:	d03a      	beq.n	80081be <_malloc_r+0xea>
 8008148:	6823      	ldr	r3, [r4, #0]
 800814a:	442b      	add	r3, r5
 800814c:	6023      	str	r3, [r4, #0]
 800814e:	f8d8 3000 	ldr.w	r3, [r8]
 8008152:	685a      	ldr	r2, [r3, #4]
 8008154:	bb62      	cbnz	r2, 80081b0 <_malloc_r+0xdc>
 8008156:	f8c8 7000 	str.w	r7, [r8]
 800815a:	e00f      	b.n	800817c <_malloc_r+0xa8>
 800815c:	6822      	ldr	r2, [r4, #0]
 800815e:	1b52      	subs	r2, r2, r5
 8008160:	d420      	bmi.n	80081a4 <_malloc_r+0xd0>
 8008162:	2a0b      	cmp	r2, #11
 8008164:	d917      	bls.n	8008196 <_malloc_r+0xc2>
 8008166:	1961      	adds	r1, r4, r5
 8008168:	42a3      	cmp	r3, r4
 800816a:	6025      	str	r5, [r4, #0]
 800816c:	bf18      	it	ne
 800816e:	6059      	strne	r1, [r3, #4]
 8008170:	6863      	ldr	r3, [r4, #4]
 8008172:	bf08      	it	eq
 8008174:	f8c8 1000 	streq.w	r1, [r8]
 8008178:	5162      	str	r2, [r4, r5]
 800817a:	604b      	str	r3, [r1, #4]
 800817c:	4630      	mov	r0, r6
 800817e:	f000 f8db 	bl	8008338 <__malloc_unlock>
 8008182:	f104 000b 	add.w	r0, r4, #11
 8008186:	1d23      	adds	r3, r4, #4
 8008188:	f020 0007 	bic.w	r0, r0, #7
 800818c:	1ac2      	subs	r2, r0, r3
 800818e:	bf1c      	itt	ne
 8008190:	1a1b      	subne	r3, r3, r0
 8008192:	50a3      	strne	r3, [r4, r2]
 8008194:	e7af      	b.n	80080f6 <_malloc_r+0x22>
 8008196:	6862      	ldr	r2, [r4, #4]
 8008198:	42a3      	cmp	r3, r4
 800819a:	bf0c      	ite	eq
 800819c:	f8c8 2000 	streq.w	r2, [r8]
 80081a0:	605a      	strne	r2, [r3, #4]
 80081a2:	e7eb      	b.n	800817c <_malloc_r+0xa8>
 80081a4:	4623      	mov	r3, r4
 80081a6:	6864      	ldr	r4, [r4, #4]
 80081a8:	e7ae      	b.n	8008108 <_malloc_r+0x34>
 80081aa:	463c      	mov	r4, r7
 80081ac:	687f      	ldr	r7, [r7, #4]
 80081ae:	e7b6      	b.n	800811e <_malloc_r+0x4a>
 80081b0:	461a      	mov	r2, r3
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	42a3      	cmp	r3, r4
 80081b6:	d1fb      	bne.n	80081b0 <_malloc_r+0xdc>
 80081b8:	2300      	movs	r3, #0
 80081ba:	6053      	str	r3, [r2, #4]
 80081bc:	e7de      	b.n	800817c <_malloc_r+0xa8>
 80081be:	230c      	movs	r3, #12
 80081c0:	6033      	str	r3, [r6, #0]
 80081c2:	4630      	mov	r0, r6
 80081c4:	f000 f8b8 	bl	8008338 <__malloc_unlock>
 80081c8:	e794      	b.n	80080f4 <_malloc_r+0x20>
 80081ca:	6005      	str	r5, [r0, #0]
 80081cc:	e7d6      	b.n	800817c <_malloc_r+0xa8>
 80081ce:	bf00      	nop
 80081d0:	2000050c 	.word	0x2000050c

080081d4 <__sflush_r>:
 80081d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80081d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081dc:	0716      	lsls	r6, r2, #28
 80081de:	4605      	mov	r5, r0
 80081e0:	460c      	mov	r4, r1
 80081e2:	d454      	bmi.n	800828e <__sflush_r+0xba>
 80081e4:	684b      	ldr	r3, [r1, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	dc02      	bgt.n	80081f0 <__sflush_r+0x1c>
 80081ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	dd48      	ble.n	8008282 <__sflush_r+0xae>
 80081f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80081f2:	2e00      	cmp	r6, #0
 80081f4:	d045      	beq.n	8008282 <__sflush_r+0xae>
 80081f6:	2300      	movs	r3, #0
 80081f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80081fc:	682f      	ldr	r7, [r5, #0]
 80081fe:	6a21      	ldr	r1, [r4, #32]
 8008200:	602b      	str	r3, [r5, #0]
 8008202:	d030      	beq.n	8008266 <__sflush_r+0x92>
 8008204:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008206:	89a3      	ldrh	r3, [r4, #12]
 8008208:	0759      	lsls	r1, r3, #29
 800820a:	d505      	bpl.n	8008218 <__sflush_r+0x44>
 800820c:	6863      	ldr	r3, [r4, #4]
 800820e:	1ad2      	subs	r2, r2, r3
 8008210:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008212:	b10b      	cbz	r3, 8008218 <__sflush_r+0x44>
 8008214:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008216:	1ad2      	subs	r2, r2, r3
 8008218:	2300      	movs	r3, #0
 800821a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800821c:	6a21      	ldr	r1, [r4, #32]
 800821e:	4628      	mov	r0, r5
 8008220:	47b0      	blx	r6
 8008222:	1c43      	adds	r3, r0, #1
 8008224:	89a3      	ldrh	r3, [r4, #12]
 8008226:	d106      	bne.n	8008236 <__sflush_r+0x62>
 8008228:	6829      	ldr	r1, [r5, #0]
 800822a:	291d      	cmp	r1, #29
 800822c:	d82b      	bhi.n	8008286 <__sflush_r+0xb2>
 800822e:	4a2a      	ldr	r2, [pc, #168]	@ (80082d8 <__sflush_r+0x104>)
 8008230:	410a      	asrs	r2, r1
 8008232:	07d6      	lsls	r6, r2, #31
 8008234:	d427      	bmi.n	8008286 <__sflush_r+0xb2>
 8008236:	2200      	movs	r2, #0
 8008238:	6062      	str	r2, [r4, #4]
 800823a:	04d9      	lsls	r1, r3, #19
 800823c:	6922      	ldr	r2, [r4, #16]
 800823e:	6022      	str	r2, [r4, #0]
 8008240:	d504      	bpl.n	800824c <__sflush_r+0x78>
 8008242:	1c42      	adds	r2, r0, #1
 8008244:	d101      	bne.n	800824a <__sflush_r+0x76>
 8008246:	682b      	ldr	r3, [r5, #0]
 8008248:	b903      	cbnz	r3, 800824c <__sflush_r+0x78>
 800824a:	6560      	str	r0, [r4, #84]	@ 0x54
 800824c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800824e:	602f      	str	r7, [r5, #0]
 8008250:	b1b9      	cbz	r1, 8008282 <__sflush_r+0xae>
 8008252:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008256:	4299      	cmp	r1, r3
 8008258:	d002      	beq.n	8008260 <__sflush_r+0x8c>
 800825a:	4628      	mov	r0, r5
 800825c:	f000 fd12 	bl	8008c84 <_free_r>
 8008260:	2300      	movs	r3, #0
 8008262:	6363      	str	r3, [r4, #52]	@ 0x34
 8008264:	e00d      	b.n	8008282 <__sflush_r+0xae>
 8008266:	2301      	movs	r3, #1
 8008268:	4628      	mov	r0, r5
 800826a:	47b0      	blx	r6
 800826c:	4602      	mov	r2, r0
 800826e:	1c50      	adds	r0, r2, #1
 8008270:	d1c9      	bne.n	8008206 <__sflush_r+0x32>
 8008272:	682b      	ldr	r3, [r5, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d0c6      	beq.n	8008206 <__sflush_r+0x32>
 8008278:	2b1d      	cmp	r3, #29
 800827a:	d001      	beq.n	8008280 <__sflush_r+0xac>
 800827c:	2b16      	cmp	r3, #22
 800827e:	d11e      	bne.n	80082be <__sflush_r+0xea>
 8008280:	602f      	str	r7, [r5, #0]
 8008282:	2000      	movs	r0, #0
 8008284:	e022      	b.n	80082cc <__sflush_r+0xf8>
 8008286:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800828a:	b21b      	sxth	r3, r3
 800828c:	e01b      	b.n	80082c6 <__sflush_r+0xf2>
 800828e:	690f      	ldr	r7, [r1, #16]
 8008290:	2f00      	cmp	r7, #0
 8008292:	d0f6      	beq.n	8008282 <__sflush_r+0xae>
 8008294:	0793      	lsls	r3, r2, #30
 8008296:	680e      	ldr	r6, [r1, #0]
 8008298:	bf08      	it	eq
 800829a:	694b      	ldreq	r3, [r1, #20]
 800829c:	600f      	str	r7, [r1, #0]
 800829e:	bf18      	it	ne
 80082a0:	2300      	movne	r3, #0
 80082a2:	eba6 0807 	sub.w	r8, r6, r7
 80082a6:	608b      	str	r3, [r1, #8]
 80082a8:	f1b8 0f00 	cmp.w	r8, #0
 80082ac:	dde9      	ble.n	8008282 <__sflush_r+0xae>
 80082ae:	6a21      	ldr	r1, [r4, #32]
 80082b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80082b2:	4643      	mov	r3, r8
 80082b4:	463a      	mov	r2, r7
 80082b6:	4628      	mov	r0, r5
 80082b8:	47b0      	blx	r6
 80082ba:	2800      	cmp	r0, #0
 80082bc:	dc08      	bgt.n	80082d0 <__sflush_r+0xfc>
 80082be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082c6:	81a3      	strh	r3, [r4, #12]
 80082c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80082cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082d0:	4407      	add	r7, r0
 80082d2:	eba8 0800 	sub.w	r8, r8, r0
 80082d6:	e7e7      	b.n	80082a8 <__sflush_r+0xd4>
 80082d8:	dfbffffe 	.word	0xdfbffffe

080082dc <_fflush_r>:
 80082dc:	b538      	push	{r3, r4, r5, lr}
 80082de:	690b      	ldr	r3, [r1, #16]
 80082e0:	4605      	mov	r5, r0
 80082e2:	460c      	mov	r4, r1
 80082e4:	b913      	cbnz	r3, 80082ec <_fflush_r+0x10>
 80082e6:	2500      	movs	r5, #0
 80082e8:	4628      	mov	r0, r5
 80082ea:	bd38      	pop	{r3, r4, r5, pc}
 80082ec:	b118      	cbz	r0, 80082f6 <_fflush_r+0x1a>
 80082ee:	6a03      	ldr	r3, [r0, #32]
 80082f0:	b90b      	cbnz	r3, 80082f6 <_fflush_r+0x1a>
 80082f2:	f7fe fe91 	bl	8007018 <__sinit>
 80082f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d0f3      	beq.n	80082e6 <_fflush_r+0xa>
 80082fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008300:	07d0      	lsls	r0, r2, #31
 8008302:	d404      	bmi.n	800830e <_fflush_r+0x32>
 8008304:	0599      	lsls	r1, r3, #22
 8008306:	d402      	bmi.n	800830e <_fflush_r+0x32>
 8008308:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800830a:	f7fe fef2 	bl	80070f2 <__retarget_lock_acquire_recursive>
 800830e:	4628      	mov	r0, r5
 8008310:	4621      	mov	r1, r4
 8008312:	f7ff ff5f 	bl	80081d4 <__sflush_r>
 8008316:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008318:	07da      	lsls	r2, r3, #31
 800831a:	4605      	mov	r5, r0
 800831c:	d4e4      	bmi.n	80082e8 <_fflush_r+0xc>
 800831e:	89a3      	ldrh	r3, [r4, #12]
 8008320:	059b      	lsls	r3, r3, #22
 8008322:	d4e1      	bmi.n	80082e8 <_fflush_r+0xc>
 8008324:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008326:	f7fe fee5 	bl	80070f4 <__retarget_lock_release_recursive>
 800832a:	e7dd      	b.n	80082e8 <_fflush_r+0xc>

0800832c <__malloc_lock>:
 800832c:	4801      	ldr	r0, [pc, #4]	@ (8008334 <__malloc_lock+0x8>)
 800832e:	f7fe bee0 	b.w	80070f2 <__retarget_lock_acquire_recursive>
 8008332:	bf00      	nop
 8008334:	20000504 	.word	0x20000504

08008338 <__malloc_unlock>:
 8008338:	4801      	ldr	r0, [pc, #4]	@ (8008340 <__malloc_unlock+0x8>)
 800833a:	f7fe bedb 	b.w	80070f4 <__retarget_lock_release_recursive>
 800833e:	bf00      	nop
 8008340:	20000504 	.word	0x20000504

08008344 <_Balloc>:
 8008344:	b570      	push	{r4, r5, r6, lr}
 8008346:	69c6      	ldr	r6, [r0, #28]
 8008348:	4604      	mov	r4, r0
 800834a:	460d      	mov	r5, r1
 800834c:	b976      	cbnz	r6, 800836c <_Balloc+0x28>
 800834e:	2010      	movs	r0, #16
 8008350:	f7ff fe96 	bl	8008080 <malloc>
 8008354:	4602      	mov	r2, r0
 8008356:	61e0      	str	r0, [r4, #28]
 8008358:	b920      	cbnz	r0, 8008364 <_Balloc+0x20>
 800835a:	4b18      	ldr	r3, [pc, #96]	@ (80083bc <_Balloc+0x78>)
 800835c:	4818      	ldr	r0, [pc, #96]	@ (80083c0 <_Balloc+0x7c>)
 800835e:	216b      	movs	r1, #107	@ 0x6b
 8008360:	f7fe feca 	bl	80070f8 <__assert_func>
 8008364:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008368:	6006      	str	r6, [r0, #0]
 800836a:	60c6      	str	r6, [r0, #12]
 800836c:	69e6      	ldr	r6, [r4, #28]
 800836e:	68f3      	ldr	r3, [r6, #12]
 8008370:	b183      	cbz	r3, 8008394 <_Balloc+0x50>
 8008372:	69e3      	ldr	r3, [r4, #28]
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800837a:	b9b8      	cbnz	r0, 80083ac <_Balloc+0x68>
 800837c:	2101      	movs	r1, #1
 800837e:	fa01 f605 	lsl.w	r6, r1, r5
 8008382:	1d72      	adds	r2, r6, #5
 8008384:	0092      	lsls	r2, r2, #2
 8008386:	4620      	mov	r0, r4
 8008388:	f000 fc67 	bl	8008c5a <_calloc_r>
 800838c:	b160      	cbz	r0, 80083a8 <_Balloc+0x64>
 800838e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008392:	e00e      	b.n	80083b2 <_Balloc+0x6e>
 8008394:	2221      	movs	r2, #33	@ 0x21
 8008396:	2104      	movs	r1, #4
 8008398:	4620      	mov	r0, r4
 800839a:	f000 fc5e 	bl	8008c5a <_calloc_r>
 800839e:	69e3      	ldr	r3, [r4, #28]
 80083a0:	60f0      	str	r0, [r6, #12]
 80083a2:	68db      	ldr	r3, [r3, #12]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d1e4      	bne.n	8008372 <_Balloc+0x2e>
 80083a8:	2000      	movs	r0, #0
 80083aa:	bd70      	pop	{r4, r5, r6, pc}
 80083ac:	6802      	ldr	r2, [r0, #0]
 80083ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80083b2:	2300      	movs	r3, #0
 80083b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80083b8:	e7f7      	b.n	80083aa <_Balloc+0x66>
 80083ba:	bf00      	nop
 80083bc:	080093d8 	.word	0x080093d8
 80083c0:	0800950a 	.word	0x0800950a

080083c4 <_Bfree>:
 80083c4:	b570      	push	{r4, r5, r6, lr}
 80083c6:	69c6      	ldr	r6, [r0, #28]
 80083c8:	4605      	mov	r5, r0
 80083ca:	460c      	mov	r4, r1
 80083cc:	b976      	cbnz	r6, 80083ec <_Bfree+0x28>
 80083ce:	2010      	movs	r0, #16
 80083d0:	f7ff fe56 	bl	8008080 <malloc>
 80083d4:	4602      	mov	r2, r0
 80083d6:	61e8      	str	r0, [r5, #28]
 80083d8:	b920      	cbnz	r0, 80083e4 <_Bfree+0x20>
 80083da:	4b09      	ldr	r3, [pc, #36]	@ (8008400 <_Bfree+0x3c>)
 80083dc:	4809      	ldr	r0, [pc, #36]	@ (8008404 <_Bfree+0x40>)
 80083de:	218f      	movs	r1, #143	@ 0x8f
 80083e0:	f7fe fe8a 	bl	80070f8 <__assert_func>
 80083e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083e8:	6006      	str	r6, [r0, #0]
 80083ea:	60c6      	str	r6, [r0, #12]
 80083ec:	b13c      	cbz	r4, 80083fe <_Bfree+0x3a>
 80083ee:	69eb      	ldr	r3, [r5, #28]
 80083f0:	6862      	ldr	r2, [r4, #4]
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80083f8:	6021      	str	r1, [r4, #0]
 80083fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80083fe:	bd70      	pop	{r4, r5, r6, pc}
 8008400:	080093d8 	.word	0x080093d8
 8008404:	0800950a 	.word	0x0800950a

08008408 <__multadd>:
 8008408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800840c:	690d      	ldr	r5, [r1, #16]
 800840e:	4607      	mov	r7, r0
 8008410:	460c      	mov	r4, r1
 8008412:	461e      	mov	r6, r3
 8008414:	f101 0c14 	add.w	ip, r1, #20
 8008418:	2000      	movs	r0, #0
 800841a:	f8dc 3000 	ldr.w	r3, [ip]
 800841e:	b299      	uxth	r1, r3
 8008420:	fb02 6101 	mla	r1, r2, r1, r6
 8008424:	0c1e      	lsrs	r6, r3, #16
 8008426:	0c0b      	lsrs	r3, r1, #16
 8008428:	fb02 3306 	mla	r3, r2, r6, r3
 800842c:	b289      	uxth	r1, r1
 800842e:	3001      	adds	r0, #1
 8008430:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008434:	4285      	cmp	r5, r0
 8008436:	f84c 1b04 	str.w	r1, [ip], #4
 800843a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800843e:	dcec      	bgt.n	800841a <__multadd+0x12>
 8008440:	b30e      	cbz	r6, 8008486 <__multadd+0x7e>
 8008442:	68a3      	ldr	r3, [r4, #8]
 8008444:	42ab      	cmp	r3, r5
 8008446:	dc19      	bgt.n	800847c <__multadd+0x74>
 8008448:	6861      	ldr	r1, [r4, #4]
 800844a:	4638      	mov	r0, r7
 800844c:	3101      	adds	r1, #1
 800844e:	f7ff ff79 	bl	8008344 <_Balloc>
 8008452:	4680      	mov	r8, r0
 8008454:	b928      	cbnz	r0, 8008462 <__multadd+0x5a>
 8008456:	4602      	mov	r2, r0
 8008458:	4b0c      	ldr	r3, [pc, #48]	@ (800848c <__multadd+0x84>)
 800845a:	480d      	ldr	r0, [pc, #52]	@ (8008490 <__multadd+0x88>)
 800845c:	21ba      	movs	r1, #186	@ 0xba
 800845e:	f7fe fe4b 	bl	80070f8 <__assert_func>
 8008462:	6922      	ldr	r2, [r4, #16]
 8008464:	3202      	adds	r2, #2
 8008466:	f104 010c 	add.w	r1, r4, #12
 800846a:	0092      	lsls	r2, r2, #2
 800846c:	300c      	adds	r0, #12
 800846e:	f000 fbdf 	bl	8008c30 <memcpy>
 8008472:	4621      	mov	r1, r4
 8008474:	4638      	mov	r0, r7
 8008476:	f7ff ffa5 	bl	80083c4 <_Bfree>
 800847a:	4644      	mov	r4, r8
 800847c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008480:	3501      	adds	r5, #1
 8008482:	615e      	str	r6, [r3, #20]
 8008484:	6125      	str	r5, [r4, #16]
 8008486:	4620      	mov	r0, r4
 8008488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800848c:	080094e8 	.word	0x080094e8
 8008490:	0800950a 	.word	0x0800950a

08008494 <__hi0bits>:
 8008494:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008498:	4603      	mov	r3, r0
 800849a:	bf36      	itet	cc
 800849c:	0403      	lslcc	r3, r0, #16
 800849e:	2000      	movcs	r0, #0
 80084a0:	2010      	movcc	r0, #16
 80084a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80084a6:	bf3c      	itt	cc
 80084a8:	021b      	lslcc	r3, r3, #8
 80084aa:	3008      	addcc	r0, #8
 80084ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084b0:	bf3c      	itt	cc
 80084b2:	011b      	lslcc	r3, r3, #4
 80084b4:	3004      	addcc	r0, #4
 80084b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084ba:	bf3c      	itt	cc
 80084bc:	009b      	lslcc	r3, r3, #2
 80084be:	3002      	addcc	r0, #2
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	db05      	blt.n	80084d0 <__hi0bits+0x3c>
 80084c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80084c8:	f100 0001 	add.w	r0, r0, #1
 80084cc:	bf08      	it	eq
 80084ce:	2020      	moveq	r0, #32
 80084d0:	4770      	bx	lr

080084d2 <__lo0bits>:
 80084d2:	6803      	ldr	r3, [r0, #0]
 80084d4:	4602      	mov	r2, r0
 80084d6:	f013 0007 	ands.w	r0, r3, #7
 80084da:	d00b      	beq.n	80084f4 <__lo0bits+0x22>
 80084dc:	07d9      	lsls	r1, r3, #31
 80084de:	d421      	bmi.n	8008524 <__lo0bits+0x52>
 80084e0:	0798      	lsls	r0, r3, #30
 80084e2:	bf49      	itett	mi
 80084e4:	085b      	lsrmi	r3, r3, #1
 80084e6:	089b      	lsrpl	r3, r3, #2
 80084e8:	2001      	movmi	r0, #1
 80084ea:	6013      	strmi	r3, [r2, #0]
 80084ec:	bf5c      	itt	pl
 80084ee:	6013      	strpl	r3, [r2, #0]
 80084f0:	2002      	movpl	r0, #2
 80084f2:	4770      	bx	lr
 80084f4:	b299      	uxth	r1, r3
 80084f6:	b909      	cbnz	r1, 80084fc <__lo0bits+0x2a>
 80084f8:	0c1b      	lsrs	r3, r3, #16
 80084fa:	2010      	movs	r0, #16
 80084fc:	b2d9      	uxtb	r1, r3
 80084fe:	b909      	cbnz	r1, 8008504 <__lo0bits+0x32>
 8008500:	3008      	adds	r0, #8
 8008502:	0a1b      	lsrs	r3, r3, #8
 8008504:	0719      	lsls	r1, r3, #28
 8008506:	bf04      	itt	eq
 8008508:	091b      	lsreq	r3, r3, #4
 800850a:	3004      	addeq	r0, #4
 800850c:	0799      	lsls	r1, r3, #30
 800850e:	bf04      	itt	eq
 8008510:	089b      	lsreq	r3, r3, #2
 8008512:	3002      	addeq	r0, #2
 8008514:	07d9      	lsls	r1, r3, #31
 8008516:	d403      	bmi.n	8008520 <__lo0bits+0x4e>
 8008518:	085b      	lsrs	r3, r3, #1
 800851a:	f100 0001 	add.w	r0, r0, #1
 800851e:	d003      	beq.n	8008528 <__lo0bits+0x56>
 8008520:	6013      	str	r3, [r2, #0]
 8008522:	4770      	bx	lr
 8008524:	2000      	movs	r0, #0
 8008526:	4770      	bx	lr
 8008528:	2020      	movs	r0, #32
 800852a:	4770      	bx	lr

0800852c <__i2b>:
 800852c:	b510      	push	{r4, lr}
 800852e:	460c      	mov	r4, r1
 8008530:	2101      	movs	r1, #1
 8008532:	f7ff ff07 	bl	8008344 <_Balloc>
 8008536:	4602      	mov	r2, r0
 8008538:	b928      	cbnz	r0, 8008546 <__i2b+0x1a>
 800853a:	4b05      	ldr	r3, [pc, #20]	@ (8008550 <__i2b+0x24>)
 800853c:	4805      	ldr	r0, [pc, #20]	@ (8008554 <__i2b+0x28>)
 800853e:	f240 1145 	movw	r1, #325	@ 0x145
 8008542:	f7fe fdd9 	bl	80070f8 <__assert_func>
 8008546:	2301      	movs	r3, #1
 8008548:	6144      	str	r4, [r0, #20]
 800854a:	6103      	str	r3, [r0, #16]
 800854c:	bd10      	pop	{r4, pc}
 800854e:	bf00      	nop
 8008550:	080094e8 	.word	0x080094e8
 8008554:	0800950a 	.word	0x0800950a

08008558 <__multiply>:
 8008558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800855c:	4614      	mov	r4, r2
 800855e:	690a      	ldr	r2, [r1, #16]
 8008560:	6923      	ldr	r3, [r4, #16]
 8008562:	429a      	cmp	r2, r3
 8008564:	bfa8      	it	ge
 8008566:	4623      	movge	r3, r4
 8008568:	460f      	mov	r7, r1
 800856a:	bfa4      	itt	ge
 800856c:	460c      	movge	r4, r1
 800856e:	461f      	movge	r7, r3
 8008570:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008574:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008578:	68a3      	ldr	r3, [r4, #8]
 800857a:	6861      	ldr	r1, [r4, #4]
 800857c:	eb0a 0609 	add.w	r6, sl, r9
 8008580:	42b3      	cmp	r3, r6
 8008582:	b085      	sub	sp, #20
 8008584:	bfb8      	it	lt
 8008586:	3101      	addlt	r1, #1
 8008588:	f7ff fedc 	bl	8008344 <_Balloc>
 800858c:	b930      	cbnz	r0, 800859c <__multiply+0x44>
 800858e:	4602      	mov	r2, r0
 8008590:	4b44      	ldr	r3, [pc, #272]	@ (80086a4 <__multiply+0x14c>)
 8008592:	4845      	ldr	r0, [pc, #276]	@ (80086a8 <__multiply+0x150>)
 8008594:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008598:	f7fe fdae 	bl	80070f8 <__assert_func>
 800859c:	f100 0514 	add.w	r5, r0, #20
 80085a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80085a4:	462b      	mov	r3, r5
 80085a6:	2200      	movs	r2, #0
 80085a8:	4543      	cmp	r3, r8
 80085aa:	d321      	bcc.n	80085f0 <__multiply+0x98>
 80085ac:	f107 0114 	add.w	r1, r7, #20
 80085b0:	f104 0214 	add.w	r2, r4, #20
 80085b4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80085b8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80085bc:	9302      	str	r3, [sp, #8]
 80085be:	1b13      	subs	r3, r2, r4
 80085c0:	3b15      	subs	r3, #21
 80085c2:	f023 0303 	bic.w	r3, r3, #3
 80085c6:	3304      	adds	r3, #4
 80085c8:	f104 0715 	add.w	r7, r4, #21
 80085cc:	42ba      	cmp	r2, r7
 80085ce:	bf38      	it	cc
 80085d0:	2304      	movcc	r3, #4
 80085d2:	9301      	str	r3, [sp, #4]
 80085d4:	9b02      	ldr	r3, [sp, #8]
 80085d6:	9103      	str	r1, [sp, #12]
 80085d8:	428b      	cmp	r3, r1
 80085da:	d80c      	bhi.n	80085f6 <__multiply+0x9e>
 80085dc:	2e00      	cmp	r6, #0
 80085de:	dd03      	ble.n	80085e8 <__multiply+0x90>
 80085e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d05b      	beq.n	80086a0 <__multiply+0x148>
 80085e8:	6106      	str	r6, [r0, #16]
 80085ea:	b005      	add	sp, #20
 80085ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085f0:	f843 2b04 	str.w	r2, [r3], #4
 80085f4:	e7d8      	b.n	80085a8 <__multiply+0x50>
 80085f6:	f8b1 a000 	ldrh.w	sl, [r1]
 80085fa:	f1ba 0f00 	cmp.w	sl, #0
 80085fe:	d024      	beq.n	800864a <__multiply+0xf2>
 8008600:	f104 0e14 	add.w	lr, r4, #20
 8008604:	46a9      	mov	r9, r5
 8008606:	f04f 0c00 	mov.w	ip, #0
 800860a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800860e:	f8d9 3000 	ldr.w	r3, [r9]
 8008612:	fa1f fb87 	uxth.w	fp, r7
 8008616:	b29b      	uxth	r3, r3
 8008618:	fb0a 330b 	mla	r3, sl, fp, r3
 800861c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008620:	f8d9 7000 	ldr.w	r7, [r9]
 8008624:	4463      	add	r3, ip
 8008626:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800862a:	fb0a c70b 	mla	r7, sl, fp, ip
 800862e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008632:	b29b      	uxth	r3, r3
 8008634:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008638:	4572      	cmp	r2, lr
 800863a:	f849 3b04 	str.w	r3, [r9], #4
 800863e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008642:	d8e2      	bhi.n	800860a <__multiply+0xb2>
 8008644:	9b01      	ldr	r3, [sp, #4]
 8008646:	f845 c003 	str.w	ip, [r5, r3]
 800864a:	9b03      	ldr	r3, [sp, #12]
 800864c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008650:	3104      	adds	r1, #4
 8008652:	f1b9 0f00 	cmp.w	r9, #0
 8008656:	d021      	beq.n	800869c <__multiply+0x144>
 8008658:	682b      	ldr	r3, [r5, #0]
 800865a:	f104 0c14 	add.w	ip, r4, #20
 800865e:	46ae      	mov	lr, r5
 8008660:	f04f 0a00 	mov.w	sl, #0
 8008664:	f8bc b000 	ldrh.w	fp, [ip]
 8008668:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800866c:	fb09 770b 	mla	r7, r9, fp, r7
 8008670:	4457      	add	r7, sl
 8008672:	b29b      	uxth	r3, r3
 8008674:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008678:	f84e 3b04 	str.w	r3, [lr], #4
 800867c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008680:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008684:	f8be 3000 	ldrh.w	r3, [lr]
 8008688:	fb09 330a 	mla	r3, r9, sl, r3
 800868c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008690:	4562      	cmp	r2, ip
 8008692:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008696:	d8e5      	bhi.n	8008664 <__multiply+0x10c>
 8008698:	9f01      	ldr	r7, [sp, #4]
 800869a:	51eb      	str	r3, [r5, r7]
 800869c:	3504      	adds	r5, #4
 800869e:	e799      	b.n	80085d4 <__multiply+0x7c>
 80086a0:	3e01      	subs	r6, #1
 80086a2:	e79b      	b.n	80085dc <__multiply+0x84>
 80086a4:	080094e8 	.word	0x080094e8
 80086a8:	0800950a 	.word	0x0800950a

080086ac <__pow5mult>:
 80086ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086b0:	4615      	mov	r5, r2
 80086b2:	f012 0203 	ands.w	r2, r2, #3
 80086b6:	4607      	mov	r7, r0
 80086b8:	460e      	mov	r6, r1
 80086ba:	d007      	beq.n	80086cc <__pow5mult+0x20>
 80086bc:	4c25      	ldr	r4, [pc, #148]	@ (8008754 <__pow5mult+0xa8>)
 80086be:	3a01      	subs	r2, #1
 80086c0:	2300      	movs	r3, #0
 80086c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80086c6:	f7ff fe9f 	bl	8008408 <__multadd>
 80086ca:	4606      	mov	r6, r0
 80086cc:	10ad      	asrs	r5, r5, #2
 80086ce:	d03d      	beq.n	800874c <__pow5mult+0xa0>
 80086d0:	69fc      	ldr	r4, [r7, #28]
 80086d2:	b97c      	cbnz	r4, 80086f4 <__pow5mult+0x48>
 80086d4:	2010      	movs	r0, #16
 80086d6:	f7ff fcd3 	bl	8008080 <malloc>
 80086da:	4602      	mov	r2, r0
 80086dc:	61f8      	str	r0, [r7, #28]
 80086de:	b928      	cbnz	r0, 80086ec <__pow5mult+0x40>
 80086e0:	4b1d      	ldr	r3, [pc, #116]	@ (8008758 <__pow5mult+0xac>)
 80086e2:	481e      	ldr	r0, [pc, #120]	@ (800875c <__pow5mult+0xb0>)
 80086e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80086e8:	f7fe fd06 	bl	80070f8 <__assert_func>
 80086ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80086f0:	6004      	str	r4, [r0, #0]
 80086f2:	60c4      	str	r4, [r0, #12]
 80086f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80086f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80086fc:	b94c      	cbnz	r4, 8008712 <__pow5mult+0x66>
 80086fe:	f240 2171 	movw	r1, #625	@ 0x271
 8008702:	4638      	mov	r0, r7
 8008704:	f7ff ff12 	bl	800852c <__i2b>
 8008708:	2300      	movs	r3, #0
 800870a:	f8c8 0008 	str.w	r0, [r8, #8]
 800870e:	4604      	mov	r4, r0
 8008710:	6003      	str	r3, [r0, #0]
 8008712:	f04f 0900 	mov.w	r9, #0
 8008716:	07eb      	lsls	r3, r5, #31
 8008718:	d50a      	bpl.n	8008730 <__pow5mult+0x84>
 800871a:	4631      	mov	r1, r6
 800871c:	4622      	mov	r2, r4
 800871e:	4638      	mov	r0, r7
 8008720:	f7ff ff1a 	bl	8008558 <__multiply>
 8008724:	4631      	mov	r1, r6
 8008726:	4680      	mov	r8, r0
 8008728:	4638      	mov	r0, r7
 800872a:	f7ff fe4b 	bl	80083c4 <_Bfree>
 800872e:	4646      	mov	r6, r8
 8008730:	106d      	asrs	r5, r5, #1
 8008732:	d00b      	beq.n	800874c <__pow5mult+0xa0>
 8008734:	6820      	ldr	r0, [r4, #0]
 8008736:	b938      	cbnz	r0, 8008748 <__pow5mult+0x9c>
 8008738:	4622      	mov	r2, r4
 800873a:	4621      	mov	r1, r4
 800873c:	4638      	mov	r0, r7
 800873e:	f7ff ff0b 	bl	8008558 <__multiply>
 8008742:	6020      	str	r0, [r4, #0]
 8008744:	f8c0 9000 	str.w	r9, [r0]
 8008748:	4604      	mov	r4, r0
 800874a:	e7e4      	b.n	8008716 <__pow5mult+0x6a>
 800874c:	4630      	mov	r0, r6
 800874e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008752:	bf00      	nop
 8008754:	08009564 	.word	0x08009564
 8008758:	080093d8 	.word	0x080093d8
 800875c:	0800950a 	.word	0x0800950a

08008760 <__lshift>:
 8008760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008764:	460c      	mov	r4, r1
 8008766:	6849      	ldr	r1, [r1, #4]
 8008768:	6923      	ldr	r3, [r4, #16]
 800876a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800876e:	68a3      	ldr	r3, [r4, #8]
 8008770:	4607      	mov	r7, r0
 8008772:	4691      	mov	r9, r2
 8008774:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008778:	f108 0601 	add.w	r6, r8, #1
 800877c:	42b3      	cmp	r3, r6
 800877e:	db0b      	blt.n	8008798 <__lshift+0x38>
 8008780:	4638      	mov	r0, r7
 8008782:	f7ff fddf 	bl	8008344 <_Balloc>
 8008786:	4605      	mov	r5, r0
 8008788:	b948      	cbnz	r0, 800879e <__lshift+0x3e>
 800878a:	4602      	mov	r2, r0
 800878c:	4b28      	ldr	r3, [pc, #160]	@ (8008830 <__lshift+0xd0>)
 800878e:	4829      	ldr	r0, [pc, #164]	@ (8008834 <__lshift+0xd4>)
 8008790:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008794:	f7fe fcb0 	bl	80070f8 <__assert_func>
 8008798:	3101      	adds	r1, #1
 800879a:	005b      	lsls	r3, r3, #1
 800879c:	e7ee      	b.n	800877c <__lshift+0x1c>
 800879e:	2300      	movs	r3, #0
 80087a0:	f100 0114 	add.w	r1, r0, #20
 80087a4:	f100 0210 	add.w	r2, r0, #16
 80087a8:	4618      	mov	r0, r3
 80087aa:	4553      	cmp	r3, sl
 80087ac:	db33      	blt.n	8008816 <__lshift+0xb6>
 80087ae:	6920      	ldr	r0, [r4, #16]
 80087b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80087b4:	f104 0314 	add.w	r3, r4, #20
 80087b8:	f019 091f 	ands.w	r9, r9, #31
 80087bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80087c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80087c4:	d02b      	beq.n	800881e <__lshift+0xbe>
 80087c6:	f1c9 0e20 	rsb	lr, r9, #32
 80087ca:	468a      	mov	sl, r1
 80087cc:	2200      	movs	r2, #0
 80087ce:	6818      	ldr	r0, [r3, #0]
 80087d0:	fa00 f009 	lsl.w	r0, r0, r9
 80087d4:	4310      	orrs	r0, r2
 80087d6:	f84a 0b04 	str.w	r0, [sl], #4
 80087da:	f853 2b04 	ldr.w	r2, [r3], #4
 80087de:	459c      	cmp	ip, r3
 80087e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80087e4:	d8f3      	bhi.n	80087ce <__lshift+0x6e>
 80087e6:	ebac 0304 	sub.w	r3, ip, r4
 80087ea:	3b15      	subs	r3, #21
 80087ec:	f023 0303 	bic.w	r3, r3, #3
 80087f0:	3304      	adds	r3, #4
 80087f2:	f104 0015 	add.w	r0, r4, #21
 80087f6:	4584      	cmp	ip, r0
 80087f8:	bf38      	it	cc
 80087fa:	2304      	movcc	r3, #4
 80087fc:	50ca      	str	r2, [r1, r3]
 80087fe:	b10a      	cbz	r2, 8008804 <__lshift+0xa4>
 8008800:	f108 0602 	add.w	r6, r8, #2
 8008804:	3e01      	subs	r6, #1
 8008806:	4638      	mov	r0, r7
 8008808:	612e      	str	r6, [r5, #16]
 800880a:	4621      	mov	r1, r4
 800880c:	f7ff fdda 	bl	80083c4 <_Bfree>
 8008810:	4628      	mov	r0, r5
 8008812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008816:	f842 0f04 	str.w	r0, [r2, #4]!
 800881a:	3301      	adds	r3, #1
 800881c:	e7c5      	b.n	80087aa <__lshift+0x4a>
 800881e:	3904      	subs	r1, #4
 8008820:	f853 2b04 	ldr.w	r2, [r3], #4
 8008824:	f841 2f04 	str.w	r2, [r1, #4]!
 8008828:	459c      	cmp	ip, r3
 800882a:	d8f9      	bhi.n	8008820 <__lshift+0xc0>
 800882c:	e7ea      	b.n	8008804 <__lshift+0xa4>
 800882e:	bf00      	nop
 8008830:	080094e8 	.word	0x080094e8
 8008834:	0800950a 	.word	0x0800950a

08008838 <__mcmp>:
 8008838:	690a      	ldr	r2, [r1, #16]
 800883a:	4603      	mov	r3, r0
 800883c:	6900      	ldr	r0, [r0, #16]
 800883e:	1a80      	subs	r0, r0, r2
 8008840:	b530      	push	{r4, r5, lr}
 8008842:	d10e      	bne.n	8008862 <__mcmp+0x2a>
 8008844:	3314      	adds	r3, #20
 8008846:	3114      	adds	r1, #20
 8008848:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800884c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008850:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008854:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008858:	4295      	cmp	r5, r2
 800885a:	d003      	beq.n	8008864 <__mcmp+0x2c>
 800885c:	d205      	bcs.n	800886a <__mcmp+0x32>
 800885e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008862:	bd30      	pop	{r4, r5, pc}
 8008864:	42a3      	cmp	r3, r4
 8008866:	d3f3      	bcc.n	8008850 <__mcmp+0x18>
 8008868:	e7fb      	b.n	8008862 <__mcmp+0x2a>
 800886a:	2001      	movs	r0, #1
 800886c:	e7f9      	b.n	8008862 <__mcmp+0x2a>
	...

08008870 <__mdiff>:
 8008870:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008874:	4689      	mov	r9, r1
 8008876:	4606      	mov	r6, r0
 8008878:	4611      	mov	r1, r2
 800887a:	4648      	mov	r0, r9
 800887c:	4614      	mov	r4, r2
 800887e:	f7ff ffdb 	bl	8008838 <__mcmp>
 8008882:	1e05      	subs	r5, r0, #0
 8008884:	d112      	bne.n	80088ac <__mdiff+0x3c>
 8008886:	4629      	mov	r1, r5
 8008888:	4630      	mov	r0, r6
 800888a:	f7ff fd5b 	bl	8008344 <_Balloc>
 800888e:	4602      	mov	r2, r0
 8008890:	b928      	cbnz	r0, 800889e <__mdiff+0x2e>
 8008892:	4b3f      	ldr	r3, [pc, #252]	@ (8008990 <__mdiff+0x120>)
 8008894:	f240 2137 	movw	r1, #567	@ 0x237
 8008898:	483e      	ldr	r0, [pc, #248]	@ (8008994 <__mdiff+0x124>)
 800889a:	f7fe fc2d 	bl	80070f8 <__assert_func>
 800889e:	2301      	movs	r3, #1
 80088a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80088a4:	4610      	mov	r0, r2
 80088a6:	b003      	add	sp, #12
 80088a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ac:	bfbc      	itt	lt
 80088ae:	464b      	movlt	r3, r9
 80088b0:	46a1      	movlt	r9, r4
 80088b2:	4630      	mov	r0, r6
 80088b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80088b8:	bfba      	itte	lt
 80088ba:	461c      	movlt	r4, r3
 80088bc:	2501      	movlt	r5, #1
 80088be:	2500      	movge	r5, #0
 80088c0:	f7ff fd40 	bl	8008344 <_Balloc>
 80088c4:	4602      	mov	r2, r0
 80088c6:	b918      	cbnz	r0, 80088d0 <__mdiff+0x60>
 80088c8:	4b31      	ldr	r3, [pc, #196]	@ (8008990 <__mdiff+0x120>)
 80088ca:	f240 2145 	movw	r1, #581	@ 0x245
 80088ce:	e7e3      	b.n	8008898 <__mdiff+0x28>
 80088d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80088d4:	6926      	ldr	r6, [r4, #16]
 80088d6:	60c5      	str	r5, [r0, #12]
 80088d8:	f109 0310 	add.w	r3, r9, #16
 80088dc:	f109 0514 	add.w	r5, r9, #20
 80088e0:	f104 0e14 	add.w	lr, r4, #20
 80088e4:	f100 0b14 	add.w	fp, r0, #20
 80088e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80088ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80088f0:	9301      	str	r3, [sp, #4]
 80088f2:	46d9      	mov	r9, fp
 80088f4:	f04f 0c00 	mov.w	ip, #0
 80088f8:	9b01      	ldr	r3, [sp, #4]
 80088fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80088fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008902:	9301      	str	r3, [sp, #4]
 8008904:	fa1f f38a 	uxth.w	r3, sl
 8008908:	4619      	mov	r1, r3
 800890a:	b283      	uxth	r3, r0
 800890c:	1acb      	subs	r3, r1, r3
 800890e:	0c00      	lsrs	r0, r0, #16
 8008910:	4463      	add	r3, ip
 8008912:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008916:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800891a:	b29b      	uxth	r3, r3
 800891c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008920:	4576      	cmp	r6, lr
 8008922:	f849 3b04 	str.w	r3, [r9], #4
 8008926:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800892a:	d8e5      	bhi.n	80088f8 <__mdiff+0x88>
 800892c:	1b33      	subs	r3, r6, r4
 800892e:	3b15      	subs	r3, #21
 8008930:	f023 0303 	bic.w	r3, r3, #3
 8008934:	3415      	adds	r4, #21
 8008936:	3304      	adds	r3, #4
 8008938:	42a6      	cmp	r6, r4
 800893a:	bf38      	it	cc
 800893c:	2304      	movcc	r3, #4
 800893e:	441d      	add	r5, r3
 8008940:	445b      	add	r3, fp
 8008942:	461e      	mov	r6, r3
 8008944:	462c      	mov	r4, r5
 8008946:	4544      	cmp	r4, r8
 8008948:	d30e      	bcc.n	8008968 <__mdiff+0xf8>
 800894a:	f108 0103 	add.w	r1, r8, #3
 800894e:	1b49      	subs	r1, r1, r5
 8008950:	f021 0103 	bic.w	r1, r1, #3
 8008954:	3d03      	subs	r5, #3
 8008956:	45a8      	cmp	r8, r5
 8008958:	bf38      	it	cc
 800895a:	2100      	movcc	r1, #0
 800895c:	440b      	add	r3, r1
 800895e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008962:	b191      	cbz	r1, 800898a <__mdiff+0x11a>
 8008964:	6117      	str	r7, [r2, #16]
 8008966:	e79d      	b.n	80088a4 <__mdiff+0x34>
 8008968:	f854 1b04 	ldr.w	r1, [r4], #4
 800896c:	46e6      	mov	lr, ip
 800896e:	0c08      	lsrs	r0, r1, #16
 8008970:	fa1c fc81 	uxtah	ip, ip, r1
 8008974:	4471      	add	r1, lr
 8008976:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800897a:	b289      	uxth	r1, r1
 800897c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008980:	f846 1b04 	str.w	r1, [r6], #4
 8008984:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008988:	e7dd      	b.n	8008946 <__mdiff+0xd6>
 800898a:	3f01      	subs	r7, #1
 800898c:	e7e7      	b.n	800895e <__mdiff+0xee>
 800898e:	bf00      	nop
 8008990:	080094e8 	.word	0x080094e8
 8008994:	0800950a 	.word	0x0800950a

08008998 <__d2b>:
 8008998:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800899c:	460f      	mov	r7, r1
 800899e:	2101      	movs	r1, #1
 80089a0:	ec59 8b10 	vmov	r8, r9, d0
 80089a4:	4616      	mov	r6, r2
 80089a6:	f7ff fccd 	bl	8008344 <_Balloc>
 80089aa:	4604      	mov	r4, r0
 80089ac:	b930      	cbnz	r0, 80089bc <__d2b+0x24>
 80089ae:	4602      	mov	r2, r0
 80089b0:	4b23      	ldr	r3, [pc, #140]	@ (8008a40 <__d2b+0xa8>)
 80089b2:	4824      	ldr	r0, [pc, #144]	@ (8008a44 <__d2b+0xac>)
 80089b4:	f240 310f 	movw	r1, #783	@ 0x30f
 80089b8:	f7fe fb9e 	bl	80070f8 <__assert_func>
 80089bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80089c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80089c4:	b10d      	cbz	r5, 80089ca <__d2b+0x32>
 80089c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80089ca:	9301      	str	r3, [sp, #4]
 80089cc:	f1b8 0300 	subs.w	r3, r8, #0
 80089d0:	d023      	beq.n	8008a1a <__d2b+0x82>
 80089d2:	4668      	mov	r0, sp
 80089d4:	9300      	str	r3, [sp, #0]
 80089d6:	f7ff fd7c 	bl	80084d2 <__lo0bits>
 80089da:	e9dd 1200 	ldrd	r1, r2, [sp]
 80089de:	b1d0      	cbz	r0, 8008a16 <__d2b+0x7e>
 80089e0:	f1c0 0320 	rsb	r3, r0, #32
 80089e4:	fa02 f303 	lsl.w	r3, r2, r3
 80089e8:	430b      	orrs	r3, r1
 80089ea:	40c2      	lsrs	r2, r0
 80089ec:	6163      	str	r3, [r4, #20]
 80089ee:	9201      	str	r2, [sp, #4]
 80089f0:	9b01      	ldr	r3, [sp, #4]
 80089f2:	61a3      	str	r3, [r4, #24]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	bf0c      	ite	eq
 80089f8:	2201      	moveq	r2, #1
 80089fa:	2202      	movne	r2, #2
 80089fc:	6122      	str	r2, [r4, #16]
 80089fe:	b1a5      	cbz	r5, 8008a2a <__d2b+0x92>
 8008a00:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008a04:	4405      	add	r5, r0
 8008a06:	603d      	str	r5, [r7, #0]
 8008a08:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008a0c:	6030      	str	r0, [r6, #0]
 8008a0e:	4620      	mov	r0, r4
 8008a10:	b003      	add	sp, #12
 8008a12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a16:	6161      	str	r1, [r4, #20]
 8008a18:	e7ea      	b.n	80089f0 <__d2b+0x58>
 8008a1a:	a801      	add	r0, sp, #4
 8008a1c:	f7ff fd59 	bl	80084d2 <__lo0bits>
 8008a20:	9b01      	ldr	r3, [sp, #4]
 8008a22:	6163      	str	r3, [r4, #20]
 8008a24:	3020      	adds	r0, #32
 8008a26:	2201      	movs	r2, #1
 8008a28:	e7e8      	b.n	80089fc <__d2b+0x64>
 8008a2a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008a2e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008a32:	6038      	str	r0, [r7, #0]
 8008a34:	6918      	ldr	r0, [r3, #16]
 8008a36:	f7ff fd2d 	bl	8008494 <__hi0bits>
 8008a3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008a3e:	e7e5      	b.n	8008a0c <__d2b+0x74>
 8008a40:	080094e8 	.word	0x080094e8
 8008a44:	0800950a 	.word	0x0800950a

08008a48 <__sread>:
 8008a48:	b510      	push	{r4, lr}
 8008a4a:	460c      	mov	r4, r1
 8008a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a50:	f000 f8ba 	bl	8008bc8 <_read_r>
 8008a54:	2800      	cmp	r0, #0
 8008a56:	bfab      	itete	ge
 8008a58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008a5a:	89a3      	ldrhlt	r3, [r4, #12]
 8008a5c:	181b      	addge	r3, r3, r0
 8008a5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008a62:	bfac      	ite	ge
 8008a64:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008a66:	81a3      	strhlt	r3, [r4, #12]
 8008a68:	bd10      	pop	{r4, pc}

08008a6a <__swrite>:
 8008a6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a6e:	461f      	mov	r7, r3
 8008a70:	898b      	ldrh	r3, [r1, #12]
 8008a72:	05db      	lsls	r3, r3, #23
 8008a74:	4605      	mov	r5, r0
 8008a76:	460c      	mov	r4, r1
 8008a78:	4616      	mov	r6, r2
 8008a7a:	d505      	bpl.n	8008a88 <__swrite+0x1e>
 8008a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a80:	2302      	movs	r3, #2
 8008a82:	2200      	movs	r2, #0
 8008a84:	f000 f88e 	bl	8008ba4 <_lseek_r>
 8008a88:	89a3      	ldrh	r3, [r4, #12]
 8008a8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008a92:	81a3      	strh	r3, [r4, #12]
 8008a94:	4632      	mov	r2, r6
 8008a96:	463b      	mov	r3, r7
 8008a98:	4628      	mov	r0, r5
 8008a9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a9e:	f000 b8b5 	b.w	8008c0c <_write_r>

08008aa2 <__sseek>:
 8008aa2:	b510      	push	{r4, lr}
 8008aa4:	460c      	mov	r4, r1
 8008aa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aaa:	f000 f87b 	bl	8008ba4 <_lseek_r>
 8008aae:	1c43      	adds	r3, r0, #1
 8008ab0:	89a3      	ldrh	r3, [r4, #12]
 8008ab2:	bf15      	itete	ne
 8008ab4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008ab6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008aba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008abe:	81a3      	strheq	r3, [r4, #12]
 8008ac0:	bf18      	it	ne
 8008ac2:	81a3      	strhne	r3, [r4, #12]
 8008ac4:	bd10      	pop	{r4, pc}

08008ac6 <__sclose>:
 8008ac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aca:	f000 b85b 	b.w	8008b84 <_close_r>
	...

08008ad0 <fiprintf>:
 8008ad0:	b40e      	push	{r1, r2, r3}
 8008ad2:	b503      	push	{r0, r1, lr}
 8008ad4:	4601      	mov	r1, r0
 8008ad6:	ab03      	add	r3, sp, #12
 8008ad8:	4805      	ldr	r0, [pc, #20]	@ (8008af0 <fiprintf+0x20>)
 8008ada:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ade:	6800      	ldr	r0, [r0, #0]
 8008ae0:	9301      	str	r3, [sp, #4]
 8008ae2:	f000 f943 	bl	8008d6c <_vfiprintf_r>
 8008ae6:	b002      	add	sp, #8
 8008ae8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008aec:	b003      	add	sp, #12
 8008aee:	4770      	bx	lr
 8008af0:	20000090 	.word	0x20000090

08008af4 <_realloc_r>:
 8008af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008af8:	4680      	mov	r8, r0
 8008afa:	4615      	mov	r5, r2
 8008afc:	460c      	mov	r4, r1
 8008afe:	b921      	cbnz	r1, 8008b0a <_realloc_r+0x16>
 8008b00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b04:	4611      	mov	r1, r2
 8008b06:	f7ff bae5 	b.w	80080d4 <_malloc_r>
 8008b0a:	b92a      	cbnz	r2, 8008b18 <_realloc_r+0x24>
 8008b0c:	f000 f8ba 	bl	8008c84 <_free_r>
 8008b10:	2400      	movs	r4, #0
 8008b12:	4620      	mov	r0, r4
 8008b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b18:	f000 fa52 	bl	8008fc0 <_malloc_usable_size_r>
 8008b1c:	4285      	cmp	r5, r0
 8008b1e:	4606      	mov	r6, r0
 8008b20:	d802      	bhi.n	8008b28 <_realloc_r+0x34>
 8008b22:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008b26:	d8f4      	bhi.n	8008b12 <_realloc_r+0x1e>
 8008b28:	4629      	mov	r1, r5
 8008b2a:	4640      	mov	r0, r8
 8008b2c:	f7ff fad2 	bl	80080d4 <_malloc_r>
 8008b30:	4607      	mov	r7, r0
 8008b32:	2800      	cmp	r0, #0
 8008b34:	d0ec      	beq.n	8008b10 <_realloc_r+0x1c>
 8008b36:	42b5      	cmp	r5, r6
 8008b38:	462a      	mov	r2, r5
 8008b3a:	4621      	mov	r1, r4
 8008b3c:	bf28      	it	cs
 8008b3e:	4632      	movcs	r2, r6
 8008b40:	f000 f876 	bl	8008c30 <memcpy>
 8008b44:	4621      	mov	r1, r4
 8008b46:	4640      	mov	r0, r8
 8008b48:	f000 f89c 	bl	8008c84 <_free_r>
 8008b4c:	463c      	mov	r4, r7
 8008b4e:	e7e0      	b.n	8008b12 <_realloc_r+0x1e>

08008b50 <memmove>:
 8008b50:	4288      	cmp	r0, r1
 8008b52:	b510      	push	{r4, lr}
 8008b54:	eb01 0402 	add.w	r4, r1, r2
 8008b58:	d902      	bls.n	8008b60 <memmove+0x10>
 8008b5a:	4284      	cmp	r4, r0
 8008b5c:	4623      	mov	r3, r4
 8008b5e:	d807      	bhi.n	8008b70 <memmove+0x20>
 8008b60:	1e43      	subs	r3, r0, #1
 8008b62:	42a1      	cmp	r1, r4
 8008b64:	d008      	beq.n	8008b78 <memmove+0x28>
 8008b66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b6e:	e7f8      	b.n	8008b62 <memmove+0x12>
 8008b70:	4402      	add	r2, r0
 8008b72:	4601      	mov	r1, r0
 8008b74:	428a      	cmp	r2, r1
 8008b76:	d100      	bne.n	8008b7a <memmove+0x2a>
 8008b78:	bd10      	pop	{r4, pc}
 8008b7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b82:	e7f7      	b.n	8008b74 <memmove+0x24>

08008b84 <_close_r>:
 8008b84:	b538      	push	{r3, r4, r5, lr}
 8008b86:	4d06      	ldr	r5, [pc, #24]	@ (8008ba0 <_close_r+0x1c>)
 8008b88:	2300      	movs	r3, #0
 8008b8a:	4604      	mov	r4, r0
 8008b8c:	4608      	mov	r0, r1
 8008b8e:	602b      	str	r3, [r5, #0]
 8008b90:	f7f9 f8ae 	bl	8001cf0 <_close>
 8008b94:	1c43      	adds	r3, r0, #1
 8008b96:	d102      	bne.n	8008b9e <_close_r+0x1a>
 8008b98:	682b      	ldr	r3, [r5, #0]
 8008b9a:	b103      	cbz	r3, 8008b9e <_close_r+0x1a>
 8008b9c:	6023      	str	r3, [r4, #0]
 8008b9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ba0:	20000510 	.word	0x20000510

08008ba4 <_lseek_r>:
 8008ba4:	b538      	push	{r3, r4, r5, lr}
 8008ba6:	4d07      	ldr	r5, [pc, #28]	@ (8008bc4 <_lseek_r+0x20>)
 8008ba8:	4604      	mov	r4, r0
 8008baa:	4608      	mov	r0, r1
 8008bac:	4611      	mov	r1, r2
 8008bae:	2200      	movs	r2, #0
 8008bb0:	602a      	str	r2, [r5, #0]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	f7f9 f8c3 	bl	8001d3e <_lseek>
 8008bb8:	1c43      	adds	r3, r0, #1
 8008bba:	d102      	bne.n	8008bc2 <_lseek_r+0x1e>
 8008bbc:	682b      	ldr	r3, [r5, #0]
 8008bbe:	b103      	cbz	r3, 8008bc2 <_lseek_r+0x1e>
 8008bc0:	6023      	str	r3, [r4, #0]
 8008bc2:	bd38      	pop	{r3, r4, r5, pc}
 8008bc4:	20000510 	.word	0x20000510

08008bc8 <_read_r>:
 8008bc8:	b538      	push	{r3, r4, r5, lr}
 8008bca:	4d07      	ldr	r5, [pc, #28]	@ (8008be8 <_read_r+0x20>)
 8008bcc:	4604      	mov	r4, r0
 8008bce:	4608      	mov	r0, r1
 8008bd0:	4611      	mov	r1, r2
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	602a      	str	r2, [r5, #0]
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	f7f9 f851 	bl	8001c7e <_read>
 8008bdc:	1c43      	adds	r3, r0, #1
 8008bde:	d102      	bne.n	8008be6 <_read_r+0x1e>
 8008be0:	682b      	ldr	r3, [r5, #0]
 8008be2:	b103      	cbz	r3, 8008be6 <_read_r+0x1e>
 8008be4:	6023      	str	r3, [r4, #0]
 8008be6:	bd38      	pop	{r3, r4, r5, pc}
 8008be8:	20000510 	.word	0x20000510

08008bec <_sbrk_r>:
 8008bec:	b538      	push	{r3, r4, r5, lr}
 8008bee:	4d06      	ldr	r5, [pc, #24]	@ (8008c08 <_sbrk_r+0x1c>)
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	4604      	mov	r4, r0
 8008bf4:	4608      	mov	r0, r1
 8008bf6:	602b      	str	r3, [r5, #0]
 8008bf8:	f7f9 f8ae 	bl	8001d58 <_sbrk>
 8008bfc:	1c43      	adds	r3, r0, #1
 8008bfe:	d102      	bne.n	8008c06 <_sbrk_r+0x1a>
 8008c00:	682b      	ldr	r3, [r5, #0]
 8008c02:	b103      	cbz	r3, 8008c06 <_sbrk_r+0x1a>
 8008c04:	6023      	str	r3, [r4, #0]
 8008c06:	bd38      	pop	{r3, r4, r5, pc}
 8008c08:	20000510 	.word	0x20000510

08008c0c <_write_r>:
 8008c0c:	b538      	push	{r3, r4, r5, lr}
 8008c0e:	4d07      	ldr	r5, [pc, #28]	@ (8008c2c <_write_r+0x20>)
 8008c10:	4604      	mov	r4, r0
 8008c12:	4608      	mov	r0, r1
 8008c14:	4611      	mov	r1, r2
 8008c16:	2200      	movs	r2, #0
 8008c18:	602a      	str	r2, [r5, #0]
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	f7f9 f84c 	bl	8001cb8 <_write>
 8008c20:	1c43      	adds	r3, r0, #1
 8008c22:	d102      	bne.n	8008c2a <_write_r+0x1e>
 8008c24:	682b      	ldr	r3, [r5, #0]
 8008c26:	b103      	cbz	r3, 8008c2a <_write_r+0x1e>
 8008c28:	6023      	str	r3, [r4, #0]
 8008c2a:	bd38      	pop	{r3, r4, r5, pc}
 8008c2c:	20000510 	.word	0x20000510

08008c30 <memcpy>:
 8008c30:	440a      	add	r2, r1
 8008c32:	4291      	cmp	r1, r2
 8008c34:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008c38:	d100      	bne.n	8008c3c <memcpy+0xc>
 8008c3a:	4770      	bx	lr
 8008c3c:	b510      	push	{r4, lr}
 8008c3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c46:	4291      	cmp	r1, r2
 8008c48:	d1f9      	bne.n	8008c3e <memcpy+0xe>
 8008c4a:	bd10      	pop	{r4, pc}

08008c4c <abort>:
 8008c4c:	b508      	push	{r3, lr}
 8008c4e:	2006      	movs	r0, #6
 8008c50:	f000 fb0c 	bl	800926c <raise>
 8008c54:	2001      	movs	r0, #1
 8008c56:	f7f9 f807 	bl	8001c68 <_exit>

08008c5a <_calloc_r>:
 8008c5a:	b570      	push	{r4, r5, r6, lr}
 8008c5c:	fba1 5402 	umull	r5, r4, r1, r2
 8008c60:	b93c      	cbnz	r4, 8008c72 <_calloc_r+0x18>
 8008c62:	4629      	mov	r1, r5
 8008c64:	f7ff fa36 	bl	80080d4 <_malloc_r>
 8008c68:	4606      	mov	r6, r0
 8008c6a:	b928      	cbnz	r0, 8008c78 <_calloc_r+0x1e>
 8008c6c:	2600      	movs	r6, #0
 8008c6e:	4630      	mov	r0, r6
 8008c70:	bd70      	pop	{r4, r5, r6, pc}
 8008c72:	220c      	movs	r2, #12
 8008c74:	6002      	str	r2, [r0, #0]
 8008c76:	e7f9      	b.n	8008c6c <_calloc_r+0x12>
 8008c78:	462a      	mov	r2, r5
 8008c7a:	4621      	mov	r1, r4
 8008c7c:	f7fe fa02 	bl	8007084 <memset>
 8008c80:	e7f5      	b.n	8008c6e <_calloc_r+0x14>
	...

08008c84 <_free_r>:
 8008c84:	b538      	push	{r3, r4, r5, lr}
 8008c86:	4605      	mov	r5, r0
 8008c88:	2900      	cmp	r1, #0
 8008c8a:	d041      	beq.n	8008d10 <_free_r+0x8c>
 8008c8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c90:	1f0c      	subs	r4, r1, #4
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	bfb8      	it	lt
 8008c96:	18e4      	addlt	r4, r4, r3
 8008c98:	f7ff fb48 	bl	800832c <__malloc_lock>
 8008c9c:	4a1d      	ldr	r2, [pc, #116]	@ (8008d14 <_free_r+0x90>)
 8008c9e:	6813      	ldr	r3, [r2, #0]
 8008ca0:	b933      	cbnz	r3, 8008cb0 <_free_r+0x2c>
 8008ca2:	6063      	str	r3, [r4, #4]
 8008ca4:	6014      	str	r4, [r2, #0]
 8008ca6:	4628      	mov	r0, r5
 8008ca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cac:	f7ff bb44 	b.w	8008338 <__malloc_unlock>
 8008cb0:	42a3      	cmp	r3, r4
 8008cb2:	d908      	bls.n	8008cc6 <_free_r+0x42>
 8008cb4:	6820      	ldr	r0, [r4, #0]
 8008cb6:	1821      	adds	r1, r4, r0
 8008cb8:	428b      	cmp	r3, r1
 8008cba:	bf01      	itttt	eq
 8008cbc:	6819      	ldreq	r1, [r3, #0]
 8008cbe:	685b      	ldreq	r3, [r3, #4]
 8008cc0:	1809      	addeq	r1, r1, r0
 8008cc2:	6021      	streq	r1, [r4, #0]
 8008cc4:	e7ed      	b.n	8008ca2 <_free_r+0x1e>
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	b10b      	cbz	r3, 8008cd0 <_free_r+0x4c>
 8008ccc:	42a3      	cmp	r3, r4
 8008cce:	d9fa      	bls.n	8008cc6 <_free_r+0x42>
 8008cd0:	6811      	ldr	r1, [r2, #0]
 8008cd2:	1850      	adds	r0, r2, r1
 8008cd4:	42a0      	cmp	r0, r4
 8008cd6:	d10b      	bne.n	8008cf0 <_free_r+0x6c>
 8008cd8:	6820      	ldr	r0, [r4, #0]
 8008cda:	4401      	add	r1, r0
 8008cdc:	1850      	adds	r0, r2, r1
 8008cde:	4283      	cmp	r3, r0
 8008ce0:	6011      	str	r1, [r2, #0]
 8008ce2:	d1e0      	bne.n	8008ca6 <_free_r+0x22>
 8008ce4:	6818      	ldr	r0, [r3, #0]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	6053      	str	r3, [r2, #4]
 8008cea:	4408      	add	r0, r1
 8008cec:	6010      	str	r0, [r2, #0]
 8008cee:	e7da      	b.n	8008ca6 <_free_r+0x22>
 8008cf0:	d902      	bls.n	8008cf8 <_free_r+0x74>
 8008cf2:	230c      	movs	r3, #12
 8008cf4:	602b      	str	r3, [r5, #0]
 8008cf6:	e7d6      	b.n	8008ca6 <_free_r+0x22>
 8008cf8:	6820      	ldr	r0, [r4, #0]
 8008cfa:	1821      	adds	r1, r4, r0
 8008cfc:	428b      	cmp	r3, r1
 8008cfe:	bf04      	itt	eq
 8008d00:	6819      	ldreq	r1, [r3, #0]
 8008d02:	685b      	ldreq	r3, [r3, #4]
 8008d04:	6063      	str	r3, [r4, #4]
 8008d06:	bf04      	itt	eq
 8008d08:	1809      	addeq	r1, r1, r0
 8008d0a:	6021      	streq	r1, [r4, #0]
 8008d0c:	6054      	str	r4, [r2, #4]
 8008d0e:	e7ca      	b.n	8008ca6 <_free_r+0x22>
 8008d10:	bd38      	pop	{r3, r4, r5, pc}
 8008d12:	bf00      	nop
 8008d14:	2000050c 	.word	0x2000050c

08008d18 <__sfputc_r>:
 8008d18:	6893      	ldr	r3, [r2, #8]
 8008d1a:	3b01      	subs	r3, #1
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	b410      	push	{r4}
 8008d20:	6093      	str	r3, [r2, #8]
 8008d22:	da08      	bge.n	8008d36 <__sfputc_r+0x1e>
 8008d24:	6994      	ldr	r4, [r2, #24]
 8008d26:	42a3      	cmp	r3, r4
 8008d28:	db01      	blt.n	8008d2e <__sfputc_r+0x16>
 8008d2a:	290a      	cmp	r1, #10
 8008d2c:	d103      	bne.n	8008d36 <__sfputc_r+0x1e>
 8008d2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d32:	f000 b94d 	b.w	8008fd0 <__swbuf_r>
 8008d36:	6813      	ldr	r3, [r2, #0]
 8008d38:	1c58      	adds	r0, r3, #1
 8008d3a:	6010      	str	r0, [r2, #0]
 8008d3c:	7019      	strb	r1, [r3, #0]
 8008d3e:	4608      	mov	r0, r1
 8008d40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d44:	4770      	bx	lr

08008d46 <__sfputs_r>:
 8008d46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d48:	4606      	mov	r6, r0
 8008d4a:	460f      	mov	r7, r1
 8008d4c:	4614      	mov	r4, r2
 8008d4e:	18d5      	adds	r5, r2, r3
 8008d50:	42ac      	cmp	r4, r5
 8008d52:	d101      	bne.n	8008d58 <__sfputs_r+0x12>
 8008d54:	2000      	movs	r0, #0
 8008d56:	e007      	b.n	8008d68 <__sfputs_r+0x22>
 8008d58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d5c:	463a      	mov	r2, r7
 8008d5e:	4630      	mov	r0, r6
 8008d60:	f7ff ffda 	bl	8008d18 <__sfputc_r>
 8008d64:	1c43      	adds	r3, r0, #1
 8008d66:	d1f3      	bne.n	8008d50 <__sfputs_r+0xa>
 8008d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008d6c <_vfiprintf_r>:
 8008d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d70:	460d      	mov	r5, r1
 8008d72:	b09d      	sub	sp, #116	@ 0x74
 8008d74:	4614      	mov	r4, r2
 8008d76:	4698      	mov	r8, r3
 8008d78:	4606      	mov	r6, r0
 8008d7a:	b118      	cbz	r0, 8008d84 <_vfiprintf_r+0x18>
 8008d7c:	6a03      	ldr	r3, [r0, #32]
 8008d7e:	b90b      	cbnz	r3, 8008d84 <_vfiprintf_r+0x18>
 8008d80:	f7fe f94a 	bl	8007018 <__sinit>
 8008d84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d86:	07d9      	lsls	r1, r3, #31
 8008d88:	d405      	bmi.n	8008d96 <_vfiprintf_r+0x2a>
 8008d8a:	89ab      	ldrh	r3, [r5, #12]
 8008d8c:	059a      	lsls	r2, r3, #22
 8008d8e:	d402      	bmi.n	8008d96 <_vfiprintf_r+0x2a>
 8008d90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d92:	f7fe f9ae 	bl	80070f2 <__retarget_lock_acquire_recursive>
 8008d96:	89ab      	ldrh	r3, [r5, #12]
 8008d98:	071b      	lsls	r3, r3, #28
 8008d9a:	d501      	bpl.n	8008da0 <_vfiprintf_r+0x34>
 8008d9c:	692b      	ldr	r3, [r5, #16]
 8008d9e:	b99b      	cbnz	r3, 8008dc8 <_vfiprintf_r+0x5c>
 8008da0:	4629      	mov	r1, r5
 8008da2:	4630      	mov	r0, r6
 8008da4:	f000 f952 	bl	800904c <__swsetup_r>
 8008da8:	b170      	cbz	r0, 8008dc8 <_vfiprintf_r+0x5c>
 8008daa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008dac:	07dc      	lsls	r4, r3, #31
 8008dae:	d504      	bpl.n	8008dba <_vfiprintf_r+0x4e>
 8008db0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008db4:	b01d      	add	sp, #116	@ 0x74
 8008db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dba:	89ab      	ldrh	r3, [r5, #12]
 8008dbc:	0598      	lsls	r0, r3, #22
 8008dbe:	d4f7      	bmi.n	8008db0 <_vfiprintf_r+0x44>
 8008dc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008dc2:	f7fe f997 	bl	80070f4 <__retarget_lock_release_recursive>
 8008dc6:	e7f3      	b.n	8008db0 <_vfiprintf_r+0x44>
 8008dc8:	2300      	movs	r3, #0
 8008dca:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dcc:	2320      	movs	r3, #32
 8008dce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008dd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dd6:	2330      	movs	r3, #48	@ 0x30
 8008dd8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008f88 <_vfiprintf_r+0x21c>
 8008ddc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008de0:	f04f 0901 	mov.w	r9, #1
 8008de4:	4623      	mov	r3, r4
 8008de6:	469a      	mov	sl, r3
 8008de8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dec:	b10a      	cbz	r2, 8008df2 <_vfiprintf_r+0x86>
 8008dee:	2a25      	cmp	r2, #37	@ 0x25
 8008df0:	d1f9      	bne.n	8008de6 <_vfiprintf_r+0x7a>
 8008df2:	ebba 0b04 	subs.w	fp, sl, r4
 8008df6:	d00b      	beq.n	8008e10 <_vfiprintf_r+0xa4>
 8008df8:	465b      	mov	r3, fp
 8008dfa:	4622      	mov	r2, r4
 8008dfc:	4629      	mov	r1, r5
 8008dfe:	4630      	mov	r0, r6
 8008e00:	f7ff ffa1 	bl	8008d46 <__sfputs_r>
 8008e04:	3001      	adds	r0, #1
 8008e06:	f000 80a7 	beq.w	8008f58 <_vfiprintf_r+0x1ec>
 8008e0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e0c:	445a      	add	r2, fp
 8008e0e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e10:	f89a 3000 	ldrb.w	r3, [sl]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	f000 809f 	beq.w	8008f58 <_vfiprintf_r+0x1ec>
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008e20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e24:	f10a 0a01 	add.w	sl, sl, #1
 8008e28:	9304      	str	r3, [sp, #16]
 8008e2a:	9307      	str	r3, [sp, #28]
 8008e2c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e30:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e32:	4654      	mov	r4, sl
 8008e34:	2205      	movs	r2, #5
 8008e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e3a:	4853      	ldr	r0, [pc, #332]	@ (8008f88 <_vfiprintf_r+0x21c>)
 8008e3c:	f7f7 f9e0 	bl	8000200 <memchr>
 8008e40:	9a04      	ldr	r2, [sp, #16]
 8008e42:	b9d8      	cbnz	r0, 8008e7c <_vfiprintf_r+0x110>
 8008e44:	06d1      	lsls	r1, r2, #27
 8008e46:	bf44      	itt	mi
 8008e48:	2320      	movmi	r3, #32
 8008e4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e4e:	0713      	lsls	r3, r2, #28
 8008e50:	bf44      	itt	mi
 8008e52:	232b      	movmi	r3, #43	@ 0x2b
 8008e54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e58:	f89a 3000 	ldrb.w	r3, [sl]
 8008e5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e5e:	d015      	beq.n	8008e8c <_vfiprintf_r+0x120>
 8008e60:	9a07      	ldr	r2, [sp, #28]
 8008e62:	4654      	mov	r4, sl
 8008e64:	2000      	movs	r0, #0
 8008e66:	f04f 0c0a 	mov.w	ip, #10
 8008e6a:	4621      	mov	r1, r4
 8008e6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e70:	3b30      	subs	r3, #48	@ 0x30
 8008e72:	2b09      	cmp	r3, #9
 8008e74:	d94b      	bls.n	8008f0e <_vfiprintf_r+0x1a2>
 8008e76:	b1b0      	cbz	r0, 8008ea6 <_vfiprintf_r+0x13a>
 8008e78:	9207      	str	r2, [sp, #28]
 8008e7a:	e014      	b.n	8008ea6 <_vfiprintf_r+0x13a>
 8008e7c:	eba0 0308 	sub.w	r3, r0, r8
 8008e80:	fa09 f303 	lsl.w	r3, r9, r3
 8008e84:	4313      	orrs	r3, r2
 8008e86:	9304      	str	r3, [sp, #16]
 8008e88:	46a2      	mov	sl, r4
 8008e8a:	e7d2      	b.n	8008e32 <_vfiprintf_r+0xc6>
 8008e8c:	9b03      	ldr	r3, [sp, #12]
 8008e8e:	1d19      	adds	r1, r3, #4
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	9103      	str	r1, [sp, #12]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	bfbb      	ittet	lt
 8008e98:	425b      	neglt	r3, r3
 8008e9a:	f042 0202 	orrlt.w	r2, r2, #2
 8008e9e:	9307      	strge	r3, [sp, #28]
 8008ea0:	9307      	strlt	r3, [sp, #28]
 8008ea2:	bfb8      	it	lt
 8008ea4:	9204      	strlt	r2, [sp, #16]
 8008ea6:	7823      	ldrb	r3, [r4, #0]
 8008ea8:	2b2e      	cmp	r3, #46	@ 0x2e
 8008eaa:	d10a      	bne.n	8008ec2 <_vfiprintf_r+0x156>
 8008eac:	7863      	ldrb	r3, [r4, #1]
 8008eae:	2b2a      	cmp	r3, #42	@ 0x2a
 8008eb0:	d132      	bne.n	8008f18 <_vfiprintf_r+0x1ac>
 8008eb2:	9b03      	ldr	r3, [sp, #12]
 8008eb4:	1d1a      	adds	r2, r3, #4
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	9203      	str	r2, [sp, #12]
 8008eba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ebe:	3402      	adds	r4, #2
 8008ec0:	9305      	str	r3, [sp, #20]
 8008ec2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008f98 <_vfiprintf_r+0x22c>
 8008ec6:	7821      	ldrb	r1, [r4, #0]
 8008ec8:	2203      	movs	r2, #3
 8008eca:	4650      	mov	r0, sl
 8008ecc:	f7f7 f998 	bl	8000200 <memchr>
 8008ed0:	b138      	cbz	r0, 8008ee2 <_vfiprintf_r+0x176>
 8008ed2:	9b04      	ldr	r3, [sp, #16]
 8008ed4:	eba0 000a 	sub.w	r0, r0, sl
 8008ed8:	2240      	movs	r2, #64	@ 0x40
 8008eda:	4082      	lsls	r2, r0
 8008edc:	4313      	orrs	r3, r2
 8008ede:	3401      	adds	r4, #1
 8008ee0:	9304      	str	r3, [sp, #16]
 8008ee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ee6:	4829      	ldr	r0, [pc, #164]	@ (8008f8c <_vfiprintf_r+0x220>)
 8008ee8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008eec:	2206      	movs	r2, #6
 8008eee:	f7f7 f987 	bl	8000200 <memchr>
 8008ef2:	2800      	cmp	r0, #0
 8008ef4:	d03f      	beq.n	8008f76 <_vfiprintf_r+0x20a>
 8008ef6:	4b26      	ldr	r3, [pc, #152]	@ (8008f90 <_vfiprintf_r+0x224>)
 8008ef8:	bb1b      	cbnz	r3, 8008f42 <_vfiprintf_r+0x1d6>
 8008efa:	9b03      	ldr	r3, [sp, #12]
 8008efc:	3307      	adds	r3, #7
 8008efe:	f023 0307 	bic.w	r3, r3, #7
 8008f02:	3308      	adds	r3, #8
 8008f04:	9303      	str	r3, [sp, #12]
 8008f06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f08:	443b      	add	r3, r7
 8008f0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f0c:	e76a      	b.n	8008de4 <_vfiprintf_r+0x78>
 8008f0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f12:	460c      	mov	r4, r1
 8008f14:	2001      	movs	r0, #1
 8008f16:	e7a8      	b.n	8008e6a <_vfiprintf_r+0xfe>
 8008f18:	2300      	movs	r3, #0
 8008f1a:	3401      	adds	r4, #1
 8008f1c:	9305      	str	r3, [sp, #20]
 8008f1e:	4619      	mov	r1, r3
 8008f20:	f04f 0c0a 	mov.w	ip, #10
 8008f24:	4620      	mov	r0, r4
 8008f26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f2a:	3a30      	subs	r2, #48	@ 0x30
 8008f2c:	2a09      	cmp	r2, #9
 8008f2e:	d903      	bls.n	8008f38 <_vfiprintf_r+0x1cc>
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d0c6      	beq.n	8008ec2 <_vfiprintf_r+0x156>
 8008f34:	9105      	str	r1, [sp, #20]
 8008f36:	e7c4      	b.n	8008ec2 <_vfiprintf_r+0x156>
 8008f38:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f3c:	4604      	mov	r4, r0
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e7f0      	b.n	8008f24 <_vfiprintf_r+0x1b8>
 8008f42:	ab03      	add	r3, sp, #12
 8008f44:	9300      	str	r3, [sp, #0]
 8008f46:	462a      	mov	r2, r5
 8008f48:	4b12      	ldr	r3, [pc, #72]	@ (8008f94 <_vfiprintf_r+0x228>)
 8008f4a:	a904      	add	r1, sp, #16
 8008f4c:	4630      	mov	r0, r6
 8008f4e:	f7fd fb5f 	bl	8006610 <_printf_float>
 8008f52:	4607      	mov	r7, r0
 8008f54:	1c78      	adds	r0, r7, #1
 8008f56:	d1d6      	bne.n	8008f06 <_vfiprintf_r+0x19a>
 8008f58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f5a:	07d9      	lsls	r1, r3, #31
 8008f5c:	d405      	bmi.n	8008f6a <_vfiprintf_r+0x1fe>
 8008f5e:	89ab      	ldrh	r3, [r5, #12]
 8008f60:	059a      	lsls	r2, r3, #22
 8008f62:	d402      	bmi.n	8008f6a <_vfiprintf_r+0x1fe>
 8008f64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f66:	f7fe f8c5 	bl	80070f4 <__retarget_lock_release_recursive>
 8008f6a:	89ab      	ldrh	r3, [r5, #12]
 8008f6c:	065b      	lsls	r3, r3, #25
 8008f6e:	f53f af1f 	bmi.w	8008db0 <_vfiprintf_r+0x44>
 8008f72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f74:	e71e      	b.n	8008db4 <_vfiprintf_r+0x48>
 8008f76:	ab03      	add	r3, sp, #12
 8008f78:	9300      	str	r3, [sp, #0]
 8008f7a:	462a      	mov	r2, r5
 8008f7c:	4b05      	ldr	r3, [pc, #20]	@ (8008f94 <_vfiprintf_r+0x228>)
 8008f7e:	a904      	add	r1, sp, #16
 8008f80:	4630      	mov	r0, r6
 8008f82:	f7fd fddd 	bl	8006b40 <_printf_i>
 8008f86:	e7e4      	b.n	8008f52 <_vfiprintf_r+0x1e6>
 8008f88:	080094f9 	.word	0x080094f9
 8008f8c:	08009503 	.word	0x08009503
 8008f90:	08006611 	.word	0x08006611
 8008f94:	08008d47 	.word	0x08008d47
 8008f98:	080094ff 	.word	0x080094ff

08008f9c <__ascii_mbtowc>:
 8008f9c:	b082      	sub	sp, #8
 8008f9e:	b901      	cbnz	r1, 8008fa2 <__ascii_mbtowc+0x6>
 8008fa0:	a901      	add	r1, sp, #4
 8008fa2:	b142      	cbz	r2, 8008fb6 <__ascii_mbtowc+0x1a>
 8008fa4:	b14b      	cbz	r3, 8008fba <__ascii_mbtowc+0x1e>
 8008fa6:	7813      	ldrb	r3, [r2, #0]
 8008fa8:	600b      	str	r3, [r1, #0]
 8008faa:	7812      	ldrb	r2, [r2, #0]
 8008fac:	1e10      	subs	r0, r2, #0
 8008fae:	bf18      	it	ne
 8008fb0:	2001      	movne	r0, #1
 8008fb2:	b002      	add	sp, #8
 8008fb4:	4770      	bx	lr
 8008fb6:	4610      	mov	r0, r2
 8008fb8:	e7fb      	b.n	8008fb2 <__ascii_mbtowc+0x16>
 8008fba:	f06f 0001 	mvn.w	r0, #1
 8008fbe:	e7f8      	b.n	8008fb2 <__ascii_mbtowc+0x16>

08008fc0 <_malloc_usable_size_r>:
 8008fc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fc4:	1f18      	subs	r0, r3, #4
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	bfbc      	itt	lt
 8008fca:	580b      	ldrlt	r3, [r1, r0]
 8008fcc:	18c0      	addlt	r0, r0, r3
 8008fce:	4770      	bx	lr

08008fd0 <__swbuf_r>:
 8008fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fd2:	460e      	mov	r6, r1
 8008fd4:	4614      	mov	r4, r2
 8008fd6:	4605      	mov	r5, r0
 8008fd8:	b118      	cbz	r0, 8008fe2 <__swbuf_r+0x12>
 8008fda:	6a03      	ldr	r3, [r0, #32]
 8008fdc:	b90b      	cbnz	r3, 8008fe2 <__swbuf_r+0x12>
 8008fde:	f7fe f81b 	bl	8007018 <__sinit>
 8008fe2:	69a3      	ldr	r3, [r4, #24]
 8008fe4:	60a3      	str	r3, [r4, #8]
 8008fe6:	89a3      	ldrh	r3, [r4, #12]
 8008fe8:	071a      	lsls	r2, r3, #28
 8008fea:	d501      	bpl.n	8008ff0 <__swbuf_r+0x20>
 8008fec:	6923      	ldr	r3, [r4, #16]
 8008fee:	b943      	cbnz	r3, 8009002 <__swbuf_r+0x32>
 8008ff0:	4621      	mov	r1, r4
 8008ff2:	4628      	mov	r0, r5
 8008ff4:	f000 f82a 	bl	800904c <__swsetup_r>
 8008ff8:	b118      	cbz	r0, 8009002 <__swbuf_r+0x32>
 8008ffa:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008ffe:	4638      	mov	r0, r7
 8009000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009002:	6823      	ldr	r3, [r4, #0]
 8009004:	6922      	ldr	r2, [r4, #16]
 8009006:	1a98      	subs	r0, r3, r2
 8009008:	6963      	ldr	r3, [r4, #20]
 800900a:	b2f6      	uxtb	r6, r6
 800900c:	4283      	cmp	r3, r0
 800900e:	4637      	mov	r7, r6
 8009010:	dc05      	bgt.n	800901e <__swbuf_r+0x4e>
 8009012:	4621      	mov	r1, r4
 8009014:	4628      	mov	r0, r5
 8009016:	f7ff f961 	bl	80082dc <_fflush_r>
 800901a:	2800      	cmp	r0, #0
 800901c:	d1ed      	bne.n	8008ffa <__swbuf_r+0x2a>
 800901e:	68a3      	ldr	r3, [r4, #8]
 8009020:	3b01      	subs	r3, #1
 8009022:	60a3      	str	r3, [r4, #8]
 8009024:	6823      	ldr	r3, [r4, #0]
 8009026:	1c5a      	adds	r2, r3, #1
 8009028:	6022      	str	r2, [r4, #0]
 800902a:	701e      	strb	r6, [r3, #0]
 800902c:	6962      	ldr	r2, [r4, #20]
 800902e:	1c43      	adds	r3, r0, #1
 8009030:	429a      	cmp	r2, r3
 8009032:	d004      	beq.n	800903e <__swbuf_r+0x6e>
 8009034:	89a3      	ldrh	r3, [r4, #12]
 8009036:	07db      	lsls	r3, r3, #31
 8009038:	d5e1      	bpl.n	8008ffe <__swbuf_r+0x2e>
 800903a:	2e0a      	cmp	r6, #10
 800903c:	d1df      	bne.n	8008ffe <__swbuf_r+0x2e>
 800903e:	4621      	mov	r1, r4
 8009040:	4628      	mov	r0, r5
 8009042:	f7ff f94b 	bl	80082dc <_fflush_r>
 8009046:	2800      	cmp	r0, #0
 8009048:	d0d9      	beq.n	8008ffe <__swbuf_r+0x2e>
 800904a:	e7d6      	b.n	8008ffa <__swbuf_r+0x2a>

0800904c <__swsetup_r>:
 800904c:	b538      	push	{r3, r4, r5, lr}
 800904e:	4b29      	ldr	r3, [pc, #164]	@ (80090f4 <__swsetup_r+0xa8>)
 8009050:	4605      	mov	r5, r0
 8009052:	6818      	ldr	r0, [r3, #0]
 8009054:	460c      	mov	r4, r1
 8009056:	b118      	cbz	r0, 8009060 <__swsetup_r+0x14>
 8009058:	6a03      	ldr	r3, [r0, #32]
 800905a:	b90b      	cbnz	r3, 8009060 <__swsetup_r+0x14>
 800905c:	f7fd ffdc 	bl	8007018 <__sinit>
 8009060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009064:	0719      	lsls	r1, r3, #28
 8009066:	d422      	bmi.n	80090ae <__swsetup_r+0x62>
 8009068:	06da      	lsls	r2, r3, #27
 800906a:	d407      	bmi.n	800907c <__swsetup_r+0x30>
 800906c:	2209      	movs	r2, #9
 800906e:	602a      	str	r2, [r5, #0]
 8009070:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009074:	81a3      	strh	r3, [r4, #12]
 8009076:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800907a:	e033      	b.n	80090e4 <__swsetup_r+0x98>
 800907c:	0758      	lsls	r0, r3, #29
 800907e:	d512      	bpl.n	80090a6 <__swsetup_r+0x5a>
 8009080:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009082:	b141      	cbz	r1, 8009096 <__swsetup_r+0x4a>
 8009084:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009088:	4299      	cmp	r1, r3
 800908a:	d002      	beq.n	8009092 <__swsetup_r+0x46>
 800908c:	4628      	mov	r0, r5
 800908e:	f7ff fdf9 	bl	8008c84 <_free_r>
 8009092:	2300      	movs	r3, #0
 8009094:	6363      	str	r3, [r4, #52]	@ 0x34
 8009096:	89a3      	ldrh	r3, [r4, #12]
 8009098:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800909c:	81a3      	strh	r3, [r4, #12]
 800909e:	2300      	movs	r3, #0
 80090a0:	6063      	str	r3, [r4, #4]
 80090a2:	6923      	ldr	r3, [r4, #16]
 80090a4:	6023      	str	r3, [r4, #0]
 80090a6:	89a3      	ldrh	r3, [r4, #12]
 80090a8:	f043 0308 	orr.w	r3, r3, #8
 80090ac:	81a3      	strh	r3, [r4, #12]
 80090ae:	6923      	ldr	r3, [r4, #16]
 80090b0:	b94b      	cbnz	r3, 80090c6 <__swsetup_r+0x7a>
 80090b2:	89a3      	ldrh	r3, [r4, #12]
 80090b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80090b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090bc:	d003      	beq.n	80090c6 <__swsetup_r+0x7a>
 80090be:	4621      	mov	r1, r4
 80090c0:	4628      	mov	r0, r5
 80090c2:	f000 f84c 	bl	800915e <__smakebuf_r>
 80090c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090ca:	f013 0201 	ands.w	r2, r3, #1
 80090ce:	d00a      	beq.n	80090e6 <__swsetup_r+0x9a>
 80090d0:	2200      	movs	r2, #0
 80090d2:	60a2      	str	r2, [r4, #8]
 80090d4:	6962      	ldr	r2, [r4, #20]
 80090d6:	4252      	negs	r2, r2
 80090d8:	61a2      	str	r2, [r4, #24]
 80090da:	6922      	ldr	r2, [r4, #16]
 80090dc:	b942      	cbnz	r2, 80090f0 <__swsetup_r+0xa4>
 80090de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80090e2:	d1c5      	bne.n	8009070 <__swsetup_r+0x24>
 80090e4:	bd38      	pop	{r3, r4, r5, pc}
 80090e6:	0799      	lsls	r1, r3, #30
 80090e8:	bf58      	it	pl
 80090ea:	6962      	ldrpl	r2, [r4, #20]
 80090ec:	60a2      	str	r2, [r4, #8]
 80090ee:	e7f4      	b.n	80090da <__swsetup_r+0x8e>
 80090f0:	2000      	movs	r0, #0
 80090f2:	e7f7      	b.n	80090e4 <__swsetup_r+0x98>
 80090f4:	20000090 	.word	0x20000090

080090f8 <__ascii_wctomb>:
 80090f8:	4603      	mov	r3, r0
 80090fa:	4608      	mov	r0, r1
 80090fc:	b141      	cbz	r1, 8009110 <__ascii_wctomb+0x18>
 80090fe:	2aff      	cmp	r2, #255	@ 0xff
 8009100:	d904      	bls.n	800910c <__ascii_wctomb+0x14>
 8009102:	228a      	movs	r2, #138	@ 0x8a
 8009104:	601a      	str	r2, [r3, #0]
 8009106:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800910a:	4770      	bx	lr
 800910c:	700a      	strb	r2, [r1, #0]
 800910e:	2001      	movs	r0, #1
 8009110:	4770      	bx	lr

08009112 <__swhatbuf_r>:
 8009112:	b570      	push	{r4, r5, r6, lr}
 8009114:	460c      	mov	r4, r1
 8009116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800911a:	2900      	cmp	r1, #0
 800911c:	b096      	sub	sp, #88	@ 0x58
 800911e:	4615      	mov	r5, r2
 8009120:	461e      	mov	r6, r3
 8009122:	da0d      	bge.n	8009140 <__swhatbuf_r+0x2e>
 8009124:	89a3      	ldrh	r3, [r4, #12]
 8009126:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800912a:	f04f 0100 	mov.w	r1, #0
 800912e:	bf14      	ite	ne
 8009130:	2340      	movne	r3, #64	@ 0x40
 8009132:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009136:	2000      	movs	r0, #0
 8009138:	6031      	str	r1, [r6, #0]
 800913a:	602b      	str	r3, [r5, #0]
 800913c:	b016      	add	sp, #88	@ 0x58
 800913e:	bd70      	pop	{r4, r5, r6, pc}
 8009140:	466a      	mov	r2, sp
 8009142:	f000 f849 	bl	80091d8 <_fstat_r>
 8009146:	2800      	cmp	r0, #0
 8009148:	dbec      	blt.n	8009124 <__swhatbuf_r+0x12>
 800914a:	9901      	ldr	r1, [sp, #4]
 800914c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009150:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009154:	4259      	negs	r1, r3
 8009156:	4159      	adcs	r1, r3
 8009158:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800915c:	e7eb      	b.n	8009136 <__swhatbuf_r+0x24>

0800915e <__smakebuf_r>:
 800915e:	898b      	ldrh	r3, [r1, #12]
 8009160:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009162:	079d      	lsls	r5, r3, #30
 8009164:	4606      	mov	r6, r0
 8009166:	460c      	mov	r4, r1
 8009168:	d507      	bpl.n	800917a <__smakebuf_r+0x1c>
 800916a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800916e:	6023      	str	r3, [r4, #0]
 8009170:	6123      	str	r3, [r4, #16]
 8009172:	2301      	movs	r3, #1
 8009174:	6163      	str	r3, [r4, #20]
 8009176:	b003      	add	sp, #12
 8009178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800917a:	ab01      	add	r3, sp, #4
 800917c:	466a      	mov	r2, sp
 800917e:	f7ff ffc8 	bl	8009112 <__swhatbuf_r>
 8009182:	9f00      	ldr	r7, [sp, #0]
 8009184:	4605      	mov	r5, r0
 8009186:	4639      	mov	r1, r7
 8009188:	4630      	mov	r0, r6
 800918a:	f7fe ffa3 	bl	80080d4 <_malloc_r>
 800918e:	b948      	cbnz	r0, 80091a4 <__smakebuf_r+0x46>
 8009190:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009194:	059a      	lsls	r2, r3, #22
 8009196:	d4ee      	bmi.n	8009176 <__smakebuf_r+0x18>
 8009198:	f023 0303 	bic.w	r3, r3, #3
 800919c:	f043 0302 	orr.w	r3, r3, #2
 80091a0:	81a3      	strh	r3, [r4, #12]
 80091a2:	e7e2      	b.n	800916a <__smakebuf_r+0xc>
 80091a4:	89a3      	ldrh	r3, [r4, #12]
 80091a6:	6020      	str	r0, [r4, #0]
 80091a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091ac:	81a3      	strh	r3, [r4, #12]
 80091ae:	9b01      	ldr	r3, [sp, #4]
 80091b0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80091b4:	b15b      	cbz	r3, 80091ce <__smakebuf_r+0x70>
 80091b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091ba:	4630      	mov	r0, r6
 80091bc:	f000 f81e 	bl	80091fc <_isatty_r>
 80091c0:	b128      	cbz	r0, 80091ce <__smakebuf_r+0x70>
 80091c2:	89a3      	ldrh	r3, [r4, #12]
 80091c4:	f023 0303 	bic.w	r3, r3, #3
 80091c8:	f043 0301 	orr.w	r3, r3, #1
 80091cc:	81a3      	strh	r3, [r4, #12]
 80091ce:	89a3      	ldrh	r3, [r4, #12]
 80091d0:	431d      	orrs	r5, r3
 80091d2:	81a5      	strh	r5, [r4, #12]
 80091d4:	e7cf      	b.n	8009176 <__smakebuf_r+0x18>
	...

080091d8 <_fstat_r>:
 80091d8:	b538      	push	{r3, r4, r5, lr}
 80091da:	4d07      	ldr	r5, [pc, #28]	@ (80091f8 <_fstat_r+0x20>)
 80091dc:	2300      	movs	r3, #0
 80091de:	4604      	mov	r4, r0
 80091e0:	4608      	mov	r0, r1
 80091e2:	4611      	mov	r1, r2
 80091e4:	602b      	str	r3, [r5, #0]
 80091e6:	f7f8 fd8f 	bl	8001d08 <_fstat>
 80091ea:	1c43      	adds	r3, r0, #1
 80091ec:	d102      	bne.n	80091f4 <_fstat_r+0x1c>
 80091ee:	682b      	ldr	r3, [r5, #0]
 80091f0:	b103      	cbz	r3, 80091f4 <_fstat_r+0x1c>
 80091f2:	6023      	str	r3, [r4, #0]
 80091f4:	bd38      	pop	{r3, r4, r5, pc}
 80091f6:	bf00      	nop
 80091f8:	20000510 	.word	0x20000510

080091fc <_isatty_r>:
 80091fc:	b538      	push	{r3, r4, r5, lr}
 80091fe:	4d06      	ldr	r5, [pc, #24]	@ (8009218 <_isatty_r+0x1c>)
 8009200:	2300      	movs	r3, #0
 8009202:	4604      	mov	r4, r0
 8009204:	4608      	mov	r0, r1
 8009206:	602b      	str	r3, [r5, #0]
 8009208:	f7f8 fd8e 	bl	8001d28 <_isatty>
 800920c:	1c43      	adds	r3, r0, #1
 800920e:	d102      	bne.n	8009216 <_isatty_r+0x1a>
 8009210:	682b      	ldr	r3, [r5, #0]
 8009212:	b103      	cbz	r3, 8009216 <_isatty_r+0x1a>
 8009214:	6023      	str	r3, [r4, #0]
 8009216:	bd38      	pop	{r3, r4, r5, pc}
 8009218:	20000510 	.word	0x20000510

0800921c <_raise_r>:
 800921c:	291f      	cmp	r1, #31
 800921e:	b538      	push	{r3, r4, r5, lr}
 8009220:	4605      	mov	r5, r0
 8009222:	460c      	mov	r4, r1
 8009224:	d904      	bls.n	8009230 <_raise_r+0x14>
 8009226:	2316      	movs	r3, #22
 8009228:	6003      	str	r3, [r0, #0]
 800922a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800922e:	bd38      	pop	{r3, r4, r5, pc}
 8009230:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009232:	b112      	cbz	r2, 800923a <_raise_r+0x1e>
 8009234:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009238:	b94b      	cbnz	r3, 800924e <_raise_r+0x32>
 800923a:	4628      	mov	r0, r5
 800923c:	f000 f830 	bl	80092a0 <_getpid_r>
 8009240:	4622      	mov	r2, r4
 8009242:	4601      	mov	r1, r0
 8009244:	4628      	mov	r0, r5
 8009246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800924a:	f000 b817 	b.w	800927c <_kill_r>
 800924e:	2b01      	cmp	r3, #1
 8009250:	d00a      	beq.n	8009268 <_raise_r+0x4c>
 8009252:	1c59      	adds	r1, r3, #1
 8009254:	d103      	bne.n	800925e <_raise_r+0x42>
 8009256:	2316      	movs	r3, #22
 8009258:	6003      	str	r3, [r0, #0]
 800925a:	2001      	movs	r0, #1
 800925c:	e7e7      	b.n	800922e <_raise_r+0x12>
 800925e:	2100      	movs	r1, #0
 8009260:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009264:	4620      	mov	r0, r4
 8009266:	4798      	blx	r3
 8009268:	2000      	movs	r0, #0
 800926a:	e7e0      	b.n	800922e <_raise_r+0x12>

0800926c <raise>:
 800926c:	4b02      	ldr	r3, [pc, #8]	@ (8009278 <raise+0xc>)
 800926e:	4601      	mov	r1, r0
 8009270:	6818      	ldr	r0, [r3, #0]
 8009272:	f7ff bfd3 	b.w	800921c <_raise_r>
 8009276:	bf00      	nop
 8009278:	20000090 	.word	0x20000090

0800927c <_kill_r>:
 800927c:	b538      	push	{r3, r4, r5, lr}
 800927e:	4d07      	ldr	r5, [pc, #28]	@ (800929c <_kill_r+0x20>)
 8009280:	2300      	movs	r3, #0
 8009282:	4604      	mov	r4, r0
 8009284:	4608      	mov	r0, r1
 8009286:	4611      	mov	r1, r2
 8009288:	602b      	str	r3, [r5, #0]
 800928a:	f7f8 fcdd 	bl	8001c48 <_kill>
 800928e:	1c43      	adds	r3, r0, #1
 8009290:	d102      	bne.n	8009298 <_kill_r+0x1c>
 8009292:	682b      	ldr	r3, [r5, #0]
 8009294:	b103      	cbz	r3, 8009298 <_kill_r+0x1c>
 8009296:	6023      	str	r3, [r4, #0]
 8009298:	bd38      	pop	{r3, r4, r5, pc}
 800929a:	bf00      	nop
 800929c:	20000510 	.word	0x20000510

080092a0 <_getpid_r>:
 80092a0:	f7f8 bcca 	b.w	8001c38 <_getpid>

080092a4 <_init>:
 80092a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092a6:	bf00      	nop
 80092a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092aa:	bc08      	pop	{r3}
 80092ac:	469e      	mov	lr, r3
 80092ae:	4770      	bx	lr

080092b0 <_fini>:
 80092b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092b2:	bf00      	nop
 80092b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092b6:	bc08      	pop	{r3}
 80092b8:	469e      	mov	lr, r3
 80092ba:	4770      	bx	lr
