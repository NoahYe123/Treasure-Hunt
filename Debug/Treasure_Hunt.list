
Treasure_Hunt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7d4  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dac  0800c998  0800c998  0000d998  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d744  0800d744  0000f288  2**0
                  CONTENTS
  4 .ARM          00000008  0800d744  0800d744  0000e744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d74c  0800d74c  0000f288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d74c  0800d74c  0000e74c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d750  0800d750  0000e750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000288  20000000  0800d754  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000730  20000288  0800d9dc  0000f288  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009b8  0800d9dc  0000f9b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f288  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022896  00000000  00000000  0000f2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000442a  00000000  00000000  00031b4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a38  00000000  00000000  00035f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000143b  00000000  00000000  000379b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ee3c  00000000  00000000  00038deb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002040e  00000000  00000000  00067c27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a7d3  00000000  00000000  00088035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  001a2808  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f70  00000000  00000000  001a28c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001aa830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000000fa  00000000  00000000  001aa88a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  001aa984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000288 	.word	0x20000288
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800c97c 	.word	0x0800c97c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000028c 	.word	0x2000028c
 80001fc:	0800c97c 	.word	0x0800c97c

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bec:	f000 b96a 	b.w	8000ec4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	460c      	mov	r4, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d14e      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c14:	4694      	mov	ip, r2
 8000c16:	458c      	cmp	ip, r1
 8000c18:	4686      	mov	lr, r0
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	d962      	bls.n	8000ce6 <__udivmoddi4+0xde>
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0320 	rsb	r3, r2, #32
 8000c26:	4091      	lsls	r1, r2
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	4319      	orrs	r1, r3
 8000c32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f f68c 	uxth.w	r6, ip
 8000c3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb04 f106 	mul.w	r1, r4, r6
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c5e:	f080 8112 	bcs.w	8000e86 <__udivmoddi4+0x27e>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 810f 	bls.w	8000e86 <__udivmoddi4+0x27e>
 8000c68:	3c02      	subs	r4, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c76:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f606 	mul.w	r6, r0, r6
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c8e:	f080 80fc 	bcs.w	8000e8a <__udivmoddi4+0x282>
 8000c92:	429e      	cmp	r6, r3
 8000c94:	f240 80f9 	bls.w	8000e8a <__udivmoddi4+0x282>
 8000c98:	4463      	add	r3, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xba>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb4>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x150>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xcc>
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	f0c0 80f0 	bcc.w	8000eb4 <__udivmoddi4+0x2ac>
 8000cd4:	1a86      	subs	r6, r0, r2
 8000cd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d0e6      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce4:	e7e3      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x204>
 8000cec:	eba1 040c 	sub.w	r4, r1, ip
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb08 4416 	mls	r4, r8, r6, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb07 f006 	mul.w	r0, r7, r6
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x11c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x11a>
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000d22:	4626      	mov	r6, r4
 8000d24:	1a1c      	subs	r4, r3, r0
 8000d26:	fa1f f38e 	uxth.w	r3, lr
 8000d2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb00 f707 	mul.w	r7, r0, r7
 8000d3a:	429f      	cmp	r7, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x148>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x146>
 8000d48:	429f      	cmp	r7, r3
 8000d4a:	f200 80b0 	bhi.w	8000eae <__udivmoddi4+0x2a6>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	1bdb      	subs	r3, r3, r7
 8000d52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d68:	fa04 f301 	lsl.w	r3, r4, r1
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	40f4      	lsrs	r4, r6
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	0c38      	lsrs	r0, r7, #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fb00 441e 	mls	r4, r0, lr, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1a6>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d9e:	f080 8084 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000da2:	45a1      	cmp	r9, r4
 8000da4:	f240 8081 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000da8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x1d2>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000dd0:	d267      	bcs.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d965      	bls.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dde:	fba0 9302 	umull	r9, r3, r0, r2
 8000de2:	eba4 040c 	sub.w	r4, r4, ip
 8000de6:	429c      	cmp	r4, r3
 8000de8:	46ce      	mov	lr, r9
 8000dea:	469c      	mov	ip, r3
 8000dec:	d351      	bcc.n	8000e92 <__udivmoddi4+0x28a>
 8000dee:	d04e      	beq.n	8000e8e <__udivmoddi4+0x286>
 8000df0:	b155      	cbz	r5, 8000e08 <__udivmoddi4+0x200>
 8000df2:	ebb8 030e 	subs.w	r3, r8, lr
 8000df6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	431e      	orrs	r6, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c5 6400 	strd	r6, r4, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e750      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f103 	lsr.w	r1, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	fa24 f303 	lsr.w	r3, r4, r3
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3110 	mls	r1, r8, r0, r3
 8000e34:	0c23      	lsrs	r3, r4, #16
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f107 	mul.w	r1, r0, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x24c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e4a:	d22c      	bcs.n	8000ea6 <__udivmoddi4+0x29e>
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d92a      	bls.n	8000ea6 <__udivmoddi4+0x29e>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb01 f307 	mul.w	r3, r1, r7
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x276>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e74:	d213      	bcs.n	8000e9e <__udivmoddi4+0x296>
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	d911      	bls.n	8000e9e <__udivmoddi4+0x296>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e84:	e739      	b.n	8000cfa <__udivmoddi4+0xf2>
 8000e86:	4604      	mov	r4, r0
 8000e88:	e6f0      	b.n	8000c6c <__udivmoddi4+0x64>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e706      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e8e:	45c8      	cmp	r8, r9
 8000e90:	d2ae      	bcs.n	8000df0 <__udivmoddi4+0x1e8>
 8000e92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <__udivmoddi4+0x1e8>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	e7ed      	b.n	8000e7e <__udivmoddi4+0x276>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e799      	b.n	8000dda <__udivmoddi4+0x1d2>
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	e7d4      	b.n	8000e54 <__udivmoddi4+0x24c>
 8000eaa:	46d6      	mov	lr, sl
 8000eac:	e77f      	b.n	8000dae <__udivmoddi4+0x1a6>
 8000eae:	4463      	add	r3, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e74d      	b.n	8000d50 <__udivmoddi4+0x148>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e70f      	b.n	8000cdc <__udivmoddi4+0xd4>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	e730      	b.n	8000d24 <__udivmoddi4+0x11c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <generateArray>:
    // Scale sineValue value (4096 - 1)
    return (uint32_t) ((sineValue+1.0f)/2.0f * (float32_t)(precision-1));
}

// Part 2 and Part 3
void generateArray(uint32_t* array, uint32_t precision, uint32_t size) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
    for (uint32_t i = 0; i < size; i++) {
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61fb      	str	r3, [r7, #28]
 8000ed8:	e037      	b.n	8000f4a <generateArray+0x82>
        float rad = (float)(2.0f * PI * i / size);
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	ee07 3a90 	vmov	s15, r3
 8000ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ee4:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8000f5c <generateArray+0x94>
 8000ee8:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	ee07 3a90 	vmov	s15, r3
 8000ef2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000efa:	edc7 7a06 	vstr	s15, [r7, #24]
        // Scale sineValue to use (precision - 1) and target 2/3 of 12-bit DAC range
        float sineValue = ((arm_sin_f32(rad) + 1.0f) / 2.0f) * (float)(precision - 1);
 8000efe:	ed97 0a06 	vldr	s0, [r7, #24]
 8000f02:	f008 fe19 	bl	8009b38 <arm_sin_f32>
 8000f06:	eef0 7a40 	vmov.f32	s15, s0
 8000f0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f12:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000f16:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	ee07 3a90 	vmov	s15, r3
 8000f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f2a:	edc7 7a05 	vstr	s15, [r7, #20]
        array[i] = (uint32_t)sineValue;
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	4413      	add	r3, r2
 8000f36:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f3e:	ee17 2a90 	vmov	r2, s15
 8000f42:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < size; i++) {
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	3301      	adds	r3, #1
 8000f48:	61fb      	str	r3, [r7, #28]
 8000f4a:	69fa      	ldr	r2, [r7, #28]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d3c3      	bcc.n	8000eda <generateArray+0x12>
    }
}
 8000f52:	bf00      	nop
 8000f54:	bf00      	nop
 8000f56:	3720      	adds	r7, #32
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40c90fdb 	.word	0x40c90fdb

08000f60 <SaveHighScore>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */



void SaveHighScore(uint32_t highScore) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
    uint8_t dataToWrite[4];

    // Set the highest bit to indicate that the high score is valid
    highScore |= (1UL << 31);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f6e:	607b      	str	r3, [r7, #4]

    // Convert the high score into a 4-byte array
    dataToWrite[0] = (highScore >> 24) & 0xFF;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	0e1b      	lsrs	r3, r3, #24
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	733b      	strb	r3, [r7, #12]
    dataToWrite[1] = (highScore >> 16) & 0xFF;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	0c1b      	lsrs	r3, r3, #16
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	737b      	strb	r3, [r7, #13]
    dataToWrite[2] = (highScore >> 8) & 0xFF;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	0a1b      	lsrs	r3, r3, #8
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	73bb      	strb	r3, [r7, #14]
    dataToWrite[3] = highScore & 0xFF;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	73fb      	strb	r3, [r7, #15]

    if (BSP_QSPI_Init() != QSPI_OK) {
 8000f8e:	f001 f921 	bl	80021d4 <BSP_QSPI_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <SaveHighScore+0x3c>
//        HAL_UART_Transmit(&huart1, (uint8_t *)"QSPI Init Failed\r\n", 18, HAL_MAX_DELAY);
        Error_Handler();
 8000f98:	f000 ff16 	bl	8001dc8 <Error_Handler>
    }

//    HAL_UART_Transmit(&huart1, (uint8_t *)"QSPI Init Success\r\n", 20, HAL_MAX_DELAY);

    // Erase the flash sector containing the high score
    if (BSP_QSPI_Erase_Sector(HIGHSCORE_FLASH_ADDRESS) != QSPI_OK) {
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f001 fa6f 	bl	8002480 <BSP_QSPI_Erase_Sector>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d005      	beq.n	8000fb4 <SaveHighScore+0x54>
//        HAL_UART_Transmit(&huart1, (uint8_t *)"QSPI Erase Failed\r\n", 19, HAL_MAX_DELAY);
        Error_Handler();
 8000fa8:	f000 ff0e 	bl	8001dc8 <Error_Handler>
    }

//    HAL_UART_Transmit(&huart1, (uint8_t *)"QSPI Erase Command Sent\r\n", 25, HAL_MAX_DELAY);

    // Wait for the erase operation to complete
    while (BSP_QSPI_GetStatus() == QSPI_BUSY) {
 8000fac:	e002      	b.n	8000fb4 <SaveHighScore+0x54>
        HAL_Delay(10);
 8000fae:	200a      	movs	r0, #10
 8000fb0:	f002 fc12 	bl	80037d8 <HAL_Delay>
    while (BSP_QSPI_GetStatus() == QSPI_BUSY) {
 8000fb4:	f001 faac 	bl	8002510 <BSP_QSPI_GetStatus>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d0f7      	beq.n	8000fae <SaveHighScore+0x4e>
    }

    HAL_UART_Transmit(&huart1, (uint8_t *)"QSPI Erase Completed\r\n", 23, HAL_MAX_DELAY);
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fc2:	2217      	movs	r2, #23
 8000fc4:	490d      	ldr	r1, [pc, #52]	@ (8000ffc <SaveHighScore+0x9c>)
 8000fc6:	480e      	ldr	r0, [pc, #56]	@ (8001000 <SaveHighScore+0xa0>)
 8000fc8:	f007 ff0a 	bl	8008de0 <HAL_UART_Transmit>

    // Write the high score to the flash memory
    if (BSP_QSPI_Write(dataToWrite, HIGHSCORE_FLASH_ADDRESS, sizeof(dataToWrite)) != QSPI_OK) {
 8000fcc:	f107 030c 	add.w	r3, r7, #12
 8000fd0:	2204      	movs	r2, #4
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f001 f9cd 	bl	8002374 <BSP_QSPI_Write>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SaveHighScore+0x84>
//        HAL_UART_Transmit(&huart1, (uint8_t *)"QSPI Write Failed\r\n", 20, HAL_MAX_DELAY);
        Error_Handler();
 8000fe0:	f000 fef2 	bl	8001dc8 <Error_Handler>
    }

    HAL_UART_Transmit(&huart1, (uint8_t *)"High Score Saved\r\n", 18, HAL_MAX_DELAY);
 8000fe4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fe8:	2212      	movs	r2, #18
 8000fea:	4906      	ldr	r1, [pc, #24]	@ (8001004 <SaveHighScore+0xa4>)
 8000fec:	4804      	ldr	r0, [pc, #16]	@ (8001000 <SaveHighScore+0xa0>)
 8000fee:	f007 fef7 	bl	8008de0 <HAL_UART_Transmit>
}
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	0800c998 	.word	0x0800c998
 8001000:	20000408 	.word	0x20000408
 8001004:	0800c9b0 	.word	0x0800c9b0

08001008 <LoadHighScore>:


uint32_t LoadHighScore(void) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
    uint8_t dataRead[4]; // Buffer to hold the 4 bytes of high score data

    // Initialize QSPI
    if (BSP_QSPI_Init() != QSPI_OK) {
 800100e:	f001 f8e1 	bl	80021d4 <BSP_QSPI_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <LoadHighScore+0x14>
//        HAL_UART_Transmit(&huart1, (uint8_t *)"QSPI Init Failed\r\n", 18, HAL_MAX_DELAY);
        Error_Handler();
 8001018:	f000 fed6 	bl	8001dc8 <Error_Handler>
    }

//    HAL_UART_Transmit(&huart1, (uint8_t *)"QSPI Init Success\r\n", 20, HAL_MAX_DELAY);

    // Read high score from flash memory
    if (BSP_QSPI_Read(dataRead, HIGHSCORE_FLASH_ADDRESS, sizeof(dataRead)) != QSPI_OK) {
 800101c:	463b      	mov	r3, r7
 800101e:	2204      	movs	r2, #4
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f001 f954 	bl	80022d0 <BSP_QSPI_Read>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <LoadHighScore+0x2a>
//        HAL_UART_Transmit(&huart1, (uint8_t *)"QSPI Read Failed\r\n", 19, HAL_MAX_DELAY);
        Error_Handler();
 800102e:	f000 fecb 	bl	8001dc8 <Error_Handler>
    }

    // Combine the 4 bytes into a 32-bit integer
    uint32_t loadedHighScore = (dataRead[0] << 24) | (dataRead[1] << 16) | (dataRead[2] << 8) | dataRead[3];
 8001032:	783b      	ldrb	r3, [r7, #0]
 8001034:	061a      	lsls	r2, r3, #24
 8001036:	787b      	ldrb	r3, [r7, #1]
 8001038:	041b      	lsls	r3, r3, #16
 800103a:	431a      	orrs	r2, r3
 800103c:	78bb      	ldrb	r3, [r7, #2]
 800103e:	021b      	lsls	r3, r3, #8
 8001040:	4313      	orrs	r3, r2
 8001042:	78fa      	ldrb	r2, [r7, #3]
 8001044:	4313      	orrs	r3, r2
 8001046:	607b      	str	r3, [r7, #4]

    // Check if the highest bit (bit 31) is set, indicating a valid high score
    if ((loadedHighScore & (1UL << 31)) == 0) {
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	db03      	blt.n	8001056 <LoadHighScore+0x4e>
        // If bit 31 is not set, assume the high score is uninitialized and set it to 1000
        loadedHighScore = 10000;
 800104e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	e003      	b.n	800105e <LoadHighScore+0x56>
    } else {
        // Clear the highest bit before using the high score value
        loadedHighScore &= ~(1UL << 31);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800105c:	607b      	str	r3, [r7, #4]
    }

    // Print the high score


    return loadedHighScore; // Return the high score
 800105e:	687b      	ldr	r3, [r7, #4]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <SaveSeed>:

void SaveSeed(uint32_t seed) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
    uint8_t dataToWrite[4];

    dataToWrite[0] = (seed >> 24) & 0xFF;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	0e1b      	lsrs	r3, r3, #24
 8001074:	b2db      	uxtb	r3, r3
 8001076:	733b      	strb	r3, [r7, #12]
    dataToWrite[1] = (seed >> 16) & 0xFF;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	0c1b      	lsrs	r3, r3, #16
 800107c:	b2db      	uxtb	r3, r3
 800107e:	737b      	strb	r3, [r7, #13]
    dataToWrite[2] = (seed >> 8) & 0xFF;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	0a1b      	lsrs	r3, r3, #8
 8001084:	b2db      	uxtb	r3, r3
 8001086:	73bb      	strb	r3, [r7, #14]
    dataToWrite[3] = seed & 0xFF;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	b2db      	uxtb	r3, r3
 800108c:	73fb      	strb	r3, [r7, #15]

    if (BSP_QSPI_Init() != QSPI_OK) {
 800108e:	f001 f8a1 	bl	80021d4 <BSP_QSPI_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <SaveSeed+0x34>
        Error_Handler();
 8001098:	f000 fe96 	bl	8001dc8 <Error_Handler>
    }

    if (BSP_QSPI_Erase_Sector(SEED_FLASH_ADDRESS) != QSPI_OK) {
 800109c:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80010a0:	f001 f9ee 	bl	8002480 <BSP_QSPI_Erase_Sector>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d005      	beq.n	80010b6 <SaveSeed+0x4e>
        Error_Handler();
 80010aa:	f000 fe8d 	bl	8001dc8 <Error_Handler>
    }

    while (BSP_QSPI_GetStatus() == QSPI_BUSY) {
 80010ae:	e002      	b.n	80010b6 <SaveSeed+0x4e>
        HAL_Delay(10);
 80010b0:	200a      	movs	r0, #10
 80010b2:	f002 fb91 	bl	80037d8 <HAL_Delay>
    while (BSP_QSPI_GetStatus() == QSPI_BUSY) {
 80010b6:	f001 fa2b 	bl	8002510 <BSP_QSPI_GetStatus>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d0f7      	beq.n	80010b0 <SaveSeed+0x48>
    }

    if (BSP_QSPI_Write(dataToWrite, SEED_FLASH_ADDRESS, sizeof(dataToWrite)) != QSPI_OK) {
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	2204      	movs	r2, #4
 80010c6:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 80010ca:	4618      	mov	r0, r3
 80010cc:	f001 f952 	bl	8002374 <BSP_QSPI_Write>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <SaveSeed+0x72>
        Error_Handler();
 80010d6:	f000 fe77 	bl	8001dc8 <Error_Handler>
    }
}
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <DetectMovement>:
    }

    return seed;
}

int DetectMovement(void) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b088      	sub	sp, #32
 80010e8:	af00      	add	r7, sp, #0
	// get sensor data
    float gyroData[3];
    int16_t accelData[3];
    BSP_GYRO_GetXYZ(gyroData);
 80010ea:	f107 030c 	add.w	r3, r7, #12
 80010ee:	4618      	mov	r0, r3
 80010f0:	f001 f858 	bl	80021a4 <BSP_GYRO_GetXYZ>
    BSP_ACCELERO_AccGetXYZ(accelData);
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 fffa 	bl	80020f0 <BSP_ACCELERO_AccGetXYZ>

    // detected direction
    int newDirection = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61fb      	str	r3, [r7, #28]

    // current time
    uint32_t currentTime = HAL_GetTick();
 8001100:	f002 fb5e 	bl	80037c0 <HAL_GetTick>
 8001104:	61b8      	str	r0, [r7, #24]

    // check tilt
    if (accelData[0] > accelThreshold && gyroData[0] > gyroThreshold) {
 8001106:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800110a:	22c8      	movs	r2, #200	@ 0xc8
 800110c:	4293      	cmp	r3, r2
 800110e:	dd0b      	ble.n	8001128 <DetectMovement+0x44>
 8001110:	edd7 7a03 	vldr	s15, [r7, #12]
 8001114:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80011d4 <DetectMovement+0xf0>
 8001118:	eef4 7ac7 	vcmpe.f32	s15, s14
 800111c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001120:	dd02      	ble.n	8001128 <DetectMovement+0x44>
    	newDirection = 1; //up
 8001122:	2301      	movs	r3, #1
 8001124:	61fb      	str	r3, [r7, #28]
 8001126:	e03c      	b.n	80011a2 <DetectMovement+0xbe>
    } else if (accelData[1] < -accelThreshold && gyroData[1] < -gyroThreshold) {
 8001128:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800112c:	461a      	mov	r2, r3
 800112e:	23c8      	movs	r3, #200	@ 0xc8
 8001130:	425b      	negs	r3, r3
 8001132:	429a      	cmp	r2, r3
 8001134:	da0d      	bge.n	8001152 <DetectMovement+0x6e>
 8001136:	ed97 7a04 	vldr	s14, [r7, #16]
 800113a:	eddf 7a26 	vldr	s15, [pc, #152]	@ 80011d4 <DetectMovement+0xf0>
 800113e:	eef1 7a67 	vneg.f32	s15, s15
 8001142:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114a:	d502      	bpl.n	8001152 <DetectMovement+0x6e>
    	newDirection = 2; //left
 800114c:	2302      	movs	r3, #2
 800114e:	61fb      	str	r3, [r7, #28]
 8001150:	e027      	b.n	80011a2 <DetectMovement+0xbe>
    } else if (accelData[0] < -accelThreshold && gyroData[0] < -gyroThreshold) {
 8001152:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001156:	461a      	mov	r2, r3
 8001158:	23c8      	movs	r3, #200	@ 0xc8
 800115a:	425b      	negs	r3, r3
 800115c:	429a      	cmp	r2, r3
 800115e:	da0d      	bge.n	800117c <DetectMovement+0x98>
 8001160:	ed97 7a03 	vldr	s14, [r7, #12]
 8001164:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 80011d4 <DetectMovement+0xf0>
 8001168:	eef1 7a67 	vneg.f32	s15, s15
 800116c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001174:	d502      	bpl.n	800117c <DetectMovement+0x98>
    	newDirection = 3; //down
 8001176:	2303      	movs	r3, #3
 8001178:	61fb      	str	r3, [r7, #28]
 800117a:	e012      	b.n	80011a2 <DetectMovement+0xbe>
    } else if (accelData[1] > accelThreshold && gyroData[1] > gyroThreshold) {
 800117c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001180:	22c8      	movs	r2, #200	@ 0xc8
 8001182:	4293      	cmp	r3, r2
 8001184:	dd0b      	ble.n	800119e <DetectMovement+0xba>
 8001186:	edd7 7a04 	vldr	s15, [r7, #16]
 800118a:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80011d4 <DetectMovement+0xf0>
 800118e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001196:	dd02      	ble.n	800119e <DetectMovement+0xba>
    	newDirection = 4; //right
 8001198:	2304      	movs	r3, #4
 800119a:	61fb      	str	r3, [r7, #28]
 800119c:	e001      	b.n	80011a2 <DetectMovement+0xbe>
    } else {
    	newDirection = 0; //neutral
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
    }

    // only print if change in direction after enough delay (debounce)
    if ((newDirection != currentDirection) && (currentTime - lastChangeTime > debounceTime)) {
 80011a2:	4b0d      	ldr	r3, [pc, #52]	@ (80011d8 <DetectMovement+0xf4>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	69fa      	ldr	r2, [r7, #28]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d00d      	beq.n	80011c8 <DetectMovement+0xe4>
 80011ac:	4b0b      	ldr	r3, [pc, #44]	@ (80011dc <DetectMovement+0xf8>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d905      	bls.n	80011c8 <DetectMovement+0xe4>
        // update direction
    	currentDirection = newDirection;
 80011bc:	4a06      	ldr	r2, [pc, #24]	@ (80011d8 <DetectMovement+0xf4>)
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	6013      	str	r3, [r2, #0]
        lastChangeTime = currentTime;
 80011c2:	4a06      	ldr	r2, [pc, #24]	@ (80011dc <DetectMovement+0xf8>)
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	6013      	str	r3, [r2, #0]
    }

    return currentDirection;
 80011c8:	4b03      	ldr	r3, [pc, #12]	@ (80011d8 <DetectMovement+0xf4>)
 80011ca:	681b      	ldr	r3, [r3, #0]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3720      	adds	r7, #32
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	447a0000 	.word	0x447a0000
 80011d8:	20000764 	.word	0x20000764
 80011dc:	20000768 	.word	0x20000768

080011e0 <PrintTreasureGrid>:
        HAL_UART_Transmit(&huart1, (uint8_t *)displayBuffer, strlen(displayBuffer), HAL_MAX_DELAY);
        HAL_UART_Transmit(&huart1, (uint8_t *)newline, strlen(newline), HAL_MAX_DELAY);
    }
}

void PrintTreasureGrid(void) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b0ac      	sub	sp, #176	@ 0xb0
 80011e4:	af00      	add	r7, sp, #0
    const char newline[] = "\r\n";
 80011e6:	4a69      	ldr	r2, [pc, #420]	@ (800138c <PrintTreasureGrid+0x1ac>)
 80011e8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011ec:	6812      	ldr	r2, [r2, #0]
 80011ee:	4611      	mov	r1, r2
 80011f0:	8019      	strh	r1, [r3, #0]
 80011f2:	3302      	adds	r3, #2
 80011f4:	0c12      	lsrs	r2, r2, #16
 80011f6:	701a      	strb	r2, [r3, #0]
    char grid[4][4];
    char treasureBuffer[32];
    char displayBuffer[64];  // Buffer to send rows over UART

    // Initialize the grid with '.' for empty spaces
    for (int i = 0; i < 4; i++) {
 80011f8:	2300      	movs	r3, #0
 80011fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80011fe:	e01c      	b.n	800123a <PrintTreasureGrid+0x5a>
        for (int j = 0; j < 4; j++) {
 8001200:	2300      	movs	r3, #0
 8001202:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001206:	e00f      	b.n	8001228 <PrintTreasureGrid+0x48>
            grid[i][j] = '.';
 8001208:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	33b0      	adds	r3, #176	@ 0xb0
 8001210:	19da      	adds	r2, r3, r7
 8001212:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001216:	4413      	add	r3, r2
 8001218:	3b24      	subs	r3, #36	@ 0x24
 800121a:	222e      	movs	r2, #46	@ 0x2e
 800121c:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 4; j++) {
 800121e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001222:	3301      	adds	r3, #1
 8001224:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001228:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800122c:	2b03      	cmp	r3, #3
 800122e:	ddeb      	ble.n	8001208 <PrintTreasureGrid+0x28>
    for (int i = 0; i < 4; i++) {
 8001230:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001234:	3301      	adds	r3, #1
 8001236:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800123a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800123e:	2b03      	cmp	r3, #3
 8001240:	ddde      	ble.n	8001200 <PrintTreasureGrid+0x20>
        }
    }

    // Set the treasure ('x') and player ('*') locations
    grid[treasureRow][treasureCol] = 'x'; // Treasure location
 8001242:	4b53      	ldr	r3, [pc, #332]	@ (8001390 <PrintTreasureGrid+0x1b0>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	4b53      	ldr	r3, [pc, #332]	@ (8001394 <PrintTreasureGrid+0x1b4>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	0092      	lsls	r2, r2, #2
 800124c:	32b0      	adds	r2, #176	@ 0xb0
 800124e:	443a      	add	r2, r7
 8001250:	4413      	add	r3, r2
 8001252:	3b24      	subs	r3, #36	@ 0x24
 8001254:	2278      	movs	r2, #120	@ 0x78
 8001256:	701a      	strb	r2, [r3, #0]
    grid[playerRow][playerCol] = '*';    // Player location
 8001258:	4b4f      	ldr	r3, [pc, #316]	@ (8001398 <PrintTreasureGrid+0x1b8>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b4f      	ldr	r3, [pc, #316]	@ (800139c <PrintTreasureGrid+0x1bc>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	0092      	lsls	r2, r2, #2
 8001262:	32b0      	adds	r2, #176	@ 0xb0
 8001264:	443a      	add	r2, r7
 8001266:	4413      	add	r3, r2
 8001268:	3b24      	subs	r3, #36	@ 0x24
 800126a:	222a      	movs	r2, #42	@ 0x2a
 800126c:	701a      	strb	r2, [r3, #0]

    // format output
    for (int i = 0; i <= 4; i++) {  // Includes the top and bottom border
 800126e:	2300      	movs	r3, #0
 8001270:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001274:	e07f      	b.n	8001376 <PrintTreasureGrid+0x196>
        if (i == 0) {
 8001276:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800127a:	2b00      	cmp	r3, #0
 800127c:	d115      	bne.n	80012aa <PrintTreasureGrid+0xca>
            snprintf(displayBuffer, sizeof(displayBuffer), "+---+---+---+---+\r\n");
 800127e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001282:	4a47      	ldr	r2, [pc, #284]	@ (80013a0 <PrintTreasureGrid+0x1c0>)
 8001284:	2140      	movs	r1, #64	@ 0x40
 8001286:	4618      	mov	r0, r3
 8001288:	f009 f8f4 	bl	800a474 <sniprintf>
            HAL_UART_Transmit(&huart1, (uint8_t *)displayBuffer, strlen(displayBuffer), HAL_MAX_DELAY);
 800128c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff f805 	bl	80002a0 <strlen>
 8001296:	4603      	mov	r3, r0
 8001298:	b29a      	uxth	r2, r3
 800129a:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800129e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012a2:	4840      	ldr	r0, [pc, #256]	@ (80013a4 <PrintTreasureGrid+0x1c4>)
 80012a4:	f007 fd9c 	bl	8008de0 <HAL_UART_Transmit>
 80012a8:	e060      	b.n	800136c <PrintTreasureGrid+0x18c>
        } else {
            char rowBuffer[32] = "|";  // Start with the first border
 80012aa:	237c      	movs	r3, #124	@ 0x7c
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	611a      	str	r2, [r3, #16]
 80012be:	615a      	str	r2, [r3, #20]
 80012c0:	619a      	str	r2, [r3, #24]
            for (int j = 0; j < 4; j++) {
 80012c2:	2300      	movs	r3, #0
 80012c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80012c8:	e022      	b.n	8001310 <PrintTreasureGrid+0x130>
                char cell[8];
                snprintf(cell, sizeof(cell), " %c |", grid[i - 1][j]);  // Add cell content with separators
 80012ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80012ce:	3b01      	subs	r3, #1
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	33b0      	adds	r3, #176	@ 0xb0
 80012d4:	19da      	adds	r2, r3, r7
 80012d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80012da:	4413      	add	r3, r2
 80012dc:	3b24      	subs	r3, #36	@ 0x24
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80012e4:	4a30      	ldr	r2, [pc, #192]	@ (80013a8 <PrintTreasureGrid+0x1c8>)
 80012e6:	2108      	movs	r1, #8
 80012e8:	f009 f8c4 	bl	800a474 <sniprintf>
                strncat(rowBuffer, cell, sizeof(rowBuffer) - strlen(rowBuffer) - 1);
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7fe ffd6 	bl	80002a0 <strlen>
 80012f4:	4603      	mov	r3, r0
 80012f6:	f1c3 021f 	rsb	r2, r3, #31
 80012fa:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	4618      	mov	r0, r3
 8001302:	f009 fa19 	bl	800a738 <strncat>
            for (int j = 0; j < 4; j++) {
 8001306:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800130a:	3301      	adds	r3, #1
 800130c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001310:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001314:	2b03      	cmp	r3, #3
 8001316:	ddd8      	ble.n	80012ca <PrintTreasureGrid+0xea>
            }
            snprintf(displayBuffer, sizeof(displayBuffer), "%s\r\n", rowBuffer);
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800131e:	4a23      	ldr	r2, [pc, #140]	@ (80013ac <PrintTreasureGrid+0x1cc>)
 8001320:	2140      	movs	r1, #64	@ 0x40
 8001322:	f009 f8a7 	bl	800a474 <sniprintf>
            HAL_UART_Transmit(&huart1, (uint8_t *)displayBuffer, strlen(displayBuffer), HAL_MAX_DELAY);
 8001326:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800132a:	4618      	mov	r0, r3
 800132c:	f7fe ffb8 	bl	80002a0 <strlen>
 8001330:	4603      	mov	r3, r0
 8001332:	b29a      	uxth	r2, r3
 8001334:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001338:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800133c:	4819      	ldr	r0, [pc, #100]	@ (80013a4 <PrintTreasureGrid+0x1c4>)
 800133e:	f007 fd4f 	bl	8008de0 <HAL_UART_Transmit>

            snprintf(displayBuffer, sizeof(displayBuffer), "+---+---+---+---+\r\n");
 8001342:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001346:	4a16      	ldr	r2, [pc, #88]	@ (80013a0 <PrintTreasureGrid+0x1c0>)
 8001348:	2140      	movs	r1, #64	@ 0x40
 800134a:	4618      	mov	r0, r3
 800134c:	f009 f892 	bl	800a474 <sniprintf>
            HAL_UART_Transmit(&huart1, (uint8_t *)displayBuffer, strlen(displayBuffer), HAL_MAX_DELAY);
 8001350:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001354:	4618      	mov	r0, r3
 8001356:	f7fe ffa3 	bl	80002a0 <strlen>
 800135a:	4603      	mov	r3, r0
 800135c:	b29a      	uxth	r2, r3
 800135e:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001362:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001366:	480f      	ldr	r0, [pc, #60]	@ (80013a4 <PrintTreasureGrid+0x1c4>)
 8001368:	f007 fd3a 	bl	8008de0 <HAL_UART_Transmit>
    for (int i = 0; i <= 4; i++) {  // Includes the top and bottom border
 800136c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001370:	3301      	adds	r3, #1
 8001372:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001376:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800137a:	2b04      	cmp	r3, #4
 800137c:	f77f af7b 	ble.w	8001276 <PrintTreasureGrid+0x96>
        }
    }
}
 8001380:	bf00      	nop
 8001382:	bf00      	nop
 8001384:	37b0      	adds	r7, #176	@ 0xb0
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	0800c9c4 	.word	0x0800c9c4
 8001390:	200004a4 	.word	0x200004a4
 8001394:	200004a8 	.word	0x200004a8
 8001398:	200004ac 	.word	0x200004ac
 800139c:	200004b0 	.word	0x200004b0
 80013a0:	0800c9c8 	.word	0x0800c9c8
 80013a4:	20000408 	.word	0x20000408
 80013a8:	0800c9dc 	.word	0x0800c9dc
 80013ac:	0800c9e4 	.word	0x0800c9e4

080013b0 <Move>:


void Move(void) {
 80013b0:	b5b0      	push	{r4, r5, r7, lr}
 80013b2:	b0c6      	sub	sp, #280	@ 0x118
 80013b4:	af02      	add	r7, sp, #8
    int movement = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

    // wait to get a valid direction (not none)
    while (movement == 0) {
 80013bc:	e006      	b.n	80013cc <Move+0x1c>
        movement = DetectMovement();
 80013be:	f7ff fe91 	bl	80010e4 <DetectMovement>
 80013c2:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
        HAL_Delay(50);
 80013c6:	2032      	movs	r0, #50	@ 0x32
 80013c8:	f002 fa06 	bl	80037d8 <HAL_Delay>
    while (movement == 0) {
 80013cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f4      	beq.n	80013be <Move+0xe>
    }

    // move
    switch (movement) {
 80013d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80013d8:	3b01      	subs	r3, #1
 80013da:	2b03      	cmp	r3, #3
 80013dc:	d846      	bhi.n	800146c <Move+0xbc>
 80013de:	a201      	add	r2, pc, #4	@ (adr r2, 80013e4 <Move+0x34>)
 80013e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e4:	0800144f 	.word	0x0800144f
 80013e8:	080013f5 	.word	0x080013f5
 80013ec:	08001413 	.word	0x08001413
 80013f0:	08001431 	.word	0x08001431
        case 2: // up
            if (playerRow > 0) {
 80013f4:	4b9a      	ldr	r3, [pc, #616]	@ (8001660 <Move+0x2b0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	dd39      	ble.n	8001470 <Move+0xc0>
                playerRow--;
 80013fc:	4b98      	ldr	r3, [pc, #608]	@ (8001660 <Move+0x2b0>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	3b01      	subs	r3, #1
 8001402:	4a97      	ldr	r2, [pc, #604]	@ (8001660 <Move+0x2b0>)
 8001404:	6013      	str	r3, [r2, #0]
                counter++;
 8001406:	4b97      	ldr	r3, [pc, #604]	@ (8001664 <Move+0x2b4>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	3301      	adds	r3, #1
 800140c:	4a95      	ldr	r2, [pc, #596]	@ (8001664 <Move+0x2b4>)
 800140e:	6013      	str	r3, [r2, #0]
            }
            break;
 8001410:	e02e      	b.n	8001470 <Move+0xc0>
        case 3: // right
            if (playerCol < 3) {
 8001412:	4b95      	ldr	r3, [pc, #596]	@ (8001668 <Move+0x2b8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b02      	cmp	r3, #2
 8001418:	dc2c      	bgt.n	8001474 <Move+0xc4>
                playerCol++;
 800141a:	4b93      	ldr	r3, [pc, #588]	@ (8001668 <Move+0x2b8>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	3301      	adds	r3, #1
 8001420:	4a91      	ldr	r2, [pc, #580]	@ (8001668 <Move+0x2b8>)
 8001422:	6013      	str	r3, [r2, #0]
                counter++;
 8001424:	4b8f      	ldr	r3, [pc, #572]	@ (8001664 <Move+0x2b4>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	3301      	adds	r3, #1
 800142a:	4a8e      	ldr	r2, [pc, #568]	@ (8001664 <Move+0x2b4>)
 800142c:	6013      	str	r3, [r2, #0]
            }
            break;
 800142e:	e021      	b.n	8001474 <Move+0xc4>
        case 4: // down
            if (playerRow < 3) {
 8001430:	4b8b      	ldr	r3, [pc, #556]	@ (8001660 <Move+0x2b0>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b02      	cmp	r3, #2
 8001436:	dc1f      	bgt.n	8001478 <Move+0xc8>
                playerRow++;
 8001438:	4b89      	ldr	r3, [pc, #548]	@ (8001660 <Move+0x2b0>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	3301      	adds	r3, #1
 800143e:	4a88      	ldr	r2, [pc, #544]	@ (8001660 <Move+0x2b0>)
 8001440:	6013      	str	r3, [r2, #0]
                counter++;
 8001442:	4b88      	ldr	r3, [pc, #544]	@ (8001664 <Move+0x2b4>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	3301      	adds	r3, #1
 8001448:	4a86      	ldr	r2, [pc, #536]	@ (8001664 <Move+0x2b4>)
 800144a:	6013      	str	r3, [r2, #0]
            }
            break;
 800144c:	e014      	b.n	8001478 <Move+0xc8>
        case 1: // left
            if (playerCol > 0) {
 800144e:	4b86      	ldr	r3, [pc, #536]	@ (8001668 <Move+0x2b8>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	dd12      	ble.n	800147c <Move+0xcc>
                playerCol--;
 8001456:	4b84      	ldr	r3, [pc, #528]	@ (8001668 <Move+0x2b8>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	3b01      	subs	r3, #1
 800145c:	4a82      	ldr	r2, [pc, #520]	@ (8001668 <Move+0x2b8>)
 800145e:	6013      	str	r3, [r2, #0]
                counter++;
 8001460:	4b80      	ldr	r3, [pc, #512]	@ (8001664 <Move+0x2b4>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	3301      	adds	r3, #1
 8001466:	4a7f      	ldr	r2, [pc, #508]	@ (8001664 <Move+0x2b4>)
 8001468:	6013      	str	r3, [r2, #0]
            }
            break;
 800146a:	e007      	b.n	800147c <Move+0xcc>
        default:
            break;
 800146c:	bf00      	nop
 800146e:	e006      	b.n	800147e <Move+0xce>
            break;
 8001470:	bf00      	nop
 8001472:	e004      	b.n	800147e <Move+0xce>
            break;
 8001474:	bf00      	nop
 8001476:	e002      	b.n	800147e <Move+0xce>
            break;
 8001478:	bf00      	nop
 800147a:	e000      	b.n	800147e <Move+0xce>
            break;
 800147c:	bf00      	nop
    }

    // show new map
    PrintTreasureGrid();
 800147e:	f7ff feaf 	bl	80011e0 <PrintTreasureGrid>

    // print the updated number of moves
    char counterBuffer[50];
    snprintf(counterBuffer, sizeof(counterBuffer), "Moves made: %d\r\n", counter);
 8001482:	4b78      	ldr	r3, [pc, #480]	@ (8001664 <Move+0x2b4>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 800148a:	4a78      	ldr	r2, [pc, #480]	@ (800166c <Move+0x2bc>)
 800148c:	2132      	movs	r1, #50	@ 0x32
 800148e:	f008 fff1 	bl	800a474 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)counterBuffer, strlen(counterBuffer), HAL_MAX_DELAY);
 8001492:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001496:	4618      	mov	r0, r3
 8001498:	f7fe ff02 	bl	80002a0 <strlen>
 800149c:	4603      	mov	r3, r0
 800149e:	b29a      	uxth	r2, r3
 80014a0:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 80014a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014a8:	4871      	ldr	r0, [pc, #452]	@ (8001670 <Move+0x2c0>)
 80014aa:	f007 fc99 	bl	8008de0 <HAL_UART_Transmit>

    // check if on treasure
    if (playerRow == treasureRow && playerCol == treasureCol) {
 80014ae:	4b6c      	ldr	r3, [pc, #432]	@ (8001660 <Move+0x2b0>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	4b70      	ldr	r3, [pc, #448]	@ (8001674 <Move+0x2c4>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d164      	bne.n	8001584 <Move+0x1d4>
 80014ba:	4b6b      	ldr	r3, [pc, #428]	@ (8001668 <Move+0x2b8>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	4b6e      	ldr	r3, [pc, #440]	@ (8001678 <Move+0x2c8>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d15e      	bne.n	8001584 <Move+0x1d4>
        const char winMessage[] = "You found the treasure!\r\n";
 80014c6:	4b6d      	ldr	r3, [pc, #436]	@ (800167c <Move+0x2cc>)
 80014c8:	f107 04b0 	add.w	r4, r7, #176	@ 0xb0
 80014cc:	461d      	mov	r5, r3
 80014ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014d6:	c403      	stmia	r4!, {r0, r1}
 80014d8:	8022      	strh	r2, [r4, #0]
        HAL_UART_Transmit(&huart1, (uint8_t *)winMessage, strlen(winMessage), HAL_MAX_DELAY);
 80014da:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 80014de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014e2:	2219      	movs	r2, #25
 80014e4:	4862      	ldr	r0, [pc, #392]	@ (8001670 <Move+0x2c0>)
 80014e6:	f007 fc7b 	bl	8008de0 <HAL_UART_Transmit>
        HAL_Delay(1000);
 80014ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014ee:	f002 f973 	bl	80037d8 <HAL_Delay>

        if(counter < LoadHighScore()){
 80014f2:	f7ff fd89 	bl	8001008 <LoadHighScore>
 80014f6:	4602      	mov	r2, r0
 80014f8:	4b5a      	ldr	r3, [pc, #360]	@ (8001664 <Move+0x2b4>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d904      	bls.n	800150a <Move+0x15a>

        SaveHighScore(counter);
 8001500:	4b58      	ldr	r3, [pc, #352]	@ (8001664 <Move+0x2b4>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fd2b 	bl	8000f60 <SaveHighScore>

        }

        for(int i = 0; i< victoryLength; i++){
 800150a:	2300      	movs	r3, #0
 800150c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001510:	e02a      	b.n	8001568 <Move+0x1b8>

         uint32_t nextNote = victoryMelody[i]; // Get the current note
 8001512:	4a5b      	ldr	r2, [pc, #364]	@ (8001680 <Move+0x2d0>)
 8001514:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
   	     uint32_t duration = victoryDurations[i]; // Get the current duration
 8001520:	4a58      	ldr	r2, [pc, #352]	@ (8001684 <Move+0x2d4>)
 8001522:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800152a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

   	     // Stop the current DMA for buffer
   	     HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 800152e:	2100      	movs	r1, #0
 8001530:	4855      	ldr	r0, [pc, #340]	@ (8001688 <Move+0x2d8>)
 8001532:	f002 fb45 	bl	8003bc0 <HAL_DAC_Stop_DMA>

   	     // Start DMA with the new note
   	     HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, notes[nextNote], array_size[nextNote], DAC_ALIGN_12B_R);
 8001536:	4a55      	ldr	r2, [pc, #340]	@ (800168c <Move+0x2dc>)
 8001538:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800153c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001540:	4953      	ldr	r1, [pc, #332]	@ (8001690 <Move+0x2e0>)
 8001542:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001546:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800154a:	2100      	movs	r1, #0
 800154c:	9100      	str	r1, [sp, #0]
 800154e:	2100      	movs	r1, #0
 8001550:	484d      	ldr	r0, [pc, #308]	@ (8001688 <Move+0x2d8>)
 8001552:	f002 fa69 	bl	8003a28 <HAL_DAC_Start_DMA>

   	     // Add a delay for the note duration
   	     HAL_Delay(duration);
 8001556:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 800155a:	f002 f93d 	bl	80037d8 <HAL_Delay>
        for(int i = 0; i< victoryLength; i++){
 800155e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001562:	3301      	adds	r3, #1
 8001564:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001568:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800156c:	4b49      	ldr	r3, [pc, #292]	@ (8001694 <Move+0x2e4>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	429a      	cmp	r2, r3
 8001572:	d3ce      	bcc.n	8001512 <Move+0x162>
        }

        HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001574:	2100      	movs	r1, #0
 8001576:	4844      	ldr	r0, [pc, #272]	@ (8001688 <Move+0x2d8>)
 8001578:	f002 fb22 	bl	8003bc0 <HAL_DAC_Stop_DMA>
        gameover = 1;
 800157c:	4b46      	ldr	r3, [pc, #280]	@ (8001698 <Move+0x2e8>)
 800157e:	2201      	movs	r2, #1
 8001580:	601a      	str	r2, [r3, #0]
    if (playerRow == treasureRow && playerCol == treasureCol) {
 8001582:	e0f8      	b.n	8001776 <Move+0x3c6>

   	     // Increment the index to play the next note

    }
    else {
    	if (playerRow > treasureRow && playerCol > treasureCol) {
 8001584:	4b36      	ldr	r3, [pc, #216]	@ (8001660 <Move+0x2b0>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	4b3a      	ldr	r3, [pc, #232]	@ (8001674 <Move+0x2c4>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	dd20      	ble.n	80015d2 <Move+0x222>
 8001590:	4b35      	ldr	r3, [pc, #212]	@ (8001668 <Move+0x2b8>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b38      	ldr	r3, [pc, #224]	@ (8001678 <Move+0x2c8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	429a      	cmp	r2, r3
 800159a:	dd1a      	ble.n	80015d2 <Move+0x222>
    		const char winMessage[] = "The treasure further up,\r\nmaybe left?\r\n";
 800159c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015a0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80015a4:	4a3d      	ldr	r2, [pc, #244]	@ (800169c <Move+0x2ec>)
 80015a6:	461c      	mov	r4, r3
 80015a8:	4615      	mov	r5, r2
 80015aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80015b6:	e884 0003 	stmia.w	r4, {r0, r1}
    		HAL_UART_Transmit(&huart1, (uint8_t *)winMessage, strlen(winMessage), HAL_MAX_DELAY);
 80015ba:	1d39      	adds	r1, r7, #4
 80015bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015c0:	2227      	movs	r2, #39	@ 0x27
 80015c2:	482b      	ldr	r0, [pc, #172]	@ (8001670 <Move+0x2c0>)
 80015c4:	f007 fc0c 	bl	8008de0 <HAL_UART_Transmit>
    		HAL_Delay(1000);
 80015c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015cc:	f002 f904 	bl	80037d8 <HAL_Delay>
    	if (playerRow > treasureRow && playerCol > treasureCol) {
 80015d0:	e0d1      	b.n	8001776 <Move+0x3c6>
    	}
    	else if(playerRow > treasureRow && playerCol < treasureCol) {
 80015d2:	4b23      	ldr	r3, [pc, #140]	@ (8001660 <Move+0x2b0>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	4b27      	ldr	r3, [pc, #156]	@ (8001674 <Move+0x2c4>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	429a      	cmp	r2, r3
 80015dc:	dd1c      	ble.n	8001618 <Move+0x268>
 80015de:	4b22      	ldr	r3, [pc, #136]	@ (8001668 <Move+0x2b8>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	4b25      	ldr	r3, [pc, #148]	@ (8001678 <Move+0x2c8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	da16      	bge.n	8001618 <Move+0x268>
    		const char winMessage[] = "You should go right up:))\r\n";
 80015ea:	4b2d      	ldr	r3, [pc, #180]	@ (80016a0 <Move+0x2f0>)
 80015ec:	f107 0494 	add.w	r4, r7, #148	@ 0x94
 80015f0:	461d      	mov	r5, r3
 80015f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    		HAL_UART_Transmit(&huart1, (uint8_t *)winMessage, strlen(winMessage), HAL_MAX_DELAY);
 80015fe:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 8001602:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001606:	221b      	movs	r2, #27
 8001608:	4819      	ldr	r0, [pc, #100]	@ (8001670 <Move+0x2c0>)
 800160a:	f007 fbe9 	bl	8008de0 <HAL_UART_Transmit>
    		HAL_Delay(1000);
 800160e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001612:	f002 f8e1 	bl	80037d8 <HAL_Delay>
    	else if(playerRow > treasureRow && playerCol < treasureCol) {
 8001616:	e0ae      	b.n	8001776 <Move+0x3c6>
    	}
    	else if(playerRow < treasureRow && playerCol > treasureCol) {
 8001618:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <Move+0x2b0>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b15      	ldr	r3, [pc, #84]	@ (8001674 <Move+0x2c4>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	429a      	cmp	r2, r3
 8001622:	da41      	bge.n	80016a8 <Move+0x2f8>
 8001624:	4b10      	ldr	r3, [pc, #64]	@ (8001668 <Move+0x2b8>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b13      	ldr	r3, [pc, #76]	@ (8001678 <Move+0x2c8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	429a      	cmp	r2, r3
 800162e:	dd3b      	ble.n	80016a8 <Move+0x2f8>
    		const char winMessage[] = "going up is not ~right~\r\n";
 8001630:	4b1c      	ldr	r3, [pc, #112]	@ (80016a4 <Move+0x2f4>)
 8001632:	f107 0478 	add.w	r4, r7, #120	@ 0x78
 8001636:	461d      	mov	r5, r3
 8001638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800163a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800163c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001640:	c403      	stmia	r4!, {r0, r1}
 8001642:	8022      	strh	r2, [r4, #0]
    		HAL_UART_Transmit(&huart1, (uint8_t *)winMessage, strlen(winMessage), HAL_MAX_DELAY);
 8001644:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8001648:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800164c:	2219      	movs	r2, #25
 800164e:	4808      	ldr	r0, [pc, #32]	@ (8001670 <Move+0x2c0>)
 8001650:	f007 fbc6 	bl	8008de0 <HAL_UART_Transmit>
    		HAL_Delay(1000);
 8001654:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001658:	f002 f8be 	bl	80037d8 <HAL_Delay>
    	else if(playerRow < treasureRow && playerCol > treasureCol) {
 800165c:	e08b      	b.n	8001776 <Move+0x3c6>
 800165e:	bf00      	nop
 8001660:	200004ac 	.word	0x200004ac
 8001664:	2000049c 	.word	0x2000049c
 8001668:	200004b0 	.word	0x200004b0
 800166c:	0800c9ec 	.word	0x0800c9ec
 8001670:	20000408 	.word	0x20000408
 8001674:	200004a4 	.word	0x200004a4
 8001678:	200004a8 	.word	0x200004a8
 800167c:	0800ca00 	.word	0x0800ca00
 8001680:	20000010 	.word	0x20000010
 8001684:	2000002c 	.word	0x2000002c
 8001688:	200002a4 	.word	0x200002a4
 800168c:	20000754 	.word	0x20000754
 8001690:	20000000 	.word	0x20000000
 8001694:	20000048 	.word	0x20000048
 8001698:	200004a0 	.word	0x200004a0
 800169c:	0800ca1c 	.word	0x0800ca1c
 80016a0:	0800ca44 	.word	0x0800ca44
 80016a4:	0800ca60 	.word	0x0800ca60
    	}
    	else if(playerRow < treasureRow && playerCol < treasureCol) {
 80016a8:	4b35      	ldr	r3, [pc, #212]	@ (8001780 <Move+0x3d0>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4b35      	ldr	r3, [pc, #212]	@ (8001784 <Move+0x3d4>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	da20      	bge.n	80016f6 <Move+0x346>
 80016b4:	4b34      	ldr	r3, [pc, #208]	@ (8001788 <Move+0x3d8>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b34      	ldr	r3, [pc, #208]	@ (800178c <Move+0x3dc>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	429a      	cmp	r2, r3
 80016be:	da1a      	bge.n	80016f6 <Move+0x346>
    		const char winMessage[] = "further down, right?\r\n";
 80016c0:	4b33      	ldr	r3, [pc, #204]	@ (8001790 <Move+0x3e0>)
 80016c2:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 80016c6:	461d      	mov	r5, r3
 80016c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016cc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80016d0:	6020      	str	r0, [r4, #0]
 80016d2:	3404      	adds	r4, #4
 80016d4:	8021      	strh	r1, [r4, #0]
 80016d6:	3402      	adds	r4, #2
 80016d8:	0c0b      	lsrs	r3, r1, #16
 80016da:	7023      	strb	r3, [r4, #0]
    		HAL_UART_Transmit(&huart1, (uint8_t *)winMessage, strlen(winMessage), HAL_MAX_DELAY);
 80016dc:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 80016e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016e4:	2216      	movs	r2, #22
 80016e6:	482b      	ldr	r0, [pc, #172]	@ (8001794 <Move+0x3e4>)
 80016e8:	f007 fb7a 	bl	8008de0 <HAL_UART_Transmit>
    		HAL_Delay(1000);
 80016ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016f0:	f002 f872 	bl	80037d8 <HAL_Delay>
    	else if(playerRow < treasureRow && playerCol < treasureCol) {
 80016f4:	e03f      	b.n	8001776 <Move+0x3c6>
    	}
    	else if(playerRow == treasureRow) {
 80016f6:	4b22      	ldr	r3, [pc, #136]	@ (8001780 <Move+0x3d0>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	4b22      	ldr	r3, [pc, #136]	@ (8001784 <Move+0x3d4>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d116      	bne.n	8001730 <Move+0x380>
    		const char winMessage[] = "you're at the right level!\r\n";
 8001702:	4b25      	ldr	r3, [pc, #148]	@ (8001798 <Move+0x3e8>)
 8001704:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001708:	461d      	mov	r5, r3
 800170a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800170c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800170e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001712:	c407      	stmia	r4!, {r0, r1, r2}
 8001714:	7023      	strb	r3, [r4, #0]
    		HAL_UART_Transmit(&huart1, (uint8_t *)winMessage, strlen(winMessage), HAL_MAX_DELAY);
 8001716:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800171a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800171e:	221c      	movs	r2, #28
 8001720:	481c      	ldr	r0, [pc, #112]	@ (8001794 <Move+0x3e4>)
 8001722:	f007 fb5d 	bl	8008de0 <HAL_UART_Transmit>
    		HAL_Delay(1000);
 8001726:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800172a:	f002 f855 	bl	80037d8 <HAL_Delay>
    		const char winMessage[] = "you should keep climbing up, \r\nor maybe down? you decide.\r\n";
    		HAL_UART_Transmit(&huart1, (uint8_t *)winMessage, strlen(winMessage), HAL_MAX_DELAY);
    		HAL_Delay(1000);
    	}
    }
}
 800172e:	e022      	b.n	8001776 <Move+0x3c6>
    	else if(playerCol == treasureCol) {
 8001730:	4b15      	ldr	r3, [pc, #84]	@ (8001788 <Move+0x3d8>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4b15      	ldr	r3, [pc, #84]	@ (800178c <Move+0x3dc>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	429a      	cmp	r2, r3
 800173a:	d11c      	bne.n	8001776 <Move+0x3c6>
    		const char winMessage[] = "you should keep climbing up, \r\nor maybe down? you decide.\r\n";
 800173c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001740:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001744:	4a15      	ldr	r2, [pc, #84]	@ (800179c <Move+0x3ec>)
 8001746:	461c      	mov	r4, r3
 8001748:	4615      	mov	r5, r2
 800174a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800174c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800174e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001750:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001752:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001754:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001756:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800175a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    		HAL_UART_Transmit(&huart1, (uint8_t *)winMessage, strlen(winMessage), HAL_MAX_DELAY);
 800175e:	1d39      	adds	r1, r7, #4
 8001760:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001764:	223b      	movs	r2, #59	@ 0x3b
 8001766:	480b      	ldr	r0, [pc, #44]	@ (8001794 <Move+0x3e4>)
 8001768:	f007 fb3a 	bl	8008de0 <HAL_UART_Transmit>
    		HAL_Delay(1000);
 800176c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001770:	f002 f832 	bl	80037d8 <HAL_Delay>
}
 8001774:	e7ff      	b.n	8001776 <Move+0x3c6>
 8001776:	bf00      	nop
 8001778:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800177c:	46bd      	mov	sp, r7
 800177e:	bdb0      	pop	{r4, r5, r7, pc}
 8001780:	200004ac 	.word	0x200004ac
 8001784:	200004a4 	.word	0x200004a4
 8001788:	200004b0 	.word	0x200004b0
 800178c:	200004a8 	.word	0x200004a8
 8001790:	0800ca7c 	.word	0x0800ca7c
 8001794:	20000408 	.word	0x20000408
 8001798:	0800ca94 	.word	0x0800ca94
 800179c:	0800cab4 	.word	0x0800cab4

080017a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b09c      	sub	sp, #112	@ 0x70
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017a6:	f001 ffdf 	bl	8003768 <HAL_Init>

//  // ----- code to reset high score-----
//  uint32_t resetHS = 10;
//  SaveHighScore(resetHS);

  BSP_GYRO_Init();
 80017aa:	f000 fcb9 	bl	8002120 <BSP_GYRO_Init>
  BSP_ACCELERO_Init();
 80017ae:	f000 fc61 	bl	8002074 <BSP_ACCELERO_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017b2:	f000 f8d3 	bl	800195c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017b6:	f000 fac5 	bl	8001d44 <MX_GPIO_Init>
  MX_DMA_Init();
 80017ba:	f000 fa99 	bl	8001cf0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80017be:	f000 fa4b 	bl	8001c58 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80017c2:	f000 f9f5 	bl	8001bb0 <MX_TIM2_Init>
  MX_DAC1_Init();
 80017c6:	f000 f91b 	bl	8001a00 <MX_DAC1_Init>
  MX_I2C1_Init();
 80017ca:	f000 f95b 	bl	8001a84 <MX_I2C1_Init>
  MX_OCTOSPI1_Init();
 80017ce:	f000 f999 	bl	8001b04 <MX_OCTOSPI1_Init>

  float gyroData[3];
  int16_t accelData[3];

  // Get Gyroscope and Accelerometer data
  BSP_GYRO_GetXYZ(gyroData);
 80017d2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 fce4 	bl	80021a4 <BSP_GYRO_GetXYZ>
  BSP_ACCELERO_AccGetXYZ(accelData);
 80017dc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80017e0:	4618      	mov	r0, r3
 80017e2:	f000 fc85 	bl	80020f0 <BSP_ACCELERO_AccGetXYZ>

  // Combine gyro and accel data into a new seed
  uint32_t gyroX = (uint32_t)gyroData[0];
 80017e6:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80017ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017ee:	ee17 3a90 	vmov	r3, s15
 80017f2:	66bb      	str	r3, [r7, #104]	@ 0x68
  uint32_t gyroY = (uint32_t)gyroData[1];
 80017f4:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80017f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017fc:	ee17 3a90 	vmov	r3, s15
 8001800:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t gyroZ = (uint32_t)gyroData[2];
 8001802:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001806:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800180a:	ee17 3a90 	vmov	r3, s15
 800180e:	663b      	str	r3, [r7, #96]	@ 0x60

  uint32_t accelX = (uint32_t)accelData[0];
 8001810:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001814:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t accelY = (uint32_t)accelData[1];
 8001816:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 800181a:	65bb      	str	r3, [r7, #88]	@ 0x58
  uint32_t accelZ = (uint32_t)accelData[2];
 800181c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8001820:	657b      	str	r3, [r7, #84]	@ 0x54

  // Generate a seed by combining gyro and accel values
  uint32_t combinedSeed = (gyroX ^ gyroY ^ gyroZ) + (accelX ^ accelY ^ accelZ);
 8001822:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001824:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001826:	405a      	eors	r2, r3
 8001828:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800182a:	405a      	eors	r2, r3
 800182c:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800182e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001830:	4059      	eors	r1, r3
 8001832:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001834:	404b      	eors	r3, r1
 8001836:	4413      	add	r3, r2
 8001838:	653b      	str	r3, [r7, #80]	@ 0x50

  // Seed the random number generator
  srand(combinedSeed);
 800183a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800183c:	f008 fe4e 	bl	800a4dc <srand>

  // Save the new seed for the next program run
  SaveSeed(combinedSeed);
 8001840:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001842:	f7ff fc11 	bl	8001068 <SaveSeed>

  // Generate random treasure positions
  treasureRow = rand() % 4; // Random row (0-3)
 8001846:	f008 fe77 	bl	800a538 <rand>
 800184a:	4603      	mov	r3, r0
 800184c:	425a      	negs	r2, r3
 800184e:	f003 0303 	and.w	r3, r3, #3
 8001852:	f002 0203 	and.w	r2, r2, #3
 8001856:	bf58      	it	pl
 8001858:	4253      	negpl	r3, r2
 800185a:	4a34      	ldr	r2, [pc, #208]	@ (800192c <main+0x18c>)
 800185c:	6013      	str	r3, [r2, #0]
  treasureCol = rand() % 4; // Random column (0-3)
 800185e:	f008 fe6b 	bl	800a538 <rand>
 8001862:	4603      	mov	r3, r0
 8001864:	425a      	negs	r2, r3
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	f002 0203 	and.w	r2, r2, #3
 800186e:	bf58      	it	pl
 8001870:	4253      	negpl	r3, r2
 8001872:	4a2f      	ldr	r2, [pc, #188]	@ (8001930 <main+0x190>)
 8001874:	6013      	str	r3, [r2, #0]

   notes[0] = C6;
 8001876:	4b2f      	ldr	r3, [pc, #188]	@ (8001934 <main+0x194>)
 8001878:	4a2f      	ldr	r2, [pc, #188]	@ (8001938 <main+0x198>)
 800187a:	601a      	str	r2, [r3, #0]
   notes[1] = D6;
 800187c:	4b2d      	ldr	r3, [pc, #180]	@ (8001934 <main+0x194>)
 800187e:	4a2f      	ldr	r2, [pc, #188]	@ (800193c <main+0x19c>)
 8001880:	605a      	str	r2, [r3, #4]
   notes[2] = E6;
 8001882:	4b2c      	ldr	r3, [pc, #176]	@ (8001934 <main+0x194>)
 8001884:	4a2e      	ldr	r2, [pc, #184]	@ (8001940 <main+0x1a0>)
 8001886:	609a      	str	r2, [r3, #8]
   notes[3] = G6;
 8001888:	4b2a      	ldr	r3, [pc, #168]	@ (8001934 <main+0x194>)
 800188a:	4a2e      	ldr	r2, [pc, #184]	@ (8001944 <main+0x1a4>)
 800188c:	60da      	str	r2, [r3, #12]

 for (int i = 0; i<4; i++) {
 800188e:	2300      	movs	r3, #0
 8001890:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001892:	e00f      	b.n	80018b4 <main+0x114>
  generateArray(notes[i], PRECISION, array_size[i]);
 8001894:	4a27      	ldr	r2, [pc, #156]	@ (8001934 <main+0x194>)
 8001896:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001898:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800189c:	4a2a      	ldr	r2, [pc, #168]	@ (8001948 <main+0x1a8>)
 800189e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80018a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a4:	461a      	mov	r2, r3
 80018a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018aa:	f7ff fb0d 	bl	8000ec8 <generateArray>
 for (int i = 0; i<4; i++) {
 80018ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80018b0:	3301      	adds	r3, #1
 80018b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80018b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80018b6:	2b03      	cmp	r3, #3
 80018b8:	ddec      	ble.n	8001894 <main+0xf4>
 }

 char highScoreBuffer[50];
 snprintf(highScoreBuffer, sizeof(highScoreBuffer), "High Score: %d\r\n", LoadHighScore());
 80018ba:	f7ff fba5 	bl	8001008 <LoadHighScore>
 80018be:	4603      	mov	r3, r0
 80018c0:	f107 0008 	add.w	r0, r7, #8
 80018c4:	4a21      	ldr	r2, [pc, #132]	@ (800194c <main+0x1ac>)
 80018c6:	2132      	movs	r1, #50	@ 0x32
 80018c8:	f008 fdd4 	bl	800a474 <sniprintf>
 HAL_UART_Transmit(&huart1, (uint8_t *)highScoreBuffer, strlen(highScoreBuffer), HAL_MAX_DELAY);
 80018cc:	f107 0308 	add.w	r3, r7, #8
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fce5 	bl	80002a0 <strlen>
 80018d6:	4603      	mov	r3, r0
 80018d8:	b29a      	uxth	r2, r3
 80018da:	f107 0108 	add.w	r1, r7, #8
 80018de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018e2:	481b      	ldr	r0, [pc, #108]	@ (8001950 <main+0x1b0>)
 80018e4:	f007 fa7c 	bl	8008de0 <HAL_UART_Transmit>

 PrintTreasureGrid();
 80018e8:	f7ff fc7a 	bl	80011e0 <PrintTreasureGrid>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

//  PrintInitialGrid();
  // Print the updated number of moves
  const char newline[] = "\r\n";
 80018ec:	4a19      	ldr	r2, [pc, #100]	@ (8001954 <main+0x1b4>)
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	6812      	ldr	r2, [r2, #0]
 80018f2:	4611      	mov	r1, r2
 80018f4:	8019      	strh	r1, [r3, #0]
 80018f6:	3302      	adds	r3, #2
 80018f8:	0c12      	lsrs	r2, r2, #16
 80018fa:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, (uint8_t *)newline, strlen(newline), HAL_MAX_DELAY);
 80018fc:	1d39      	adds	r1, r7, #4
 80018fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001902:	2202      	movs	r2, #2
 8001904:	4812      	ldr	r0, [pc, #72]	@ (8001950 <main+0x1b0>)
 8001906:	f007 fa6b 	bl	8008de0 <HAL_UART_Transmit>
  while (!gameover)
 800190a:	e005      	b.n	8001918 <main+0x178>
  {
	  Move();
 800190c:	f7ff fd50 	bl	80013b0 <Move>
	  HAL_Delay(1500);
 8001910:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001914:	f001 ff60 	bl	80037d8 <HAL_Delay>
  while (!gameover)
 8001918:	4b0f      	ldr	r3, [pc, #60]	@ (8001958 <main+0x1b8>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0f5      	beq.n	800190c <main+0x16c>
 8001920:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8001922:	4618      	mov	r0, r3
 8001924:	3770      	adds	r7, #112	@ 0x70
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	200004a4 	.word	0x200004a4
 8001930:	200004a8 	.word	0x200004a8
 8001934:	20000754 	.word	0x20000754
 8001938:	200004b4 	.word	0x200004b4
 800193c:	2000055c 	.word	0x2000055c
 8001940:	20000604 	.word	0x20000604
 8001944:	200006ac 	.word	0x200006ac
 8001948:	20000000 	.word	0x20000000
 800194c:	0800caf0 	.word	0x0800caf0
 8001950:	20000408 	.word	0x20000408
 8001954:	0800c9c4 	.word	0x0800c9c4
 8001958:	200004a0 	.word	0x200004a0

0800195c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b096      	sub	sp, #88	@ 0x58
 8001960:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001962:	f107 0314 	add.w	r3, r7, #20
 8001966:	2244      	movs	r2, #68	@ 0x44
 8001968:	2100      	movs	r1, #0
 800196a:	4618      	mov	r0, r3
 800196c:	f008 fef7 	bl	800a75e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001970:	463b      	mov	r3, r7
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]
 800197c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800197e:	2000      	movs	r0, #0
 8001980:	f005 f80a 	bl	8006998 <HAL_PWREx_ControlVoltageScaling>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800198a:	f000 fa1d 	bl	8001dc8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800198e:	2310      	movs	r3, #16
 8001990:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001992:	2301      	movs	r3, #1
 8001994:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800199a:	2360      	movs	r3, #96	@ 0x60
 800199c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800199e:	2302      	movs	r3, #2
 80019a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80019a2:	2301      	movs	r3, #1
 80019a4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019a6:	2301      	movs	r3, #1
 80019a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80019aa:	233c      	movs	r3, #60	@ 0x3c
 80019ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019ae:	2302      	movs	r3, #2
 80019b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019b2:	2302      	movs	r3, #2
 80019b4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80019b6:	2302      	movs	r3, #2
 80019b8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ba:	f107 0314 	add.w	r3, r7, #20
 80019be:	4618      	mov	r0, r3
 80019c0:	f005 f88e 	bl	8006ae0 <HAL_RCC_OscConfig>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <SystemClock_Config+0x72>
  {
    Error_Handler();
 80019ca:	f000 f9fd 	bl	8001dc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ce:	230f      	movs	r3, #15
 80019d0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019d2:	2303      	movs	r3, #3
 80019d4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019d6:	2300      	movs	r3, #0
 80019d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019de:	2300      	movs	r3, #0
 80019e0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019e2:	463b      	mov	r3, r7
 80019e4:	2105      	movs	r1, #5
 80019e6:	4618      	mov	r0, r3
 80019e8:	f005 fc94 	bl	8007314 <HAL_RCC_ClockConfig>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80019f2:	f000 f9e9 	bl	8001dc8 <Error_Handler>
  }
}
 80019f6:	bf00      	nop
 80019f8:	3758      	adds	r7, #88	@ 0x58
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	@ 0x28
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001a06:	463b      	mov	r3, r7
 8001a08:	2228      	movs	r2, #40	@ 0x28
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f008 fea6 	bl	800a75e <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001a12:	4b1a      	ldr	r3, [pc, #104]	@ (8001a7c <MX_DAC1_Init+0x7c>)
 8001a14:	4a1a      	ldr	r2, [pc, #104]	@ (8001a80 <MX_DAC1_Init+0x80>)
 8001a16:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001a18:	4818      	ldr	r0, [pc, #96]	@ (8001a7c <MX_DAC1_Init+0x7c>)
 8001a1a:	f001 ffe3 	bl	80039e4 <HAL_DAC_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001a24:	f000 f9d0 	bl	8001dc8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001a2c:	230a      	movs	r3, #10
 8001a2e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001a30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a34:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001a42:	463b      	mov	r3, r7
 8001a44:	2200      	movs	r2, #0
 8001a46:	4619      	mov	r1, r3
 8001a48:	480c      	ldr	r0, [pc, #48]	@ (8001a7c <MX_DAC1_Init+0x7c>)
 8001a4a:	f002 f981 	bl	8003d50 <HAL_DAC_ConfigChannel>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8001a54:	f000 f9b8 	bl	8001dc8 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001a5c:	463b      	mov	r3, r7
 8001a5e:	2210      	movs	r2, #16
 8001a60:	4619      	mov	r1, r3
 8001a62:	4806      	ldr	r0, [pc, #24]	@ (8001a7c <MX_DAC1_Init+0x7c>)
 8001a64:	f002 f974 	bl	8003d50 <HAL_DAC_ConfigChannel>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_DAC1_Init+0x72>
  {
    Error_Handler();
 8001a6e:	f000 f9ab 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001a72:	bf00      	nop
 8001a74:	3728      	adds	r7, #40	@ 0x28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	200002a4 	.word	0x200002a4
 8001a80:	40007400 	.word	0x40007400

08001a84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a88:	4b1b      	ldr	r3, [pc, #108]	@ (8001af8 <MX_I2C1_Init+0x74>)
 8001a8a:	4a1c      	ldr	r2, [pc, #112]	@ (8001afc <MX_I2C1_Init+0x78>)
 8001a8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A175AB;
 8001a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001af8 <MX_I2C1_Init+0x74>)
 8001a90:	4a1b      	ldr	r2, [pc, #108]	@ (8001b00 <MX_I2C1_Init+0x7c>)
 8001a92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a94:	4b18      	ldr	r3, [pc, #96]	@ (8001af8 <MX_I2C1_Init+0x74>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a9a:	4b17      	ldr	r3, [pc, #92]	@ (8001af8 <MX_I2C1_Init+0x74>)
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001aa0:	4b15      	ldr	r3, [pc, #84]	@ (8001af8 <MX_I2C1_Init+0x74>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001aa6:	4b14      	ldr	r3, [pc, #80]	@ (8001af8 <MX_I2C1_Init+0x74>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001aac:	4b12      	ldr	r3, [pc, #72]	@ (8001af8 <MX_I2C1_Init+0x74>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ab2:	4b11      	ldr	r3, [pc, #68]	@ (8001af8 <MX_I2C1_Init+0x74>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8001af8 <MX_I2C1_Init+0x74>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001abe:	480e      	ldr	r0, [pc, #56]	@ (8001af8 <MX_I2C1_Init+0x74>)
 8001ac0:	f003 f878 	bl	8004bb4 <HAL_I2C_Init>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001aca:	f000 f97d 	bl	8001dc8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ace:	2100      	movs	r1, #0
 8001ad0:	4809      	ldr	r0, [pc, #36]	@ (8001af8 <MX_I2C1_Init+0x74>)
 8001ad2:	f003 fe29 	bl	8005728 <HAL_I2CEx_ConfigAnalogFilter>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001adc:	f000 f974 	bl	8001dc8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	4805      	ldr	r0, [pc, #20]	@ (8001af8 <MX_I2C1_Init+0x74>)
 8001ae4:	f003 fe6b 	bl	80057be <HAL_I2CEx_ConfigDigitalFilter>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001aee:	f000 f96b 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000318 	.word	0x20000318
 8001afc:	40005400 	.word	0x40005400
 8001b00:	30a175ab 	.word	0x30a175ab

08001b04 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8001b0a:	1d3b      	adds	r3, r7, #4
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8001b18:	4b23      	ldr	r3, [pc, #140]	@ (8001ba8 <MX_OCTOSPI1_Init+0xa4>)
 8001b1a:	4a24      	ldr	r2, [pc, #144]	@ (8001bac <MX_OCTOSPI1_Init+0xa8>)
 8001b1c:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8001b1e:	4b22      	ldr	r3, [pc, #136]	@ (8001ba8 <MX_OCTOSPI1_Init+0xa4>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001b24:	4b20      	ldr	r3, [pc, #128]	@ (8001ba8 <MX_OCTOSPI1_Init+0xa4>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8001b2a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba8 <MX_OCTOSPI1_Init+0xa4>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 23;
 8001b30:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba8 <MX_OCTOSPI1_Init+0xa4>)
 8001b32:	2217      	movs	r2, #23
 8001b34:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001b36:	4b1c      	ldr	r3, [pc, #112]	@ (8001ba8 <MX_OCTOSPI1_Init+0xa4>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba8 <MX_OCTOSPI1_Init+0xa4>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001b42:	4b19      	ldr	r3, [pc, #100]	@ (8001ba8 <MX_OCTOSPI1_Init+0xa4>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8001b48:	4b17      	ldr	r3, [pc, #92]	@ (8001ba8 <MX_OCTOSPI1_Init+0xa4>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001b4e:	4b16      	ldr	r3, [pc, #88]	@ (8001ba8 <MX_OCTOSPI1_Init+0xa4>)
 8001b50:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b54:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001b56:	4b14      	ldr	r3, [pc, #80]	@ (8001ba8 <MX_OCTOSPI1_Init+0xa4>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8001b5c:	4b12      	ldr	r3, [pc, #72]	@ (8001ba8 <MX_OCTOSPI1_Init+0xa4>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001b62:	4b11      	ldr	r3, [pc, #68]	@ (8001ba8 <MX_OCTOSPI1_Init+0xa4>)
 8001b64:	2208      	movs	r2, #8
 8001b66:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001b68:	480f      	ldr	r0, [pc, #60]	@ (8001ba8 <MX_OCTOSPI1_Init+0xa4>)
 8001b6a:	f003 fe75 	bl	8005858 <HAL_OSPI_Init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8001b74:	f000 f928 	bl	8001dc8 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8001b80:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001b84:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4806      	ldr	r0, [pc, #24]	@ (8001ba8 <MX_OCTOSPI1_Init+0xa4>)
 8001b90:	f004 f960 	bl	8005e54 <HAL_OSPIM_Config>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8001b9a:	f000 f915 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001b9e:	bf00      	nop
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	2000036c 	.word	0x2000036c
 8001bac:	a0001000 	.word	0xa0001000

08001bb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b088      	sub	sp, #32
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bb6:	f107 0310 	add.w	r3, r7, #16
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
 8001bc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc4:	1d3b      	adds	r3, r7, #4
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bce:	4b21      	ldr	r3, [pc, #132]	@ (8001c54 <MX_TIM2_Init+0xa4>)
 8001bd0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bd4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001bd6:	4b1f      	ldr	r3, [pc, #124]	@ (8001c54 <MX_TIM2_Init+0xa4>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8001c54 <MX_TIM2_Init+0xa4>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2721;
 8001be2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c54 <MX_TIM2_Init+0xa4>)
 8001be4:	f640 22a1 	movw	r2, #2721	@ 0xaa1
 8001be8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bea:	4b1a      	ldr	r3, [pc, #104]	@ (8001c54 <MX_TIM2_Init+0xa4>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf0:	4b18      	ldr	r3, [pc, #96]	@ (8001c54 <MX_TIM2_Init+0xa4>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bf6:	4817      	ldr	r0, [pc, #92]	@ (8001c54 <MX_TIM2_Init+0xa4>)
 8001bf8:	f006 fb94 	bl	8008324 <HAL_TIM_Base_Init>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001c02:	f000 f8e1 	bl	8001dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c0c:	f107 0310 	add.w	r3, r7, #16
 8001c10:	4619      	mov	r1, r3
 8001c12:	4810      	ldr	r0, [pc, #64]	@ (8001c54 <MX_TIM2_Init+0xa4>)
 8001c14:	f006 fdbd 	bl	8008792 <HAL_TIM_ConfigClockSource>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001c1e:	f000 f8d3 	bl	8001dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c22:	2320      	movs	r3, #32
 8001c24:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c2a:	1d3b      	adds	r3, r7, #4
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4809      	ldr	r0, [pc, #36]	@ (8001c54 <MX_TIM2_Init+0xa4>)
 8001c30:	f006 ffe0 	bl	8008bf4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001c3a:	f000 f8c5 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8001c3e:	4805      	ldr	r0, [pc, #20]	@ (8001c54 <MX_TIM2_Init+0xa4>)
 8001c40:	f006 fc30 	bl	80084a4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim2);
 8001c44:	4803      	ldr	r0, [pc, #12]	@ (8001c54 <MX_TIM2_Init+0xa4>)
 8001c46:	f006 fbc5 	bl	80083d4 <HAL_TIM_Base_Start>

  /* USER CODE END TIM2_Init 2 */

}
 8001c4a:	bf00      	nop
 8001c4c:	3720      	adds	r7, #32
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	200003bc 	.word	0x200003bc

08001c58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c5c:	4b22      	ldr	r3, [pc, #136]	@ (8001ce8 <MX_USART1_UART_Init+0x90>)
 8001c5e:	4a23      	ldr	r2, [pc, #140]	@ (8001cec <MX_USART1_UART_Init+0x94>)
 8001c60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c62:	4b21      	ldr	r3, [pc, #132]	@ (8001ce8 <MX_USART1_UART_Init+0x90>)
 8001c64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c6a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ce8 <MX_USART1_UART_Init+0x90>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c70:	4b1d      	ldr	r3, [pc, #116]	@ (8001ce8 <MX_USART1_UART_Init+0x90>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c76:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce8 <MX_USART1_UART_Init+0x90>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce8 <MX_USART1_UART_Init+0x90>)
 8001c7e:	220c      	movs	r2, #12
 8001c80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c82:	4b19      	ldr	r3, [pc, #100]	@ (8001ce8 <MX_USART1_UART_Init+0x90>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c88:	4b17      	ldr	r3, [pc, #92]	@ (8001ce8 <MX_USART1_UART_Init+0x90>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c8e:	4b16      	ldr	r3, [pc, #88]	@ (8001ce8 <MX_USART1_UART_Init+0x90>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c94:	4b14      	ldr	r3, [pc, #80]	@ (8001ce8 <MX_USART1_UART_Init+0x90>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c9a:	4b13      	ldr	r3, [pc, #76]	@ (8001ce8 <MX_USART1_UART_Init+0x90>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ca0:	4811      	ldr	r0, [pc, #68]	@ (8001ce8 <MX_USART1_UART_Init+0x90>)
 8001ca2:	f007 f84d 	bl	8008d40 <HAL_UART_Init>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001cac:	f000 f88c 	bl	8001dc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	480d      	ldr	r0, [pc, #52]	@ (8001ce8 <MX_USART1_UART_Init+0x90>)
 8001cb4:	f007 fe76 	bl	80099a4 <HAL_UARTEx_SetTxFifoThreshold>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001cbe:	f000 f883 	bl	8001dc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	4808      	ldr	r0, [pc, #32]	@ (8001ce8 <MX_USART1_UART_Init+0x90>)
 8001cc6:	f007 feab 	bl	8009a20 <HAL_UARTEx_SetRxFifoThreshold>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001cd0:	f000 f87a 	bl	8001dc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001cd4:	4804      	ldr	r0, [pc, #16]	@ (8001ce8 <MX_USART1_UART_Init+0x90>)
 8001cd6:	f007 fe2c 	bl	8009932 <HAL_UARTEx_DisableFifoMode>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001ce0:	f000 f872 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ce4:	bf00      	nop
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	20000408 	.word	0x20000408
 8001cec:	40013800 	.word	0x40013800

08001cf0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001cf6:	4b12      	ldr	r3, [pc, #72]	@ (8001d40 <MX_DMA_Init+0x50>)
 8001cf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cfa:	4a11      	ldr	r2, [pc, #68]	@ (8001d40 <MX_DMA_Init+0x50>)
 8001cfc:	f043 0304 	orr.w	r3, r3, #4
 8001d00:	6493      	str	r3, [r2, #72]	@ 0x48
 8001d02:	4b0f      	ldr	r3, [pc, #60]	@ (8001d40 <MX_DMA_Init+0x50>)
 8001d04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d40 <MX_DMA_Init+0x50>)
 8001d10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d12:	4a0b      	ldr	r2, [pc, #44]	@ (8001d40 <MX_DMA_Init+0x50>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	6493      	str	r3, [r2, #72]	@ 0x48
 8001d1a:	4b09      	ldr	r3, [pc, #36]	@ (8001d40 <MX_DMA_Init+0x50>)
 8001d1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	603b      	str	r3, [r7, #0]
 8001d24:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001d26:	2200      	movs	r2, #0
 8001d28:	2100      	movs	r1, #0
 8001d2a:	200b      	movs	r0, #11
 8001d2c:	f001 fe30 	bl	8003990 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001d30:	200b      	movs	r0, #11
 8001d32:	f001 fe49 	bl	80039c8 <HAL_NVIC_EnableIRQ>

}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40021000 	.word	0x40021000

08001d44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4a:	4b15      	ldr	r3, [pc, #84]	@ (8001da0 <MX_GPIO_Init+0x5c>)
 8001d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d4e:	4a14      	ldr	r2, [pc, #80]	@ (8001da0 <MX_GPIO_Init+0x5c>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d56:	4b12      	ldr	r3, [pc, #72]	@ (8001da0 <MX_GPIO_Init+0x5c>)
 8001d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d62:	4b0f      	ldr	r3, [pc, #60]	@ (8001da0 <MX_GPIO_Init+0x5c>)
 8001d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d66:	4a0e      	ldr	r2, [pc, #56]	@ (8001da0 <MX_GPIO_Init+0x5c>)
 8001d68:	f043 0310 	orr.w	r3, r3, #16
 8001d6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001da0 <MX_GPIO_Init+0x5c>)
 8001d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d72:	f003 0310 	and.w	r3, r3, #16
 8001d76:	60bb      	str	r3, [r7, #8]
 8001d78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d7a:	4b09      	ldr	r3, [pc, #36]	@ (8001da0 <MX_GPIO_Init+0x5c>)
 8001d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d7e:	4a08      	ldr	r2, [pc, #32]	@ (8001da0 <MX_GPIO_Init+0x5c>)
 8001d80:	f043 0302 	orr.w	r3, r3, #2
 8001d84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d86:	4b06      	ldr	r3, [pc, #24]	@ (8001da0 <MX_GPIO_Init+0x5c>)
 8001d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	607b      	str	r3, [r7, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d92:	bf00      	nop
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40021000 	.word	0x40021000

08001da4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a04      	ldr	r2, [pc, #16]	@ (8001dc4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d101      	bne.n	8001dba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001db6:	f001 fcef 	bl	8003798 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40001000 	.word	0x40001000

08001dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dcc:	b672      	cpsid	i
}
 8001dce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dd0:	bf00      	nop
 8001dd2:	e7fd      	b.n	8001dd0 <Error_Handler+0x8>

08001dd4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08a      	sub	sp, #40	@ 0x28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001ddc:	4b27      	ldr	r3, [pc, #156]	@ (8001e7c <I2Cx_MspInit+0xa8>)
 8001dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de0:	4a26      	ldr	r2, [pc, #152]	@ (8001e7c <I2Cx_MspInit+0xa8>)
 8001de2:	f043 0302 	orr.w	r3, r3, #2
 8001de6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001de8:	4b24      	ldr	r3, [pc, #144]	@ (8001e7c <I2Cx_MspInit+0xa8>)
 8001dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001df4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001df8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001dfa:	2312      	movs	r3, #18
 8001dfc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e02:	2303      	movs	r3, #3
 8001e04:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001e06:	2304      	movs	r3, #4
 8001e08:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001e0a:	f107 0314 	add.w	r3, r7, #20
 8001e0e:	4619      	mov	r1, r3
 8001e10:	481b      	ldr	r0, [pc, #108]	@ (8001e80 <I2Cx_MspInit+0xac>)
 8001e12:	f002 fc4b 	bl	80046ac <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001e16:	f107 0314 	add.w	r3, r7, #20
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4818      	ldr	r0, [pc, #96]	@ (8001e80 <I2Cx_MspInit+0xac>)
 8001e1e:	f002 fc45 	bl	80046ac <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001e22:	4b16      	ldr	r3, [pc, #88]	@ (8001e7c <I2Cx_MspInit+0xa8>)
 8001e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e26:	4a15      	ldr	r2, [pc, #84]	@ (8001e7c <I2Cx_MspInit+0xa8>)
 8001e28:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e2e:	4b13      	ldr	r3, [pc, #76]	@ (8001e7c <I2Cx_MspInit+0xa8>)
 8001e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001e3a:	4b10      	ldr	r3, [pc, #64]	@ (8001e7c <I2Cx_MspInit+0xa8>)
 8001e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e3e:	4a0f      	ldr	r2, [pc, #60]	@ (8001e7c <I2Cx_MspInit+0xa8>)
 8001e40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e44:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001e46:	4b0d      	ldr	r3, [pc, #52]	@ (8001e7c <I2Cx_MspInit+0xa8>)
 8001e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e4a:	4a0c      	ldr	r2, [pc, #48]	@ (8001e7c <I2Cx_MspInit+0xa8>)
 8001e4c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001e50:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001e52:	2200      	movs	r2, #0
 8001e54:	210f      	movs	r1, #15
 8001e56:	2021      	movs	r0, #33	@ 0x21
 8001e58:	f001 fd9a 	bl	8003990 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001e5c:	2021      	movs	r0, #33	@ 0x21
 8001e5e:	f001 fdb3 	bl	80039c8 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001e62:	2200      	movs	r2, #0
 8001e64:	210f      	movs	r1, #15
 8001e66:	2022      	movs	r0, #34	@ 0x22
 8001e68:	f001 fd92 	bl	8003990 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001e6c:	2022      	movs	r0, #34	@ 0x22
 8001e6e:	f001 fdab 	bl	80039c8 <HAL_NVIC_EnableIRQ>
}
 8001e72:	bf00      	nop
 8001e74:	3728      	adds	r7, #40	@ 0x28
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	48000400 	.word	0x48000400

08001e84 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a12      	ldr	r2, [pc, #72]	@ (8001ed8 <I2Cx_Init+0x54>)
 8001e90:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a11      	ldr	r2, [pc, #68]	@ (8001edc <I2Cx_Init+0x58>)
 8001e96:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7ff ff89 	bl	8001dd4 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f002 fe76 	bl	8004bb4 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001ec8:	2100      	movs	r1, #0
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f003 fc2c 	bl	8005728 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001ed0:	bf00      	nop
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40005800 	.word	0x40005800
 8001edc:	00702681 	.word	0x00702681

08001ee0 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08a      	sub	sp, #40	@ 0x28
 8001ee4:	af04      	add	r7, sp, #16
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	4608      	mov	r0, r1
 8001eea:	4611      	mov	r1, r2
 8001eec:	461a      	mov	r2, r3
 8001eee:	4603      	mov	r3, r0
 8001ef0:	72fb      	strb	r3, [r7, #11]
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	813b      	strh	r3, [r7, #8]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001efe:	7afb      	ldrb	r3, [r7, #11]
 8001f00:	b299      	uxth	r1, r3
 8001f02:	88f8      	ldrh	r0, [r7, #6]
 8001f04:	893a      	ldrh	r2, [r7, #8]
 8001f06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f0a:	9302      	str	r3, [sp, #8]
 8001f0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001f0e:	9301      	str	r3, [sp, #4]
 8001f10:	6a3b      	ldr	r3, [r7, #32]
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	4603      	mov	r3, r0
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f003 f82a 	bl	8004f70 <HAL_I2C_Mem_Read>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001f20:	7dfb      	ldrb	r3, [r7, #23]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d004      	beq.n	8001f30 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001f26:	7afb      	ldrb	r3, [r7, #11]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f000 f832 	bl	8001f94 <I2Cx_Error>
  }
  return status;
 8001f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b08a      	sub	sp, #40	@ 0x28
 8001f3e:	af04      	add	r7, sp, #16
 8001f40:	60f8      	str	r0, [r7, #12]
 8001f42:	4608      	mov	r0, r1
 8001f44:	4611      	mov	r1, r2
 8001f46:	461a      	mov	r2, r3
 8001f48:	4603      	mov	r3, r0
 8001f4a:	72fb      	strb	r3, [r7, #11]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	813b      	strh	r3, [r7, #8]
 8001f50:	4613      	mov	r3, r2
 8001f52:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001f54:	2300      	movs	r3, #0
 8001f56:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001f58:	7afb      	ldrb	r3, [r7, #11]
 8001f5a:	b299      	uxth	r1, r3
 8001f5c:	88f8      	ldrh	r0, [r7, #6]
 8001f5e:	893a      	ldrh	r2, [r7, #8]
 8001f60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f64:	9302      	str	r3, [sp, #8]
 8001f66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001f68:	9301      	str	r3, [sp, #4]
 8001f6a:	6a3b      	ldr	r3, [r7, #32]
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	4603      	mov	r3, r0
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f002 fee9 	bl	8004d48 <HAL_I2C_Mem_Write>
 8001f76:	4603      	mov	r3, r0
 8001f78:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001f7a:	7dfb      	ldrb	r3, [r7, #23]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d004      	beq.n	8001f8a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001f80:	7afb      	ldrb	r3, [r7, #11]
 8001f82:	4619      	mov	r1, r3
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	f000 f805 	bl	8001f94 <I2Cx_Error>
  }
  return status;
 8001f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f002 fea2 	bl	8004cea <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff ff6c 	bl	8001e84 <I2Cx_Init>
}
 8001fac:	bf00      	nop
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001fb8:	4802      	ldr	r0, [pc, #8]	@ (8001fc4 <SENSOR_IO_Init+0x10>)
 8001fba:	f7ff ff63 	bl	8001e84 <I2Cx_Init>
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	2000076c 	.word	0x2000076c

08001fc8 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af02      	add	r7, sp, #8
 8001fce:	4603      	mov	r3, r0
 8001fd0:	71fb      	strb	r3, [r7, #7]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	71bb      	strb	r3, [r7, #6]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001fda:	79bb      	ldrb	r3, [r7, #6]
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	79f9      	ldrb	r1, [r7, #7]
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	9301      	str	r3, [sp, #4]
 8001fe4:	1d7b      	adds	r3, r7, #5
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	2301      	movs	r3, #1
 8001fea:	4803      	ldr	r0, [pc, #12]	@ (8001ff8 <SENSOR_IO_Write+0x30>)
 8001fec:	f7ff ffa5 	bl	8001f3a <I2Cx_WriteMultiple>
}
 8001ff0:	bf00      	nop
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	2000076c 	.word	0x2000076c

08001ffc <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af02      	add	r7, sp, #8
 8002002:	4603      	mov	r3, r0
 8002004:	460a      	mov	r2, r1
 8002006:	71fb      	strb	r3, [r7, #7]
 8002008:	4613      	mov	r3, r2
 800200a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800200c:	2300      	movs	r3, #0
 800200e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002010:	79bb      	ldrb	r3, [r7, #6]
 8002012:	b29a      	uxth	r2, r3
 8002014:	79f9      	ldrb	r1, [r7, #7]
 8002016:	2301      	movs	r3, #1
 8002018:	9301      	str	r3, [sp, #4]
 800201a:	f107 030f 	add.w	r3, r7, #15
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	2301      	movs	r3, #1
 8002022:	4804      	ldr	r0, [pc, #16]	@ (8002034 <SENSOR_IO_Read+0x38>)
 8002024:	f7ff ff5c 	bl	8001ee0 <I2Cx_ReadMultiple>

  return read_value;
 8002028:	7bfb      	ldrb	r3, [r7, #15]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	2000076c 	.word	0x2000076c

08002038 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af02      	add	r7, sp, #8
 800203e:	603a      	str	r2, [r7, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	4603      	mov	r3, r0
 8002044:	71fb      	strb	r3, [r7, #7]
 8002046:	460b      	mov	r3, r1
 8002048:	71bb      	strb	r3, [r7, #6]
 800204a:	4613      	mov	r3, r2
 800204c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800204e:	79bb      	ldrb	r3, [r7, #6]
 8002050:	b29a      	uxth	r2, r3
 8002052:	79f9      	ldrb	r1, [r7, #7]
 8002054:	88bb      	ldrh	r3, [r7, #4]
 8002056:	9301      	str	r3, [sp, #4]
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	2301      	movs	r3, #1
 800205e:	4804      	ldr	r0, [pc, #16]	@ (8002070 <SENSOR_IO_ReadMultiple+0x38>)
 8002060:	f7ff ff3e 	bl	8001ee0 <I2Cx_ReadMultiple>
 8002064:	4603      	mov	r3, r0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	2000076c 	.word	0x2000076c

08002074 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800207a:	2300      	movs	r3, #0
 800207c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800207e:	2300      	movs	r3, #0
 8002080:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8002082:	4b19      	ldr	r3, [pc, #100]	@ (80020e8 <BSP_ACCELERO_Init+0x74>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	4798      	blx	r3
 8002088:	4603      	mov	r3, r0
 800208a:	2b6a      	cmp	r3, #106	@ 0x6a
 800208c:	d002      	beq.n	8002094 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	73fb      	strb	r3, [r7, #15]
 8002092:	e024      	b.n	80020de <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8002094:	4b15      	ldr	r3, [pc, #84]	@ (80020ec <BSP_ACCELERO_Init+0x78>)
 8002096:	4a14      	ldr	r2, [pc, #80]	@ (80020e8 <BSP_ACCELERO_Init+0x74>)
 8002098:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800209a:	2330      	movs	r3, #48	@ 0x30
 800209c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80020a2:	2300      	movs	r3, #0
 80020a4:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80020a6:	2340      	movs	r3, #64	@ 0x40
 80020a8:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80020b2:	797a      	ldrb	r2, [r7, #5]
 80020b4:	7abb      	ldrb	r3, [r7, #10]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80020bc:	7a3b      	ldrb	r3, [r7, #8]
 80020be:	f043 0304 	orr.w	r3, r3, #4
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	021b      	lsls	r3, r3, #8
 80020c6:	b21a      	sxth	r2, r3
 80020c8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	b21b      	sxth	r3, r3
 80020d0:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80020d2:	4b06      	ldr	r3, [pc, #24]	@ (80020ec <BSP_ACCELERO_Init+0x78>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	89ba      	ldrh	r2, [r7, #12]
 80020da:	4610      	mov	r0, r2
 80020dc:	4798      	blx	r3
  }  

  return ret;
 80020de:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20000050 	.word	0x20000050
 80020ec:	200007c0 	.word	0x200007c0

080020f0 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80020f8:	4b08      	ldr	r3, [pc, #32]	@ (800211c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d009      	beq.n	8002114 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8002100:	4b06      	ldr	r3, [pc, #24]	@ (800211c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002106:	2b00      	cmp	r3, #0
 8002108:	d004      	beq.n	8002114 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800210a:	4b04      	ldr	r3, [pc, #16]	@ (800211c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	4798      	blx	r3
    }
  }
}
 8002114:	bf00      	nop
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	200007c0 	.word	0x200007c0

08002120 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800212a:	2300      	movs	r3, #0
 800212c:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800212e:	4b1b      	ldr	r3, [pc, #108]	@ (800219c <BSP_GYRO_Init+0x7c>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	4798      	blx	r3
 8002134:	4603      	mov	r3, r0
 8002136:	2b6a      	cmp	r3, #106	@ 0x6a
 8002138:	d002      	beq.n	8002140 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	73fb      	strb	r3, [r7, #15]
 800213e:	e028      	b.n	8002192 <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8002140:	4b17      	ldr	r3, [pc, #92]	@ (80021a0 <BSP_GYRO_Init+0x80>)
 8002142:	4a16      	ldr	r2, [pc, #88]	@ (800219c <BSP_GYRO_Init+0x7c>)
 8002144:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 800214a:	2330      	movs	r3, #48	@ 0x30
 800214c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800214e:	2300      	movs	r3, #0
 8002150:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 8002152:	2300      	movs	r3, #0
 8002154:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8002156:	2340      	movs	r3, #64	@ 0x40
 8002158:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 800215a:	2300      	movs	r3, #0
 800215c:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 800215e:	230c      	movs	r3, #12
 8002160:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8002162:	7aba      	ldrb	r2, [r7, #10]
 8002164:	797b      	ldrb	r3, [r7, #5]
 8002166:	4313      	orrs	r3, r2
 8002168:	b2db      	uxtb	r3, r3
 800216a:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800216c:	7a3b      	ldrb	r3, [r7, #8]
 800216e:	f043 0304 	orr.w	r3, r3, #4
 8002172:	b2db      	uxtb	r3, r3
 8002174:	021b      	lsls	r3, r3, #8
 8002176:	b21a      	sxth	r2, r3
 8002178:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800217c:	4313      	orrs	r3, r2
 800217e:	b21b      	sxth	r3, r3
 8002180:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8002182:	4b07      	ldr	r3, [pc, #28]	@ (80021a0 <BSP_GYRO_Init+0x80>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	89ba      	ldrh	r2, [r7, #12]
 800218a:	4610      	mov	r0, r2
 800218c:	4798      	blx	r3
    
    ret = GYRO_OK;
 800218e:	2300      	movs	r3, #0
 8002190:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8002192:	7bfb      	ldrb	r3, [r7, #15]
}
 8002194:	4618      	mov	r0, r3
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	20000084 	.word	0x20000084
 80021a0:	200007c4 	.word	0x200007c4

080021a4 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 80021ac:	4b08      	ldr	r3, [pc, #32]	@ (80021d0 <BSP_GYRO_GetXYZ+0x2c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d009      	beq.n	80021c8 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 80021b4:	4b06      	ldr	r3, [pc, #24]	@ (80021d0 <BSP_GYRO_GetXYZ+0x2c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d004      	beq.n	80021c8 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 80021be:	4b04      	ldr	r3, [pc, #16]	@ (80021d0 <BSP_GYRO_GetXYZ+0x2c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	4798      	blx	r3
    }
  }
}
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	200007c4 	.word	0x200007c4

080021d4 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
  OSPIHandle.Instance = OCTOSPI1;
 80021da:	4b3b      	ldr	r3, [pc, #236]	@ (80022c8 <BSP_QSPI_Init+0xf4>)
 80021dc:	4a3b      	ldr	r2, [pc, #236]	@ (80022cc <BSP_QSPI_Init+0xf8>)
 80021de:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_OSPI_DeInit(&OSPIHandle) != HAL_OK)
 80021e0:	4839      	ldr	r0, [pc, #228]	@ (80022c8 <BSP_QSPI_Init+0xf4>)
 80021e2:	f003 fbe3 	bl	80059ac <HAL_OSPI_DeInit>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e067      	b.n	80022c0 <BSP_QSPI_Init+0xec>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 80021f0:	f000 f9fe 	bl	80025f0 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  OSPIHandle.Init.FifoThreshold         = 4;
 80021f4:	4b34      	ldr	r3, [pc, #208]	@ (80022c8 <BSP_QSPI_Init+0xf4>)
 80021f6:	2204      	movs	r2, #4
 80021f8:	605a      	str	r2, [r3, #4]
  OSPIHandle.Init.DualQuad              = HAL_OSPI_DUALQUAD_DISABLE;
 80021fa:	4b33      	ldr	r3, [pc, #204]	@ (80022c8 <BSP_QSPI_Init+0xf4>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	609a      	str	r2, [r3, #8]
  OSPIHandle.Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8002200:	4b31      	ldr	r3, [pc, #196]	@ (80022c8 <BSP_QSPI_Init+0xf4>)
 8002202:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002206:	60da      	str	r2, [r3, #12]
 8002208:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800220c:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	fa93 f3a3 	rbit	r3, r3
 8002214:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <BSP_QSPI_Init+0x50>
  {
    return 32U;
 8002220:	2320      	movs	r3, #32
 8002222:	e003      	b.n	800222c <BSP_QSPI_Init+0x58>
  }
  return __builtin_clz(value);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	fab3 f383 	clz	r3, r3
 800222a:	b2db      	uxtb	r3, r3
  OSPIHandle.Init.DeviceSize            = POSITION_VAL(MX25R6435F_FLASH_SIZE);
 800222c:	461a      	mov	r2, r3
 800222e:	4b26      	ldr	r3, [pc, #152]	@ (80022c8 <BSP_QSPI_Init+0xf4>)
 8002230:	611a      	str	r2, [r3, #16]
  OSPIHandle.Init.ChipSelectHighTime    = 1;
 8002232:	4b25      	ldr	r3, [pc, #148]	@ (80022c8 <BSP_QSPI_Init+0xf4>)
 8002234:	2201      	movs	r2, #1
 8002236:	615a      	str	r2, [r3, #20]
  OSPIHandle.Init.FreeRunningClock      = HAL_OSPI_FREERUNCLK_DISABLE;
 8002238:	4b23      	ldr	r3, [pc, #140]	@ (80022c8 <BSP_QSPI_Init+0xf4>)
 800223a:	2200      	movs	r2, #0
 800223c:	619a      	str	r2, [r3, #24]
  OSPIHandle.Init.ClockMode             = HAL_OSPI_CLOCK_MODE_0;
 800223e:	4b22      	ldr	r3, [pc, #136]	@ (80022c8 <BSP_QSPI_Init+0xf4>)
 8002240:	2200      	movs	r2, #0
 8002242:	61da      	str	r2, [r3, #28]
  OSPIHandle.Init.ClockPrescaler        = 4; /* QSPI clock = 110MHz / ClockPrescaler = 27.5 MHz */
 8002244:	4b20      	ldr	r3, [pc, #128]	@ (80022c8 <BSP_QSPI_Init+0xf4>)
 8002246:	2204      	movs	r2, #4
 8002248:	621a      	str	r2, [r3, #32]
  OSPIHandle.Init.SampleShifting        = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800224a:	4b1f      	ldr	r3, [pc, #124]	@ (80022c8 <BSP_QSPI_Init+0xf4>)
 800224c:	2200      	movs	r2, #0
 800224e:	625a      	str	r2, [r3, #36]	@ 0x24
  OSPIHandle.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8002250:	4b1d      	ldr	r3, [pc, #116]	@ (80022c8 <BSP_QSPI_Init+0xf4>)
 8002252:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002256:	629a      	str	r2, [r3, #40]	@ 0x28
  OSPIHandle.Init.ChipSelectBoundary    = 0;
 8002258:	4b1b      	ldr	r3, [pc, #108]	@ (80022c8 <BSP_QSPI_Init+0xf4>)
 800225a:	2200      	movs	r2, #0
 800225c:	62da      	str	r2, [r3, #44]	@ 0x2c
  OSPIHandle.Init.DelayBlockBypass      = HAL_OSPI_DELAY_BLOCK_USED;
 800225e:	4b1a      	ldr	r3, [pc, #104]	@ (80022c8 <BSP_QSPI_Init+0xf4>)
 8002260:	2200      	movs	r2, #0
 8002262:	631a      	str	r2, [r3, #48]	@ 0x30

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 8002264:	4818      	ldr	r0, [pc, #96]	@ (80022c8 <BSP_QSPI_Init+0xf4>)
 8002266:	f003 faf7 	bl	8005858 <HAL_OSPI_Init>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <BSP_QSPI_Init+0xa0>
  {
    return QSPI_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e025      	b.n	80022c0 <BSP_QSPI_Init+0xec>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&OSPIHandle) != QSPI_OK)
 8002274:	4814      	ldr	r0, [pc, #80]	@ (80022c8 <BSP_QSPI_Init+0xf4>)
 8002276:	f000 f9fb 	bl	8002670 <QSPI_ResetMemory>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <BSP_QSPI_Init+0xb0>
  {
    return QSPI_NOT_SUPPORTED;
 8002280:	2304      	movs	r3, #4
 8002282:	e01d      	b.n	80022c0 <BSP_QSPI_Init+0xec>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&OSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 8002284:	2101      	movs	r1, #1
 8002286:	4810      	ldr	r0, [pc, #64]	@ (80022c8 <BSP_QSPI_Init+0xf4>)
 8002288:	f000 fae0 	bl	800284c <QSPI_QuadMode>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <BSP_QSPI_Init+0xc2>
  {
    return QSPI_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e014      	b.n	80022c0 <BSP_QSPI_Init+0xec>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&OSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 8002296:	2101      	movs	r1, #1
 8002298:	480b      	ldr	r0, [pc, #44]	@ (80022c8 <BSP_QSPI_Init+0xf4>)
 800229a:	f000 fb83 	bl	80029a4 <QSPI_HighPerfMode>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <BSP_QSPI_Init+0xd4>
  {
    return QSPI_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e00b      	b.n	80022c0 <BSP_QSPI_Init+0xec>
  }
  
  /* Re-configure the clock for the high performance mode */
  OSPIHandle.Init.ClockPrescaler = 2; /* QSPI clock = 110MHz / ClockPrescaler = 55 MHz */
 80022a8:	4b07      	ldr	r3, [pc, #28]	@ (80022c8 <BSP_QSPI_Init+0xf4>)
 80022aa:	2202      	movs	r2, #2
 80022ac:	621a      	str	r2, [r3, #32]

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 80022ae:	4806      	ldr	r0, [pc, #24]	@ (80022c8 <BSP_QSPI_Init+0xf4>)
 80022b0:	f003 fad2 	bl	8005858 <HAL_OSPI_Init>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <BSP_QSPI_Init+0xea>
  {
    return QSPI_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <BSP_QSPI_Init+0xec>
  }

  return QSPI_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	200007c8 	.word	0x200007c8
 80022cc:	a0001000 	.word	0xa0001000

080022d0 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b098      	sub	sp, #96	@ 0x60
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the read command */
  sCommand.OperationType         = HAL_OSPI_OPTYPE_COMMON_CFG;
 80022dc:	2300      	movs	r3, #0
 80022de:	613b      	str	r3, [r7, #16]
  sCommand.FlashId               = HAL_OSPI_FLASH_ID_1;
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]
  sCommand.Instruction           = QUAD_INOUT_READ_CMD;
 80022e4:	23eb      	movs	r3, #235	@ 0xeb
 80022e6:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode       = HAL_OSPI_INSTRUCTION_1_LINE;
 80022e8:	2301      	movs	r3, #1
 80022ea:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize       = HAL_OSPI_INSTRUCTION_8_BITS;
 80022ec:	2300      	movs	r3, #0
 80022ee:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode    = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80022f0:	2300      	movs	r3, #0
 80022f2:	627b      	str	r3, [r7, #36]	@ 0x24
  sCommand.Address               = ReadAddr;
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sCommand.AddressMode           = HAL_OSPI_ADDRESS_4_LINES;
 80022f8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80022fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sCommand.AddressSize           = HAL_OSPI_ADDRESS_24_BITS;
 80022fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002302:	633b      	str	r3, [r7, #48]	@ 0x30
  sCommand.AddressDtrMode        = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8002304:	2300      	movs	r3, #0
 8002306:	637b      	str	r3, [r7, #52]	@ 0x34
  sCommand.AlternateBytes        = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 8002308:	23aa      	movs	r3, #170	@ 0xaa
 800230a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sCommand.AlternateBytesMode    = HAL_OSPI_ALTERNATE_BYTES_4_LINES;
 800230c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002310:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sCommand.AlternateBytesSize    = HAL_OSPI_ALTERNATE_BYTES_8_BITS;
 8002312:	2300      	movs	r3, #0
 8002314:	643b      	str	r3, [r7, #64]	@ 0x40
  sCommand.AlternateBytesDtrMode = HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE;
 8002316:	2300      	movs	r3, #0
 8002318:	647b      	str	r3, [r7, #68]	@ 0x44
  sCommand.DataMode              = HAL_OSPI_DATA_4_LINES;
 800231a:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800231e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sCommand.NbData                = Size;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sCommand.DataDtrMode           = HAL_OSPI_DATA_DTR_DISABLE;
 8002324:	2300      	movs	r3, #0
 8002326:	653b      	str	r3, [r7, #80]	@ 0x50
  sCommand.DummyCycles           = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 8002328:	2304      	movs	r3, #4
 800232a:	657b      	str	r3, [r7, #84]	@ 0x54
  sCommand.DQSMode               = HAL_OSPI_DQS_DISABLE;
 800232c:	2300      	movs	r3, #0
 800232e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sCommand.SIOOMode              = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8002330:	2300      	movs	r3, #0
 8002332:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
  /* Configure the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002334:	f107 0310 	add.w	r3, r7, #16
 8002338:	f241 3288 	movw	r2, #5000	@ 0x1388
 800233c:	4619      	mov	r1, r3
 800233e:	480c      	ldr	r0, [pc, #48]	@ (8002370 <BSP_QSPI_Read+0xa0>)
 8002340:	f003 fb5b 	bl	80059fa <HAL_OSPI_Command>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e00b      	b.n	8002366 <BSP_QSPI_Read+0x96>
  }
  
  /* Reception of the data */
  if (HAL_OSPI_Receive(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800234e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002352:	68f9      	ldr	r1, [r7, #12]
 8002354:	4806      	ldr	r0, [pc, #24]	@ (8002370 <BSP_QSPI_Read+0xa0>)
 8002356:	f003 fc44 	bl	8005be2 <HAL_OSPI_Receive>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <BSP_QSPI_Read+0x94>
  {
    return QSPI_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e000      	b.n	8002366 <BSP_QSPI_Read+0x96>
  }

  return QSPI_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3760      	adds	r7, #96	@ 0x60
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	200007c8 	.word	0x200007c8

08002374 <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b09c      	sub	sp, #112	@ 0x70
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	b2db      	uxtb	r3, r3
 8002384:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8002388:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 800238a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	429a      	cmp	r2, r3
 8002390:	d901      	bls.n	8002396 <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	66fb      	str	r3, [r7, #108]	@ 0x6c
  }

  /* Initialize the address variables */
  current_addr = WriteAddr;
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	66bb      	str	r3, [r7, #104]	@ 0x68
  end_addr = WriteAddr + Size;
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4413      	add	r3, r2
 80023a0:	667b      	str	r3, [r7, #100]	@ 0x64

  /* Initialize the program command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80023a2:	2300      	movs	r3, #0
 80023a4:	617b      	str	r3, [r7, #20]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61bb      	str	r3, [r7, #24]
  sCommand.Instruction        = QUAD_PAGE_PROG_CMD;
 80023aa:	2338      	movs	r3, #56	@ 0x38
 80023ac:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80023ae:	2301      	movs	r3, #1
 80023b0:	623b      	str	r3, [r7, #32]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80023b2:	2300      	movs	r3, #0
 80023b4:	627b      	str	r3, [r7, #36]	@ 0x24
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80023b6:	2300      	movs	r3, #0
 80023b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_4_LINES;
 80023ba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80023be:	633b      	str	r3, [r7, #48]	@ 0x30
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 80023c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023c4:	637b      	str	r3, [r7, #52]	@ 0x34
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80023c6:	2300      	movs	r3, #0
 80023c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80023ca:	2300      	movs	r3, #0
 80023cc:	643b      	str	r3, [r7, #64]	@ 0x40
  sCommand.DataMode           = HAL_OSPI_DATA_4_LINES;
 80023ce:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80023d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80023d4:	2300      	movs	r3, #0
 80023d6:	657b      	str	r3, [r7, #84]	@ 0x54
  sCommand.DummyCycles        = 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	65bb      	str	r3, [r7, #88]	@ 0x58
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80023dc:	2300      	movs	r3, #0
 80023de:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80023e0:	2300      	movs	r3, #0
 80023e2:	663b      	str	r3, [r7, #96]	@ 0x60
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 80023e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.NbData  = current_size;
 80023e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023ea:	653b      	str	r3, [r7, #80]	@ 0x50

    /* Enable write operations */
    if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 80023ec:	4823      	ldr	r0, [pc, #140]	@ (800247c <BSP_QSPI_Write+0x108>)
 80023ee:	f000 f986 	bl	80026fe <QSPI_WriteEnable>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <BSP_QSPI_Write+0x88>
    {
      return QSPI_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e03b      	b.n	8002474 <BSP_QSPI_Write+0x100>
    }
    
    /* Configure the command */
    if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80023fc:	f107 0314 	add.w	r3, r7, #20
 8002400:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002404:	4619      	mov	r1, r3
 8002406:	481d      	ldr	r0, [pc, #116]	@ (800247c <BSP_QSPI_Write+0x108>)
 8002408:	f003 faf7 	bl	80059fa <HAL_OSPI_Command>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <BSP_QSPI_Write+0xa2>
    {
      return QSPI_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e02e      	b.n	8002474 <BSP_QSPI_Write+0x100>
    }
    
    /* Transmission of the data */
    if (HAL_OSPI_Transmit(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800241a:	68f9      	ldr	r1, [r7, #12]
 800241c:	4817      	ldr	r0, [pc, #92]	@ (800247c <BSP_QSPI_Write+0x108>)
 800241e:	f003 fb6d 	bl	8005afc <HAL_OSPI_Transmit>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <BSP_QSPI_Write+0xb8>
    {
      return QSPI_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e023      	b.n	8002474 <BSP_QSPI_Write+0x100>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&OSPIHandle, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800242c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002430:	4812      	ldr	r0, [pc, #72]	@ (800247c <BSP_QSPI_Write+0x108>)
 8002432:	f000 f9c0 	bl	80027b6 <QSPI_AutoPollingMemReady>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <BSP_QSPI_Write+0xcc>
    {
      return QSPI_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e019      	b.n	8002474 <BSP_QSPI_Write+0x100>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8002440:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002442:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002444:	4413      	add	r3, r2
 8002446:	66bb      	str	r3, [r7, #104]	@ 0x68
    pData += current_size;
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800244c:	4413      	add	r3, r2
 800244e:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 8002450:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002452:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002456:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002458:	429a      	cmp	r2, r3
 800245a:	d203      	bcs.n	8002464 <BSP_QSPI_Write+0xf0>
 800245c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800245e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	e001      	b.n	8002468 <BSP_QSPI_Write+0xf4>
 8002464:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002468:	66fb      	str	r3, [r7, #108]	@ 0x6c
  } while (current_addr < end_addr);
 800246a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800246c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800246e:	429a      	cmp	r2, r3
 8002470:	d3b8      	bcc.n	80023e4 <BSP_QSPI_Write+0x70>
  
  return QSPI_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3770      	adds	r7, #112	@ 0x70
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	200007c8 	.word	0x200007c8

08002480 <BSP_QSPI_Erase_Sector>:
  *       returns. Application has to call BSP_QSPI_GetStatus()
  *       to know when the device is available again (i.e. erase operation
  *       completed).
  */
uint8_t BSP_QSPI_Erase_Sector(uint32_t Sector)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b096      	sub	sp, #88	@ 0x58
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  
  if (Sector >= (uint32_t)(MX25R6435F_FLASH_SIZE/MX25R6435F_SECTOR_SIZE))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800248e:	d301      	bcc.n	8002494 <BSP_QSPI_Erase_Sector+0x14>
  {
    return QSPI_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e036      	b.n	8002502 <BSP_QSPI_Erase_Sector+0x82>
  }
  
  /* Initialize the erase command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8002494:	2300      	movs	r3, #0
 8002496:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8002498:	2300      	movs	r3, #0
 800249a:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = SECTOR_ERASE_CMD;
 800249c:	2320      	movs	r3, #32
 800249e:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80024a0:	2301      	movs	r3, #1
 80024a2:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80024a4:	2300      	movs	r3, #0
 80024a6:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = (Sector * MX25R6435F_SECTOR_SIZE);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	031b      	lsls	r3, r3, #12
 80024b0:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_1_LINE;
 80024b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024b6:	627b      	str	r3, [r7, #36]	@ 0x24
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 80024b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80024be:	2300      	movs	r3, #0
 80024c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80024c2:	2300      	movs	r3, #0
 80024c4:	637b      	str	r3, [r7, #52]	@ 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 80024c6:	2300      	movs	r3, #0
 80024c8:	643b      	str	r3, [r7, #64]	@ 0x40
  sCommand.DummyCycles        = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80024ce:	2300      	movs	r3, #0
 80024d0:	653b      	str	r3, [r7, #80]	@ 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80024d2:	2300      	movs	r3, #0
 80024d4:	657b      	str	r3, [r7, #84]	@ 0x54
  
  /* Enable write operations */
  if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 80024d6:	480d      	ldr	r0, [pc, #52]	@ (800250c <BSP_QSPI_Erase_Sector+0x8c>)
 80024d8:	f000 f911 	bl	80026fe <QSPI_WriteEnable>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <BSP_QSPI_Erase_Sector+0x66>
  {
    return QSPI_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e00d      	b.n	8002502 <BSP_QSPI_Erase_Sector+0x82>
  }
  
  /* Send the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80024e6:	f107 0308 	add.w	r3, r7, #8
 80024ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ee:	4619      	mov	r1, r3
 80024f0:	4806      	ldr	r0, [pc, #24]	@ (800250c <BSP_QSPI_Erase_Sector+0x8c>)
 80024f2:	f003 fa82 	bl	80059fa <HAL_OSPI_Command>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <BSP_QSPI_Erase_Sector+0x80>
  {
    return QSPI_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e000      	b.n	8002502 <BSP_QSPI_Erase_Sector+0x82>
  }
  
  return QSPI_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3758      	adds	r7, #88	@ 0x58
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	200007c8 	.word	0x200007c8

08002510 <BSP_QSPI_GetStatus>:
/**
  * @brief  Reads current status of the QSPI memory.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_GetStatus(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b096      	sub	sp, #88	@ 0x58
 8002514:	af00      	add	r7, sp, #0
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg;

  /* Initialize the read security register command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8002516:	2300      	movs	r3, #0
 8002518:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800251a:	2300      	movs	r3, #0
 800251c:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = READ_SEC_REG_CMD;
 800251e:	232b      	movs	r3, #43	@ 0x2b
 8002520:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8002522:	2301      	movs	r3, #1
 8002524:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8002526:	2300      	movs	r3, #0
 8002528:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800252e:	2300      	movs	r3, #0
 8002530:	627b      	str	r3, [r7, #36]	@ 0x24
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8002532:	2300      	movs	r3, #0
 8002534:	637b      	str	r3, [r7, #52]	@ 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8002536:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800253a:	643b      	str	r3, [r7, #64]	@ 0x40
  sCommand.NbData             = 1;
 800253c:	2301      	movs	r3, #1
 800253e:	647b      	str	r3, [r7, #68]	@ 0x44
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8002540:	2300      	movs	r3, #0
 8002542:	64bb      	str	r3, [r7, #72]	@ 0x48
  sCommand.DummyCycles        = 0;
 8002544:	2300      	movs	r3, #0
 8002546:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8002548:	2300      	movs	r3, #0
 800254a:	653b      	str	r3, [r7, #80]	@ 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800254c:	2300      	movs	r3, #0
 800254e:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Configure the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002550:	f107 0308 	add.w	r3, r7, #8
 8002554:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002558:	4619      	mov	r1, r3
 800255a:	4824      	ldr	r0, [pc, #144]	@ (80025ec <BSP_QSPI_GetStatus+0xdc>)
 800255c:	f003 fa4d 	bl	80059fa <HAL_OSPI_Command>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <BSP_QSPI_GetStatus+0x5a>
  {
    return QSPI_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e03c      	b.n	80025e4 <BSP_QSPI_GetStatus+0xd4>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(&OSPIHandle, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800256a:	1dfb      	adds	r3, r7, #7
 800256c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002570:	4619      	mov	r1, r3
 8002572:	481e      	ldr	r0, [pc, #120]	@ (80025ec <BSP_QSPI_GetStatus+0xdc>)
 8002574:	f003 fb35 	bl	8005be2 <HAL_OSPI_Receive>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <BSP_QSPI_GetStatus+0x72>
  {
    return QSPI_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e030      	b.n	80025e4 <BSP_QSPI_GetStatus+0xd4>
  }
  
  /* Check the value of the register */
  if ((reg & (MX25R6435F_SECR_P_FAIL | MX25R6435F_SECR_E_FAIL)) != 0)
 8002582:	79fb      	ldrb	r3, [r7, #7]
 8002584:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <BSP_QSPI_GetStatus+0x80>
  {
    return QSPI_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e029      	b.n	80025e4 <BSP_QSPI_GetStatus+0xd4>
  }
  else if ((reg & (MX25R6435F_SECR_PSB | MX25R6435F_SECR_ESB)) != 0)
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	f003 030c 	and.w	r3, r3, #12
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <BSP_QSPI_GetStatus+0x8e>
  {
    return QSPI_SUSPENDED;
 800259a:	2308      	movs	r3, #8
 800259c:	e022      	b.n	80025e4 <BSP_QSPI_GetStatus+0xd4>
  }

  /* Initialize the read status register command */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 800259e:	2305      	movs	r3, #5
 80025a0:	613b      	str	r3, [r7, #16]

  /* Configure the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80025a2:	f107 0308 	add.w	r3, r7, #8
 80025a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025aa:	4619      	mov	r1, r3
 80025ac:	480f      	ldr	r0, [pc, #60]	@ (80025ec <BSP_QSPI_GetStatus+0xdc>)
 80025ae:	f003 fa24 	bl	80059fa <HAL_OSPI_Command>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <BSP_QSPI_GetStatus+0xac>
  {
    return QSPI_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e013      	b.n	80025e4 <BSP_QSPI_GetStatus+0xd4>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(&OSPIHandle, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80025bc:	1dfb      	adds	r3, r7, #7
 80025be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025c2:	4619      	mov	r1, r3
 80025c4:	4809      	ldr	r0, [pc, #36]	@ (80025ec <BSP_QSPI_GetStatus+0xdc>)
 80025c6:	f003 fb0c 	bl	8005be2 <HAL_OSPI_Receive>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <BSP_QSPI_GetStatus+0xc4>
  {
    return QSPI_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e007      	b.n	80025e4 <BSP_QSPI_GetStatus+0xd4>
  }

  /* Check the value of the register */
  if ((reg & MX25R6435F_SR_WIP) != 0)
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <BSP_QSPI_GetStatus+0xd2>
  {
    return QSPI_BUSY;
 80025de:	2302      	movs	r3, #2
 80025e0:	e000      	b.n	80025e4 <BSP_QSPI_GetStatus+0xd4>
  }
  else
  {
    return QSPI_OK;
 80025e2:	2300      	movs	r3, #0
  }
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3758      	adds	r7, #88	@ 0x58
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	200007c8 	.word	0x200007c8

080025f0 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_OSPI1_CLK_ENABLE();
 80025f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002668 <BSP_QSPI_MspInit+0x78>)
 80025f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025fa:	4a1b      	ldr	r2, [pc, #108]	@ (8002668 <BSP_QSPI_MspInit+0x78>)
 80025fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002600:	6513      	str	r3, [r2, #80]	@ 0x50
 8002602:	4b19      	ldr	r3, [pc, #100]	@ (8002668 <BSP_QSPI_MspInit+0x78>)
 8002604:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002606:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800260a:	60bb      	str	r3, [r7, #8]
 800260c:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_OSPI1_FORCE_RESET();
 800260e:	4b16      	ldr	r3, [pc, #88]	@ (8002668 <BSP_QSPI_MspInit+0x78>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002612:	4a15      	ldr	r2, [pc, #84]	@ (8002668 <BSP_QSPI_MspInit+0x78>)
 8002614:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002618:	6313      	str	r3, [r2, #48]	@ 0x30
  __HAL_RCC_OSPI1_RELEASE_RESET();
 800261a:	4b13      	ldr	r3, [pc, #76]	@ (8002668 <BSP_QSPI_MspInit+0x78>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261e:	4a12      	ldr	r2, [pc, #72]	@ (8002668 <BSP_QSPI_MspInit+0x78>)
 8002620:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002624:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002626:	4b10      	ldr	r3, [pc, #64]	@ (8002668 <BSP_QSPI_MspInit+0x78>)
 8002628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800262a:	4a0f      	ldr	r2, [pc, #60]	@ (8002668 <BSP_QSPI_MspInit+0x78>)
 800262c:	f043 0310 	orr.w	r3, r3, #16
 8002630:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002632:	4b0d      	ldr	r3, [pc, #52]	@ (8002668 <BSP_QSPI_MspInit+0x78>)
 8002634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002636:	f003 0310 	and.w	r3, r3, #16
 800263a:	607b      	str	r3, [r7, #4]
 800263c:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 800263e:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8002642:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8002644:	2302      	movs	r3, #2
 8002646:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800264c:	2303      	movs	r3, #3
 800264e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8002650:	230a      	movs	r3, #10
 8002652:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002654:	f107 030c 	add.w	r3, r7, #12
 8002658:	4619      	mov	r1, r3
 800265a:	4804      	ldr	r0, [pc, #16]	@ (800266c <BSP_QSPI_MspInit+0x7c>)
 800265c:	f002 f826 	bl	80046ac <HAL_GPIO_Init>
}
 8002660:	bf00      	nop
 8002662:	3720      	adds	r7, #32
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40021000 	.word	0x40021000
 800266c:	48001000 	.word	0x48001000

08002670 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(OSPI_HandleTypeDef *hospi)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b096      	sub	sp, #88	@ 0x58
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8002678:	2300      	movs	r3, #0
 800267a:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800267c:	2300      	movs	r3, #0
 800267e:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = RESET_ENABLE_CMD;
 8002680:	2366      	movs	r3, #102	@ 0x66
 8002682:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8002684:	2301      	movs	r3, #1
 8002686:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8002688:	2300      	movs	r3, #0
 800268a:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800268c:	2300      	movs	r3, #0
 800268e:	61fb      	str	r3, [r7, #28]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8002690:	2300      	movs	r3, #0
 8002692:	627b      	str	r3, [r7, #36]	@ 0x24
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8002694:	2300      	movs	r3, #0
 8002696:	637b      	str	r3, [r7, #52]	@ 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 8002698:	2300      	movs	r3, #0
 800269a:	643b      	str	r3, [r7, #64]	@ 0x40
  sCommand.DummyCycles        = 0;
 800269c:	2300      	movs	r3, #0
 800269e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80026a0:	2300      	movs	r3, #0
 80026a2:	653b      	str	r3, [r7, #80]	@ 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80026a4:	2300      	movs	r3, #0
 80026a6:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Send the command */
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80026a8:	f107 0308 	add.w	r3, r7, #8
 80026ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026b0:	4619      	mov	r1, r3
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f003 f9a1 	bl	80059fa <HAL_OSPI_Command>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <QSPI_ResetMemory+0x52>
  {
    return QSPI_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e019      	b.n	80026f6 <QSPI_ResetMemory+0x86>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 80026c2:	2399      	movs	r3, #153	@ 0x99
 80026c4:	613b      	str	r3, [r7, #16]
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80026c6:	f107 0308 	add.w	r3, r7, #8
 80026ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ce:	4619      	mov	r1, r3
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f003 f992 	bl	80059fa <HAL_OSPI_Command>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <QSPI_ResetMemory+0x70>
  {
    return QSPI_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e00a      	b.n	80026f6 <QSPI_ResetMemory+0x86>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80026e0:	f241 3188 	movw	r1, #5000	@ 0x1388
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 f866 	bl	80027b6 <QSPI_AutoPollingMemReady>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <QSPI_ResetMemory+0x84>
  {
    return QSPI_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e000      	b.n	80026f6 <QSPI_ResetMemory+0x86>
  }

  return QSPI_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3758      	adds	r7, #88	@ 0x58
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(OSPI_HandleTypeDef *hospi)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b09c      	sub	sp, #112	@ 0x70
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8002706:	2300      	movs	r3, #0
 8002708:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800270a:	2300      	movs	r3, #0
 800270c:	627b      	str	r3, [r7, #36]	@ 0x24
  sCommand.Instruction        = WRITE_ENABLE_CMD;
 800270e:	2306      	movs	r3, #6
 8002710:	62bb      	str	r3, [r7, #40]	@ 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8002712:	2301      	movs	r3, #1
 8002714:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8002716:	2300      	movs	r3, #0
 8002718:	633b      	str	r3, [r7, #48]	@ 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800271a:	2300      	movs	r3, #0
 800271c:	637b      	str	r3, [r7, #52]	@ 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800271e:	2300      	movs	r3, #0
 8002720:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8002722:	2300      	movs	r3, #0
 8002724:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 8002726:	2300      	movs	r3, #0
 8002728:	65bb      	str	r3, [r7, #88]	@ 0x58
  sCommand.DummyCycles        = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	667b      	str	r3, [r7, #100]	@ 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800272e:	2300      	movs	r3, #0
 8002730:	66bb      	str	r3, [r7, #104]	@ 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8002732:	2300      	movs	r3, #0
 8002734:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002736:	f107 0320 	add.w	r3, r7, #32
 800273a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800273e:	4619      	mov	r1, r3
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f003 f95a 	bl	80059fa <HAL_OSPI_Command>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <QSPI_WriteEnable+0x52>
  {
    return QSPI_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e02e      	b.n	80027ae <QSPI_WriteEnable+0xb0>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match         = MX25R6435F_SR_WEL;
 8002750:	2302      	movs	r3, #2
 8002752:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WEL;
 8002754:	2302      	movs	r3, #2
 8002756:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 8002758:	2300      	movs	r3, #0
 800275a:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 800275c:	2310      	movs	r3, #16
 800275e:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8002760:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002764:	61bb      	str	r3, [r7, #24]

  sCommand.Instruction  = READ_STATUS_REG_CMD;
 8002766:	2305      	movs	r3, #5
 8002768:	62bb      	str	r3, [r7, #40]	@ 0x28
  sCommand.DataMode     = HAL_OSPI_DATA_1_LINE;
 800276a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800276e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sCommand.NbData       = 1;
 8002770:	2301      	movs	r3, #1
 8002772:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sCommand.DataDtrMode  = HAL_OSPI_DATA_DTR_DISABLE;
 8002774:	2300      	movs	r3, #0
 8002776:	663b      	str	r3, [r7, #96]	@ 0x60

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002778:	f107 0320 	add.w	r3, r7, #32
 800277c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002780:	4619      	mov	r1, r3
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f003 f939 	bl	80059fa <HAL_OSPI_Command>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <QSPI_WriteEnable+0x94>
  {
    return QSPI_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e00d      	b.n	80027ae <QSPI_WriteEnable+0xb0>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002792:	f107 030c 	add.w	r3, r7, #12
 8002796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800279a:	4619      	mov	r1, r3
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f003 fac3 	bl	8005d28 <HAL_OSPI_AutoPolling>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <QSPI_WriteEnable+0xae>
  {
    return QSPI_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e000      	b.n	80027ae <QSPI_WriteEnable+0xb0>
  }

  return QSPI_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3770      	adds	r7, #112	@ 0x70
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <QSPI_AutoPollingMemReady>:
  * @param  hospi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b09c      	sub	sp, #112	@ 0x70
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
 80027be:	6039      	str	r1, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80027c0:	2300      	movs	r3, #0
 80027c2:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80027c4:	2300      	movs	r3, #0
 80027c6:	627b      	str	r3, [r7, #36]	@ 0x24
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 80027c8:	2305      	movs	r3, #5
 80027ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80027cc:	2301      	movs	r3, #1
 80027ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80027d0:	2300      	movs	r3, #0
 80027d2:	633b      	str	r3, [r7, #48]	@ 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80027d4:	2300      	movs	r3, #0
 80027d6:	637b      	str	r3, [r7, #52]	@ 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80027d8:	2300      	movs	r3, #0
 80027da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80027dc:	2300      	movs	r3, #0
 80027de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 80027e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027e4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sCommand.NbData             = 1;
 80027e6:	2301      	movs	r3, #1
 80027e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80027ea:	2300      	movs	r3, #0
 80027ec:	663b      	str	r3, [r7, #96]	@ 0x60
  sCommand.DummyCycles        = 0;
 80027ee:	2300      	movs	r3, #0
 80027f0:	667b      	str	r3, [r7, #100]	@ 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80027f2:	2300      	movs	r3, #0
 80027f4:	66bb      	str	r3, [r7, #104]	@ 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80027f6:	2300      	movs	r3, #0
 80027f8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  sConfig.Match         = 0;
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WIP;
 80027fe:	2301      	movs	r3, #1
 8002800:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 8002806:	2310      	movs	r3, #16
 8002808:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 800280a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800280e:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002810:	f107 0320 	add.w	r3, r7, #32
 8002814:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002818:	4619      	mov	r1, r3
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f003 f8ed 	bl	80059fa <HAL_OSPI_Command>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <QSPI_AutoPollingMemReady+0x74>
  {
    return QSPI_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e00c      	b.n	8002844 <QSPI_AutoPollingMemReady+0x8e>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, Timeout) != HAL_OK)
 800282a:	f107 030c 	add.w	r3, r7, #12
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	4619      	mov	r1, r3
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f003 fa78 	bl	8005d28 <HAL_OSPI_AutoPolling>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <QSPI_AutoPollingMemReady+0x8c>
  {
    return QSPI_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e000      	b.n	8002844 <QSPI_AutoPollingMemReady+0x8e>
  }

  return QSPI_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3770      	adds	r7, #112	@ 0x70
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <QSPI_QuadMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b098      	sub	sp, #96	@ 0x60
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8002858:	2300      	movs	r3, #0
 800285a:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800285c:	2300      	movs	r3, #0
 800285e:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8002860:	2305      	movs	r3, #5
 8002862:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8002864:	2301      	movs	r3, #1
 8002866:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8002868:	2300      	movs	r3, #0
 800286a:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800286c:	2300      	movs	r3, #0
 800286e:	627b      	str	r3, [r7, #36]	@ 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8002870:	2300      	movs	r3, #0
 8002872:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8002874:	2300      	movs	r3, #0
 8002876:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8002878:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800287c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800287e:	2300      	movs	r3, #0
 8002880:	653b      	str	r3, [r7, #80]	@ 0x50
  sCommand.DummyCycles        = 0;
 8002882:	2300      	movs	r3, #0
 8002884:	657b      	str	r3, [r7, #84]	@ 0x54
  sCommand.NbData             = 1;
 8002886:	2301      	movs	r3, #1
 8002888:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800288a:	2300      	movs	r3, #0
 800288c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800288e:	2300      	movs	r3, #0
 8002890:	65fb      	str	r3, [r7, #92]	@ 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002892:	f107 0310 	add.w	r3, r7, #16
 8002896:	f241 3288 	movw	r2, #5000	@ 0x1388
 800289a:	4619      	mov	r1, r3
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f003 f8ac 	bl	80059fa <HAL_OSPI_Command>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <QSPI_QuadMode+0x60>
  {
    return QSPI_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e077      	b.n	800299c <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80028ac:	f107 030f 	add.w	r3, r7, #15
 80028b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028b4:	4619      	mov	r1, r3
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f003 f993 	bl	8005be2 <HAL_OSPI_Receive>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <QSPI_QuadMode+0x7a>
  {
    return QSPI_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e06a      	b.n	800299c <QSPI_QuadMode+0x150>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7ff ff19 	bl	80026fe <QSPI_WriteEnable>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <QSPI_QuadMode+0x8a>
  {
    return QSPI_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e062      	b.n	800299c <QSPI_QuadMode+0x150>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 80028d6:	78fb      	ldrb	r3, [r7, #3]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d105      	bne.n	80028e8 <QSPI_QuadMode+0x9c>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
 80028de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	73fb      	strb	r3, [r7, #15]
 80028e6:	e004      	b.n	80028f2 <QSPI_QuadMode+0xa6>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
 80028ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 80028f2:	2301      	movs	r3, #1
 80028f4:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80028f6:	f107 0310 	add.w	r3, r7, #16
 80028fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028fe:	4619      	mov	r1, r3
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f003 f87a 	bl	80059fa <HAL_OSPI_Command>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <QSPI_QuadMode+0xc4>
  {
    return QSPI_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e045      	b.n	800299c <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Transmit(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002910:	f107 030f 	add.w	r3, r7, #15
 8002914:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002918:	4619      	mov	r1, r3
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f003 f8ee 	bl	8005afc <HAL_OSPI_Transmit>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <QSPI_QuadMode+0xde>
  {
    return QSPI_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e038      	b.n	800299c <QSPI_QuadMode+0x150>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800292a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7ff ff41 	bl	80027b6 <QSPI_AutoPollingMemReady>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <QSPI_QuadMode+0xf2>
  {
    return QSPI_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e02e      	b.n	800299c <QSPI_QuadMode+0x150>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 800293e:	2305      	movs	r3, #5
 8002940:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002942:	f107 0310 	add.w	r3, r7, #16
 8002946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800294a:	4619      	mov	r1, r3
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f003 f854 	bl	80059fa <HAL_OSPI_Command>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <QSPI_QuadMode+0x110>
  {
    return QSPI_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e01f      	b.n	800299c <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800295c:	f107 030f 	add.w	r3, r7, #15
 8002960:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002964:	4619      	mov	r1, r3
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f003 f93b 	bl	8005be2 <HAL_OSPI_Receive>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <QSPI_QuadMode+0x12a>
  {
    return QSPI_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e012      	b.n	800299c <QSPI_QuadMode+0x150>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8002976:	7bfb      	ldrb	r3, [r7, #15]
 8002978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800297c:	2b00      	cmp	r3, #0
 800297e:	d102      	bne.n	8002986 <QSPI_QuadMode+0x13a>
 8002980:	78fb      	ldrb	r3, [r7, #3]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d007      	beq.n	8002996 <QSPI_QuadMode+0x14a>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8002986:	7bfb      	ldrb	r3, [r7, #15]
 8002988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 800298c:	2b00      	cmp	r3, #0
 800298e:	d004      	beq.n	800299a <QSPI_QuadMode+0x14e>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8002990:	78fb      	ldrb	r3, [r7, #3]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <QSPI_QuadMode+0x14e>
  {
    return QSPI_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <QSPI_QuadMode+0x150>
  }

  return QSPI_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3760      	adds	r7, #96	@ 0x60
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <QSPI_HighPerfMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b098      	sub	sp, #96	@ 0x60
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	460b      	mov	r3, r1
 80029ae:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80029b0:	2300      	movs	r3, #0
 80029b2:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 80029b8:	2305      	movs	r3, #5
 80029ba:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80029bc:	2301      	movs	r3, #1
 80029be:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80029c0:	2300      	movs	r3, #0
 80029c2:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80029c4:	2300      	movs	r3, #0
 80029c6:	627b      	str	r3, [r7, #36]	@ 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80029c8:	2300      	movs	r3, #0
 80029ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80029cc:	2300      	movs	r3, #0
 80029ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 80029d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80029d6:	2300      	movs	r3, #0
 80029d8:	653b      	str	r3, [r7, #80]	@ 0x50
  sCommand.DummyCycles        = 0;
 80029da:	2300      	movs	r3, #0
 80029dc:	657b      	str	r3, [r7, #84]	@ 0x54
  sCommand.NbData             = 1;
 80029de:	2301      	movs	r3, #1
 80029e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80029e2:	2300      	movs	r3, #0
 80029e4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80029e6:	2300      	movs	r3, #0
 80029e8:	65fb      	str	r3, [r7, #92]	@ 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80029ea:	f107 0310 	add.w	r3, r7, #16
 80029ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029f2:	4619      	mov	r1, r3
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f003 f800 	bl	80059fa <HAL_OSPI_Command>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <QSPI_HighPerfMode+0x60>
  {
    return QSPI_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e09a      	b.n	8002b3a <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002a04:	f107 030c 	add.w	r3, r7, #12
 8002a08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f003 f8e7 	bl	8005be2 <HAL_OSPI_Receive>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <QSPI_HighPerfMode+0x7a>
  {
    return QSPI_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e08d      	b.n	8002b3a <QSPI_HighPerfMode+0x196>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8002a1e:	2315      	movs	r3, #21
 8002a20:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 8002a22:	2302      	movs	r3, #2
 8002a24:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002a26:	f107 0310 	add.w	r3, r7, #16
 8002a2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a2e:	4619      	mov	r1, r3
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f002 ffe2 	bl	80059fa <HAL_OSPI_Command>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <QSPI_HighPerfMode+0x9c>
  {
    return QSPI_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e07c      	b.n	8002b3a <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[1]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002a40:	f107 030c 	add.w	r3, r7, #12
 8002a44:	3301      	adds	r3, #1
 8002a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f003 f8c8 	bl	8005be2 <HAL_OSPI_Receive>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <QSPI_HighPerfMode+0xb8>
  {
    return QSPI_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e06e      	b.n	8002b3a <QSPI_HighPerfMode+0x196>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7ff fe4e 	bl	80026fe <QSPI_WriteEnable>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <QSPI_HighPerfMode+0xc8>
  {
    return QSPI_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e066      	b.n	8002b3a <QSPI_HighPerfMode+0x196>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 8002a6c:	78fb      	ldrb	r3, [r7, #3]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d105      	bne.n	8002a7e <QSPI_HighPerfMode+0xda>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8002a72:	7bbb      	ldrb	r3, [r7, #14]
 8002a74:	f043 0302 	orr.w	r3, r3, #2
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	73bb      	strb	r3, [r7, #14]
 8002a7c:	e004      	b.n	8002a88 <QSPI_HighPerfMode+0xe4>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8002a7e:	7bbb      	ldrb	r3, [r7, #14]
 8002a80:	f023 0302 	bic.w	r3, r3, #2
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 3;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002a90:	f107 0310 	add.w	r3, r7, #16
 8002a94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a98:	4619      	mov	r1, r3
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f002 ffad 	bl	80059fa <HAL_OSPI_Command>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <QSPI_HighPerfMode+0x106>
  {
    return QSPI_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e047      	b.n	8002b3a <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Transmit(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002aaa:	f107 030c 	add.w	r3, r7, #12
 8002aae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f003 f821 	bl	8005afc <HAL_OSPI_Transmit>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <QSPI_HighPerfMode+0x120>
  {
    return QSPI_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e03a      	b.n	8002b3a <QSPI_HighPerfMode+0x196>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8002ac4:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7ff fe74 	bl	80027b6 <QSPI_AutoPollingMemReady>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <QSPI_HighPerfMode+0x134>
  {
    return QSPI_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e030      	b.n	8002b3a <QSPI_HighPerfMode+0x196>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8002ad8:	2315      	movs	r3, #21
 8002ada:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 8002adc:	2302      	movs	r3, #2
 8002ade:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ae0:	f107 0310 	add.w	r3, r7, #16
 8002ae4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ae8:	4619      	mov	r1, r3
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f002 ff85 	bl	80059fa <HAL_OSPI_Command>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <QSPI_HighPerfMode+0x156>
  {
    return QSPI_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e01f      	b.n	8002b3a <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002afa:	f107 030c 	add.w	r3, r7, #12
 8002afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b02:	4619      	mov	r1, r3
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f003 f86c 	bl	8005be2 <HAL_OSPI_Receive>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <QSPI_HighPerfMode+0x170>
  {
    return QSPI_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e012      	b.n	8002b3a <QSPI_HighPerfMode+0x196>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8002b14:	7b7b      	ldrb	r3, [r7, #13]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d102      	bne.n	8002b24 <QSPI_HighPerfMode+0x180>
 8002b1e:	78fb      	ldrb	r3, [r7, #3]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d007      	beq.n	8002b34 <QSPI_HighPerfMode+0x190>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8002b24:	7b7b      	ldrb	r3, [r7, #13]
 8002b26:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d004      	beq.n	8002b38 <QSPI_HighPerfMode+0x194>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8002b2e:	78fb      	ldrb	r3, [r7, #3]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <QSPI_HighPerfMode+0x194>
  {
    return QSPI_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e000      	b.n	8002b3a <QSPI_HighPerfMode+0x196>
  }

  return QSPI_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3760      	adds	r7, #96	@ 0x60
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
	...

08002b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8002b88 <HAL_MspInit+0x44>)
 8002b4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b4e:	4a0e      	ldr	r2, [pc, #56]	@ (8002b88 <HAL_MspInit+0x44>)
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b56:	4b0c      	ldr	r3, [pc, #48]	@ (8002b88 <HAL_MspInit+0x44>)
 8002b58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	607b      	str	r3, [r7, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b62:	4b09      	ldr	r3, [pc, #36]	@ (8002b88 <HAL_MspInit+0x44>)
 8002b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b66:	4a08      	ldr	r2, [pc, #32]	@ (8002b88 <HAL_MspInit+0x44>)
 8002b68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b6e:	4b06      	ldr	r3, [pc, #24]	@ (8002b88 <HAL_MspInit+0x44>)
 8002b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b76:	603b      	str	r3, [r7, #0]
 8002b78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40021000 	.word	0x40021000

08002b8c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08a      	sub	sp, #40	@ 0x28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b94:	f107 0314 	add.w	r3, r7, #20
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	60da      	str	r2, [r3, #12]
 8002ba2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a2f      	ldr	r2, [pc, #188]	@ (8002c68 <HAL_DAC_MspInit+0xdc>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d157      	bne.n	8002c5e <HAL_DAC_MspInit+0xd2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002bae:	4b2f      	ldr	r3, [pc, #188]	@ (8002c6c <HAL_DAC_MspInit+0xe0>)
 8002bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb2:	4a2e      	ldr	r2, [pc, #184]	@ (8002c6c <HAL_DAC_MspInit+0xe0>)
 8002bb4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002bb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bba:	4b2c      	ldr	r3, [pc, #176]	@ (8002c6c <HAL_DAC_MspInit+0xe0>)
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bbe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002bc2:	613b      	str	r3, [r7, #16]
 8002bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc6:	4b29      	ldr	r3, [pc, #164]	@ (8002c6c <HAL_DAC_MspInit+0xe0>)
 8002bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bca:	4a28      	ldr	r2, [pc, #160]	@ (8002c6c <HAL_DAC_MspInit+0xe0>)
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bd2:	4b26      	ldr	r3, [pc, #152]	@ (8002c6c <HAL_DAC_MspInit+0xe0>)
 8002bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002bde:	2330      	movs	r3, #48	@ 0x30
 8002be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002be2:	2303      	movs	r3, #3
 8002be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be6:	2300      	movs	r3, #0
 8002be8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bea:	f107 0314 	add.w	r3, r7, #20
 8002bee:	4619      	mov	r1, r3
 8002bf0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bf4:	f001 fd5a 	bl	80046ac <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8002bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8002c70 <HAL_DAC_MspInit+0xe4>)
 8002bfa:	4a1e      	ldr	r2, [pc, #120]	@ (8002c74 <HAL_DAC_MspInit+0xe8>)
 8002bfc:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8002bfe:	4b1c      	ldr	r3, [pc, #112]	@ (8002c70 <HAL_DAC_MspInit+0xe4>)
 8002c00:	2206      	movs	r2, #6
 8002c02:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c04:	4b1a      	ldr	r3, [pc, #104]	@ (8002c70 <HAL_DAC_MspInit+0xe4>)
 8002c06:	2210      	movs	r2, #16
 8002c08:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c0a:	4b19      	ldr	r3, [pc, #100]	@ (8002c70 <HAL_DAC_MspInit+0xe4>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002c10:	4b17      	ldr	r3, [pc, #92]	@ (8002c70 <HAL_DAC_MspInit+0xe4>)
 8002c12:	2280      	movs	r2, #128	@ 0x80
 8002c14:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c16:	4b16      	ldr	r3, [pc, #88]	@ (8002c70 <HAL_DAC_MspInit+0xe4>)
 8002c18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c1c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002c1e:	4b14      	ldr	r3, [pc, #80]	@ (8002c70 <HAL_DAC_MspInit+0xe4>)
 8002c20:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002c24:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002c26:	4b12      	ldr	r3, [pc, #72]	@ (8002c70 <HAL_DAC_MspInit+0xe4>)
 8002c28:	2220      	movs	r2, #32
 8002c2a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002c2c:	4b10      	ldr	r3, [pc, #64]	@ (8002c70 <HAL_DAC_MspInit+0xe4>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002c32:	480f      	ldr	r0, [pc, #60]	@ (8002c70 <HAL_DAC_MspInit+0xe4>)
 8002c34:	f001 fa6c 	bl	8004110 <HAL_DMA_Init>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8002c3e:	f7ff f8c3 	bl	8001dc8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a0a      	ldr	r2, [pc, #40]	@ (8002c70 <HAL_DAC_MspInit+0xe4>)
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	4a09      	ldr	r2, [pc, #36]	@ (8002c70 <HAL_DAC_MspInit+0xe4>)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8002c4e:	2200      	movs	r2, #0
 8002c50:	210f      	movs	r1, #15
 8002c52:	2036      	movs	r0, #54	@ 0x36
 8002c54:	f000 fe9c 	bl	8003990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c58:	2036      	movs	r0, #54	@ 0x36
 8002c5a:	f000 feb5 	bl	80039c8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8002c5e:	bf00      	nop
 8002c60:	3728      	adds	r7, #40	@ 0x28
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40007400 	.word	0x40007400
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	200002b8 	.word	0x200002b8
 8002c74:	40020008 	.word	0x40020008

08002c78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b0ae      	sub	sp, #184	@ 0xb8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c80:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c90:	f107 0310 	add.w	r3, r7, #16
 8002c94:	2294      	movs	r2, #148	@ 0x94
 8002c96:	2100      	movs	r1, #0
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f007 fd60 	bl	800a75e <memset>
  if(hi2c->Instance==I2C1)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a21      	ldr	r2, [pc, #132]	@ (8002d28 <HAL_I2C_MspInit+0xb0>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d13b      	bne.n	8002d20 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002ca8:	2340      	movs	r3, #64	@ 0x40
 8002caa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002cac:	2300      	movs	r3, #0
 8002cae:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cb0:	f107 0310 	add.w	r3, r7, #16
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f004 fe1d 	bl	80078f4 <HAL_RCCEx_PeriphCLKConfig>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002cc0:	f7ff f882 	bl	8001dc8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cc4:	4b19      	ldr	r3, [pc, #100]	@ (8002d2c <HAL_I2C_MspInit+0xb4>)
 8002cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cc8:	4a18      	ldr	r2, [pc, #96]	@ (8002d2c <HAL_I2C_MspInit+0xb4>)
 8002cca:	f043 0302 	orr.w	r3, r3, #2
 8002cce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cd0:	4b16      	ldr	r3, [pc, #88]	@ (8002d2c <HAL_I2C_MspInit+0xb4>)
 8002cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002cdc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002ce0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ce4:	2312      	movs	r3, #18
 8002ce6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cf6:	2304      	movs	r3, #4
 8002cf8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cfc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002d00:	4619      	mov	r1, r3
 8002d02:	480b      	ldr	r0, [pc, #44]	@ (8002d30 <HAL_I2C_MspInit+0xb8>)
 8002d04:	f001 fcd2 	bl	80046ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d08:	4b08      	ldr	r3, [pc, #32]	@ (8002d2c <HAL_I2C_MspInit+0xb4>)
 8002d0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d0c:	4a07      	ldr	r2, [pc, #28]	@ (8002d2c <HAL_I2C_MspInit+0xb4>)
 8002d0e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d12:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d14:	4b05      	ldr	r3, [pc, #20]	@ (8002d2c <HAL_I2C_MspInit+0xb4>)
 8002d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d1c:	60bb      	str	r3, [r7, #8]
 8002d1e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002d20:	bf00      	nop
 8002d22:	37b8      	adds	r7, #184	@ 0xb8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40005400 	.word	0x40005400
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	48000400 	.word	0x48000400

08002d34 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a0b      	ldr	r2, [pc, #44]	@ (8002d70 <HAL_I2C_MspDeInit+0x3c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d10f      	bne.n	8002d66 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002d46:	4b0b      	ldr	r3, [pc, #44]	@ (8002d74 <HAL_I2C_MspDeInit+0x40>)
 8002d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d74 <HAL_I2C_MspDeInit+0x40>)
 8002d4c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002d50:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8002d52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d56:	4808      	ldr	r0, [pc, #32]	@ (8002d78 <HAL_I2C_MspDeInit+0x44>)
 8002d58:	f001 fe3a 	bl	80049d0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8002d5c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002d60:	4805      	ldr	r0, [pc, #20]	@ (8002d78 <HAL_I2C_MspDeInit+0x44>)
 8002d62:	f001 fe35 	bl	80049d0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8002d66:	bf00      	nop
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40005400 	.word	0x40005400
 8002d74:	40021000 	.word	0x40021000
 8002d78:	48000400 	.word	0x48000400

08002d7c <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b0b0      	sub	sp, #192	@ 0xc0
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d84:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	605a      	str	r2, [r3, #4]
 8002d8e:	609a      	str	r2, [r3, #8]
 8002d90:	60da      	str	r2, [r3, #12]
 8002d92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d94:	f107 0318 	add.w	r3, r7, #24
 8002d98:	2294      	movs	r2, #148	@ 0x94
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f007 fcde 	bl	800a75e <memset>
  if(hospi->Instance==OCTOSPI1)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a28      	ldr	r2, [pc, #160]	@ (8002e48 <HAL_OSPI_MspInit+0xcc>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d149      	bne.n	8002e40 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8002dac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002db0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8002db2:	2300      	movs	r3, #0
 8002db4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002db8:	f107 0318 	add.w	r3, r7, #24
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f004 fd99 	bl	80078f4 <HAL_RCCEx_PeriphCLKConfig>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8002dc8:	f7fe fffe 	bl	8001dc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8002dcc:	4b1f      	ldr	r3, [pc, #124]	@ (8002e4c <HAL_OSPI_MspInit+0xd0>)
 8002dce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dd0:	4a1e      	ldr	r2, [pc, #120]	@ (8002e4c <HAL_OSPI_MspInit+0xd0>)
 8002dd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8002e4c <HAL_OSPI_MspInit+0xd0>)
 8002dda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ddc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8002de4:	4b19      	ldr	r3, [pc, #100]	@ (8002e4c <HAL_OSPI_MspInit+0xd0>)
 8002de6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002de8:	4a18      	ldr	r2, [pc, #96]	@ (8002e4c <HAL_OSPI_MspInit+0xd0>)
 8002dea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dee:	6513      	str	r3, [r2, #80]	@ 0x50
 8002df0:	4b16      	ldr	r3, [pc, #88]	@ (8002e4c <HAL_OSPI_MspInit+0xd0>)
 8002df2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dfc:	4b13      	ldr	r3, [pc, #76]	@ (8002e4c <HAL_OSPI_MspInit+0xd0>)
 8002dfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e00:	4a12      	ldr	r2, [pc, #72]	@ (8002e4c <HAL_OSPI_MspInit+0xd0>)
 8002e02:	f043 0310 	orr.w	r3, r3, #16
 8002e06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e08:	4b10      	ldr	r3, [pc, #64]	@ (8002e4c <HAL_OSPI_MspInit+0xd0>)
 8002e0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e0c:	f003 0310 	and.w	r3, r3, #16
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8002e14:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8002e18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e22:	2300      	movs	r3, #0
 8002e24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8002e2e:	230a      	movs	r3, #10
 8002e30:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e34:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4805      	ldr	r0, [pc, #20]	@ (8002e50 <HAL_OSPI_MspInit+0xd4>)
 8002e3c:	f001 fc36 	bl	80046ac <HAL_GPIO_Init>

  /* USER CODE END OCTOSPI1_MspInit 1 */

  }

}
 8002e40:	bf00      	nop
 8002e42:	37c0      	adds	r7, #192	@ 0xc0
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	a0001000 	.word	0xa0001000
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	48001000 	.word	0x48001000

08002e54 <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a0b      	ldr	r2, [pc, #44]	@ (8002e90 <HAL_OSPI_MspDeInit+0x3c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d110      	bne.n	8002e88 <HAL_OSPI_MspDeInit+0x34>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OSPIM_CLK_DISABLE();
 8002e66:	4b0b      	ldr	r3, [pc, #44]	@ (8002e94 <HAL_OSPI_MspDeInit+0x40>)
 8002e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8002e94 <HAL_OSPI_MspDeInit+0x40>)
 8002e6c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002e70:	64d3      	str	r3, [r2, #76]	@ 0x4c
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8002e72:	4b08      	ldr	r3, [pc, #32]	@ (8002e94 <HAL_OSPI_MspDeInit+0x40>)
 8002e74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e76:	4a07      	ldr	r2, [pc, #28]	@ (8002e94 <HAL_OSPI_MspDeInit+0x40>)
 8002e78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e7c:	6513      	str	r3, [r2, #80]	@ 0x50
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8002e7e:	f44f 417c 	mov.w	r1, #64512	@ 0xfc00
 8002e82:	4805      	ldr	r0, [pc, #20]	@ (8002e98 <HAL_OSPI_MspDeInit+0x44>)
 8002e84:	f001 fda4 	bl	80049d0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 8002e88:	bf00      	nop
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	a0001000 	.word	0xa0001000
 8002e94:	40021000 	.word	0x40021000
 8002e98:	48001000 	.word	0x48001000

08002e9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eac:	d10b      	bne.n	8002ec6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002eae:	4b09      	ldr	r3, [pc, #36]	@ (8002ed4 <HAL_TIM_Base_MspInit+0x38>)
 8002eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb2:	4a08      	ldr	r2, [pc, #32]	@ (8002ed4 <HAL_TIM_Base_MspInit+0x38>)
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002eba:	4b06      	ldr	r3, [pc, #24]	@ (8002ed4 <HAL_TIM_Base_MspInit+0x38>)
 8002ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002ec6:	bf00      	nop
 8002ec8:	3714      	adds	r7, #20
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	40021000 	.word	0x40021000

08002ed8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b0ae      	sub	sp, #184	@ 0xb8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	605a      	str	r2, [r3, #4]
 8002eea:	609a      	str	r2, [r3, #8]
 8002eec:	60da      	str	r2, [r3, #12]
 8002eee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ef0:	f107 0310 	add.w	r3, r7, #16
 8002ef4:	2294      	movs	r2, #148	@ 0x94
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f007 fc30 	bl	800a75e <memset>
  if(huart->Instance==USART1)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a21      	ldr	r2, [pc, #132]	@ (8002f88 <HAL_UART_MspInit+0xb0>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d13a      	bne.n	8002f7e <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f10:	f107 0310 	add.w	r3, r7, #16
 8002f14:	4618      	mov	r0, r3
 8002f16:	f004 fced 	bl	80078f4 <HAL_RCCEx_PeriphCLKConfig>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002f20:	f7fe ff52 	bl	8001dc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f24:	4b19      	ldr	r3, [pc, #100]	@ (8002f8c <HAL_UART_MspInit+0xb4>)
 8002f26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f28:	4a18      	ldr	r2, [pc, #96]	@ (8002f8c <HAL_UART_MspInit+0xb4>)
 8002f2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f2e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f30:	4b16      	ldr	r3, [pc, #88]	@ (8002f8c <HAL_UART_MspInit+0xb4>)
 8002f32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f3c:	4b13      	ldr	r3, [pc, #76]	@ (8002f8c <HAL_UART_MspInit+0xb4>)
 8002f3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f40:	4a12      	ldr	r2, [pc, #72]	@ (8002f8c <HAL_UART_MspInit+0xb4>)
 8002f42:	f043 0302 	orr.w	r3, r3, #2
 8002f46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f48:	4b10      	ldr	r3, [pc, #64]	@ (8002f8c <HAL_UART_MspInit+0xb4>)
 8002f4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	60bb      	str	r3, [r7, #8]
 8002f52:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f54:	23c0      	movs	r3, #192	@ 0xc0
 8002f56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f60:	2300      	movs	r3, #0
 8002f62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f66:	2303      	movs	r3, #3
 8002f68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f72:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002f76:	4619      	mov	r1, r3
 8002f78:	4805      	ldr	r0, [pc, #20]	@ (8002f90 <HAL_UART_MspInit+0xb8>)
 8002f7a:	f001 fb97 	bl	80046ac <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002f7e:	bf00      	nop
 8002f80:	37b8      	adds	r7, #184	@ 0xb8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40013800 	.word	0x40013800
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	48000400 	.word	0x48000400

08002f94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b08e      	sub	sp, #56	@ 0x38
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002fa2:	4b34      	ldr	r3, [pc, #208]	@ (8003074 <HAL_InitTick+0xe0>)
 8002fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa6:	4a33      	ldr	r2, [pc, #204]	@ (8003074 <HAL_InitTick+0xe0>)
 8002fa8:	f043 0310 	orr.w	r3, r3, #16
 8002fac:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fae:	4b31      	ldr	r3, [pc, #196]	@ (8003074 <HAL_InitTick+0xe0>)
 8002fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fb2:	f003 0310 	and.w	r3, r3, #16
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fba:	f107 0210 	add.w	r2, r7, #16
 8002fbe:	f107 0314 	add.w	r3, r7, #20
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f004 fba3 	bl	8007710 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d103      	bne.n	8002fdc <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002fd4:	f004 fb70 	bl	80076b8 <HAL_RCC_GetPCLK1Freq>
 8002fd8:	6378      	str	r0, [r7, #52]	@ 0x34
 8002fda:	e004      	b.n	8002fe6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002fdc:	f004 fb6c 	bl	80076b8 <HAL_RCC_GetPCLK1Freq>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fe8:	4a23      	ldr	r2, [pc, #140]	@ (8003078 <HAL_InitTick+0xe4>)
 8002fea:	fba2 2303 	umull	r2, r3, r2, r3
 8002fee:	0c9b      	lsrs	r3, r3, #18
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002ff4:	4b21      	ldr	r3, [pc, #132]	@ (800307c <HAL_InitTick+0xe8>)
 8002ff6:	4a22      	ldr	r2, [pc, #136]	@ (8003080 <HAL_InitTick+0xec>)
 8002ff8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002ffa:	4b20      	ldr	r3, [pc, #128]	@ (800307c <HAL_InitTick+0xe8>)
 8002ffc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003000:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003002:	4a1e      	ldr	r2, [pc, #120]	@ (800307c <HAL_InitTick+0xe8>)
 8003004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003006:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003008:	4b1c      	ldr	r3, [pc, #112]	@ (800307c <HAL_InitTick+0xe8>)
 800300a:	2200      	movs	r2, #0
 800300c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800300e:	4b1b      	ldr	r3, [pc, #108]	@ (800307c <HAL_InitTick+0xe8>)
 8003010:	2200      	movs	r2, #0
 8003012:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003014:	4b19      	ldr	r3, [pc, #100]	@ (800307c <HAL_InitTick+0xe8>)
 8003016:	2200      	movs	r2, #0
 8003018:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800301a:	4818      	ldr	r0, [pc, #96]	@ (800307c <HAL_InitTick+0xe8>)
 800301c:	f005 f982 	bl	8008324 <HAL_TIM_Base_Init>
 8003020:	4603      	mov	r3, r0
 8003022:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003026:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800302a:	2b00      	cmp	r3, #0
 800302c:	d11b      	bne.n	8003066 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800302e:	4813      	ldr	r0, [pc, #76]	@ (800307c <HAL_InitTick+0xe8>)
 8003030:	f005 fa38 	bl	80084a4 <HAL_TIM_Base_Start_IT>
 8003034:	4603      	mov	r3, r0
 8003036:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800303a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800303e:	2b00      	cmp	r3, #0
 8003040:	d111      	bne.n	8003066 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003042:	2036      	movs	r0, #54	@ 0x36
 8003044:	f000 fcc0 	bl	80039c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b0f      	cmp	r3, #15
 800304c:	d808      	bhi.n	8003060 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800304e:	2200      	movs	r2, #0
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	2036      	movs	r0, #54	@ 0x36
 8003054:	f000 fc9c 	bl	8003990 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003058:	4a0a      	ldr	r2, [pc, #40]	@ (8003084 <HAL_InitTick+0xf0>)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6013      	str	r3, [r2, #0]
 800305e:	e002      	b.n	8003066 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003066:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800306a:	4618      	mov	r0, r3
 800306c:	3738      	adds	r7, #56	@ 0x38
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40021000 	.word	0x40021000
 8003078:	431bde83 	.word	0x431bde83
 800307c:	20000818 	.word	0x20000818
 8003080:	40001000 	.word	0x40001000
 8003084:	200000b8 	.word	0x200000b8

08003088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800308c:	bf00      	nop
 800308e:	e7fd      	b.n	800308c <NMI_Handler+0x4>

08003090 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003094:	bf00      	nop
 8003096:	e7fd      	b.n	8003094 <HardFault_Handler+0x4>

08003098 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800309c:	bf00      	nop
 800309e:	e7fd      	b.n	800309c <MemManage_Handler+0x4>

080030a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030a4:	bf00      	nop
 80030a6:	e7fd      	b.n	80030a4 <BusFault_Handler+0x4>

080030a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030ac:	bf00      	nop
 80030ae:	e7fd      	b.n	80030ac <UsageFault_Handler+0x4>

080030b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030b4:	bf00      	nop
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030be:	b480      	push	{r7}
 80030c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030c2:	bf00      	nop
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030d0:	bf00      	nop
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030da:	b480      	push	{r7}
 80030dc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030de:	bf00      	nop
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80030ec:	4802      	ldr	r0, [pc, #8]	@ (80030f8 <DMA1_Channel1_IRQHandler+0x10>)
 80030ee:	f001 f98e 	bl	800440e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80030f2:	bf00      	nop
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	200002b8 	.word	0x200002b8

080030fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003100:	4803      	ldr	r0, [pc, #12]	@ (8003110 <TIM6_DAC_IRQHandler+0x14>)
 8003102:	f005 fa3f 	bl	8008584 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8003106:	4803      	ldr	r0, [pc, #12]	@ (8003114 <TIM6_DAC_IRQHandler+0x18>)
 8003108:	f000 fd9f 	bl	8003c4a <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800310c:	bf00      	nop
 800310e:	bd80      	pop	{r7, pc}
 8003110:	20000818 	.word	0x20000818
 8003114:	200002a4 	.word	0x200002a4

08003118 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  return 1;
 800311c:	2301      	movs	r3, #1
}
 800311e:	4618      	mov	r0, r3
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <_kill>:

int _kill(int pid, int sig)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003132:	f007 fb21 	bl	800a778 <__errno>
 8003136:	4603      	mov	r3, r0
 8003138:	2216      	movs	r2, #22
 800313a:	601a      	str	r2, [r3, #0]
  return -1;
 800313c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003140:	4618      	mov	r0, r3
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <_exit>:

void _exit (int status)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003150:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7ff ffe7 	bl	8003128 <_kill>
  while (1) {}    /* Make sure we hang here */
 800315a:	bf00      	nop
 800315c:	e7fd      	b.n	800315a <_exit+0x12>

0800315e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b086      	sub	sp, #24
 8003162:	af00      	add	r7, sp, #0
 8003164:	60f8      	str	r0, [r7, #12]
 8003166:	60b9      	str	r1, [r7, #8]
 8003168:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
 800316e:	e00a      	b.n	8003186 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003170:	f3af 8000 	nop.w
 8003174:	4601      	mov	r1, r0
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	1c5a      	adds	r2, r3, #1
 800317a:	60ba      	str	r2, [r7, #8]
 800317c:	b2ca      	uxtb	r2, r1
 800317e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	3301      	adds	r3, #1
 8003184:	617b      	str	r3, [r7, #20]
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	429a      	cmp	r2, r3
 800318c:	dbf0      	blt.n	8003170 <_read+0x12>
  }

  return len;
 800318e:	687b      	ldr	r3, [r7, #4]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3718      	adds	r7, #24
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031a4:	2300      	movs	r3, #0
 80031a6:	617b      	str	r3, [r7, #20]
 80031a8:	e009      	b.n	80031be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	60ba      	str	r2, [r7, #8]
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	3301      	adds	r3, #1
 80031bc:	617b      	str	r3, [r7, #20]
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	dbf1      	blt.n	80031aa <_write+0x12>
  }
  return len;
 80031c6:	687b      	ldr	r3, [r7, #4]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <_close>:

int _close(int file)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80031d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80031dc:	4618      	mov	r0, r3
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80031f8:	605a      	str	r2, [r3, #4]
  return 0;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <_isatty>:

int _isatty(int file)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003210:	2301      	movs	r3, #1
}
 8003212:	4618      	mov	r0, r3
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800321e:	b480      	push	{r7}
 8003220:	b085      	sub	sp, #20
 8003222:	af00      	add	r7, sp, #0
 8003224:	60f8      	str	r0, [r7, #12]
 8003226:	60b9      	str	r1, [r7, #8]
 8003228:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003240:	4a14      	ldr	r2, [pc, #80]	@ (8003294 <_sbrk+0x5c>)
 8003242:	4b15      	ldr	r3, [pc, #84]	@ (8003298 <_sbrk+0x60>)
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800324c:	4b13      	ldr	r3, [pc, #76]	@ (800329c <_sbrk+0x64>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d102      	bne.n	800325a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003254:	4b11      	ldr	r3, [pc, #68]	@ (800329c <_sbrk+0x64>)
 8003256:	4a12      	ldr	r2, [pc, #72]	@ (80032a0 <_sbrk+0x68>)
 8003258:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800325a:	4b10      	ldr	r3, [pc, #64]	@ (800329c <_sbrk+0x64>)
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4413      	add	r3, r2
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	429a      	cmp	r2, r3
 8003266:	d207      	bcs.n	8003278 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003268:	f007 fa86 	bl	800a778 <__errno>
 800326c:	4603      	mov	r3, r0
 800326e:	220c      	movs	r2, #12
 8003270:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003272:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003276:	e009      	b.n	800328c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003278:	4b08      	ldr	r3, [pc, #32]	@ (800329c <_sbrk+0x64>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800327e:	4b07      	ldr	r3, [pc, #28]	@ (800329c <_sbrk+0x64>)
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4413      	add	r3, r2
 8003286:	4a05      	ldr	r2, [pc, #20]	@ (800329c <_sbrk+0x64>)
 8003288:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800328a:	68fb      	ldr	r3, [r7, #12]
}
 800328c:	4618      	mov	r0, r3
 800328e:	3718      	adds	r7, #24
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	200a0000 	.word	0x200a0000
 8003298:	00000400 	.word	0x00000400
 800329c:	20000864 	.word	0x20000864
 80032a0:	200009b8 	.word	0x200009b8

080032a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80032a8:	4b06      	ldr	r3, [pc, #24]	@ (80032c4 <SystemInit+0x20>)
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ae:	4a05      	ldr	r2, [pc, #20]	@ (80032c4 <SystemInit+0x20>)
 80032b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80032b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80032b8:	bf00      	nop
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	e000ed00 	.word	0xe000ed00

080032c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80032c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003300 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80032cc:	f7ff ffea 	bl	80032a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032d0:	480c      	ldr	r0, [pc, #48]	@ (8003304 <LoopForever+0x6>)
  ldr r1, =_edata
 80032d2:	490d      	ldr	r1, [pc, #52]	@ (8003308 <LoopForever+0xa>)
  ldr r2, =_sidata
 80032d4:	4a0d      	ldr	r2, [pc, #52]	@ (800330c <LoopForever+0xe>)
  movs r3, #0
 80032d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032d8:	e002      	b.n	80032e0 <LoopCopyDataInit>

080032da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032de:	3304      	adds	r3, #4

080032e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032e4:	d3f9      	bcc.n	80032da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003310 <LoopForever+0x12>)
  ldr r4, =_ebss
 80032e8:	4c0a      	ldr	r4, [pc, #40]	@ (8003314 <LoopForever+0x16>)
  movs r3, #0
 80032ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032ec:	e001      	b.n	80032f2 <LoopFillZerobss>

080032ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032f0:	3204      	adds	r2, #4

080032f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032f4:	d3fb      	bcc.n	80032ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80032f6:	f007 fa45 	bl	800a784 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80032fa:	f7fe fa51 	bl	80017a0 <main>

080032fe <LoopForever>:

LoopForever:
    b LoopForever
 80032fe:	e7fe      	b.n	80032fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003300:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8003304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003308:	20000288 	.word	0x20000288
  ldr r2, =_sidata
 800330c:	0800d754 	.word	0x0800d754
  ldr r2, =_sbss
 8003310:	20000288 	.word	0x20000288
  ldr r4, =_ebss
 8003314:	200009b8 	.word	0x200009b8

08003318 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003318:	e7fe      	b.n	8003318 <ADC1_IRQHandler>

0800331a <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 800331a:	b580      	push	{r7, lr}
 800331c:	b084      	sub	sp, #16
 800331e:	af00      	add	r7, sp, #0
 8003320:	4603      	mov	r3, r0
 8003322:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003324:	2300      	movs	r3, #0
 8003326:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003328:	2110      	movs	r1, #16
 800332a:	20d4      	movs	r0, #212	@ 0xd4
 800332c:	f7fe fe66 	bl	8001ffc <SENSOR_IO_Read>
 8003330:	4603      	mov	r3, r0
 8003332:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8003334:	88fb      	ldrh	r3, [r7, #6]
 8003336:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8003338:	7bbb      	ldrb	r3, [r7, #14]
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8003340:	7bba      	ldrb	r2, [r7, #14]
 8003342:	7bfb      	ldrb	r3, [r7, #15]
 8003344:	4313      	orrs	r3, r2
 8003346:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8003348:	7bbb      	ldrb	r3, [r7, #14]
 800334a:	461a      	mov	r2, r3
 800334c:	2110      	movs	r1, #16
 800334e:	20d4      	movs	r0, #212	@ 0xd4
 8003350:	f7fe fe3a 	bl	8001fc8 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8003354:	2112      	movs	r1, #18
 8003356:	20d4      	movs	r0, #212	@ 0xd4
 8003358:	f7fe fe50 	bl	8001ffc <SENSOR_IO_Read>
 800335c:	4603      	mov	r3, r0
 800335e:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8003360:	88fb      	ldrh	r3, [r7, #6]
 8003362:	0a1b      	lsrs	r3, r3, #8
 8003364:	b29b      	uxth	r3, r3
 8003366:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8003368:	7bbb      	ldrb	r3, [r7, #14]
 800336a:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 800336e:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8003370:	7bba      	ldrb	r2, [r7, #14]
 8003372:	7bfb      	ldrb	r3, [r7, #15]
 8003374:	4313      	orrs	r3, r2
 8003376:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8003378:	7bbb      	ldrb	r3, [r7, #14]
 800337a:	461a      	mov	r2, r3
 800337c:	2112      	movs	r1, #18
 800337e:	20d4      	movs	r0, #212	@ 0xd4
 8003380:	f7fe fe22 	bl	8001fc8 <SENSOR_IO_Write>
}
 8003384:	bf00      	nop
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8003392:	2300      	movs	r3, #0
 8003394:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003396:	2110      	movs	r1, #16
 8003398:	20d4      	movs	r0, #212	@ 0xd4
 800339a:	f7fe fe2f 	bl	8001ffc <SENSOR_IO_Read>
 800339e:	4603      	mov	r3, r0
 80033a0:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80033a2:	79fb      	ldrb	r3, [r7, #7]
 80033a4:	f003 030f 	and.w	r3, r3, #15
 80033a8:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 80033aa:	79fb      	ldrb	r3, [r7, #7]
 80033ac:	461a      	mov	r2, r3
 80033ae:	2110      	movs	r1, #16
 80033b0:	20d4      	movs	r0, #212	@ 0xd4
 80033b2:	f7fe fe09 	bl	8001fc8 <SENSOR_IO_Write>
}
 80033b6:	bf00      	nop
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80033be:	b580      	push	{r7, lr}
 80033c0:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80033c2:	f7fe fdf7 	bl	8001fb4 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80033c6:	210f      	movs	r1, #15
 80033c8:	20d4      	movs	r0, #212	@ 0xd4
 80033ca:	f7fe fe17 	bl	8001ffc <SENSOR_IO_Read>
 80033ce:	4603      	mov	r3, r0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80033de:	2300      	movs	r3, #0
 80033e0:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80033e2:	2115      	movs	r1, #21
 80033e4:	20d4      	movs	r0, #212	@ 0xd4
 80033e6:	f7fe fe09 	bl	8001ffc <SENSOR_IO_Read>
 80033ea:	4603      	mov	r3, r0
 80033ec:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
 80033f0:	f023 0310 	bic.w	r3, r3, #16
 80033f4:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80033f6:	88fb      	ldrh	r3, [r7, #6]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d003      	beq.n	8003404 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80033fc:	7bfb      	ldrb	r3, [r7, #15]
 80033fe:	f043 0310 	orr.w	r3, r3, #16
 8003402:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8003404:	7bfb      	ldrb	r3, [r7, #15]
 8003406:	461a      	mov	r2, r3
 8003408:	2115      	movs	r1, #21
 800340a:	20d4      	movs	r0, #212	@ 0xd4
 800340c:	f7fe fddc 	bl	8001fc8 <SENSOR_IO_Write>
}
 8003410:	bf00      	nop
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b088      	sub	sp, #32
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8003420:	2300      	movs	r3, #0
 8003422:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003424:	2300      	movs	r3, #0
 8003426:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003428:	f04f 0300 	mov.w	r3, #0
 800342c:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800342e:	2110      	movs	r1, #16
 8003430:	20d4      	movs	r0, #212	@ 0xd4
 8003432:	f7fe fde3 	bl	8001ffc <SENSOR_IO_Read>
 8003436:	4603      	mov	r3, r0
 8003438:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800343a:	f107 0208 	add.w	r2, r7, #8
 800343e:	2306      	movs	r3, #6
 8003440:	2128      	movs	r1, #40	@ 0x28
 8003442:	20d4      	movs	r0, #212	@ 0xd4
 8003444:	f7fe fdf8 	bl	8002038 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003448:	2300      	movs	r3, #0
 800344a:	77fb      	strb	r3, [r7, #31]
 800344c:	e01a      	b.n	8003484 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800344e:	7ffb      	ldrb	r3, [r7, #31]
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	3301      	adds	r3, #1
 8003454:	3320      	adds	r3, #32
 8003456:	443b      	add	r3, r7
 8003458:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800345c:	021b      	lsls	r3, r3, #8
 800345e:	b29b      	uxth	r3, r3
 8003460:	7ffa      	ldrb	r2, [r7, #31]
 8003462:	0052      	lsls	r2, r2, #1
 8003464:	3220      	adds	r2, #32
 8003466:	443a      	add	r2, r7
 8003468:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 800346c:	4413      	add	r3, r2
 800346e:	b29a      	uxth	r2, r3
 8003470:	7ffb      	ldrb	r3, [r7, #31]
 8003472:	b212      	sxth	r2, r2
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	3320      	adds	r3, #32
 8003478:	443b      	add	r3, r7
 800347a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800347e:	7ffb      	ldrb	r3, [r7, #31]
 8003480:	3301      	adds	r3, #1
 8003482:	77fb      	strb	r3, [r7, #31]
 8003484:	7ffb      	ldrb	r3, [r7, #31]
 8003486:	2b02      	cmp	r3, #2
 8003488:	d9e1      	bls.n	800344e <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800348a:	7dfb      	ldrb	r3, [r7, #23]
 800348c:	f003 030c 	and.w	r3, r3, #12
 8003490:	2b0c      	cmp	r3, #12
 8003492:	d829      	bhi.n	80034e8 <LSM6DSL_AccReadXYZ+0xd0>
 8003494:	a201      	add	r2, pc, #4	@ (adr r2, 800349c <LSM6DSL_AccReadXYZ+0x84>)
 8003496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349a:	bf00      	nop
 800349c:	080034d1 	.word	0x080034d1
 80034a0:	080034e9 	.word	0x080034e9
 80034a4:	080034e9 	.word	0x080034e9
 80034a8:	080034e9 	.word	0x080034e9
 80034ac:	080034e3 	.word	0x080034e3
 80034b0:	080034e9 	.word	0x080034e9
 80034b4:	080034e9 	.word	0x080034e9
 80034b8:	080034e9 	.word	0x080034e9
 80034bc:	080034d7 	.word	0x080034d7
 80034c0:	080034e9 	.word	0x080034e9
 80034c4:	080034e9 	.word	0x080034e9
 80034c8:	080034e9 	.word	0x080034e9
 80034cc:	080034dd 	.word	0x080034dd
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80034d0:	4b18      	ldr	r3, [pc, #96]	@ (8003534 <LSM6DSL_AccReadXYZ+0x11c>)
 80034d2:	61bb      	str	r3, [r7, #24]
    break;
 80034d4:	e008      	b.n	80034e8 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80034d6:	4b18      	ldr	r3, [pc, #96]	@ (8003538 <LSM6DSL_AccReadXYZ+0x120>)
 80034d8:	61bb      	str	r3, [r7, #24]
    break;
 80034da:	e005      	b.n	80034e8 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80034dc:	4b17      	ldr	r3, [pc, #92]	@ (800353c <LSM6DSL_AccReadXYZ+0x124>)
 80034de:	61bb      	str	r3, [r7, #24]
    break;
 80034e0:	e002      	b.n	80034e8 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80034e2:	4b17      	ldr	r3, [pc, #92]	@ (8003540 <LSM6DSL_AccReadXYZ+0x128>)
 80034e4:	61bb      	str	r3, [r7, #24]
    break;    
 80034e6:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80034e8:	2300      	movs	r3, #0
 80034ea:	77fb      	strb	r3, [r7, #31]
 80034ec:	e01a      	b.n	8003524 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80034ee:	7ffb      	ldrb	r3, [r7, #31]
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	3320      	adds	r3, #32
 80034f4:	443b      	add	r3, r7
 80034f6:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80034fa:	ee07 3a90 	vmov	s15, r3
 80034fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003502:	edd7 7a06 	vldr	s15, [r7, #24]
 8003506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800350a:	7ffb      	ldrb	r3, [r7, #31]
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	4413      	add	r3, r2
 8003512:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003516:	ee17 2a90 	vmov	r2, s15
 800351a:	b212      	sxth	r2, r2
 800351c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800351e:	7ffb      	ldrb	r3, [r7, #31]
 8003520:	3301      	adds	r3, #1
 8003522:	77fb      	strb	r3, [r7, #31]
 8003524:	7ffb      	ldrb	r3, [r7, #31]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d9e1      	bls.n	80034ee <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 800352a:	bf00      	nop
 800352c:	bf00      	nop
 800352e:	3720      	adds	r7, #32
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	3d79db23 	.word	0x3d79db23
 8003538:	3df9db23 	.word	0x3df9db23
 800353c:	3e79db23 	.word	0x3e79db23
 8003540:	3ef9db23 	.word	0x3ef9db23

08003544 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	4603      	mov	r3, r0
 800354c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800354e:	2300      	movs	r3, #0
 8003550:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8003552:	2111      	movs	r1, #17
 8003554:	20d4      	movs	r0, #212	@ 0xd4
 8003556:	f7fe fd51 	bl	8001ffc <SENSOR_IO_Read>
 800355a:	4603      	mov	r3, r0
 800355c:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800355e:	88fb      	ldrh	r3, [r7, #6]
 8003560:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8003562:	7bbb      	ldrb	r3, [r7, #14]
 8003564:	f003 0303 	and.w	r3, r3, #3
 8003568:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800356a:	7bba      	ldrb	r2, [r7, #14]
 800356c:	7bfb      	ldrb	r3, [r7, #15]
 800356e:	4313      	orrs	r3, r2
 8003570:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8003572:	7bbb      	ldrb	r3, [r7, #14]
 8003574:	461a      	mov	r2, r3
 8003576:	2111      	movs	r1, #17
 8003578:	20d4      	movs	r0, #212	@ 0xd4
 800357a:	f7fe fd25 	bl	8001fc8 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800357e:	2112      	movs	r1, #18
 8003580:	20d4      	movs	r0, #212	@ 0xd4
 8003582:	f7fe fd3b 	bl	8001ffc <SENSOR_IO_Read>
 8003586:	4603      	mov	r3, r0
 8003588:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800358a:	88fb      	ldrh	r3, [r7, #6]
 800358c:	0a1b      	lsrs	r3, r3, #8
 800358e:	b29b      	uxth	r3, r3
 8003590:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8003592:	7bbb      	ldrb	r3, [r7, #14]
 8003594:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8003598:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800359a:	7bba      	ldrb	r2, [r7, #14]
 800359c:	7bfb      	ldrb	r3, [r7, #15]
 800359e:	4313      	orrs	r3, r2
 80035a0:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80035a2:	7bbb      	ldrb	r3, [r7, #14]
 80035a4:	461a      	mov	r2, r3
 80035a6:	2112      	movs	r1, #18
 80035a8:	20d4      	movs	r0, #212	@ 0xd4
 80035aa:	f7fe fd0d 	bl	8001fc8 <SENSOR_IO_Write>
}
 80035ae:	bf00      	nop
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b082      	sub	sp, #8
 80035ba:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80035bc:	2300      	movs	r3, #0
 80035be:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80035c0:	2111      	movs	r1, #17
 80035c2:	20d4      	movs	r0, #212	@ 0xd4
 80035c4:	f7fe fd1a 	bl	8001ffc <SENSOR_IO_Read>
 80035c8:	4603      	mov	r3, r0
 80035ca:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80035cc:	79fb      	ldrb	r3, [r7, #7]
 80035ce:	f003 030f 	and.w	r3, r3, #15
 80035d2:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 80035d4:	79fb      	ldrb	r3, [r7, #7]
 80035d6:	461a      	mov	r2, r3
 80035d8:	2111      	movs	r1, #17
 80035da:	20d4      	movs	r0, #212	@ 0xd4
 80035dc:	f7fe fcf4 	bl	8001fc8 <SENSOR_IO_Write>
}
 80035e0:	bf00      	nop
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80035ec:	f7fe fce2 	bl	8001fb4 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 80035f0:	210f      	movs	r1, #15
 80035f2:	20d4      	movs	r0, #212	@ 0xd4
 80035f4:	f7fe fd02 	bl	8001ffc <SENSOR_IO_Read>
 80035f8:	4603      	mov	r3, r0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	bd80      	pop	{r7, pc}

080035fe <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 80035fe:	b580      	push	{r7, lr}
 8003600:	b084      	sub	sp, #16
 8003602:	af00      	add	r7, sp, #0
 8003604:	4603      	mov	r3, r0
 8003606:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003608:	2300      	movs	r3, #0
 800360a:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 800360c:	2116      	movs	r1, #22
 800360e:	20d4      	movs	r0, #212	@ 0xd4
 8003610:	f7fe fcf4 	bl	8001ffc <SENSOR_IO_Read>
 8003614:	4603      	mov	r3, r0
 8003616:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8003618:	7bfb      	ldrb	r3, [r7, #15]
 800361a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800361e:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8003620:	88fb      	ldrh	r3, [r7, #6]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8003626:	7bfb      	ldrb	r3, [r7, #15]
 8003628:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800362c:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 800362e:	7bfb      	ldrb	r3, [r7, #15]
 8003630:	461a      	mov	r2, r3
 8003632:	2116      	movs	r1, #22
 8003634:	20d4      	movs	r0, #212	@ 0xd4
 8003636:	f7fe fcc7 	bl	8001fc8 <SENSOR_IO_Write>
}
 800363a:	bf00      	nop
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b088      	sub	sp, #32
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 800364c:	2300      	movs	r3, #0
 800364e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003650:	2300      	movs	r3, #0
 8003652:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003654:	f04f 0300 	mov.w	r3, #0
 8003658:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800365a:	2111      	movs	r1, #17
 800365c:	20d4      	movs	r0, #212	@ 0xd4
 800365e:	f7fe fccd 	bl	8001ffc <SENSOR_IO_Read>
 8003662:	4603      	mov	r3, r0
 8003664:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8003666:	f107 0208 	add.w	r2, r7, #8
 800366a:	2306      	movs	r3, #6
 800366c:	2122      	movs	r1, #34	@ 0x22
 800366e:	20d4      	movs	r0, #212	@ 0xd4
 8003670:	f7fe fce2 	bl	8002038 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003674:	2300      	movs	r3, #0
 8003676:	77fb      	strb	r3, [r7, #31]
 8003678:	e01a      	b.n	80036b0 <LSM6DSL_GyroReadXYZAngRate+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800367a:	7ffb      	ldrb	r3, [r7, #31]
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	3301      	adds	r3, #1
 8003680:	3320      	adds	r3, #32
 8003682:	443b      	add	r3, r7
 8003684:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003688:	021b      	lsls	r3, r3, #8
 800368a:	b29b      	uxth	r3, r3
 800368c:	7ffa      	ldrb	r2, [r7, #31]
 800368e:	0052      	lsls	r2, r2, #1
 8003690:	3220      	adds	r2, #32
 8003692:	443a      	add	r2, r7
 8003694:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8003698:	4413      	add	r3, r2
 800369a:	b29a      	uxth	r2, r3
 800369c:	7ffb      	ldrb	r3, [r7, #31]
 800369e:	b212      	sxth	r2, r2
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	3320      	adds	r3, #32
 80036a4:	443b      	add	r3, r7
 80036a6:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80036aa:	7ffb      	ldrb	r3, [r7, #31]
 80036ac:	3301      	adds	r3, #1
 80036ae:	77fb      	strb	r3, [r7, #31]
 80036b0:	7ffb      	ldrb	r3, [r7, #31]
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d9e1      	bls.n	800367a <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 80036b6:	7dfb      	ldrb	r3, [r7, #23]
 80036b8:	f003 030c 	and.w	r3, r3, #12
 80036bc:	2b0c      	cmp	r3, #12
 80036be:	d829      	bhi.n	8003714 <LSM6DSL_GyroReadXYZAngRate+0xd0>
 80036c0:	a201      	add	r2, pc, #4	@ (adr r2, 80036c8 <LSM6DSL_GyroReadXYZAngRate+0x84>)
 80036c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c6:	bf00      	nop
 80036c8:	080036fd 	.word	0x080036fd
 80036cc:	08003715 	.word	0x08003715
 80036d0:	08003715 	.word	0x08003715
 80036d4:	08003715 	.word	0x08003715
 80036d8:	08003703 	.word	0x08003703
 80036dc:	08003715 	.word	0x08003715
 80036e0:	08003715 	.word	0x08003715
 80036e4:	08003715 	.word	0x08003715
 80036e8:	08003709 	.word	0x08003709
 80036ec:	08003715 	.word	0x08003715
 80036f0:	08003715 	.word	0x08003715
 80036f4:	08003715 	.word	0x08003715
 80036f8:	0800370f 	.word	0x0800370f
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 80036fc:	4b16      	ldr	r3, [pc, #88]	@ (8003758 <LSM6DSL_GyroReadXYZAngRate+0x114>)
 80036fe:	61bb      	str	r3, [r7, #24]
    break;
 8003700:	e008      	b.n	8003714 <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8003702:	4b16      	ldr	r3, [pc, #88]	@ (800375c <LSM6DSL_GyroReadXYZAngRate+0x118>)
 8003704:	61bb      	str	r3, [r7, #24]
    break;
 8003706:	e005      	b.n	8003714 <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8003708:	4b15      	ldr	r3, [pc, #84]	@ (8003760 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 800370a:	61bb      	str	r3, [r7, #24]
    break;
 800370c:	e002      	b.n	8003714 <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 800370e:	4b15      	ldr	r3, [pc, #84]	@ (8003764 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8003710:	61bb      	str	r3, [r7, #24]
    break;    
 8003712:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8003714:	2300      	movs	r3, #0
 8003716:	77fb      	strb	r3, [r7, #31]
 8003718:	e016      	b.n	8003748 <LSM6DSL_GyroReadXYZAngRate+0x104>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 800371a:	7ffb      	ldrb	r3, [r7, #31]
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	3320      	adds	r3, #32
 8003720:	443b      	add	r3, r7
 8003722:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003726:	ee07 3a90 	vmov	s15, r3
 800372a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800372e:	7ffb      	ldrb	r3, [r7, #31]
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	4413      	add	r3, r2
 8003736:	edd7 7a06 	vldr	s15, [r7, #24]
 800373a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800373e:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8003742:	7ffb      	ldrb	r3, [r7, #31]
 8003744:	3301      	adds	r3, #1
 8003746:	77fb      	strb	r3, [r7, #31]
 8003748:	7ffb      	ldrb	r3, [r7, #31]
 800374a:	2b02      	cmp	r3, #2
 800374c:	d9e5      	bls.n	800371a <LSM6DSL_GyroReadXYZAngRate+0xd6>
  }
}
 800374e:	bf00      	nop
 8003750:	bf00      	nop
 8003752:	3720      	adds	r7, #32
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	410c0000 	.word	0x410c0000
 800375c:	418c0000 	.word	0x418c0000
 8003760:	420c0000 	.word	0x420c0000
 8003764:	428c0000 	.word	0x428c0000

08003768 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800376e:	2300      	movs	r3, #0
 8003770:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003772:	2003      	movs	r0, #3
 8003774:	f000 f901 	bl	800397a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003778:	200f      	movs	r0, #15
 800377a:	f7ff fc0b 	bl	8002f94 <HAL_InitTick>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d002      	beq.n	800378a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	71fb      	strb	r3, [r7, #7]
 8003788:	e001      	b.n	800378e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800378a:	f7ff f9db 	bl	8002b44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800378e:	79fb      	ldrb	r3, [r7, #7]
}
 8003790:	4618      	mov	r0, r3
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800379c:	4b06      	ldr	r3, [pc, #24]	@ (80037b8 <HAL_IncTick+0x20>)
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	461a      	mov	r2, r3
 80037a2:	4b06      	ldr	r3, [pc, #24]	@ (80037bc <HAL_IncTick+0x24>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4413      	add	r3, r2
 80037a8:	4a04      	ldr	r2, [pc, #16]	@ (80037bc <HAL_IncTick+0x24>)
 80037aa:	6013      	str	r3, [r2, #0]
}
 80037ac:	bf00      	nop
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	200000bc 	.word	0x200000bc
 80037bc:	20000868 	.word	0x20000868

080037c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
  return uwTick;
 80037c4:	4b03      	ldr	r3, [pc, #12]	@ (80037d4 <HAL_GetTick+0x14>)
 80037c6:	681b      	ldr	r3, [r3, #0]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	20000868 	.word	0x20000868

080037d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037e0:	f7ff ffee 	bl	80037c0 <HAL_GetTick>
 80037e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037f0:	d005      	beq.n	80037fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80037f2:	4b0a      	ldr	r3, [pc, #40]	@ (800381c <HAL_Delay+0x44>)
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	461a      	mov	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4413      	add	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037fe:	bf00      	nop
 8003800:	f7ff ffde 	bl	80037c0 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	429a      	cmp	r2, r3
 800380e:	d8f7      	bhi.n	8003800 <HAL_Delay+0x28>
  {
  }
}
 8003810:	bf00      	nop
 8003812:	bf00      	nop
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	200000bc 	.word	0x200000bc

08003820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003830:	4b0c      	ldr	r3, [pc, #48]	@ (8003864 <__NVIC_SetPriorityGrouping+0x44>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800383c:	4013      	ands	r3, r2
 800383e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003848:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800384c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003852:	4a04      	ldr	r2, [pc, #16]	@ (8003864 <__NVIC_SetPriorityGrouping+0x44>)
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	60d3      	str	r3, [r2, #12]
}
 8003858:	bf00      	nop
 800385a:	3714      	adds	r7, #20
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	e000ed00 	.word	0xe000ed00

08003868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800386c:	4b04      	ldr	r3, [pc, #16]	@ (8003880 <__NVIC_GetPriorityGrouping+0x18>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	0a1b      	lsrs	r3, r3, #8
 8003872:	f003 0307 	and.w	r3, r3, #7
}
 8003876:	4618      	mov	r0, r3
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	e000ed00 	.word	0xe000ed00

08003884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800388e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003892:	2b00      	cmp	r3, #0
 8003894:	db0b      	blt.n	80038ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003896:	79fb      	ldrb	r3, [r7, #7]
 8003898:	f003 021f 	and.w	r2, r3, #31
 800389c:	4907      	ldr	r1, [pc, #28]	@ (80038bc <__NVIC_EnableIRQ+0x38>)
 800389e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a2:	095b      	lsrs	r3, r3, #5
 80038a4:	2001      	movs	r0, #1
 80038a6:	fa00 f202 	lsl.w	r2, r0, r2
 80038aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	e000e100 	.word	0xe000e100

080038c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	4603      	mov	r3, r0
 80038c8:	6039      	str	r1, [r7, #0]
 80038ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	db0a      	blt.n	80038ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	490c      	ldr	r1, [pc, #48]	@ (800390c <__NVIC_SetPriority+0x4c>)
 80038da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038de:	0112      	lsls	r2, r2, #4
 80038e0:	b2d2      	uxtb	r2, r2
 80038e2:	440b      	add	r3, r1
 80038e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038e8:	e00a      	b.n	8003900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	4908      	ldr	r1, [pc, #32]	@ (8003910 <__NVIC_SetPriority+0x50>)
 80038f0:	79fb      	ldrb	r3, [r7, #7]
 80038f2:	f003 030f 	and.w	r3, r3, #15
 80038f6:	3b04      	subs	r3, #4
 80038f8:	0112      	lsls	r2, r2, #4
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	440b      	add	r3, r1
 80038fe:	761a      	strb	r2, [r3, #24]
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	e000e100 	.word	0xe000e100
 8003910:	e000ed00 	.word	0xe000ed00

08003914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003914:	b480      	push	{r7}
 8003916:	b089      	sub	sp, #36	@ 0x24
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f003 0307 	and.w	r3, r3, #7
 8003926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	f1c3 0307 	rsb	r3, r3, #7
 800392e:	2b04      	cmp	r3, #4
 8003930:	bf28      	it	cs
 8003932:	2304      	movcs	r3, #4
 8003934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	3304      	adds	r3, #4
 800393a:	2b06      	cmp	r3, #6
 800393c:	d902      	bls.n	8003944 <NVIC_EncodePriority+0x30>
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	3b03      	subs	r3, #3
 8003942:	e000      	b.n	8003946 <NVIC_EncodePriority+0x32>
 8003944:	2300      	movs	r3, #0
 8003946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003948:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	fa02 f303 	lsl.w	r3, r2, r3
 8003952:	43da      	mvns	r2, r3
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	401a      	ands	r2, r3
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800395c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	fa01 f303 	lsl.w	r3, r1, r3
 8003966:	43d9      	mvns	r1, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800396c:	4313      	orrs	r3, r2
         );
}
 800396e:	4618      	mov	r0, r3
 8003970:	3724      	adds	r7, #36	@ 0x24
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b082      	sub	sp, #8
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7ff ff4c 	bl	8003820 <__NVIC_SetPriorityGrouping>
}
 8003988:	bf00      	nop
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	4603      	mov	r3, r0
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
 800399c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800399e:	2300      	movs	r3, #0
 80039a0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80039a2:	f7ff ff61 	bl	8003868 <__NVIC_GetPriorityGrouping>
 80039a6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	68b9      	ldr	r1, [r7, #8]
 80039ac:	6978      	ldr	r0, [r7, #20]
 80039ae:	f7ff ffb1 	bl	8003914 <NVIC_EncodePriority>
 80039b2:	4602      	mov	r2, r0
 80039b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039b8:	4611      	mov	r1, r2
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7ff ff80 	bl	80038c0 <__NVIC_SetPriority>
}
 80039c0:	bf00      	nop
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7ff ff54 	bl	8003884 <__NVIC_EnableIRQ>
}
 80039dc:	bf00      	nop
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e014      	b.n	8003a20 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	791b      	ldrb	r3, [r3, #4]
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d105      	bne.n	8003a0c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7ff f8c0 	bl	8002b8c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3708      	adds	r7, #8
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
 8003a34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8003a36:	2300      	movs	r3, #0
 8003a38:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	795b      	ldrb	r3, [r3, #5]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d101      	bne.n	8003a46 <HAL_DAC_Start_DMA+0x1e>
 8003a42:	2302      	movs	r3, #2
 8003a44:	e0ab      	b.n	8003b9e <HAL_DAC_Start_DMA+0x176>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2202      	movs	r2, #2
 8003a50:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d12f      	bne.n	8003ab8 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	4a52      	ldr	r2, [pc, #328]	@ (8003ba8 <HAL_DAC_Start_DMA+0x180>)
 8003a5e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	4a51      	ldr	r2, [pc, #324]	@ (8003bac <HAL_DAC_Start_DMA+0x184>)
 8003a66:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	4a50      	ldr	r2, [pc, #320]	@ (8003bb0 <HAL_DAC_Start_DMA+0x188>)
 8003a6e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003a7e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003a80:	6a3b      	ldr	r3, [r7, #32]
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	d013      	beq.n	8003aae <HAL_DAC_Start_DMA+0x86>
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	d845      	bhi.n	8003b18 <HAL_DAC_Start_DMA+0xf0>
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <HAL_DAC_Start_DMA+0x72>
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	2b04      	cmp	r3, #4
 8003a96:	d005      	beq.n	8003aa4 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003a98:	e03e      	b.n	8003b18 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	3308      	adds	r3, #8
 8003aa0:	613b      	str	r3, [r7, #16]
        break;
 8003aa2:	e03c      	b.n	8003b1e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	330c      	adds	r3, #12
 8003aaa:	613b      	str	r3, [r7, #16]
        break;
 8003aac:	e037      	b.n	8003b1e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	3310      	adds	r3, #16
 8003ab4:	613b      	str	r3, [r7, #16]
        break;
 8003ab6:	e032      	b.n	8003b1e <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	4a3d      	ldr	r2, [pc, #244]	@ (8003bb4 <HAL_DAC_Start_DMA+0x18c>)
 8003abe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	4a3c      	ldr	r2, [pc, #240]	@ (8003bb8 <HAL_DAC_Start_DMA+0x190>)
 8003ac6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	4a3b      	ldr	r2, [pc, #236]	@ (8003bbc <HAL_DAC_Start_DMA+0x194>)
 8003ace:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003ade:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
 8003ae2:	2b08      	cmp	r3, #8
 8003ae4:	d013      	beq.n	8003b0e <HAL_DAC_Start_DMA+0xe6>
 8003ae6:	6a3b      	ldr	r3, [r7, #32]
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d817      	bhi.n	8003b1c <HAL_DAC_Start_DMA+0xf4>
 8003aec:	6a3b      	ldr	r3, [r7, #32]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_DAC_Start_DMA+0xd2>
 8003af2:	6a3b      	ldr	r3, [r7, #32]
 8003af4:	2b04      	cmp	r3, #4
 8003af6:	d005      	beq.n	8003b04 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003af8:	e010      	b.n	8003b1c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	3314      	adds	r3, #20
 8003b00:	613b      	str	r3, [r7, #16]
        break;
 8003b02:	e00c      	b.n	8003b1e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	3318      	adds	r3, #24
 8003b0a:	613b      	str	r3, [r7, #16]
        break;
 8003b0c:	e007      	b.n	8003b1e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	331c      	adds	r3, #28
 8003b14:	613b      	str	r3, [r7, #16]
        break;
 8003b16:	e002      	b.n	8003b1e <HAL_DAC_Start_DMA+0xf6>
        break;
 8003b18:	bf00      	nop
 8003b1a:	e000      	b.n	8003b1e <HAL_DAC_Start_DMA+0xf6>
        break;
 8003b1c:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d111      	bne.n	8003b48 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b32:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6898      	ldr	r0, [r3, #8]
 8003b38:	6879      	ldr	r1, [r7, #4]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	f000 fb8f 	bl	8004260 <HAL_DMA_Start_IT>
 8003b42:	4603      	mov	r3, r0
 8003b44:	75fb      	strb	r3, [r7, #23]
 8003b46:	e010      	b.n	8003b6a <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8003b56:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	68d8      	ldr	r0, [r3, #12]
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	f000 fb7d 	bl	8004260 <HAL_DMA_Start_IT>
 8003b66:	4603      	mov	r3, r0
 8003b68:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003b70:	7dfb      	ldrb	r3, [r7, #23]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10c      	bne.n	8003b90 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6819      	ldr	r1, [r3, #0]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f003 0310 	and.w	r3, r3, #16
 8003b82:	2201      	movs	r2, #1
 8003b84:	409a      	lsls	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	e005      	b.n	8003b9c <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	f043 0204 	orr.w	r2, r3, #4
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	08003fe9 	.word	0x08003fe9
 8003bac:	0800400b 	.word	0x0800400b
 8003bb0:	08004027 	.word	0x08004027
 8003bb4:	080040a5 	.word	0x080040a5
 8003bb8:	080040c7 	.word	0x080040c7
 8003bbc:	080040e3 	.word	0x080040e3

08003bc0 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6819      	ldr	r1, [r3, #0]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	f003 0310 	and.w	r3, r3, #16
 8003bd6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003bda:	fa02 f303 	lsl.w	r3, r2, r3
 8003bde:	43da      	mvns	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	400a      	ands	r2, r1
 8003be6:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6819      	ldr	r1, [r3, #0]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	f003 0310 	and.w	r3, r3, #16
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	43da      	mvns	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	400a      	ands	r2, r1
 8003c02:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10d      	bne.n	8003c26 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 fba1 	bl	8004356 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	e00c      	b.n	8003c40 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 fb93 	bl	8004356 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8003c3e:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b082      	sub	sp, #8
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c60:	d120      	bne.n	8003ca4 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c70:	d118      	bne.n	8003ca4 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2204      	movs	r2, #4
 8003c76:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	f043 0201 	orr.w	r2, r3, #1
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c8c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c9c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f84b 	bl	8003d3a <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003cae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cb2:	d120      	bne.n	8003cf6 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003cbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cc2:	d118      	bne.n	8003cf6 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2204      	movs	r2, #4
 8003cc8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	f043 0202 	orr.w	r2, r3, #2
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003cde:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003cee:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 f9cd 	bl	8004090 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8003cf6:	bf00      	nop
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
	...

08003d50 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b088      	sub	sp, #32
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	795b      	ldrb	r3, [r3, #5]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_DAC_ConfigChannel+0x1c>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e137      	b.n	8003fdc <HAL_DAC_ConfigChannel+0x28c>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2202      	movs	r2, #2
 8003d76:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	2b04      	cmp	r3, #4
 8003d7e:	f040 8081 	bne.w	8003e84 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003d82:	f7ff fd1d 	bl	80037c0 <HAL_GetTick>
 8003d86:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d140      	bne.n	8003e10 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003d8e:	e018      	b.n	8003dc2 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003d90:	f7ff fd16 	bl	80037c0 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d911      	bls.n	8003dc2 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003da4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00a      	beq.n	8003dc2 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	f043 0208 	orr.w	r2, r3, #8
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2203      	movs	r2, #3
 8003dbc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e10c      	b.n	8003fdc <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1df      	bne.n	8003d90 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8003dd0:	2001      	movs	r0, #1
 8003dd2:	f7ff fd01 	bl	80037d8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	69d2      	ldr	r2, [r2, #28]
 8003dde:	641a      	str	r2, [r3, #64]	@ 0x40
 8003de0:	e023      	b.n	8003e2a <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003de2:	f7ff fced 	bl	80037c0 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d90f      	bls.n	8003e10 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	da0a      	bge.n	8003e10 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	f043 0208 	orr.w	r2, r3, #8
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2203      	movs	r2, #3
 8003e0a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e0e5      	b.n	8003fdc <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	dbe3      	blt.n	8003de2 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8003e1a:	2001      	movs	r0, #1
 8003e1c:	f7ff fcdc 	bl	80037d8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	69d2      	ldr	r2, [r2, #28]
 8003e28:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f003 0310 	and.w	r3, r3, #16
 8003e36:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3e:	43db      	mvns	r3, r3
 8003e40:	ea02 0103 	and.w	r1, r2, r3
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	6a1a      	ldr	r2, [r3, #32]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f003 0310 	and.w	r3, r3, #16
 8003e4e:	409a      	lsls	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f003 0310 	and.w	r3, r3, #16
 8003e64:	21ff      	movs	r1, #255	@ 0xff
 8003e66:	fa01 f303 	lsl.w	r3, r1, r3
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	ea02 0103 	and.w	r1, r2, r3
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f003 0310 	and.w	r3, r3, #16
 8003e7a:	409a      	lsls	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d11d      	bne.n	8003ec8 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e92:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f003 0310 	and.w	r3, r3, #16
 8003e9a:	221f      	movs	r2, #31
 8003e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea0:	43db      	mvns	r3, r3
 8003ea2:	69fa      	ldr	r2, [r7, #28]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f003 0310 	and.w	r3, r3, #16
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	69fa      	ldr	r2, [r7, #28]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	69fa      	ldr	r2, [r7, #28]
 8003ec6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ece:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f003 0310 	and.w	r3, r3, #16
 8003ed6:	2207      	movs	r2, #7
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	43db      	mvns	r3, r3
 8003ede:	69fa      	ldr	r2, [r7, #28]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	431a      	orrs	r2, r3
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f003 0310 	and.w	r3, r3, #16
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	69fa      	ldr	r2, [r7, #28]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	69fa      	ldr	r2, [r7, #28]
 8003f0e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6819      	ldr	r1, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f003 0310 	and.w	r3, r3, #16
 8003f1c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	43da      	mvns	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	400a      	ands	r2, r1
 8003f2c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f003 0310 	and.w	r3, r3, #16
 8003f3c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	43db      	mvns	r3, r3
 8003f46:	69fa      	ldr	r2, [r7, #28]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f003 0310 	and.w	r3, r3, #16
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5e:	69fa      	ldr	r2, [r7, #28]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f6c:	d104      	bne.n	8003f78 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f74:	61fb      	str	r3, [r7, #28]
 8003f76:	e018      	b.n	8003faa <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d104      	bne.n	8003f8a <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003f86:	61fb      	str	r3, [r7, #28]
 8003f88:	e00f      	b.n	8003faa <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8003f8a:	f003 fb89 	bl	80076a0 <HAL_RCC_GetHCLKFreq>
 8003f8e:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	4a14      	ldr	r2, [pc, #80]	@ (8003fe4 <HAL_DAC_ConfigChannel+0x294>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d904      	bls.n	8003fa2 <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f9e:	61fb      	str	r3, [r7, #28]
 8003fa0:	e003      	b.n	8003faa <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003fa8:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	69fa      	ldr	r2, [r7, #28]
 8003fb0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6819      	ldr	r1, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f003 0310 	and.w	r3, r3, #16
 8003fbe:	22c0      	movs	r2, #192	@ 0xc0
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	43da      	mvns	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	400a      	ands	r2, r1
 8003fcc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3720      	adds	r7, #32
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	04c4b400 	.word	0x04c4b400

08003fe8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f7ff fe81 	bl	8003cfe <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2201      	movs	r2, #1
 8004000:	711a      	strb	r2, [r3, #4]
}
 8004002:	bf00      	nop
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b084      	sub	sp, #16
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004016:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f7ff fe7a 	bl	8003d12 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800401e:	bf00      	nop
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b084      	sub	sp, #16
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004032:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	f043 0204 	orr.w	r2, r3, #4
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f7ff fe70 	bl	8003d26 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2201      	movs	r2, #1
 800404a:	711a      	strb	r2, [r3, #4]
}
 800404c:	bf00      	nop
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f7ff ffce 	bl	8004054 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2201      	movs	r2, #1
 80040bc:	711a      	strb	r2, [r3, #4]
}
 80040be:	bf00      	nop
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b084      	sub	sp, #16
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f7ff ffc7 	bl	8004068 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80040da:	bf00      	nop
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b084      	sub	sp, #16
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ee:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	f043 0204 	orr.w	r2, r3, #4
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f7ff ffbd 	bl	800407c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2201      	movs	r2, #1
 8004106:	711a      	strb	r2, [r3, #4]
}
 8004108:	bf00      	nop
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e08d      	b.n	800423e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	461a      	mov	r2, r3
 8004128:	4b47      	ldr	r3, [pc, #284]	@ (8004248 <HAL_DMA_Init+0x138>)
 800412a:	429a      	cmp	r2, r3
 800412c:	d80f      	bhi.n	800414e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	4b45      	ldr	r3, [pc, #276]	@ (800424c <HAL_DMA_Init+0x13c>)
 8004136:	4413      	add	r3, r2
 8004138:	4a45      	ldr	r2, [pc, #276]	@ (8004250 <HAL_DMA_Init+0x140>)
 800413a:	fba2 2303 	umull	r2, r3, r2, r3
 800413e:	091b      	lsrs	r3, r3, #4
 8004140:	009a      	lsls	r2, r3, #2
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a42      	ldr	r2, [pc, #264]	@ (8004254 <HAL_DMA_Init+0x144>)
 800414a:	641a      	str	r2, [r3, #64]	@ 0x40
 800414c:	e00e      	b.n	800416c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	461a      	mov	r2, r3
 8004154:	4b40      	ldr	r3, [pc, #256]	@ (8004258 <HAL_DMA_Init+0x148>)
 8004156:	4413      	add	r3, r2
 8004158:	4a3d      	ldr	r2, [pc, #244]	@ (8004250 <HAL_DMA_Init+0x140>)
 800415a:	fba2 2303 	umull	r2, r3, r2, r3
 800415e:	091b      	lsrs	r3, r3, #4
 8004160:	009a      	lsls	r2, r3, #2
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a3c      	ldr	r2, [pc, #240]	@ (800425c <HAL_DMA_Init+0x14c>)
 800416a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2202      	movs	r2, #2
 8004170:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004186:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004190:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800419c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 fa12 	bl	80045e8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041cc:	d102      	bne.n	80041d4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80041e8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d010      	beq.n	8004214 <HAL_DMA_Init+0x104>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	d80c      	bhi.n	8004214 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 fa32 	bl	8004664 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004210:	605a      	str	r2, [r3, #4]
 8004212:	e008      	b.n	8004226 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	40020407 	.word	0x40020407
 800424c:	bffdfff8 	.word	0xbffdfff8
 8004250:	cccccccd 	.word	0xcccccccd
 8004254:	40020000 	.word	0x40020000
 8004258:	bffdfbf8 	.word	0xbffdfbf8
 800425c:	40020400 	.word	0x40020400

08004260 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
 800426c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800426e:	2300      	movs	r3, #0
 8004270:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004278:	2b01      	cmp	r3, #1
 800427a:	d101      	bne.n	8004280 <HAL_DMA_Start_IT+0x20>
 800427c:	2302      	movs	r3, #2
 800427e:	e066      	b.n	800434e <HAL_DMA_Start_IT+0xee>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b01      	cmp	r3, #1
 8004292:	d155      	bne.n	8004340 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2202      	movs	r2, #2
 8004298:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 0201 	bic.w	r2, r2, #1
 80042b0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	68b9      	ldr	r1, [r7, #8]
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 f957 	bl	800456c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d008      	beq.n	80042d8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f042 020e 	orr.w	r2, r2, #14
 80042d4:	601a      	str	r2, [r3, #0]
 80042d6:	e00f      	b.n	80042f8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0204 	bic.w	r2, r2, #4
 80042e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 020a 	orr.w	r2, r2, #10
 80042f6:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d007      	beq.n	8004316 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004310:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004314:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800431a:	2b00      	cmp	r3, #0
 800431c:	d007      	beq.n	800432e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004328:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800432c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f042 0201 	orr.w	r2, r2, #1
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	e005      	b.n	800434c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004348:	2302      	movs	r3, #2
 800434a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800434c:	7dfb      	ldrb	r3, [r7, #23]
}
 800434e:	4618      	mov	r0, r3
 8004350:	3718      	adds	r7, #24
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004356:	b480      	push	{r7}
 8004358:	b085      	sub	sp, #20
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800435e:	2300      	movs	r3, #0
 8004360:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d008      	beq.n	8004380 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2204      	movs	r2, #4
 8004372:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e040      	b.n	8004402 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 020e 	bic.w	r2, r2, #14
 800438e:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800439a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800439e:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0201 	bic.w	r2, r2, #1
 80043ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b4:	f003 021c 	and.w	r2, r3, #28
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043bc:	2101      	movs	r1, #1
 80043be:	fa01 f202 	lsl.w	r2, r1, r2
 80043c2:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80043cc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00c      	beq.n	80043f0 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043e4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80043ee:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8004400:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004402:	4618      	mov	r0, r3
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b084      	sub	sp, #16
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800442a:	f003 031c 	and.w	r3, r3, #28
 800442e:	2204      	movs	r2, #4
 8004430:	409a      	lsls	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	4013      	ands	r3, r2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d026      	beq.n	8004488 <HAL_DMA_IRQHandler+0x7a>
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b00      	cmp	r3, #0
 8004442:	d021      	beq.n	8004488 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0320 	and.w	r3, r3, #32
 800444e:	2b00      	cmp	r3, #0
 8004450:	d107      	bne.n	8004462 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 0204 	bic.w	r2, r2, #4
 8004460:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004466:	f003 021c 	and.w	r2, r3, #28
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446e:	2104      	movs	r1, #4
 8004470:	fa01 f202 	lsl.w	r2, r1, r2
 8004474:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800447a:	2b00      	cmp	r3, #0
 800447c:	d071      	beq.n	8004562 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004486:	e06c      	b.n	8004562 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800448c:	f003 031c 	and.w	r3, r3, #28
 8004490:	2202      	movs	r2, #2
 8004492:	409a      	lsls	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4013      	ands	r3, r2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d02e      	beq.n	80044fa <HAL_DMA_IRQHandler+0xec>
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d029      	beq.n	80044fa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0320 	and.w	r3, r3, #32
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10b      	bne.n	80044cc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 020a 	bic.w	r2, r2, #10
 80044c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044d0:	f003 021c 	and.w	r2, r3, #28
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d8:	2102      	movs	r1, #2
 80044da:	fa01 f202 	lsl.w	r2, r1, r2
 80044de:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d038      	beq.n	8004562 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80044f8:	e033      	b.n	8004562 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044fe:	f003 031c 	and.w	r3, r3, #28
 8004502:	2208      	movs	r2, #8
 8004504:	409a      	lsls	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	4013      	ands	r3, r2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d02a      	beq.n	8004564 <HAL_DMA_IRQHandler+0x156>
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	f003 0308 	and.w	r3, r3, #8
 8004514:	2b00      	cmp	r3, #0
 8004516:	d025      	beq.n	8004564 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 020e 	bic.w	r2, r2, #14
 8004526:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800452c:	f003 021c 	and.w	r2, r3, #28
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004534:	2101      	movs	r1, #1
 8004536:	fa01 f202 	lsl.w	r2, r1, r2
 800453a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004556:	2b00      	cmp	r3, #0
 8004558:	d004      	beq.n	8004564 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004562:	bf00      	nop
 8004564:	bf00      	nop
}
 8004566:	3710      	adds	r7, #16
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
 8004578:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004582:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004588:	2b00      	cmp	r3, #0
 800458a:	d004      	beq.n	8004596 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004594:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800459a:	f003 021c 	and.w	r2, r3, #28
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a2:	2101      	movs	r1, #1
 80045a4:	fa01 f202 	lsl.w	r2, r1, r2
 80045a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	2b10      	cmp	r3, #16
 80045b8:	d108      	bne.n	80045cc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80045ca:	e007      	b.n	80045dc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	60da      	str	r2, [r3, #12]
}
 80045dc:	bf00      	nop
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	461a      	mov	r2, r3
 80045f6:	4b17      	ldr	r3, [pc, #92]	@ (8004654 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d80a      	bhi.n	8004612 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004600:	089b      	lsrs	r3, r3, #2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004608:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	6493      	str	r3, [r2, #72]	@ 0x48
 8004610:	e007      	b.n	8004622 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004616:	089b      	lsrs	r3, r3, #2
 8004618:	009a      	lsls	r2, r3, #2
 800461a:	4b0f      	ldr	r3, [pc, #60]	@ (8004658 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800461c:	4413      	add	r3, r2
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	b2db      	uxtb	r3, r3
 8004628:	3b08      	subs	r3, #8
 800462a:	4a0c      	ldr	r2, [pc, #48]	@ (800465c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800462c:	fba2 2303 	umull	r2, r3, r2, r3
 8004630:	091b      	lsrs	r3, r3, #4
 8004632:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a0a      	ldr	r2, [pc, #40]	@ (8004660 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004638:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f003 031f 	and.w	r3, r3, #31
 8004640:	2201      	movs	r2, #1
 8004642:	409a      	lsls	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004648:	bf00      	nop
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr
 8004654:	40020407 	.word	0x40020407
 8004658:	4002081c 	.word	0x4002081c
 800465c:	cccccccd 	.word	0xcccccccd
 8004660:	40020880 	.word	0x40020880

08004664 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	b2db      	uxtb	r3, r3
 8004672:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	4b0b      	ldr	r3, [pc, #44]	@ (80046a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004678:	4413      	add	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	461a      	mov	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a08      	ldr	r2, [pc, #32]	@ (80046a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004686:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	3b01      	subs	r3, #1
 800468c:	f003 0303 	and.w	r3, r3, #3
 8004690:	2201      	movs	r2, #1
 8004692:	409a      	lsls	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004698:	bf00      	nop
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr
 80046a4:	1000823f 	.word	0x1000823f
 80046a8:	40020940 	.word	0x40020940

080046ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b087      	sub	sp, #28
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046b6:	2300      	movs	r3, #0
 80046b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046ba:	e166      	b.n	800498a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	2101      	movs	r1, #1
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	fa01 f303 	lsl.w	r3, r1, r3
 80046c8:	4013      	ands	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 8158 	beq.w	8004984 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f003 0303 	and.w	r3, r3, #3
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d005      	beq.n	80046ec <HAL_GPIO_Init+0x40>
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f003 0303 	and.w	r3, r3, #3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d130      	bne.n	800474e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	2203      	movs	r2, #3
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	43db      	mvns	r3, r3
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	4013      	ands	r3, r2
 8004702:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	68da      	ldr	r2, [r3, #12]
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	fa02 f303 	lsl.w	r3, r2, r3
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	4313      	orrs	r3, r2
 8004714:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004722:	2201      	movs	r2, #1
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	fa02 f303 	lsl.w	r3, r2, r3
 800472a:	43db      	mvns	r3, r3
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	4013      	ands	r3, r2
 8004730:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	091b      	lsrs	r3, r3, #4
 8004738:	f003 0201 	and.w	r2, r3, #1
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	fa02 f303 	lsl.w	r3, r2, r3
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	4313      	orrs	r3, r2
 8004746:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	2b03      	cmp	r3, #3
 8004758:	d017      	beq.n	800478a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	2203      	movs	r2, #3
 8004766:	fa02 f303 	lsl.w	r3, r2, r3
 800476a:	43db      	mvns	r3, r3
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	4013      	ands	r3, r2
 8004770:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	689a      	ldr	r2, [r3, #8]
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	005b      	lsls	r3, r3, #1
 800477a:	fa02 f303 	lsl.w	r3, r2, r3
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	4313      	orrs	r3, r2
 8004782:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f003 0303 	and.w	r3, r3, #3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d123      	bne.n	80047de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	08da      	lsrs	r2, r3, #3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	3208      	adds	r2, #8
 800479e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	f003 0307 	and.w	r3, r3, #7
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	220f      	movs	r2, #15
 80047ae:	fa02 f303 	lsl.w	r3, r2, r3
 80047b2:	43db      	mvns	r3, r3
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	4013      	ands	r3, r2
 80047b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	691a      	ldr	r2, [r3, #16]
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	08da      	lsrs	r2, r3, #3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	3208      	adds	r2, #8
 80047d8:	6939      	ldr	r1, [r7, #16]
 80047da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	005b      	lsls	r3, r3, #1
 80047e8:	2203      	movs	r2, #3
 80047ea:	fa02 f303 	lsl.w	r3, r2, r3
 80047ee:	43db      	mvns	r3, r3
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	4013      	ands	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f003 0203 	and.w	r2, r3, #3
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	fa02 f303 	lsl.w	r3, r2, r3
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	4313      	orrs	r3, r2
 800480a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800481a:	2b00      	cmp	r3, #0
 800481c:	f000 80b2 	beq.w	8004984 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004820:	4b61      	ldr	r3, [pc, #388]	@ (80049a8 <HAL_GPIO_Init+0x2fc>)
 8004822:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004824:	4a60      	ldr	r2, [pc, #384]	@ (80049a8 <HAL_GPIO_Init+0x2fc>)
 8004826:	f043 0301 	orr.w	r3, r3, #1
 800482a:	6613      	str	r3, [r2, #96]	@ 0x60
 800482c:	4b5e      	ldr	r3, [pc, #376]	@ (80049a8 <HAL_GPIO_Init+0x2fc>)
 800482e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	60bb      	str	r3, [r7, #8]
 8004836:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004838:	4a5c      	ldr	r2, [pc, #368]	@ (80049ac <HAL_GPIO_Init+0x300>)
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	089b      	lsrs	r3, r3, #2
 800483e:	3302      	adds	r3, #2
 8004840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004844:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f003 0303 	and.w	r3, r3, #3
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	220f      	movs	r2, #15
 8004850:	fa02 f303 	lsl.w	r3, r2, r3
 8004854:	43db      	mvns	r3, r3
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	4013      	ands	r3, r2
 800485a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004862:	d02b      	beq.n	80048bc <HAL_GPIO_Init+0x210>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a52      	ldr	r2, [pc, #328]	@ (80049b0 <HAL_GPIO_Init+0x304>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d025      	beq.n	80048b8 <HAL_GPIO_Init+0x20c>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a51      	ldr	r2, [pc, #324]	@ (80049b4 <HAL_GPIO_Init+0x308>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d01f      	beq.n	80048b4 <HAL_GPIO_Init+0x208>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a50      	ldr	r2, [pc, #320]	@ (80049b8 <HAL_GPIO_Init+0x30c>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d019      	beq.n	80048b0 <HAL_GPIO_Init+0x204>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a4f      	ldr	r2, [pc, #316]	@ (80049bc <HAL_GPIO_Init+0x310>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d013      	beq.n	80048ac <HAL_GPIO_Init+0x200>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a4e      	ldr	r2, [pc, #312]	@ (80049c0 <HAL_GPIO_Init+0x314>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d00d      	beq.n	80048a8 <HAL_GPIO_Init+0x1fc>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a4d      	ldr	r2, [pc, #308]	@ (80049c4 <HAL_GPIO_Init+0x318>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d007      	beq.n	80048a4 <HAL_GPIO_Init+0x1f8>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a4c      	ldr	r2, [pc, #304]	@ (80049c8 <HAL_GPIO_Init+0x31c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d101      	bne.n	80048a0 <HAL_GPIO_Init+0x1f4>
 800489c:	2307      	movs	r3, #7
 800489e:	e00e      	b.n	80048be <HAL_GPIO_Init+0x212>
 80048a0:	2308      	movs	r3, #8
 80048a2:	e00c      	b.n	80048be <HAL_GPIO_Init+0x212>
 80048a4:	2306      	movs	r3, #6
 80048a6:	e00a      	b.n	80048be <HAL_GPIO_Init+0x212>
 80048a8:	2305      	movs	r3, #5
 80048aa:	e008      	b.n	80048be <HAL_GPIO_Init+0x212>
 80048ac:	2304      	movs	r3, #4
 80048ae:	e006      	b.n	80048be <HAL_GPIO_Init+0x212>
 80048b0:	2303      	movs	r3, #3
 80048b2:	e004      	b.n	80048be <HAL_GPIO_Init+0x212>
 80048b4:	2302      	movs	r3, #2
 80048b6:	e002      	b.n	80048be <HAL_GPIO_Init+0x212>
 80048b8:	2301      	movs	r3, #1
 80048ba:	e000      	b.n	80048be <HAL_GPIO_Init+0x212>
 80048bc:	2300      	movs	r3, #0
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	f002 0203 	and.w	r2, r2, #3
 80048c4:	0092      	lsls	r2, r2, #2
 80048c6:	4093      	lsls	r3, r2
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80048ce:	4937      	ldr	r1, [pc, #220]	@ (80049ac <HAL_GPIO_Init+0x300>)
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	089b      	lsrs	r3, r3, #2
 80048d4:	3302      	adds	r3, #2
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048dc:	4b3b      	ldr	r3, [pc, #236]	@ (80049cc <HAL_GPIO_Init+0x320>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	43db      	mvns	r3, r3
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	4013      	ands	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004900:	4a32      	ldr	r2, [pc, #200]	@ (80049cc <HAL_GPIO_Init+0x320>)
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004906:	4b31      	ldr	r3, [pc, #196]	@ (80049cc <HAL_GPIO_Init+0x320>)
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	43db      	mvns	r3, r3
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	4013      	ands	r3, r2
 8004914:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4313      	orrs	r3, r2
 8004928:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800492a:	4a28      	ldr	r2, [pc, #160]	@ (80049cc <HAL_GPIO_Init+0x320>)
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004930:	4b26      	ldr	r3, [pc, #152]	@ (80049cc <HAL_GPIO_Init+0x320>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	43db      	mvns	r3, r3
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	4013      	ands	r3, r2
 800493e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	4313      	orrs	r3, r2
 8004952:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004954:	4a1d      	ldr	r2, [pc, #116]	@ (80049cc <HAL_GPIO_Init+0x320>)
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800495a:	4b1c      	ldr	r3, [pc, #112]	@ (80049cc <HAL_GPIO_Init+0x320>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	43db      	mvns	r3, r3
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	4013      	ands	r3, r2
 8004968:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4313      	orrs	r3, r2
 800497c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800497e:	4a13      	ldr	r2, [pc, #76]	@ (80049cc <HAL_GPIO_Init+0x320>)
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	3301      	adds	r3, #1
 8004988:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	fa22 f303 	lsr.w	r3, r2, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	f47f ae91 	bne.w	80046bc <HAL_GPIO_Init+0x10>
  }
}
 800499a:	bf00      	nop
 800499c:	bf00      	nop
 800499e:	371c      	adds	r7, #28
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	40021000 	.word	0x40021000
 80049ac:	40010000 	.word	0x40010000
 80049b0:	48000400 	.word	0x48000400
 80049b4:	48000800 	.word	0x48000800
 80049b8:	48000c00 	.word	0x48000c00
 80049bc:	48001000 	.word	0x48001000
 80049c0:	48001400 	.word	0x48001400
 80049c4:	48001800 	.word	0x48001800
 80049c8:	48001c00 	.word	0x48001c00
 80049cc:	40010400 	.word	0x40010400

080049d0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b087      	sub	sp, #28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80049da:	2300      	movs	r3, #0
 80049dc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80049de:	e0c9      	b.n	8004b74 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80049e0:	2201      	movs	r2, #1
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	fa02 f303 	lsl.w	r3, r2, r3
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	4013      	ands	r3, r2
 80049ec:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 80bc 	beq.w	8004b6e <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80049f6:	4a66      	ldr	r2, [pc, #408]	@ (8004b90 <HAL_GPIO_DeInit+0x1c0>)
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	089b      	lsrs	r3, r3, #2
 80049fc:	3302      	adds	r3, #2
 80049fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a02:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f003 0303 	and.w	r3, r3, #3
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	220f      	movs	r2, #15
 8004a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	4013      	ands	r3, r2
 8004a16:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004a1e:	d02b      	beq.n	8004a78 <HAL_GPIO_DeInit+0xa8>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a5c      	ldr	r2, [pc, #368]	@ (8004b94 <HAL_GPIO_DeInit+0x1c4>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d025      	beq.n	8004a74 <HAL_GPIO_DeInit+0xa4>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a5b      	ldr	r2, [pc, #364]	@ (8004b98 <HAL_GPIO_DeInit+0x1c8>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d01f      	beq.n	8004a70 <HAL_GPIO_DeInit+0xa0>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a5a      	ldr	r2, [pc, #360]	@ (8004b9c <HAL_GPIO_DeInit+0x1cc>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d019      	beq.n	8004a6c <HAL_GPIO_DeInit+0x9c>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a59      	ldr	r2, [pc, #356]	@ (8004ba0 <HAL_GPIO_DeInit+0x1d0>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d013      	beq.n	8004a68 <HAL_GPIO_DeInit+0x98>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a58      	ldr	r2, [pc, #352]	@ (8004ba4 <HAL_GPIO_DeInit+0x1d4>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d00d      	beq.n	8004a64 <HAL_GPIO_DeInit+0x94>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a57      	ldr	r2, [pc, #348]	@ (8004ba8 <HAL_GPIO_DeInit+0x1d8>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d007      	beq.n	8004a60 <HAL_GPIO_DeInit+0x90>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a56      	ldr	r2, [pc, #344]	@ (8004bac <HAL_GPIO_DeInit+0x1dc>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d101      	bne.n	8004a5c <HAL_GPIO_DeInit+0x8c>
 8004a58:	2307      	movs	r3, #7
 8004a5a:	e00e      	b.n	8004a7a <HAL_GPIO_DeInit+0xaa>
 8004a5c:	2308      	movs	r3, #8
 8004a5e:	e00c      	b.n	8004a7a <HAL_GPIO_DeInit+0xaa>
 8004a60:	2306      	movs	r3, #6
 8004a62:	e00a      	b.n	8004a7a <HAL_GPIO_DeInit+0xaa>
 8004a64:	2305      	movs	r3, #5
 8004a66:	e008      	b.n	8004a7a <HAL_GPIO_DeInit+0xaa>
 8004a68:	2304      	movs	r3, #4
 8004a6a:	e006      	b.n	8004a7a <HAL_GPIO_DeInit+0xaa>
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e004      	b.n	8004a7a <HAL_GPIO_DeInit+0xaa>
 8004a70:	2302      	movs	r3, #2
 8004a72:	e002      	b.n	8004a7a <HAL_GPIO_DeInit+0xaa>
 8004a74:	2301      	movs	r3, #1
 8004a76:	e000      	b.n	8004a7a <HAL_GPIO_DeInit+0xaa>
 8004a78:	2300      	movs	r3, #0
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	f002 0203 	and.w	r2, r2, #3
 8004a80:	0092      	lsls	r2, r2, #2
 8004a82:	4093      	lsls	r3, r2
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d132      	bne.n	8004af0 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004a8a:	4b49      	ldr	r3, [pc, #292]	@ (8004bb0 <HAL_GPIO_DeInit+0x1e0>)
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	43db      	mvns	r3, r3
 8004a92:	4947      	ldr	r1, [pc, #284]	@ (8004bb0 <HAL_GPIO_DeInit+0x1e0>)
 8004a94:	4013      	ands	r3, r2
 8004a96:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004a98:	4b45      	ldr	r3, [pc, #276]	@ (8004bb0 <HAL_GPIO_DeInit+0x1e0>)
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	43db      	mvns	r3, r3
 8004aa0:	4943      	ldr	r1, [pc, #268]	@ (8004bb0 <HAL_GPIO_DeInit+0x1e0>)
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004aa6:	4b42      	ldr	r3, [pc, #264]	@ (8004bb0 <HAL_GPIO_DeInit+0x1e0>)
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	43db      	mvns	r3, r3
 8004aae:	4940      	ldr	r1, [pc, #256]	@ (8004bb0 <HAL_GPIO_DeInit+0x1e0>)
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004ab4:	4b3e      	ldr	r3, [pc, #248]	@ (8004bb0 <HAL_GPIO_DeInit+0x1e0>)
 8004ab6:	689a      	ldr	r2, [r3, #8]
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	43db      	mvns	r3, r3
 8004abc:	493c      	ldr	r1, [pc, #240]	@ (8004bb0 <HAL_GPIO_DeInit+0x1e0>)
 8004abe:	4013      	ands	r3, r2
 8004ac0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	f003 0303 	and.w	r3, r3, #3
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	220f      	movs	r2, #15
 8004acc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004ad2:	4a2f      	ldr	r2, [pc, #188]	@ (8004b90 <HAL_GPIO_DeInit+0x1c0>)
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	089b      	lsrs	r3, r3, #2
 8004ad8:	3302      	adds	r3, #2
 8004ada:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	43da      	mvns	r2, r3
 8004ae2:	482b      	ldr	r0, [pc, #172]	@ (8004b90 <HAL_GPIO_DeInit+0x1c0>)
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	089b      	lsrs	r3, r3, #2
 8004ae8:	400a      	ands	r2, r1
 8004aea:	3302      	adds	r3, #2
 8004aec:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	2103      	movs	r1, #3
 8004afa:	fa01 f303 	lsl.w	r3, r1, r3
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	08da      	lsrs	r2, r3, #3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	3208      	adds	r2, #8
 8004b0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	220f      	movs	r2, #15
 8004b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1e:	43db      	mvns	r3, r3
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	08d2      	lsrs	r2, r2, #3
 8004b24:	4019      	ands	r1, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	3208      	adds	r2, #8
 8004b2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	689a      	ldr	r2, [r3, #8]
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	2103      	movs	r1, #3
 8004b38:	fa01 f303 	lsl.w	r3, r1, r3
 8004b3c:	43db      	mvns	r3, r3
 8004b3e:	401a      	ands	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	2101      	movs	r1, #1
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b50:	43db      	mvns	r3, r3
 8004b52:	401a      	ands	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68da      	ldr	r2, [r3, #12]
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	2103      	movs	r1, #3
 8004b62:	fa01 f303 	lsl.w	r3, r1, r3
 8004b66:	43db      	mvns	r3, r3
 8004b68:	401a      	ands	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	3301      	adds	r3, #1
 8004b72:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004b74:	683a      	ldr	r2, [r7, #0]
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	fa22 f303 	lsr.w	r3, r2, r3
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f47f af2f 	bne.w	80049e0 <HAL_GPIO_DeInit+0x10>
  }
}
 8004b82:	bf00      	nop
 8004b84:	bf00      	nop
 8004b86:	371c      	adds	r7, #28
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	40010000 	.word	0x40010000
 8004b94:	48000400 	.word	0x48000400
 8004b98:	48000800 	.word	0x48000800
 8004b9c:	48000c00 	.word	0x48000c00
 8004ba0:	48001000 	.word	0x48001000
 8004ba4:	48001400 	.word	0x48001400
 8004ba8:	48001800 	.word	0x48001800
 8004bac:	48001c00 	.word	0x48001c00
 8004bb0:	40010400 	.word	0x40010400

08004bb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e08d      	b.n	8004ce2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d106      	bne.n	8004be0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7fe f84c 	bl	8002c78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2224      	movs	r2, #36	@ 0x24
 8004be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 0201 	bic.w	r2, r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004c04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d107      	bne.n	8004c2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	689a      	ldr	r2, [r3, #8]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c2a:	609a      	str	r2, [r3, #8]
 8004c2c:	e006      	b.n	8004c3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	689a      	ldr	r2, [r3, #8]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004c3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d108      	bne.n	8004c56 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c52:	605a      	str	r2, [r3, #4]
 8004c54:	e007      	b.n	8004c66 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	6812      	ldr	r2, [r2, #0]
 8004c70:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004c74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c78:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68da      	ldr	r2, [r3, #12]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c88:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691a      	ldr	r2, [r3, #16]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	69d9      	ldr	r1, [r3, #28]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a1a      	ldr	r2, [r3, #32]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f042 0201 	orr.w	r2, r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b082      	sub	sp, #8
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d101      	bne.n	8004cfc <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e021      	b.n	8004d40 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2224      	movs	r2, #36	@ 0x24
 8004d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f022 0201 	bic.w	r2, r2, #1
 8004d12:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f7fe f80d 	bl	8002d34 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b088      	sub	sp, #32
 8004d4c:	af02      	add	r7, sp, #8
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	4608      	mov	r0, r1
 8004d52:	4611      	mov	r1, r2
 8004d54:	461a      	mov	r2, r3
 8004d56:	4603      	mov	r3, r0
 8004d58:	817b      	strh	r3, [r7, #10]
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	813b      	strh	r3, [r7, #8]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b20      	cmp	r3, #32
 8004d6c:	f040 80f9 	bne.w	8004f62 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d70:	6a3b      	ldr	r3, [r7, #32]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d002      	beq.n	8004d7c <HAL_I2C_Mem_Write+0x34>
 8004d76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d105      	bne.n	8004d88 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d82:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e0ed      	b.n	8004f64 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d101      	bne.n	8004d96 <HAL_I2C_Mem_Write+0x4e>
 8004d92:	2302      	movs	r3, #2
 8004d94:	e0e6      	b.n	8004f64 <HAL_I2C_Mem_Write+0x21c>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d9e:	f7fe fd0f 	bl	80037c0 <HAL_GetTick>
 8004da2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	2319      	movs	r3, #25
 8004daa:	2201      	movs	r2, #1
 8004dac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f000 fac3 	bl	800533c <I2C_WaitOnFlagUntilTimeout>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e0d1      	b.n	8004f64 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2221      	movs	r2, #33	@ 0x21
 8004dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2240      	movs	r2, #64	@ 0x40
 8004dcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6a3a      	ldr	r2, [r7, #32]
 8004dda:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004de0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004de8:	88f8      	ldrh	r0, [r7, #6]
 8004dea:	893a      	ldrh	r2, [r7, #8]
 8004dec:	8979      	ldrh	r1, [r7, #10]
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	9301      	str	r3, [sp, #4]
 8004df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df4:	9300      	str	r3, [sp, #0]
 8004df6:	4603      	mov	r3, r0
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f000 f9d3 	bl	80051a4 <I2C_RequestMemoryWrite>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d005      	beq.n	8004e10 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e0a9      	b.n	8004f64 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	2bff      	cmp	r3, #255	@ 0xff
 8004e18:	d90e      	bls.n	8004e38 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	22ff      	movs	r2, #255	@ 0xff
 8004e1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e24:	b2da      	uxtb	r2, r3
 8004e26:	8979      	ldrh	r1, [r7, #10]
 8004e28:	2300      	movs	r3, #0
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f000 fc47 	bl	80056c4 <I2C_TransferConfig>
 8004e36:	e00f      	b.n	8004e58 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e46:	b2da      	uxtb	r2, r3
 8004e48:	8979      	ldrh	r1, [r7, #10]
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f000 fc36 	bl	80056c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f000 fac6 	bl	80053ee <I2C_WaitOnTXISFlagUntilTimeout>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d001      	beq.n	8004e6c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e07b      	b.n	8004f64 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e70:	781a      	ldrb	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e7c:	1c5a      	adds	r2, r3, #1
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e94:	3b01      	subs	r3, #1
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d034      	beq.n	8004f10 <HAL_I2C_Mem_Write+0x1c8>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d130      	bne.n	8004f10 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	2180      	movs	r1, #128	@ 0x80
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f000 fa3f 	bl	800533c <I2C_WaitOnFlagUntilTimeout>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d001      	beq.n	8004ec8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e04d      	b.n	8004f64 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	2bff      	cmp	r3, #255	@ 0xff
 8004ed0:	d90e      	bls.n	8004ef0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	22ff      	movs	r2, #255	@ 0xff
 8004ed6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004edc:	b2da      	uxtb	r2, r3
 8004ede:	8979      	ldrh	r1, [r7, #10]
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 fbeb 	bl	80056c4 <I2C_TransferConfig>
 8004eee:	e00f      	b.n	8004f10 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	8979      	ldrh	r1, [r7, #10]
 8004f02:	2300      	movs	r3, #0
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f000 fbda 	bl	80056c4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d19e      	bne.n	8004e58 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 faac 	bl	800547c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d001      	beq.n	8004f2e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e01a      	b.n	8004f64 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2220      	movs	r2, #32
 8004f34:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	6859      	ldr	r1, [r3, #4]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	4b0a      	ldr	r3, [pc, #40]	@ (8004f6c <HAL_I2C_Mem_Write+0x224>)
 8004f42:	400b      	ands	r3, r1
 8004f44:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2220      	movs	r2, #32
 8004f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	e000      	b.n	8004f64 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004f62:	2302      	movs	r3, #2
  }
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3718      	adds	r7, #24
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	fe00e800 	.word	0xfe00e800

08004f70 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b088      	sub	sp, #32
 8004f74:	af02      	add	r7, sp, #8
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	4608      	mov	r0, r1
 8004f7a:	4611      	mov	r1, r2
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	4603      	mov	r3, r0
 8004f80:	817b      	strh	r3, [r7, #10]
 8004f82:	460b      	mov	r3, r1
 8004f84:	813b      	strh	r3, [r7, #8]
 8004f86:	4613      	mov	r3, r2
 8004f88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b20      	cmp	r3, #32
 8004f94:	f040 80fd 	bne.w	8005192 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f98:	6a3b      	ldr	r3, [r7, #32]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d002      	beq.n	8004fa4 <HAL_I2C_Mem_Read+0x34>
 8004f9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d105      	bne.n	8004fb0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004faa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e0f1      	b.n	8005194 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d101      	bne.n	8004fbe <HAL_I2C_Mem_Read+0x4e>
 8004fba:	2302      	movs	r3, #2
 8004fbc:	e0ea      	b.n	8005194 <HAL_I2C_Mem_Read+0x224>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004fc6:	f7fe fbfb 	bl	80037c0 <HAL_GetTick>
 8004fca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	9300      	str	r3, [sp, #0]
 8004fd0:	2319      	movs	r3, #25
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f000 f9af 	bl	800533c <I2C_WaitOnFlagUntilTimeout>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d001      	beq.n	8004fe8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e0d5      	b.n	8005194 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2222      	movs	r2, #34	@ 0x22
 8004fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2240      	movs	r2, #64	@ 0x40
 8004ff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6a3a      	ldr	r2, [r7, #32]
 8005002:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005008:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005010:	88f8      	ldrh	r0, [r7, #6]
 8005012:	893a      	ldrh	r2, [r7, #8]
 8005014:	8979      	ldrh	r1, [r7, #10]
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	9301      	str	r3, [sp, #4]
 800501a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	4603      	mov	r3, r0
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f000 f913 	bl	800524c <I2C_RequestMemoryRead>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d005      	beq.n	8005038 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e0ad      	b.n	8005194 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800503c:	b29b      	uxth	r3, r3
 800503e:	2bff      	cmp	r3, #255	@ 0xff
 8005040:	d90e      	bls.n	8005060 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2201      	movs	r2, #1
 8005046:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800504c:	b2da      	uxtb	r2, r3
 800504e:	8979      	ldrh	r1, [r7, #10]
 8005050:	4b52      	ldr	r3, [pc, #328]	@ (800519c <HAL_I2C_Mem_Read+0x22c>)
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f000 fb33 	bl	80056c4 <I2C_TransferConfig>
 800505e:	e00f      	b.n	8005080 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005064:	b29a      	uxth	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800506e:	b2da      	uxtb	r2, r3
 8005070:	8979      	ldrh	r1, [r7, #10]
 8005072:	4b4a      	ldr	r3, [pc, #296]	@ (800519c <HAL_I2C_Mem_Read+0x22c>)
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f000 fb22 	bl	80056c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005086:	2200      	movs	r2, #0
 8005088:	2104      	movs	r1, #4
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f000 f956 	bl	800533c <I2C_WaitOnFlagUntilTimeout>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d001      	beq.n	800509a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e07c      	b.n	8005194 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a4:	b2d2      	uxtb	r2, r2
 80050a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ac:	1c5a      	adds	r2, r3, #1
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050b6:	3b01      	subs	r3, #1
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	3b01      	subs	r3, #1
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d034      	beq.n	8005140 <HAL_I2C_Mem_Read+0x1d0>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d130      	bne.n	8005140 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e4:	2200      	movs	r2, #0
 80050e6:	2180      	movs	r1, #128	@ 0x80
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f000 f927 	bl	800533c <I2C_WaitOnFlagUntilTimeout>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d001      	beq.n	80050f8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e04d      	b.n	8005194 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	2bff      	cmp	r3, #255	@ 0xff
 8005100:	d90e      	bls.n	8005120 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2201      	movs	r2, #1
 8005106:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800510c:	b2da      	uxtb	r2, r3
 800510e:	8979      	ldrh	r1, [r7, #10]
 8005110:	2300      	movs	r3, #0
 8005112:	9300      	str	r3, [sp, #0]
 8005114:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f000 fad3 	bl	80056c4 <I2C_TransferConfig>
 800511e:	e00f      	b.n	8005140 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005124:	b29a      	uxth	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800512e:	b2da      	uxtb	r2, r3
 8005130:	8979      	ldrh	r1, [r7, #10]
 8005132:	2300      	movs	r3, #0
 8005134:	9300      	str	r3, [sp, #0]
 8005136:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f000 fac2 	bl	80056c4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005144:	b29b      	uxth	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d19a      	bne.n	8005080 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f000 f994 	bl	800547c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e01a      	b.n	8005194 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2220      	movs	r2, #32
 8005164:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6859      	ldr	r1, [r3, #4]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	4b0b      	ldr	r3, [pc, #44]	@ (80051a0 <HAL_I2C_Mem_Read+0x230>)
 8005172:	400b      	ands	r3, r1
 8005174:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2220      	movs	r2, #32
 800517a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800518e:	2300      	movs	r3, #0
 8005190:	e000      	b.n	8005194 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005192:	2302      	movs	r3, #2
  }
}
 8005194:	4618      	mov	r0, r3
 8005196:	3718      	adds	r7, #24
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	80002400 	.word	0x80002400
 80051a0:	fe00e800 	.word	0xfe00e800

080051a4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af02      	add	r7, sp, #8
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	4608      	mov	r0, r1
 80051ae:	4611      	mov	r1, r2
 80051b0:	461a      	mov	r2, r3
 80051b2:	4603      	mov	r3, r0
 80051b4:	817b      	strh	r3, [r7, #10]
 80051b6:	460b      	mov	r3, r1
 80051b8:	813b      	strh	r3, [r7, #8]
 80051ba:	4613      	mov	r3, r2
 80051bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80051be:	88fb      	ldrh	r3, [r7, #6]
 80051c0:	b2da      	uxtb	r2, r3
 80051c2:	8979      	ldrh	r1, [r7, #10]
 80051c4:	4b20      	ldr	r3, [pc, #128]	@ (8005248 <I2C_RequestMemoryWrite+0xa4>)
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f000 fa79 	bl	80056c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051d2:	69fa      	ldr	r2, [r7, #28]
 80051d4:	69b9      	ldr	r1, [r7, #24]
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f000 f909 	bl	80053ee <I2C_WaitOnTXISFlagUntilTimeout>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d001      	beq.n	80051e6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e02c      	b.n	8005240 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051e6:	88fb      	ldrh	r3, [r7, #6]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d105      	bne.n	80051f8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80051ec:	893b      	ldrh	r3, [r7, #8]
 80051ee:	b2da      	uxtb	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80051f6:	e015      	b.n	8005224 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80051f8:	893b      	ldrh	r3, [r7, #8]
 80051fa:	0a1b      	lsrs	r3, r3, #8
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005206:	69fa      	ldr	r2, [r7, #28]
 8005208:	69b9      	ldr	r1, [r7, #24]
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f000 f8ef 	bl	80053ee <I2C_WaitOnTXISFlagUntilTimeout>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e012      	b.n	8005240 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800521a:	893b      	ldrh	r3, [r7, #8]
 800521c:	b2da      	uxtb	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	2200      	movs	r2, #0
 800522c:	2180      	movs	r1, #128	@ 0x80
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f000 f884 	bl	800533c <I2C_WaitOnFlagUntilTimeout>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e000      	b.n	8005240 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	80002000 	.word	0x80002000

0800524c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af02      	add	r7, sp, #8
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	4608      	mov	r0, r1
 8005256:	4611      	mov	r1, r2
 8005258:	461a      	mov	r2, r3
 800525a:	4603      	mov	r3, r0
 800525c:	817b      	strh	r3, [r7, #10]
 800525e:	460b      	mov	r3, r1
 8005260:	813b      	strh	r3, [r7, #8]
 8005262:	4613      	mov	r3, r2
 8005264:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005266:	88fb      	ldrh	r3, [r7, #6]
 8005268:	b2da      	uxtb	r2, r3
 800526a:	8979      	ldrh	r1, [r7, #10]
 800526c:	4b20      	ldr	r3, [pc, #128]	@ (80052f0 <I2C_RequestMemoryRead+0xa4>)
 800526e:	9300      	str	r3, [sp, #0]
 8005270:	2300      	movs	r3, #0
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 fa26 	bl	80056c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005278:	69fa      	ldr	r2, [r7, #28]
 800527a:	69b9      	ldr	r1, [r7, #24]
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f000 f8b6 	bl	80053ee <I2C_WaitOnTXISFlagUntilTimeout>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d001      	beq.n	800528c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e02c      	b.n	80052e6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800528c:	88fb      	ldrh	r3, [r7, #6]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d105      	bne.n	800529e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005292:	893b      	ldrh	r3, [r7, #8]
 8005294:	b2da      	uxtb	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	629a      	str	r2, [r3, #40]	@ 0x28
 800529c:	e015      	b.n	80052ca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800529e:	893b      	ldrh	r3, [r7, #8]
 80052a0:	0a1b      	lsrs	r3, r3, #8
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	b2da      	uxtb	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ac:	69fa      	ldr	r2, [r7, #28]
 80052ae:	69b9      	ldr	r1, [r7, #24]
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 f89c 	bl	80053ee <I2C_WaitOnTXISFlagUntilTimeout>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e012      	b.n	80052e6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80052c0:	893b      	ldrh	r3, [r7, #8]
 80052c2:	b2da      	uxtb	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	2200      	movs	r2, #0
 80052d2:	2140      	movs	r1, #64	@ 0x40
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f000 f831 	bl	800533c <I2C_WaitOnFlagUntilTimeout>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d001      	beq.n	80052e4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e000      	b.n	80052e6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	80002000 	.word	0x80002000

080052f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b02      	cmp	r3, #2
 8005308:	d103      	bne.n	8005312 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2200      	movs	r2, #0
 8005310:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	2b01      	cmp	r3, #1
 800531e:	d007      	beq.n	8005330 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699a      	ldr	r2, [r3, #24]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f042 0201 	orr.w	r2, r2, #1
 800532e:	619a      	str	r2, [r3, #24]
  }
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	603b      	str	r3, [r7, #0]
 8005348:	4613      	mov	r3, r2
 800534a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800534c:	e03b      	b.n	80053c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	6839      	ldr	r1, [r7, #0]
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f000 f8d6 	bl	8005504 <I2C_IsErrorOccurred>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e041      	b.n	80053e6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005368:	d02d      	beq.n	80053c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800536a:	f7fe fa29 	bl	80037c0 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	429a      	cmp	r2, r3
 8005378:	d302      	bcc.n	8005380 <I2C_WaitOnFlagUntilTimeout+0x44>
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d122      	bne.n	80053c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	699a      	ldr	r2, [r3, #24]
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	4013      	ands	r3, r2
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	429a      	cmp	r2, r3
 800538e:	bf0c      	ite	eq
 8005390:	2301      	moveq	r3, #1
 8005392:	2300      	movne	r3, #0
 8005394:	b2db      	uxtb	r3, r3
 8005396:	461a      	mov	r2, r3
 8005398:	79fb      	ldrb	r3, [r7, #7]
 800539a:	429a      	cmp	r2, r3
 800539c:	d113      	bne.n	80053c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053a2:	f043 0220 	orr.w	r2, r3, #32
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2220      	movs	r2, #32
 80053ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e00f      	b.n	80053e6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	699a      	ldr	r2, [r3, #24]
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	4013      	ands	r3, r2
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	bf0c      	ite	eq
 80053d6:	2301      	moveq	r3, #1
 80053d8:	2300      	movne	r3, #0
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	461a      	mov	r2, r3
 80053de:	79fb      	ldrb	r3, [r7, #7]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d0b4      	beq.n	800534e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3710      	adds	r7, #16
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b084      	sub	sp, #16
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	60f8      	str	r0, [r7, #12]
 80053f6:	60b9      	str	r1, [r7, #8]
 80053f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80053fa:	e033      	b.n	8005464 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	68b9      	ldr	r1, [r7, #8]
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f000 f87f 	bl	8005504 <I2C_IsErrorOccurred>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d001      	beq.n	8005410 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e031      	b.n	8005474 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005416:	d025      	beq.n	8005464 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005418:	f7fe f9d2 	bl	80037c0 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	429a      	cmp	r2, r3
 8005426:	d302      	bcc.n	800542e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d11a      	bne.n	8005464 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	f003 0302 	and.w	r3, r3, #2
 8005438:	2b02      	cmp	r3, #2
 800543a:	d013      	beq.n	8005464 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005440:	f043 0220 	orr.w	r2, r3, #32
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2220      	movs	r2, #32
 800544c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e007      	b.n	8005474 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	2b02      	cmp	r3, #2
 8005470:	d1c4      	bne.n	80053fc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3710      	adds	r7, #16
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005488:	e02f      	b.n	80054ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	68b9      	ldr	r1, [r7, #8]
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f000 f838 	bl	8005504 <I2C_IsErrorOccurred>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e02d      	b.n	80054fa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800549e:	f7fe f98f 	bl	80037c0 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d302      	bcc.n	80054b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d11a      	bne.n	80054ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	f003 0320 	and.w	r3, r3, #32
 80054be:	2b20      	cmp	r3, #32
 80054c0:	d013      	beq.n	80054ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054c6:	f043 0220 	orr.w	r2, r3, #32
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2220      	movs	r2, #32
 80054d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e007      	b.n	80054fa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	f003 0320 	and.w	r3, r3, #32
 80054f4:	2b20      	cmp	r3, #32
 80054f6:	d1c8      	bne.n	800548a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
	...

08005504 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b08a      	sub	sp, #40	@ 0x28
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005510:	2300      	movs	r3, #0
 8005512:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800551e:	2300      	movs	r3, #0
 8005520:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	f003 0310 	and.w	r3, r3, #16
 800552c:	2b00      	cmp	r3, #0
 800552e:	d068      	beq.n	8005602 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2210      	movs	r2, #16
 8005536:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005538:	e049      	b.n	80055ce <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005540:	d045      	beq.n	80055ce <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005542:	f7fe f93d 	bl	80037c0 <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	429a      	cmp	r2, r3
 8005550:	d302      	bcc.n	8005558 <I2C_IsErrorOccurred+0x54>
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d13a      	bne.n	80055ce <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005562:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800556a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005576:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800557a:	d121      	bne.n	80055c0 <I2C_IsErrorOccurred+0xbc>
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005582:	d01d      	beq.n	80055c0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005584:	7cfb      	ldrb	r3, [r7, #19]
 8005586:	2b20      	cmp	r3, #32
 8005588:	d01a      	beq.n	80055c0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005598:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800559a:	f7fe f911 	bl	80037c0 <HAL_GetTick>
 800559e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055a0:	e00e      	b.n	80055c0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80055a2:	f7fe f90d 	bl	80037c0 <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	2b19      	cmp	r3, #25
 80055ae:	d907      	bls.n	80055c0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	f043 0320 	orr.w	r3, r3, #32
 80055b6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80055be:	e006      	b.n	80055ce <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	f003 0320 	and.w	r3, r3, #32
 80055ca:	2b20      	cmp	r3, #32
 80055cc:	d1e9      	bne.n	80055a2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	f003 0320 	and.w	r3, r3, #32
 80055d8:	2b20      	cmp	r3, #32
 80055da:	d003      	beq.n	80055e4 <I2C_IsErrorOccurred+0xe0>
 80055dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d0aa      	beq.n	800553a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80055e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d103      	bne.n	80055f4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2220      	movs	r2, #32
 80055f2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80055f4:	6a3b      	ldr	r3, [r7, #32]
 80055f6:	f043 0304 	orr.w	r3, r3, #4
 80055fa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00b      	beq.n	800562c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005614:	6a3b      	ldr	r3, [r7, #32]
 8005616:	f043 0301 	orr.w	r3, r3, #1
 800561a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005624:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00b      	beq.n	800564e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005636:	6a3b      	ldr	r3, [r7, #32]
 8005638:	f043 0308 	orr.w	r3, r3, #8
 800563c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005646:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00b      	beq.n	8005670 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005658:	6a3b      	ldr	r3, [r7, #32]
 800565a:	f043 0302 	orr.w	r3, r3, #2
 800565e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005668:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005670:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005674:	2b00      	cmp	r3, #0
 8005676:	d01c      	beq.n	80056b2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f7ff fe3b 	bl	80052f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6859      	ldr	r1, [r3, #4]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	4b0d      	ldr	r3, [pc, #52]	@ (80056c0 <I2C_IsErrorOccurred+0x1bc>)
 800568a:	400b      	ands	r3, r1
 800568c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005692:	6a3b      	ldr	r3, [r7, #32]
 8005694:	431a      	orrs	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2220      	movs	r2, #32
 800569e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80056b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3728      	adds	r7, #40	@ 0x28
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	fe00e800 	.word	0xfe00e800

080056c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b087      	sub	sp, #28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	607b      	str	r3, [r7, #4]
 80056ce:	460b      	mov	r3, r1
 80056d0:	817b      	strh	r3, [r7, #10]
 80056d2:	4613      	mov	r3, r2
 80056d4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80056d6:	897b      	ldrh	r3, [r7, #10]
 80056d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80056dc:	7a7b      	ldrb	r3, [r7, #9]
 80056de:	041b      	lsls	r3, r3, #16
 80056e0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80056e4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80056ea:	6a3b      	ldr	r3, [r7, #32]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80056f2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	685a      	ldr	r2, [r3, #4]
 80056fa:	6a3b      	ldr	r3, [r7, #32]
 80056fc:	0d5b      	lsrs	r3, r3, #21
 80056fe:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005702:	4b08      	ldr	r3, [pc, #32]	@ (8005724 <I2C_TransferConfig+0x60>)
 8005704:	430b      	orrs	r3, r1
 8005706:	43db      	mvns	r3, r3
 8005708:	ea02 0103 	and.w	r1, r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	430a      	orrs	r2, r1
 8005714:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005716:	bf00      	nop
 8005718:	371c      	adds	r7, #28
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	03ff63ff 	.word	0x03ff63ff

08005728 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2b20      	cmp	r3, #32
 800573c:	d138      	bne.n	80057b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005744:	2b01      	cmp	r3, #1
 8005746:	d101      	bne.n	800574c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005748:	2302      	movs	r3, #2
 800574a:	e032      	b.n	80057b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2224      	movs	r2, #36	@ 0x24
 8005758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f022 0201 	bic.w	r2, r2, #1
 800576a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800577a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6819      	ldr	r1, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	430a      	orrs	r2, r1
 800578a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f042 0201 	orr.w	r2, r2, #1
 800579a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2220      	movs	r2, #32
 80057a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80057ac:	2300      	movs	r3, #0
 80057ae:	e000      	b.n	80057b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80057b0:	2302      	movs	r3, #2
  }
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	370c      	adds	r7, #12
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80057be:	b480      	push	{r7}
 80057c0:	b085      	sub	sp, #20
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
 80057c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b20      	cmp	r3, #32
 80057d2:	d139      	bne.n	8005848 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d101      	bne.n	80057e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80057de:	2302      	movs	r3, #2
 80057e0:	e033      	b.n	800584a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2224      	movs	r2, #36	@ 0x24
 80057ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f022 0201 	bic.w	r2, r2, #1
 8005800:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005810:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	021b      	lsls	r3, r3, #8
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	4313      	orrs	r3, r2
 800581a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f042 0201 	orr.w	r2, r2, #1
 8005832:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2220      	movs	r2, #32
 8005838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005844:	2300      	movs	r3, #0
 8005846:	e000      	b.n	800584a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005848:	2302      	movs	r3, #2
  }
}
 800584a:	4618      	mov	r0, r3
 800584c:	3714      	adds	r7, #20
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
	...

08005858 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b086      	sub	sp, #24
 800585c:	af02      	add	r7, sp, #8
 800585e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005860:	2300      	movs	r3, #0
 8005862:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8005864:	f7fd ffac 	bl	80037c0 <HAL_GetTick>
 8005868:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d102      	bne.n	8005876 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	73fb      	strb	r3, [r7, #15]
 8005874:	e092      	b.n	800599c <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005880:	2b00      	cmp	r3, #0
 8005882:	f040 808b 	bne.w	800599c <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7fd fa78 	bl	8002d7c <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800588c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 fad0 	bl	8005e36 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689a      	ldr	r2, [r3, #8]
 800589c:	4b42      	ldr	r3, [pc, #264]	@ (80059a8 <HAL_OSPI_Init+0x150>)
 800589e:	4013      	ands	r3, r2
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	68d1      	ldr	r1, [r2, #12]
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	6912      	ldr	r2, [r2, #16]
 80058a8:	3a01      	subs	r2, #1
 80058aa:	0412      	lsls	r2, r2, #16
 80058ac:	4311      	orrs	r1, r2
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	6952      	ldr	r2, [r2, #20]
 80058b2:	3a01      	subs	r2, #1
 80058b4:	0212      	lsls	r2, r2, #8
 80058b6:	4311      	orrs	r1, r2
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80058bc:	4311      	orrs	r1, r2
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	69d2      	ldr	r2, [r2, #28]
 80058c2:	4311      	orrs	r1, r2
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	6812      	ldr	r2, [r2, #0]
 80058c8:	430b      	orrs	r3, r1
 80058ca:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	0412      	lsls	r2, r2, #16
 80058d6:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	3b01      	subs	r3, #1
 80058e8:	021a      	lsls	r2, r3, #8
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	2200      	movs	r2, #0
 80058fc:	2120      	movs	r1, #32
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 fde0 	bl	80064c4 <OSPI_WaitFlagStateUntilTimeout>
 8005904:	4603      	mov	r3, r0
 8005906:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005908:	7bfb      	ldrb	r3, [r7, #15]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d146      	bne.n	800599c <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	1e5a      	subs	r2, r3, #1
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	430a      	orrs	r2, r1
 8005924:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	689a      	ldr	r2, [r3, #8]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	430a      	orrs	r2, r1
 800593a:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005944:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005950:	431a      	orrs	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f042 0201 	orr.w	r2, r2, #1
 800596a:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	2b02      	cmp	r3, #2
 8005972:	d107      	bne.n	8005984 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	689a      	ldr	r2, [r3, #8]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f042 0202 	orr.w	r2, r2, #2
 8005982:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800598c:	d103      	bne.n	8005996 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	645a      	str	r2, [r3, #68]	@ 0x44
 8005994:	e002      	b.n	800599c <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2202      	movs	r2, #2
 800599a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
  }

  /* Return function status */
  return status;
 800599c:	7bfb      	ldrb	r3, [r7, #15]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	f8e0f8f4 	.word	0xf8e0f8f4

080059ac <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059b4:	2300      	movs	r3, #0
 80059b6:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d102      	bne.n	80059c4 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	73fb      	strb	r3, [r7, #15]
 80059c2:	e015      	b.n	80059f0 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
    /* Disable OctoSPI */
    __HAL_OSPI_DISABLE(hospi);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f022 0201 	bic.w	r2, r2, #1
 80059d2:	601a      	str	r2, [r3, #0]

    /* Disable free running clock if needed : must be done after OSPI disable */
    CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	689a      	ldr	r2, [r3, #8]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 0202 	bic.w	r2, r2, #2
 80059e2:	609a      	str	r2, [r3, #8]

    /* DeInit the low level hardware */
    hospi->MspDeInitCallback(hospi);
#else
    /* De-initialize the low-level hardware */
    HAL_OSPI_MspDeInit(hospi);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f7fd fa35 	bl	8002e54 <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

    /* Reset the driver state */
    hospi->State = HAL_OSPI_STATE_RESET;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  return status;
 80059f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b08a      	sub	sp, #40	@ 0x28
 80059fe:	af02      	add	r7, sp, #8
 8005a00:	60f8      	str	r0, [r7, #12]
 8005a02:	60b9      	str	r1, [r7, #8]
 8005a04:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8005a06:	f7fd fedb 	bl	80037c0 <HAL_GetTick>
 8005a0a:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a10:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a16:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d104      	bne.n	8005a28 <HAL_OSPI_Command+0x2e>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a26:	d10d      	bne.n	8005a44 <HAL_OSPI_Command+0x4a>
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	2b14      	cmp	r3, #20
 8005a2c:	d103      	bne.n	8005a36 <HAL_OSPI_Command+0x3c>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG))     ||
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d006      	beq.n	8005a44 <HAL_OSPI_Command+0x4a>
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	2b24      	cmp	r3, #36	@ 0x24
 8005a3a:	d153      	bne.n	8005ae4 <HAL_OSPI_Command+0xea>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)))
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d14f      	bne.n	8005ae4 <HAL_OSPI_Command+0xea>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	9300      	str	r3, [sp, #0]
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	2120      	movs	r1, #32
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f000 fd38 	bl	80064c4 <OSPI_WaitFlagStateUntilTimeout>
 8005a54:	4603      	mov	r3, r0
 8005a56:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8005a58:	7ffb      	ldrb	r3, [r7, #31]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d148      	bne.n	8005af0 <HAL_OSPI_Command+0xf6>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	649a      	str	r2, [r3, #72]	@ 0x48

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8005a64:	68b9      	ldr	r1, [r7, #8]
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f000 fd64 	bl	8006534 <OSPI_ConfigCmd>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8005a70:	7ffb      	ldrb	r3, [r7, #31]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d13c      	bne.n	8005af0 <HAL_OSPI_Command+0xf6>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10e      	bne.n	8005a9c <HAL_OSPI_Command+0xa2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	2201      	movs	r2, #1
 8005a86:	2102      	movs	r1, #2
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f000 fd1b 	bl	80064c4 <OSPI_WaitFlagStateUntilTimeout>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2202      	movs	r2, #2
 8005a98:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 8005a9a:	e029      	b.n	8005af0 <HAL_OSPI_Command+0xf6>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d103      	bne.n	8005aac <HAL_OSPI_Command+0xb2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2204      	movs	r2, #4
 8005aa8:	645a      	str	r2, [r3, #68]	@ 0x44
    if (status == HAL_OK)
 8005aaa:	e021      	b.n	8005af0 <HAL_OSPI_Command+0xf6>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d10b      	bne.n	8005acc <HAL_OSPI_Command+0xd2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ab8:	2b24      	cmp	r3, #36	@ 0x24
 8005aba:	d103      	bne.n	8005ac4 <HAL_OSPI_Command+0xca>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2204      	movs	r2, #4
 8005ac0:	645a      	str	r2, [r3, #68]	@ 0x44
    if (status == HAL_OK)
 8005ac2:	e015      	b.n	8005af0 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2214      	movs	r2, #20
 8005ac8:	645a      	str	r2, [r3, #68]	@ 0x44
    if (status == HAL_OK)
 8005aca:	e011      	b.n	8005af0 <HAL_OSPI_Command+0xf6>
            }
          }
          else
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ad0:	2b14      	cmp	r3, #20
 8005ad2:	d103      	bne.n	8005adc <HAL_OSPI_Command+0xe2>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2204      	movs	r2, #4
 8005ad8:	645a      	str	r2, [r3, #68]	@ 0x44
    if (status == HAL_OK)
 8005ada:	e009      	b.n	8005af0 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2224      	movs	r2, #36	@ 0x24
 8005ae0:	645a      	str	r2, [r3, #68]	@ 0x44
    if (status == HAL_OK)
 8005ae2:	e005      	b.n	8005af0 <HAL_OSPI_Command+0xf6>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2210      	movs	r2, #16
 8005aec:	649a      	str	r2, [r3, #72]	@ 0x48
 8005aee:	e000      	b.n	8005af2 <HAL_OSPI_Command+0xf8>
    if (status == HAL_OK)
 8005af0:	bf00      	nop
  }

  /* Return function status */
  return status;
 8005af2:	7ffb      	ldrb	r3, [r7, #31]
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3720      	adds	r7, #32
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b08a      	sub	sp, #40	@ 0x28
 8005b00:	af02      	add	r7, sp, #8
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005b08:	f7fd fe5a 	bl	80037c0 <HAL_GetTick>
 8005b0c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	3350      	adds	r3, #80	@ 0x50
 8005b14:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d105      	bne.n	8005b28 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2208      	movs	r2, #8
 8005b24:	649a      	str	r2, [r3, #72]	@ 0x48
 8005b26:	e057      	b.n	8005bd8 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b2c:	2b04      	cmp	r3, #4
 8005b2e:	d14e      	bne.n	8005bce <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b36:	1c5a      	adds	r2, r3, #1
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	63da      	str	r2, [r3, #60]	@ 0x3c
      hospi->XferSize  = hospi->XferCount;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	639a      	str	r2, [r3, #56]	@ 0x38
      hospi->pBuffPtr  = pData;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005b58:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	2201      	movs	r2, #1
 8005b62:	2104      	movs	r1, #4
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f000 fcad 	bl	80064c4 <OSPI_WaitFlagStateUntilTimeout>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8005b6e:	7ffb      	ldrb	r3, [r7, #31]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d113      	bne.n	8005b9c <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b78:	781a      	ldrb	r2, [r3, #0]
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b82:	1c5a      	adds	r2, r3, #1
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	635a      	str	r2, [r3, #52]	@ 0x34
        hospi->XferCount--;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b8c:	1e5a      	subs	r2, r3, #1
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
      while (hospi->XferCount > 0U);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1df      	bne.n	8005b5a <HAL_OSPI_Transmit+0x5e>
 8005b9a:	e000      	b.n	8005b9e <HAL_OSPI_Transmit+0xa2>
          break;
 8005b9c:	bf00      	nop

      if (status == HAL_OK)
 8005b9e:	7ffb      	ldrb	r3, [r7, #31]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d119      	bne.n	8005bd8 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	2201      	movs	r2, #1
 8005bac:	2102      	movs	r1, #2
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f000 fc88 	bl	80064c4 <OSPI_WaitFlagStateUntilTimeout>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8005bb8:	7ffb      	ldrb	r3, [r7, #31]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10c      	bne.n	8005bd8 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2202      	movs	r2, #2
 8005bca:	645a      	str	r2, [r3, #68]	@ 0x44
 8005bcc:	e004      	b.n	8005bd8 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2210      	movs	r2, #16
 8005bd6:	649a      	str	r2, [r3, #72]	@ 0x48
    }
  }

  /* Return function status */
  return status;
 8005bd8:	7ffb      	ldrb	r3, [r7, #31]
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3720      	adds	r7, #32
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b08c      	sub	sp, #48	@ 0x30
 8005be6:	af02      	add	r7, sp, #8
 8005be8:	60f8      	str	r0, [r7, #12]
 8005bea:	60b9      	str	r1, [r7, #8]
 8005bec:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005bee:	f7fd fde7 	bl	80037c0 <HAL_GetTick>
 8005bf2:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	3350      	adds	r3, #80	@ 0x50
 8005bfa:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c02:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005c0c:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d106      	bne.n	8005c22 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2208      	movs	r2, #8
 8005c1e:	649a      	str	r2, [r3, #72]	@ 0x48
 8005c20:	e07c      	b.n	8005d1c <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c26:	2b04      	cmp	r3, #4
 8005c28:	d172      	bne.n	8005d10 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c30:	1c5a      	adds	r2, r3, #1
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	63da      	str	r2, [r3, #60]	@ 0x3c
      hospi->XferSize  = hospi->XferCount;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	639a      	str	r2, [r3, #56]	@ 0x38
      hospi->pBuffPtr  = pData;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	68ba      	ldr	r2, [r7, #8]
 8005c42:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005c56:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c60:	d104      	bne.n	8005c6c <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	649a      	str	r2, [r3, #72]	@ 0x48
 8005c6a:	e011      	b.n	8005c90 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005c74:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d004      	beq.n	8005c86 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	69ba      	ldr	r2, [r7, #24]
 8005c82:	649a      	str	r2, [r3, #72]	@ 0x48
 8005c84:	e004      	b.n	8005c90 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	9300      	str	r3, [sp, #0]
 8005c94:	6a3b      	ldr	r3, [r7, #32]
 8005c96:	2201      	movs	r2, #1
 8005c98:	2106      	movs	r1, #6
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f000 fc12 	bl	80064c4 <OSPI_WaitFlagStateUntilTimeout>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
 8005ca6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d114      	bne.n	8005cd8 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cb2:	69fa      	ldr	r2, [r7, #28]
 8005cb4:	7812      	ldrb	r2, [r2, #0]
 8005cb6:	b2d2      	uxtb	r2, r2
 8005cb8:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cbe:	1c5a      	adds	r2, r3, #1
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	635a      	str	r2, [r3, #52]	@ 0x34
        hospi->XferCount--;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cc8:	1e5a      	subs	r2, r3, #1
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
      while (hospi->XferCount > 0U);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d1dc      	bne.n	8005c90 <HAL_OSPI_Receive+0xae>
 8005cd6:	e000      	b.n	8005cda <HAL_OSPI_Receive+0xf8>
          break;
 8005cd8:	bf00      	nop

      if (status == HAL_OK)
 8005cda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d11c      	bne.n	8005d1c <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	2102      	movs	r1, #2
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f000 fbe9 	bl	80064c4 <OSPI_WaitFlagStateUntilTimeout>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
 8005cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d10d      	bne.n	8005d1c <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2202      	movs	r2, #2
 8005d06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	645a      	str	r2, [r3, #68]	@ 0x44
 8005d0e:	e005      	b.n	8005d1c <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2210      	movs	r2, #16
 8005d1a:	649a      	str	r2, [r3, #72]	@ 0x48
    }
  }

  /* Return function status */
  return status;
 8005d1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3728      	adds	r7, #40	@ 0x28
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <HAL_OSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @note   This function should not be used when the memory is in octal mode (see Errata Sheet)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b08a      	sub	sp, #40	@ 0x28
 8005d2c:	af02      	add	r7, sp, #8
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005d34:	f7fd fd44 	bl	80037c0 <HAL_GetTick>
 8005d38:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d40:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005d4a:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP(cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL(cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d50:	2b04      	cmp	r3, #4
 8005d52:	d164      	bne.n	8005e1e <HAL_OSPI_AutoPolling+0xf6>
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d5c:	d15f      	bne.n	8005e1e <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	2200      	movs	r2, #0
 8005d66:	2120      	movs	r1, #32
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f000 fbab 	bl	80064c4 <OSPI_WaitFlagStateUntilTimeout>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8005d72:	7ffb      	ldrb	r3, [r7, #31]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d158      	bne.n	8005e2a <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG(hospi->Instance->PSMAR, cfg->Match);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	6812      	ldr	r2, [r2, #0]
 8005d80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      WRITE_REG(hospi->Instance->PSMKR, cfg->Mask);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	6852      	ldr	r2, [r2, #4]
 8005d8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      WRITE_REG(hospi->Instance->PIR,   cfg->Interval);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	6912      	ldr	r2, [r2, #16]
 8005d98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f023 5243 	bic.w	r2, r3, #817889280	@ 0x30c00000
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	6899      	ldr	r1, [r3, #8]
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	430b      	orrs	r3, r1
 8005db0:	431a      	orrs	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8005dba:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005dc4:	d104      	bne.n	8005dd0 <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	649a      	str	r2, [r3, #72]	@ 0x48
 8005dce:	e011      	b.n	8005df4 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005dd8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d004      	beq.n	8005dea <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	649a      	str	r2, [r3, #72]	@ 0x48
 8005de8:	e004      	b.n	8005df4 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	2108      	movs	r1, #8
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f000 fb60 	bl	80064c4 <OSPI_WaitFlagStateUntilTimeout>
 8005e04:	4603      	mov	r3, r0
 8005e06:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8005e08:	7ffb      	ldrb	r3, [r7, #31]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10d      	bne.n	8005e2a <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2208      	movs	r2, #8
 8005e14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2202      	movs	r2, #2
 8005e1a:	645a      	str	r2, [r3, #68]	@ 0x44
    if (status == HAL_OK)
 8005e1c:	e005      	b.n	8005e2a <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2210      	movs	r2, #16
 8005e26:	649a      	str	r2, [r3, #72]	@ 0x48
 8005e28:	e000      	b.n	8005e2c <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 8005e2a:	bf00      	nop
  }

  /* Return function status */
  return status;
 8005e2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3720      	adds	r7, #32
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b083      	sub	sp, #12
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	64da      	str	r2, [r3, #76]	@ 0x4c
  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b092      	sub	sp, #72	@ 0x48
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e60:	2300      	movs	r3, #0
 8005e62:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8005e66:	2300      	movs	r3, #0
 8005e68:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a08      	ldr	r2, [pc, #32]	@ (8005e94 <HAL_OSPIM_Config+0x40>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d105      	bne.n	8005e82 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 1U;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8005e80:	e004      	b.n	8005e8c <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8005e82:	2301      	movs	r3, #1
 8005e84:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 0U;
 8005e86:	2300      	movs	r3, #0
 8005e88:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8005e92:	e01f      	b.n	8005ed4 <HAL_OSPIM_Config+0x80>
 8005e94:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8005e98:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	b2d8      	uxtb	r0, r3
 8005ea0:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8005ea4:	f107 0114 	add.w	r1, r7, #20
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	4413      	add	r3, r2
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	440b      	add	r3, r1
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	f000 fca0 	bl	80067f8 <OSPIM_GetConfig>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d005      	beq.n	8005eca <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2208      	movs	r2, #8
 8005ec8:	649a      	str	r2, [r3, #72]	@ 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8005eca:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005ece:	3301      	adds	r3, #1
 8005ed0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8005ed4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d9dd      	bls.n	8005e98 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8005edc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f040 82e3 	bne.w	80064ac <HAL_OSPIM_Config+0x658>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8005ee6:	4bc5      	ldr	r3, [pc, #788]	@ (80061fc <HAL_OSPIM_Config+0x3a8>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00b      	beq.n	8005f0a <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8005ef2:	4bc2      	ldr	r3, [pc, #776]	@ (80061fc <HAL_OSPIM_Config+0x3a8>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4ac1      	ldr	r2, [pc, #772]	@ (80061fc <HAL_OSPIM_Config+0x3a8>)
 8005ef8:	f023 0301 	bic.w	r3, r3, #1
 8005efc:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8005efe:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005f02:	f043 0301 	orr.w	r3, r3, #1
 8005f06:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8005f0a:	4bbd      	ldr	r3, [pc, #756]	@ (8006200 <HAL_OSPIM_Config+0x3ac>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00b      	beq.n	8005f2e <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8005f16:	4bba      	ldr	r3, [pc, #744]	@ (8006200 <HAL_OSPIM_Config+0x3ac>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4ab9      	ldr	r2, [pc, #740]	@ (8006200 <HAL_OSPIM_Config+0x3ac>)
 8005f1c:	f023 0301 	bic.w	r3, r3, #1
 8005f20:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8005f22:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005f26:	f043 0302 	orr.w	r3, r3, #2
 8005f2a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8005f2e:	49b5      	ldr	r1, [pc, #724]	@ (8006204 <HAL_OSPIM_Config+0x3b0>)
 8005f30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f32:	4613      	mov	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4413      	add	r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	3348      	adds	r3, #72	@ 0x48
 8005f3c:	443b      	add	r3, r7
 8005f3e:	3b2c      	subs	r3, #44	@ 0x2c
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	3b01      	subs	r3, #1
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	440b      	add	r3, r1
 8005f48:	6859      	ldr	r1, [r3, #4]
 8005f4a:	48ae      	ldr	r0, [pc, #696]	@ (8006204 <HAL_OSPIM_Config+0x3b0>)
 8005f4c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f4e:	4613      	mov	r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4413      	add	r3, r2
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	3348      	adds	r3, #72	@ 0x48
 8005f58:	443b      	add	r3, r7
 8005f5a:	3b2c      	subs	r3, #44	@ 0x2c
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4403      	add	r3, r0
 8005f68:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8005f6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	4413      	add	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	3348      	adds	r3, #72	@ 0x48
 8005f76:	443b      	add	r3, r7
 8005f78:	3b34      	subs	r3, #52	@ 0x34
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f000 80a1 	beq.w	80060c4 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8005f82:	49a0      	ldr	r1, [pc, #640]	@ (8006204 <HAL_OSPIM_Config+0x3b0>)
 8005f84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f86:	4613      	mov	r3, r2
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	4413      	add	r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	3348      	adds	r3, #72	@ 0x48
 8005f90:	443b      	add	r3, r7
 8005f92:	3b34      	subs	r3, #52	@ 0x34
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	3b01      	subs	r3, #1
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	440b      	add	r3, r1
 8005f9c:	6859      	ldr	r1, [r3, #4]
 8005f9e:	4899      	ldr	r0, [pc, #612]	@ (8006204 <HAL_OSPIM_Config+0x3b0>)
 8005fa0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	4413      	add	r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	3348      	adds	r3, #72	@ 0x48
 8005fac:	443b      	add	r3, r7
 8005fae:	3b34      	subs	r3, #52	@ 0x34
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	f021 0201 	bic.w	r2, r1, #1
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4403      	add	r3, r0
 8005fbc:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8005fbe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	4413      	add	r3, r2
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	3348      	adds	r3, #72	@ 0x48
 8005fca:	443b      	add	r3, r7
 8005fcc:	3b30      	subs	r3, #48	@ 0x30
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d01d      	beq.n	8006010 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8005fd4:	498b      	ldr	r1, [pc, #556]	@ (8006204 <HAL_OSPIM_Config+0x3b0>)
 8005fd6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fd8:	4613      	mov	r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	3348      	adds	r3, #72	@ 0x48
 8005fe2:	443b      	add	r3, r7
 8005fe4:	3b30      	subs	r3, #48	@ 0x30
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	440b      	add	r3, r1
 8005fee:	6859      	ldr	r1, [r3, #4]
 8005ff0:	4884      	ldr	r0, [pc, #528]	@ (8006204 <HAL_OSPIM_Config+0x3b0>)
 8005ff2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	3348      	adds	r3, #72	@ 0x48
 8005ffe:	443b      	add	r3, r7
 8006000:	3b30      	subs	r3, #48	@ 0x30
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3b01      	subs	r3, #1
 8006006:	f021 0210 	bic.w	r2, r1, #16
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4403      	add	r3, r0
 800600e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006010:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006012:	4613      	mov	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	4413      	add	r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	3348      	adds	r3, #72	@ 0x48
 800601c:	443b      	add	r3, r7
 800601e:	3b28      	subs	r3, #40	@ 0x28
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d021      	beq.n	800606a <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8006026:	4977      	ldr	r1, [pc, #476]	@ (8006204 <HAL_OSPIM_Config+0x3b0>)
 8006028:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800602a:	4613      	mov	r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4413      	add	r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	3348      	adds	r3, #72	@ 0x48
 8006034:	443b      	add	r3, r7
 8006036:	3b28      	subs	r3, #40	@ 0x28
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	3b01      	subs	r3, #1
 800603c:	f003 0301 	and.w	r3, r3, #1
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	440b      	add	r3, r1
 8006044:	6859      	ldr	r1, [r3, #4]
 8006046:	486f      	ldr	r0, [pc, #444]	@ (8006204 <HAL_OSPIM_Config+0x3b0>)
 8006048:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800604a:	4613      	mov	r3, r2
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4413      	add	r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	3348      	adds	r3, #72	@ 0x48
 8006054:	443b      	add	r3, r7
 8006056:	3b28      	subs	r3, #40	@ 0x28
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	3b01      	subs	r3, #1
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	4403      	add	r3, r0
 8006068:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800606a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800606c:	4613      	mov	r3, r2
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	4413      	add	r3, r2
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	3348      	adds	r3, #72	@ 0x48
 8006076:	443b      	add	r3, r7
 8006078:	3b24      	subs	r3, #36	@ 0x24
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d021      	beq.n	80060c4 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8006080:	4960      	ldr	r1, [pc, #384]	@ (8006204 <HAL_OSPIM_Config+0x3b0>)
 8006082:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006084:	4613      	mov	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4413      	add	r3, r2
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	3348      	adds	r3, #72	@ 0x48
 800608e:	443b      	add	r3, r7
 8006090:	3b24      	subs	r3, #36	@ 0x24
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	3b01      	subs	r3, #1
 8006096:	f003 0301 	and.w	r3, r3, #1
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	440b      	add	r3, r1
 800609e:	6859      	ldr	r1, [r3, #4]
 80060a0:	4858      	ldr	r0, [pc, #352]	@ (8006204 <HAL_OSPIM_Config+0x3b0>)
 80060a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80060a4:	4613      	mov	r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4413      	add	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	3348      	adds	r3, #72	@ 0x48
 80060ae:	443b      	add	r3, r7
 80060b0:	3b24      	subs	r3, #36	@ 0x24
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3b01      	subs	r3, #1
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	4403      	add	r3, r0
 80060c2:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	6819      	ldr	r1, [r3, #0]
 80060c8:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80060cc:	4613      	mov	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4413      	add	r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	3348      	adds	r3, #72	@ 0x48
 80060d6:	443b      	add	r3, r7
 80060d8:	3b34      	subs	r3, #52	@ 0x34
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4299      	cmp	r1, r3
 80060de:	d03c      	beq.n	800615a <HAL_OSPIM_Config+0x306>
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	6899      	ldr	r1, [r3, #8]
 80060e4:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80060e8:	4613      	mov	r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4413      	add	r3, r2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	3348      	adds	r3, #72	@ 0x48
 80060f2:	443b      	add	r3, r7
 80060f4:	3b2c      	subs	r3, #44	@ 0x2c
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4299      	cmp	r1, r3
 80060fa:	d02e      	beq.n	800615a <HAL_OSPIM_Config+0x306>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	6859      	ldr	r1, [r3, #4]
 8006100:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8006104:	4613      	mov	r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4413      	add	r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	3348      	adds	r3, #72	@ 0x48
 800610e:	443b      	add	r3, r7
 8006110:	3b30      	subs	r3, #48	@ 0x30
 8006112:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 8006114:	4299      	cmp	r1, r3
 8006116:	d103      	bne.n	8006120 <HAL_OSPIM_Config+0x2cc>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d11c      	bne.n	800615a <HAL_OSPIM_Config+0x306>
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	68d9      	ldr	r1, [r3, #12]
 8006124:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8006128:	4613      	mov	r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	4413      	add	r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	3348      	adds	r3, #72	@ 0x48
 8006132:	443b      	add	r3, r7
 8006134:	3b28      	subs	r3, #40	@ 0x28
 8006136:	681b      	ldr	r3, [r3, #0]
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8006138:	4299      	cmp	r1, r3
 800613a:	d00e      	beq.n	800615a <HAL_OSPIM_Config+0x306>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	6919      	ldr	r1, [r3, #16]
 8006140:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8006144:	4613      	mov	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	3348      	adds	r3, #72	@ 0x48
 800614e:	443b      	add	r3, r7
 8006150:	3b24      	subs	r3, #36	@ 0x24
 8006152:	681b      	ldr	r3, [r3, #0]
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006154:	4299      	cmp	r1, r3
 8006156:	f040 80d4 	bne.w	8006302 <HAL_OSPIM_Config+0x4ae>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800615a:	492a      	ldr	r1, [pc, #168]	@ (8006204 <HAL_OSPIM_Config+0x3b0>)
 800615c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8006160:	4613      	mov	r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4413      	add	r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	3348      	adds	r3, #72	@ 0x48
 800616a:	443b      	add	r3, r7
 800616c:	3b34      	subs	r3, #52	@ 0x34
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	3b01      	subs	r3, #1
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	440b      	add	r3, r1
 8006176:	6859      	ldr	r1, [r3, #4]
 8006178:	4822      	ldr	r0, [pc, #136]	@ (8006204 <HAL_OSPIM_Config+0x3b0>)
 800617a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800617e:	4613      	mov	r3, r2
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	4413      	add	r3, r2
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	3348      	adds	r3, #72	@ 0x48
 8006188:	443b      	add	r3, r7
 800618a:	3b34      	subs	r3, #52	@ 0x34
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	3b01      	subs	r3, #1
 8006190:	f021 0201 	bic.w	r2, r1, #1
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4403      	add	r3, r0
 8006198:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800619a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800619e:	4613      	mov	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4413      	add	r3, r2
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	3348      	adds	r3, #72	@ 0x48
 80061a8:	443b      	add	r3, r7
 80061aa:	3b30      	subs	r3, #48	@ 0x30
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d01f      	beq.n	80061f2 <HAL_OSPIM_Config+0x39e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80061b2:	4914      	ldr	r1, [pc, #80]	@ (8006204 <HAL_OSPIM_Config+0x3b0>)
 80061b4:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80061b8:	4613      	mov	r3, r2
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	4413      	add	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	3348      	adds	r3, #72	@ 0x48
 80061c2:	443b      	add	r3, r7
 80061c4:	3b30      	subs	r3, #48	@ 0x30
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	3b01      	subs	r3, #1
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	440b      	add	r3, r1
 80061ce:	6859      	ldr	r1, [r3, #4]
 80061d0:	480c      	ldr	r0, [pc, #48]	@ (8006204 <HAL_OSPIM_Config+0x3b0>)
 80061d2:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80061d6:	4613      	mov	r3, r2
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	4413      	add	r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	3348      	adds	r3, #72	@ 0x48
 80061e0:	443b      	add	r3, r7
 80061e2:	3b30      	subs	r3, #48	@ 0x30
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	3b01      	subs	r3, #1
 80061e8:	f021 0210 	bic.w	r2, r1, #16
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4403      	add	r3, r0
 80061f0:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80061f2:	4904      	ldr	r1, [pc, #16]	@ (8006204 <HAL_OSPIM_Config+0x3b0>)
 80061f4:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80061f8:	e006      	b.n	8006208 <HAL_OSPIM_Config+0x3b4>
 80061fa:	bf00      	nop
 80061fc:	a0001000 	.word	0xa0001000
 8006200:	a0001400 	.word	0xa0001400
 8006204:	50061c00 	.word	0x50061c00
 8006208:	4613      	mov	r3, r2
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	4413      	add	r3, r2
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	3348      	adds	r3, #72	@ 0x48
 8006212:	443b      	add	r3, r7
 8006214:	3b2c      	subs	r3, #44	@ 0x2c
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	3b01      	subs	r3, #1
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	440b      	add	r3, r1
 800621e:	6859      	ldr	r1, [r3, #4]
 8006220:	48a5      	ldr	r0, [pc, #660]	@ (80064b8 <HAL_OSPIM_Config+0x664>)
 8006222:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8006226:	4613      	mov	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	4413      	add	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	3348      	adds	r3, #72	@ 0x48
 8006230:	443b      	add	r3, r7
 8006232:	3b2c      	subs	r3, #44	@ 0x2c
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	3b01      	subs	r3, #1
 8006238:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	4403      	add	r3, r0
 8006240:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006242:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8006246:	4613      	mov	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4413      	add	r3, r2
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	3348      	adds	r3, #72	@ 0x48
 8006250:	443b      	add	r3, r7
 8006252:	3b28      	subs	r3, #40	@ 0x28
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d023      	beq.n	80062a2 <HAL_OSPIM_Config+0x44e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800625a:	4997      	ldr	r1, [pc, #604]	@ (80064b8 <HAL_OSPIM_Config+0x664>)
 800625c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8006260:	4613      	mov	r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4413      	add	r3, r2
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	3348      	adds	r3, #72	@ 0x48
 800626a:	443b      	add	r3, r7
 800626c:	3b28      	subs	r3, #40	@ 0x28
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	3b01      	subs	r3, #1
 8006272:	f003 0301 	and.w	r3, r3, #1
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	440b      	add	r3, r1
 800627a:	6859      	ldr	r1, [r3, #4]
 800627c:	488e      	ldr	r0, [pc, #568]	@ (80064b8 <HAL_OSPIM_Config+0x664>)
 800627e:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8006282:	4613      	mov	r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	4413      	add	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	3348      	adds	r3, #72	@ 0x48
 800628c:	443b      	add	r3, r7
 800628e:	3b28      	subs	r3, #40	@ 0x28
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	3b01      	subs	r3, #1
 8006294:	f003 0301 	and.w	r3, r3, #1
 8006298:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	4403      	add	r3, r0
 80062a0:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80062a2:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80062a6:	4613      	mov	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	4413      	add	r3, r2
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	3348      	adds	r3, #72	@ 0x48
 80062b0:	443b      	add	r3, r7
 80062b2:	3b24      	subs	r3, #36	@ 0x24
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d023      	beq.n	8006302 <HAL_OSPIM_Config+0x4ae>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80062ba:	497f      	ldr	r1, [pc, #508]	@ (80064b8 <HAL_OSPIM_Config+0x664>)
 80062bc:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80062c0:	4613      	mov	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4413      	add	r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	3348      	adds	r3, #72	@ 0x48
 80062ca:	443b      	add	r3, r7
 80062cc:	3b24      	subs	r3, #36	@ 0x24
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	3b01      	subs	r3, #1
 80062d2:	f003 0301 	and.w	r3, r3, #1
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	440b      	add	r3, r1
 80062da:	6859      	ldr	r1, [r3, #4]
 80062dc:	4876      	ldr	r0, [pc, #472]	@ (80064b8 <HAL_OSPIM_Config+0x664>)
 80062de:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80062e2:	4613      	mov	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	3348      	adds	r3, #72	@ 0x48
 80062ec:	443b      	add	r3, r7
 80062ee:	3b24      	subs	r3, #36	@ 0x24
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	3b01      	subs	r3, #1
 80062f4:	f003 0301 	and.w	r3, r3, #1
 80062f8:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	4403      	add	r3, r0
 8006300:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8006302:	4a6d      	ldr	r2, [pc, #436]	@ (80064b8 <HAL_OSPIM_Config+0x664>)
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	3b01      	subs	r3, #1
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	4413      	add	r3, r2
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006314:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006316:	025b      	lsls	r3, r3, #9
 8006318:	431a      	orrs	r2, r3
 800631a:	4967      	ldr	r1, [pc, #412]	@ (80064b8 <HAL_OSPIM_Config+0x664>)
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	3b01      	subs	r3, #1
 8006322:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	440b      	add	r3, r1
 800632a:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800632c:	4a62      	ldr	r2, [pc, #392]	@ (80064b8 <HAL_OSPIM_Config+0x664>)
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3b01      	subs	r3, #1
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	4413      	add	r3, r2
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	f023 0203 	bic.w	r2, r3, #3
 800633e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006340:	005b      	lsls	r3, r3, #1
 8006342:	431a      	orrs	r2, r3
 8006344:	495c      	ldr	r1, [pc, #368]	@ (80064b8 <HAL_OSPIM_Config+0x664>)
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	3b01      	subs	r3, #1
 800634c:	f042 0201 	orr.w	r2, r2, #1
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	440b      	add	r3, r1
 8006354:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d014      	beq.n	8006388 <HAL_OSPIM_Config+0x534>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800635e:	4a56      	ldr	r2, [pc, #344]	@ (80064b8 <HAL_OSPIM_Config+0x664>)
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	3b01      	subs	r3, #1
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	4413      	add	r3, r2
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006370:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006372:	015b      	lsls	r3, r3, #5
 8006374:	431a      	orrs	r2, r3
 8006376:	4950      	ldr	r1, [pc, #320]	@ (80064b8 <HAL_OSPIM_Config+0x664>)
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	3b01      	subs	r3, #1
 800637e:	f042 0210 	orr.w	r2, r2, #16
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	440b      	add	r3, r1
 8006386:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d019      	beq.n	80063c8 <HAL_OSPIM_Config+0x574>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006394:	4a48      	ldr	r2, [pc, #288]	@ (80064b8 <HAL_OSPIM_Config+0x664>)
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	3b01      	subs	r3, #1
 800639c:	f003 0301 	and.w	r3, r3, #1
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	4413      	add	r3, r2
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80063aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063ac:	049b      	lsls	r3, r3, #18
 80063ae:	431a      	orrs	r2, r3
 80063b0:	4941      	ldr	r1, [pc, #260]	@ (80064b8 <HAL_OSPIM_Config+0x664>)
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	3b01      	subs	r3, #1
 80063b8:	f003 0301 	and.w	r3, r3, #1
 80063bc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	440b      	add	r3, r1
 80063c4:	605a      	str	r2, [r3, #4]
 80063c6:	e01c      	b.n	8006402 <HAL_OSPIM_Config+0x5ae>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d018      	beq.n	8006402 <HAL_OSPIM_Config+0x5ae>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80063d0:	4a39      	ldr	r2, [pc, #228]	@ (80064b8 <HAL_OSPIM_Config+0x664>)
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	3b01      	subs	r3, #1
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4413      	add	r3, r2
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80063e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063e8:	069b      	lsls	r3, r3, #26
 80063ea:	431a      	orrs	r2, r3
 80063ec:	4932      	ldr	r1, [pc, #200]	@ (80064b8 <HAL_OSPIM_Config+0x664>)
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	3b01      	subs	r3, #1
 80063f4:	f003 0301 	and.w	r3, r3, #1
 80063f8:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	440b      	add	r3, r1
 8006400:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d019      	beq.n	8006442 <HAL_OSPIM_Config+0x5ee>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800640e:	4a2a      	ldr	r2, [pc, #168]	@ (80064b8 <HAL_OSPIM_Config+0x664>)
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	3b01      	subs	r3, #1
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	4413      	add	r3, r2
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8006424:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006426:	049b      	lsls	r3, r3, #18
 8006428:	431a      	orrs	r2, r3
 800642a:	4923      	ldr	r1, [pc, #140]	@ (80064b8 <HAL_OSPIM_Config+0x664>)
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	3b01      	subs	r3, #1
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	440b      	add	r3, r1
 800643e:	605a      	str	r2, [r3, #4]
 8006440:	e01c      	b.n	800647c <HAL_OSPIM_Config+0x628>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d018      	beq.n	800647c <HAL_OSPIM_Config+0x628>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800644a:	4a1b      	ldr	r2, [pc, #108]	@ (80064b8 <HAL_OSPIM_Config+0x664>)
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	3b01      	subs	r3, #1
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4413      	add	r3, r2
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8006460:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006462:	069b      	lsls	r3, r3, #26
 8006464:	431a      	orrs	r2, r3
 8006466:	4914      	ldr	r1, [pc, #80]	@ (80064b8 <HAL_OSPIM_Config+0x664>)
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	3b01      	subs	r3, #1
 800646e:	f003 0301 	and.w	r3, r3, #1
 8006472:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	440b      	add	r3, r1
 800647a:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800647c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8006480:	f003 0301 	and.w	r3, r3, #1
 8006484:	2b00      	cmp	r3, #0
 8006486:	d005      	beq.n	8006494 <HAL_OSPIM_Config+0x640>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8006488:	4b0c      	ldr	r3, [pc, #48]	@ (80064bc <HAL_OSPIM_Config+0x668>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a0b      	ldr	r2, [pc, #44]	@ (80064bc <HAL_OSPIM_Config+0x668>)
 800648e:	f043 0301 	orr.w	r3, r3, #1
 8006492:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8006494:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8006498:	f003 0302 	and.w	r3, r3, #2
 800649c:	2b00      	cmp	r3, #0
 800649e:	d005      	beq.n	80064ac <HAL_OSPIM_Config+0x658>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80064a0:	4b07      	ldr	r3, [pc, #28]	@ (80064c0 <HAL_OSPIM_Config+0x66c>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a06      	ldr	r2, [pc, #24]	@ (80064c0 <HAL_OSPIM_Config+0x66c>)
 80064a6:	f043 0301 	orr.w	r3, r3, #1
 80064aa:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 80064ac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3748      	adds	r7, #72	@ 0x48
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	50061c00 	.word	0x50061c00
 80064bc:	a0001000 	.word	0xa0001000
 80064c0:	a0001400 	.word	0xa0001400

080064c4 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	603b      	str	r3, [r7, #0]
 80064d0:	4613      	mov	r3, r2
 80064d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80064d4:	e01a      	b.n	800650c <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064dc:	d016      	beq.n	800650c <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064de:	f7fd f96f 	bl	80037c0 <HAL_GetTick>
 80064e2:	4602      	mov	r2, r0
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	69ba      	ldr	r2, [r7, #24]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d302      	bcc.n	80064f4 <OSPI_WaitFlagStateUntilTimeout+0x30>
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10b      	bne.n	800650c <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064fa:	645a      	str	r2, [r3, #68]	@ 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006500:	f043 0201 	orr.w	r2, r3, #1
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	649a      	str	r2, [r3, #72]	@ 0x48

        return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e00e      	b.n	800652a <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6a1a      	ldr	r2, [r3, #32]
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	4013      	ands	r3, r2
 8006516:	2b00      	cmp	r3, #0
 8006518:	bf14      	ite	ne
 800651a:	2301      	movne	r3, #1
 800651c:	2300      	moveq	r3, #0
 800651e:	b2db      	uxtb	r3, r3
 8006520:	461a      	mov	r2, r3
 8006522:	79fb      	ldrb	r3, [r7, #7]
 8006524:	429a      	cmp	r2, r3
 8006526:	d1d6      	bne.n	80064d6 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
	...

08006534 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8006534:	b480      	push	{r7}
 8006536:	b089      	sub	sp, #36	@ 0x24
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800653e:	2300      	movs	r3, #0
 8006540:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006550:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10a      	bne.n	8006570 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	430a      	orrs	r2, r1
 800656e:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2b02      	cmp	r3, #2
 8006576:	d114      	bne.n	80065a2 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8006580:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800658a:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8006594:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800659e:	60fb      	str	r3, [r7, #12]
 80065a0:	e013      	b.n	80065ca <OSPI_ConfigCmd+0x96>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80065aa:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80065b4:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80065be:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80065c8:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065d2:	431a      	orrs	r2, r3
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d012      	beq.n	8006606 <OSPI_ConfigCmd+0xd2>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065f8:	4319      	orrs	r1, r3
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065fe:	430b      	orrs	r3, r1
 8006600:	431a      	orrs	r2, r3
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f023 021f 	bic.w	r2, r3, #31
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006612:	431a      	orrs	r2, r3
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800661c:	2b00      	cmp	r3, #0
 800661e:	d009      	beq.n	8006634 <OSPI_ConfigCmd+0x100>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d105      	bne.n	8006634 <OSPI_ConfigCmd+0x100>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	3a01      	subs	r2, #1
 8006632:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	2b00      	cmp	r3, #0
 800663a:	f000 8099 	beq.w	8006770 <OSPI_ConfigCmd+0x23c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d055      	beq.n	80066f2 <OSPI_ConfigCmd+0x1be>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800664a:	2b00      	cmp	r3, #0
 800664c:	d01e      	beq.n	800668c <OSPI_ConfigCmd+0x158>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	4b68      	ldr	r3, [pc, #416]	@ (80067f4 <OSPI_ConfigCmd+0x2c0>)
 8006654:	4013      	ands	r3, r2
 8006656:	683a      	ldr	r2, [r7, #0]
 8006658:	68d1      	ldr	r1, [r2, #12]
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	6952      	ldr	r2, [r2, #20]
 800665e:	4311      	orrs	r1, r2
 8006660:	683a      	ldr	r2, [r7, #0]
 8006662:	6912      	ldr	r2, [r2, #16]
 8006664:	4311      	orrs	r1, r2
 8006666:	683a      	ldr	r2, [r7, #0]
 8006668:	69d2      	ldr	r2, [r2, #28]
 800666a:	4311      	orrs	r1, r2
 800666c:	683a      	ldr	r2, [r7, #0]
 800666e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006670:	4311      	orrs	r1, r2
 8006672:	683a      	ldr	r2, [r7, #0]
 8006674:	6a12      	ldr	r2, [r2, #32]
 8006676:	4311      	orrs	r1, r2
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800667c:	4311      	orrs	r1, r2
 800667e:	683a      	ldr	r2, [r7, #0]
 8006680:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006682:	430a      	orrs	r2, r1
 8006684:	431a      	orrs	r2, r3
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	601a      	str	r2, [r3, #0]
 800668a:	e028      	b.n	80066de <OSPI_ConfigCmd+0x1aa>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006694:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006698:	683a      	ldr	r2, [r7, #0]
 800669a:	68d1      	ldr	r1, [r2, #12]
 800669c:	683a      	ldr	r2, [r7, #0]
 800669e:	6952      	ldr	r2, [r2, #20]
 80066a0:	4311      	orrs	r1, r2
 80066a2:	683a      	ldr	r2, [r7, #0]
 80066a4:	6912      	ldr	r2, [r2, #16]
 80066a6:	4311      	orrs	r1, r2
 80066a8:	683a      	ldr	r2, [r7, #0]
 80066aa:	69d2      	ldr	r2, [r2, #28]
 80066ac:	4311      	orrs	r1, r2
 80066ae:	683a      	ldr	r2, [r7, #0]
 80066b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80066b2:	4311      	orrs	r1, r2
 80066b4:	683a      	ldr	r2, [r7, #0]
 80066b6:	6a12      	ldr	r2, [r2, #32]
 80066b8:	430a      	orrs	r2, r1
 80066ba:	431a      	orrs	r2, r3
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066c8:	d109      	bne.n	80066de <OSPI_ConfigCmd+0x1aa>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80066ce:	2b08      	cmp	r3, #8
 80066d0:	d105      	bne.n	80066de <OSPI_ConfigCmd+0x1aa>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	689a      	ldr	r2, [r3, #8]
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	683a      	ldr	r2, [r7, #0]
 80066ec:	6992      	ldr	r2, [r2, #24]
 80066ee:	649a      	str	r2, [r3, #72]	@ 0x48
 80066f0:	e078      	b.n	80067e4 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d017      	beq.n	800672a <OSPI_ConfigCmd+0x1f6>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8006702:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006706:	683a      	ldr	r2, [r7, #0]
 8006708:	68d1      	ldr	r1, [r2, #12]
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	6952      	ldr	r2, [r2, #20]
 800670e:	4311      	orrs	r1, r2
 8006710:	683a      	ldr	r2, [r7, #0]
 8006712:	6912      	ldr	r2, [r2, #16]
 8006714:	4311      	orrs	r1, r2
 8006716:	683a      	ldr	r2, [r7, #0]
 8006718:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800671a:	4311      	orrs	r1, r2
 800671c:	683a      	ldr	r2, [r7, #0]
 800671e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006720:	430a      	orrs	r2, r1
 8006722:	431a      	orrs	r2, r3
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	601a      	str	r2, [r3, #0]
 8006728:	e01d      	b.n	8006766 <OSPI_ConfigCmd+0x232>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	68d9      	ldr	r1, [r3, #12]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	4319      	orrs	r1, r3
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	430b      	orrs	r3, r1
 8006742:	431a      	orrs	r2, r3
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800674c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006750:	d109      	bne.n	8006766 <OSPI_ConfigCmd+0x232>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8006756:	2b08      	cmp	r3, #8
 8006758:	d105      	bne.n	8006766 <OSPI_ConfigCmd+0x232>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	689a      	ldr	r2, [r3, #8]
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	601a      	str	r2, [r3, #0]
 800676e:	e039      	b.n	80067e4 <OSPI_ConfigCmd+0x2b0>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	69db      	ldr	r3, [r3, #28]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d030      	beq.n	80067da <OSPI_ConfigCmd+0x2a6>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800677c:	2b00      	cmp	r3, #0
 800677e:	d017      	beq.n	80067b0 <OSPI_ConfigCmd+0x27c>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8006788:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800678c:	683a      	ldr	r2, [r7, #0]
 800678e:	69d1      	ldr	r1, [r2, #28]
 8006790:	683a      	ldr	r2, [r7, #0]
 8006792:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006794:	4311      	orrs	r1, r2
 8006796:	683a      	ldr	r2, [r7, #0]
 8006798:	6a12      	ldr	r2, [r2, #32]
 800679a:	4311      	orrs	r1, r2
 800679c:	683a      	ldr	r2, [r7, #0]
 800679e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80067a0:	4311      	orrs	r1, r2
 80067a2:	683a      	ldr	r2, [r7, #0]
 80067a4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80067a6:	430a      	orrs	r2, r1
 80067a8:	431a      	orrs	r2, r3
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	601a      	str	r2, [r3, #0]
 80067ae:	e00e      	b.n	80067ce <OSPI_ConfigCmd+0x29a>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	69d9      	ldr	r1, [r3, #28]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c0:	4319      	orrs	r1, r3
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	430b      	orrs	r3, r1
 80067c8:	431a      	orrs	r2, r3
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	683a      	ldr	r2, [r7, #0]
 80067d4:	6992      	ldr	r2, [r2, #24]
 80067d6:	649a      	str	r2, [r3, #72]	@ 0x48
 80067d8:	e004      	b.n	80067e4 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2208      	movs	r2, #8
 80067e2:	649a      	str	r2, [r3, #72]	@ 0x48
    }
  }

  /* Return function status */
  return status;
 80067e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3724      	adds	r7, #36	@ 0x24
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	f0ffc0c0 	.word	0xf0ffc0c0

080067f8 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b087      	sub	sp, #28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	4603      	mov	r3, r0
 8006800:	6039      	str	r1, [r7, #0]
 8006802:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8006804:	2300      	movs	r3, #0
 8006806:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8006808:	2300      	movs	r3, #0
 800680a:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 800680c:	79fb      	ldrb	r3, [r7, #7]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d005      	beq.n	800681e <OSPIM_GetConfig+0x26>
 8006812:	79fb      	ldrb	r3, [r7, #7]
 8006814:	2b02      	cmp	r3, #2
 8006816:	d802      	bhi.n	800681e <OSPIM_GetConfig+0x26>
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d102      	bne.n	8006824 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	75fb      	strb	r3, [r7, #23]
 8006822:	e08e      	b.n	8006942 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	2200      	movs	r2, #0
 8006828:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	2200      	movs	r2, #0
 800682e:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	2200      	movs	r2, #0
 8006834:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2200      	movs	r2, #0
 800683a:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	2200      	movs	r2, #0
 8006840:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8006842:	79fb      	ldrb	r3, [r7, #7]
 8006844:	2b02      	cmp	r3, #2
 8006846:	d101      	bne.n	800684c <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8006848:	4b41      	ldr	r3, [pc, #260]	@ (8006950 <OSPIM_GetConfig+0x158>)
 800684a:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800684c:	2300      	movs	r3, #0
 800684e:	60fb      	str	r3, [r7, #12]
 8006850:	e074      	b.n	800693c <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8006852:	4a40      	ldr	r2, [pc, #256]	@ (8006954 <OSPIM_GetConfig+0x15c>)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4413      	add	r3, r2
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	f003 0301 	and.w	r3, r3, #1
 8006864:	2b00      	cmp	r3, #0
 8006866:	d00a      	beq.n	800687e <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8006868:	68ba      	ldr	r2, [r7, #8]
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	4053      	eors	r3, r2
 800686e:	f003 0302 	and.w	r3, r3, #2
 8006872:	2b00      	cmp	r3, #0
 8006874:	d103      	bne.n	800687e <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	1c5a      	adds	r2, r3, #1
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	f003 0310 	and.w	r3, r3, #16
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00a      	beq.n	800689e <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	4053      	eors	r3, r2
 800688e:	f003 0320 	and.w	r3, r3, #32
 8006892:	2b00      	cmp	r3, #0
 8006894:	d103      	bne.n	800689e <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	1c5a      	adds	r2, r3, #1
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00a      	beq.n	80068be <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80068a8:	68ba      	ldr	r2, [r7, #8]
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	4053      	eors	r3, r2
 80068ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d103      	bne.n	80068be <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	1c5a      	adds	r2, r3, #1
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d018      	beq.n	80068fa <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	4053      	eors	r3, r2
 80068ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d111      	bne.n	80068fa <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d106      	bne.n	80068ee <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	3301      	adds	r3, #1
 80068e4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	60da      	str	r2, [r3, #12]
 80068ec:	e005      	b.n	80068fa <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	3301      	adds	r3, #1
 80068f2:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d018      	beq.n	8006936 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8006904:	68ba      	ldr	r2, [r7, #8]
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	4053      	eors	r3, r2
 800690a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d111      	bne.n	8006936 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d106      	bne.n	800692a <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	3301      	adds	r3, #1
 8006920:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	611a      	str	r2, [r3, #16]
 8006928:	e005      	b.n	8006936 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	3301      	adds	r3, #1
 800692e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	3301      	adds	r3, #1
 800693a:	60fb      	str	r3, [r7, #12]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d987      	bls.n	8006852 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8006942:	7dfb      	ldrb	r3, [r7, #23]
}
 8006944:	4618      	mov	r0, r3
 8006946:	371c      	adds	r7, #28
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr
 8006950:	04040222 	.word	0x04040222
 8006954:	50061c00 	.word	0x50061c00

08006958 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006958:	b480      	push	{r7}
 800695a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800695c:	4b0d      	ldr	r3, [pc, #52]	@ (8006994 <HAL_PWREx_GetVoltageRange+0x3c>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006964:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006968:	d102      	bne.n	8006970 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800696a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800696e:	e00b      	b.n	8006988 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8006970:	4b08      	ldr	r3, [pc, #32]	@ (8006994 <HAL_PWREx_GetVoltageRange+0x3c>)
 8006972:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800697a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800697e:	d102      	bne.n	8006986 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8006980:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006984:	e000      	b.n	8006988 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8006986:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8006988:	4618      	mov	r0, r3
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	40007000 	.word	0x40007000

08006998 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d141      	bne.n	8006a2a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80069a6:	4b4b      	ldr	r3, [pc, #300]	@ (8006ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80069ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069b2:	d131      	bne.n	8006a18 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80069b4:	4b47      	ldr	r3, [pc, #284]	@ (8006ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069ba:	4a46      	ldr	r2, [pc, #280]	@ (8006ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80069c4:	4b43      	ldr	r3, [pc, #268]	@ (8006ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80069cc:	4a41      	ldr	r2, [pc, #260]	@ (8006ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80069d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80069d4:	4b40      	ldr	r3, [pc, #256]	@ (8006ad8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2232      	movs	r2, #50	@ 0x32
 80069da:	fb02 f303 	mul.w	r3, r2, r3
 80069de:	4a3f      	ldr	r2, [pc, #252]	@ (8006adc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80069e0:	fba2 2303 	umull	r2, r3, r2, r3
 80069e4:	0c9b      	lsrs	r3, r3, #18
 80069e6:	3301      	adds	r3, #1
 80069e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80069ea:	e002      	b.n	80069f2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	3b01      	subs	r3, #1
 80069f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80069f2:	4b38      	ldr	r3, [pc, #224]	@ (8006ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069f4:	695b      	ldr	r3, [r3, #20]
 80069f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069fe:	d102      	bne.n	8006a06 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1f2      	bne.n	80069ec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006a06:	4b33      	ldr	r3, [pc, #204]	@ (8006ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a08:	695b      	ldr	r3, [r3, #20]
 8006a0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a12:	d158      	bne.n	8006ac6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e057      	b.n	8006ac8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006a18:	4b2e      	ldr	r3, [pc, #184]	@ (8006ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a1e:	4a2d      	ldr	r2, [pc, #180]	@ (8006ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006a28:	e04d      	b.n	8006ac6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a30:	d141      	bne.n	8006ab6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006a32:	4b28      	ldr	r3, [pc, #160]	@ (8006ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006a3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a3e:	d131      	bne.n	8006aa4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006a40:	4b24      	ldr	r3, [pc, #144]	@ (8006ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a46:	4a23      	ldr	r2, [pc, #140]	@ (8006ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006a50:	4b20      	ldr	r3, [pc, #128]	@ (8006ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006a58:	4a1e      	ldr	r2, [pc, #120]	@ (8006ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006a5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006a60:	4b1d      	ldr	r3, [pc, #116]	@ (8006ad8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2232      	movs	r2, #50	@ 0x32
 8006a66:	fb02 f303 	mul.w	r3, r2, r3
 8006a6a:	4a1c      	ldr	r2, [pc, #112]	@ (8006adc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a70:	0c9b      	lsrs	r3, r3, #18
 8006a72:	3301      	adds	r3, #1
 8006a74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a76:	e002      	b.n	8006a7e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a7e:	4b15      	ldr	r3, [pc, #84]	@ (8006ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a8a:	d102      	bne.n	8006a92 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1f2      	bne.n	8006a78 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006a92:	4b10      	ldr	r3, [pc, #64]	@ (8006ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a94:	695b      	ldr	r3, [r3, #20]
 8006a96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a9e:	d112      	bne.n	8006ac6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	e011      	b.n	8006ac8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8006ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8006ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006aac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ab0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006ab4:	e007      	b.n	8006ac6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006ab6:	4b07      	ldr	r3, [pc, #28]	@ (8006ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006abe:	4a05      	ldr	r2, [pc, #20]	@ (8006ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ac0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006ac4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3714      	adds	r7, #20
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr
 8006ad4:	40007000 	.word	0x40007000
 8006ad8:	2000004c 	.word	0x2000004c
 8006adc:	431bde83 	.word	0x431bde83

08006ae0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b088      	sub	sp, #32
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d102      	bne.n	8006af4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	f000 bc08 	b.w	8007304 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006af4:	4b96      	ldr	r3, [pc, #600]	@ (8006d50 <HAL_RCC_OscConfig+0x270>)
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	f003 030c 	and.w	r3, r3, #12
 8006afc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006afe:	4b94      	ldr	r3, [pc, #592]	@ (8006d50 <HAL_RCC_OscConfig+0x270>)
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	f003 0303 	and.w	r3, r3, #3
 8006b06:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 0310 	and.w	r3, r3, #16
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f000 80e4 	beq.w	8006cde <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d007      	beq.n	8006b2c <HAL_RCC_OscConfig+0x4c>
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	2b0c      	cmp	r3, #12
 8006b20:	f040 808b 	bne.w	8006c3a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	f040 8087 	bne.w	8006c3a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006b2c:	4b88      	ldr	r3, [pc, #544]	@ (8006d50 <HAL_RCC_OscConfig+0x270>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 0302 	and.w	r3, r3, #2
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d005      	beq.n	8006b44 <HAL_RCC_OscConfig+0x64>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d101      	bne.n	8006b44 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e3df      	b.n	8007304 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a1a      	ldr	r2, [r3, #32]
 8006b48:	4b81      	ldr	r3, [pc, #516]	@ (8006d50 <HAL_RCC_OscConfig+0x270>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 0308 	and.w	r3, r3, #8
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d004      	beq.n	8006b5e <HAL_RCC_OscConfig+0x7e>
 8006b54:	4b7e      	ldr	r3, [pc, #504]	@ (8006d50 <HAL_RCC_OscConfig+0x270>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006b5c:	e005      	b.n	8006b6a <HAL_RCC_OscConfig+0x8a>
 8006b5e:	4b7c      	ldr	r3, [pc, #496]	@ (8006d50 <HAL_RCC_OscConfig+0x270>)
 8006b60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b64:	091b      	lsrs	r3, r3, #4
 8006b66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d223      	bcs.n	8006bb6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f000 fdfe 	bl	8007774 <RCC_SetFlashLatencyFromMSIRange>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d001      	beq.n	8006b82 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e3c0      	b.n	8007304 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006b82:	4b73      	ldr	r3, [pc, #460]	@ (8006d50 <HAL_RCC_OscConfig+0x270>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a72      	ldr	r2, [pc, #456]	@ (8006d50 <HAL_RCC_OscConfig+0x270>)
 8006b88:	f043 0308 	orr.w	r3, r3, #8
 8006b8c:	6013      	str	r3, [r2, #0]
 8006b8e:	4b70      	ldr	r3, [pc, #448]	@ (8006d50 <HAL_RCC_OscConfig+0x270>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a1b      	ldr	r3, [r3, #32]
 8006b9a:	496d      	ldr	r1, [pc, #436]	@ (8006d50 <HAL_RCC_OscConfig+0x270>)
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006ba0:	4b6b      	ldr	r3, [pc, #428]	@ (8006d50 <HAL_RCC_OscConfig+0x270>)
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	69db      	ldr	r3, [r3, #28]
 8006bac:	021b      	lsls	r3, r3, #8
 8006bae:	4968      	ldr	r1, [pc, #416]	@ (8006d50 <HAL_RCC_OscConfig+0x270>)
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	604b      	str	r3, [r1, #4]
 8006bb4:	e025      	b.n	8006c02 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006bb6:	4b66      	ldr	r3, [pc, #408]	@ (8006d50 <HAL_RCC_OscConfig+0x270>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a65      	ldr	r2, [pc, #404]	@ (8006d50 <HAL_RCC_OscConfig+0x270>)
 8006bbc:	f043 0308 	orr.w	r3, r3, #8
 8006bc0:	6013      	str	r3, [r2, #0]
 8006bc2:	4b63      	ldr	r3, [pc, #396]	@ (8006d50 <HAL_RCC_OscConfig+0x270>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a1b      	ldr	r3, [r3, #32]
 8006bce:	4960      	ldr	r1, [pc, #384]	@ (8006d50 <HAL_RCC_OscConfig+0x270>)
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006bd4:	4b5e      	ldr	r3, [pc, #376]	@ (8006d50 <HAL_RCC_OscConfig+0x270>)
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	69db      	ldr	r3, [r3, #28]
 8006be0:	021b      	lsls	r3, r3, #8
 8006be2:	495b      	ldr	r1, [pc, #364]	@ (8006d50 <HAL_RCC_OscConfig+0x270>)
 8006be4:	4313      	orrs	r3, r2
 8006be6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d109      	bne.n	8006c02 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f000 fdbe 	bl	8007774 <RCC_SetFlashLatencyFromMSIRange>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d001      	beq.n	8006c02 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e380      	b.n	8007304 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006c02:	f000 fcc1 	bl	8007588 <HAL_RCC_GetSysClockFreq>
 8006c06:	4602      	mov	r2, r0
 8006c08:	4b51      	ldr	r3, [pc, #324]	@ (8006d50 <HAL_RCC_OscConfig+0x270>)
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	091b      	lsrs	r3, r3, #4
 8006c0e:	f003 030f 	and.w	r3, r3, #15
 8006c12:	4950      	ldr	r1, [pc, #320]	@ (8006d54 <HAL_RCC_OscConfig+0x274>)
 8006c14:	5ccb      	ldrb	r3, [r1, r3]
 8006c16:	f003 031f 	and.w	r3, r3, #31
 8006c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c1e:	4a4e      	ldr	r2, [pc, #312]	@ (8006d58 <HAL_RCC_OscConfig+0x278>)
 8006c20:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006c22:	4b4e      	ldr	r3, [pc, #312]	@ (8006d5c <HAL_RCC_OscConfig+0x27c>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7fc f9b4 	bl	8002f94 <HAL_InitTick>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006c30:	7bfb      	ldrb	r3, [r7, #15]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d052      	beq.n	8006cdc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006c36:	7bfb      	ldrb	r3, [r7, #15]
 8006c38:	e364      	b.n	8007304 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	699b      	ldr	r3, [r3, #24]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d032      	beq.n	8006ca8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006c42:	4b43      	ldr	r3, [pc, #268]	@ (8006d50 <HAL_RCC_OscConfig+0x270>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a42      	ldr	r2, [pc, #264]	@ (8006d50 <HAL_RCC_OscConfig+0x270>)
 8006c48:	f043 0301 	orr.w	r3, r3, #1
 8006c4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006c4e:	f7fc fdb7 	bl	80037c0 <HAL_GetTick>
 8006c52:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006c54:	e008      	b.n	8006c68 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006c56:	f7fc fdb3 	bl	80037c0 <HAL_GetTick>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d901      	bls.n	8006c68 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006c64:	2303      	movs	r3, #3
 8006c66:	e34d      	b.n	8007304 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006c68:	4b39      	ldr	r3, [pc, #228]	@ (8006d50 <HAL_RCC_OscConfig+0x270>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0302 	and.w	r3, r3, #2
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d0f0      	beq.n	8006c56 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006c74:	4b36      	ldr	r3, [pc, #216]	@ (8006d50 <HAL_RCC_OscConfig+0x270>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a35      	ldr	r2, [pc, #212]	@ (8006d50 <HAL_RCC_OscConfig+0x270>)
 8006c7a:	f043 0308 	orr.w	r3, r3, #8
 8006c7e:	6013      	str	r3, [r2, #0]
 8006c80:	4b33      	ldr	r3, [pc, #204]	@ (8006d50 <HAL_RCC_OscConfig+0x270>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a1b      	ldr	r3, [r3, #32]
 8006c8c:	4930      	ldr	r1, [pc, #192]	@ (8006d50 <HAL_RCC_OscConfig+0x270>)
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006c92:	4b2f      	ldr	r3, [pc, #188]	@ (8006d50 <HAL_RCC_OscConfig+0x270>)
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	69db      	ldr	r3, [r3, #28]
 8006c9e:	021b      	lsls	r3, r3, #8
 8006ca0:	492b      	ldr	r1, [pc, #172]	@ (8006d50 <HAL_RCC_OscConfig+0x270>)
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	604b      	str	r3, [r1, #4]
 8006ca6:	e01a      	b.n	8006cde <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006ca8:	4b29      	ldr	r3, [pc, #164]	@ (8006d50 <HAL_RCC_OscConfig+0x270>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a28      	ldr	r2, [pc, #160]	@ (8006d50 <HAL_RCC_OscConfig+0x270>)
 8006cae:	f023 0301 	bic.w	r3, r3, #1
 8006cb2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006cb4:	f7fc fd84 	bl	80037c0 <HAL_GetTick>
 8006cb8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006cba:	e008      	b.n	8006cce <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006cbc:	f7fc fd80 	bl	80037c0 <HAL_GetTick>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d901      	bls.n	8006cce <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e31a      	b.n	8007304 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006cce:	4b20      	ldr	r3, [pc, #128]	@ (8006d50 <HAL_RCC_OscConfig+0x270>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0302 	and.w	r3, r3, #2
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1f0      	bne.n	8006cbc <HAL_RCC_OscConfig+0x1dc>
 8006cda:	e000      	b.n	8006cde <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006cdc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0301 	and.w	r3, r3, #1
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d073      	beq.n	8006dd2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	2b08      	cmp	r3, #8
 8006cee:	d005      	beq.n	8006cfc <HAL_RCC_OscConfig+0x21c>
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	2b0c      	cmp	r3, #12
 8006cf4:	d10e      	bne.n	8006d14 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	2b03      	cmp	r3, #3
 8006cfa:	d10b      	bne.n	8006d14 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cfc:	4b14      	ldr	r3, [pc, #80]	@ (8006d50 <HAL_RCC_OscConfig+0x270>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d063      	beq.n	8006dd0 <HAL_RCC_OscConfig+0x2f0>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d15f      	bne.n	8006dd0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	e2f7      	b.n	8007304 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d1c:	d106      	bne.n	8006d2c <HAL_RCC_OscConfig+0x24c>
 8006d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8006d50 <HAL_RCC_OscConfig+0x270>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a0b      	ldr	r2, [pc, #44]	@ (8006d50 <HAL_RCC_OscConfig+0x270>)
 8006d24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d28:	6013      	str	r3, [r2, #0]
 8006d2a:	e025      	b.n	8006d78 <HAL_RCC_OscConfig+0x298>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d34:	d114      	bne.n	8006d60 <HAL_RCC_OscConfig+0x280>
 8006d36:	4b06      	ldr	r3, [pc, #24]	@ (8006d50 <HAL_RCC_OscConfig+0x270>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a05      	ldr	r2, [pc, #20]	@ (8006d50 <HAL_RCC_OscConfig+0x270>)
 8006d3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d40:	6013      	str	r3, [r2, #0]
 8006d42:	4b03      	ldr	r3, [pc, #12]	@ (8006d50 <HAL_RCC_OscConfig+0x270>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a02      	ldr	r2, [pc, #8]	@ (8006d50 <HAL_RCC_OscConfig+0x270>)
 8006d48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d4c:	6013      	str	r3, [r2, #0]
 8006d4e:	e013      	b.n	8006d78 <HAL_RCC_OscConfig+0x298>
 8006d50:	40021000 	.word	0x40021000
 8006d54:	0800cb04 	.word	0x0800cb04
 8006d58:	2000004c 	.word	0x2000004c
 8006d5c:	200000b8 	.word	0x200000b8
 8006d60:	4ba0      	ldr	r3, [pc, #640]	@ (8006fe4 <HAL_RCC_OscConfig+0x504>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a9f      	ldr	r2, [pc, #636]	@ (8006fe4 <HAL_RCC_OscConfig+0x504>)
 8006d66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d6a:	6013      	str	r3, [r2, #0]
 8006d6c:	4b9d      	ldr	r3, [pc, #628]	@ (8006fe4 <HAL_RCC_OscConfig+0x504>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a9c      	ldr	r2, [pc, #624]	@ (8006fe4 <HAL_RCC_OscConfig+0x504>)
 8006d72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d013      	beq.n	8006da8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d80:	f7fc fd1e 	bl	80037c0 <HAL_GetTick>
 8006d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d86:	e008      	b.n	8006d9a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d88:	f7fc fd1a 	bl	80037c0 <HAL_GetTick>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	2b64      	cmp	r3, #100	@ 0x64
 8006d94:	d901      	bls.n	8006d9a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e2b4      	b.n	8007304 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d9a:	4b92      	ldr	r3, [pc, #584]	@ (8006fe4 <HAL_RCC_OscConfig+0x504>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d0f0      	beq.n	8006d88 <HAL_RCC_OscConfig+0x2a8>
 8006da6:	e014      	b.n	8006dd2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006da8:	f7fc fd0a 	bl	80037c0 <HAL_GetTick>
 8006dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006dae:	e008      	b.n	8006dc2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006db0:	f7fc fd06 	bl	80037c0 <HAL_GetTick>
 8006db4:	4602      	mov	r2, r0
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	2b64      	cmp	r3, #100	@ 0x64
 8006dbc:	d901      	bls.n	8006dc2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e2a0      	b.n	8007304 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006dc2:	4b88      	ldr	r3, [pc, #544]	@ (8006fe4 <HAL_RCC_OscConfig+0x504>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1f0      	bne.n	8006db0 <HAL_RCC_OscConfig+0x2d0>
 8006dce:	e000      	b.n	8006dd2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 0302 	and.w	r3, r3, #2
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d060      	beq.n	8006ea0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	2b04      	cmp	r3, #4
 8006de2:	d005      	beq.n	8006df0 <HAL_RCC_OscConfig+0x310>
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	2b0c      	cmp	r3, #12
 8006de8:	d119      	bne.n	8006e1e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d116      	bne.n	8006e1e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006df0:	4b7c      	ldr	r3, [pc, #496]	@ (8006fe4 <HAL_RCC_OscConfig+0x504>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d005      	beq.n	8006e08 <HAL_RCC_OscConfig+0x328>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d101      	bne.n	8006e08 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e27d      	b.n	8007304 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e08:	4b76      	ldr	r3, [pc, #472]	@ (8006fe4 <HAL_RCC_OscConfig+0x504>)
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	061b      	lsls	r3, r3, #24
 8006e16:	4973      	ldr	r1, [pc, #460]	@ (8006fe4 <HAL_RCC_OscConfig+0x504>)
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e1c:	e040      	b.n	8006ea0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d023      	beq.n	8006e6e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e26:	4b6f      	ldr	r3, [pc, #444]	@ (8006fe4 <HAL_RCC_OscConfig+0x504>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a6e      	ldr	r2, [pc, #440]	@ (8006fe4 <HAL_RCC_OscConfig+0x504>)
 8006e2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e32:	f7fc fcc5 	bl	80037c0 <HAL_GetTick>
 8006e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e38:	e008      	b.n	8006e4c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e3a:	f7fc fcc1 	bl	80037c0 <HAL_GetTick>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d901      	bls.n	8006e4c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e25b      	b.n	8007304 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e4c:	4b65      	ldr	r3, [pc, #404]	@ (8006fe4 <HAL_RCC_OscConfig+0x504>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d0f0      	beq.n	8006e3a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e58:	4b62      	ldr	r3, [pc, #392]	@ (8006fe4 <HAL_RCC_OscConfig+0x504>)
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	061b      	lsls	r3, r3, #24
 8006e66:	495f      	ldr	r1, [pc, #380]	@ (8006fe4 <HAL_RCC_OscConfig+0x504>)
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	604b      	str	r3, [r1, #4]
 8006e6c:	e018      	b.n	8006ea0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e6e:	4b5d      	ldr	r3, [pc, #372]	@ (8006fe4 <HAL_RCC_OscConfig+0x504>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a5c      	ldr	r2, [pc, #368]	@ (8006fe4 <HAL_RCC_OscConfig+0x504>)
 8006e74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e7a:	f7fc fca1 	bl	80037c0 <HAL_GetTick>
 8006e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006e80:	e008      	b.n	8006e94 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e82:	f7fc fc9d 	bl	80037c0 <HAL_GetTick>
 8006e86:	4602      	mov	r2, r0
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d901      	bls.n	8006e94 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e237      	b.n	8007304 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006e94:	4b53      	ldr	r3, [pc, #332]	@ (8006fe4 <HAL_RCC_OscConfig+0x504>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1f0      	bne.n	8006e82 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 0308 	and.w	r3, r3, #8
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d03c      	beq.n	8006f26 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	695b      	ldr	r3, [r3, #20]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d01c      	beq.n	8006eee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006eb4:	4b4b      	ldr	r3, [pc, #300]	@ (8006fe4 <HAL_RCC_OscConfig+0x504>)
 8006eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006eba:	4a4a      	ldr	r2, [pc, #296]	@ (8006fe4 <HAL_RCC_OscConfig+0x504>)
 8006ebc:	f043 0301 	orr.w	r3, r3, #1
 8006ec0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ec4:	f7fc fc7c 	bl	80037c0 <HAL_GetTick>
 8006ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006eca:	e008      	b.n	8006ede <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ecc:	f7fc fc78 	bl	80037c0 <HAL_GetTick>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	1ad3      	subs	r3, r2, r3
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	d901      	bls.n	8006ede <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006eda:	2303      	movs	r3, #3
 8006edc:	e212      	b.n	8007304 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006ede:	4b41      	ldr	r3, [pc, #260]	@ (8006fe4 <HAL_RCC_OscConfig+0x504>)
 8006ee0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ee4:	f003 0302 	and.w	r3, r3, #2
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d0ef      	beq.n	8006ecc <HAL_RCC_OscConfig+0x3ec>
 8006eec:	e01b      	b.n	8006f26 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006eee:	4b3d      	ldr	r3, [pc, #244]	@ (8006fe4 <HAL_RCC_OscConfig+0x504>)
 8006ef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ef4:	4a3b      	ldr	r2, [pc, #236]	@ (8006fe4 <HAL_RCC_OscConfig+0x504>)
 8006ef6:	f023 0301 	bic.w	r3, r3, #1
 8006efa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006efe:	f7fc fc5f 	bl	80037c0 <HAL_GetTick>
 8006f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006f04:	e008      	b.n	8006f18 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f06:	f7fc fc5b 	bl	80037c0 <HAL_GetTick>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	1ad3      	subs	r3, r2, r3
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d901      	bls.n	8006f18 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006f14:	2303      	movs	r3, #3
 8006f16:	e1f5      	b.n	8007304 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006f18:	4b32      	ldr	r3, [pc, #200]	@ (8006fe4 <HAL_RCC_OscConfig+0x504>)
 8006f1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f1e:	f003 0302 	and.w	r3, r3, #2
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1ef      	bne.n	8006f06 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 0304 	and.w	r3, r3, #4
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f000 80a6 	beq.w	8007080 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f34:	2300      	movs	r3, #0
 8006f36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006f38:	4b2a      	ldr	r3, [pc, #168]	@ (8006fe4 <HAL_RCC_OscConfig+0x504>)
 8006f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10d      	bne.n	8006f60 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f44:	4b27      	ldr	r3, [pc, #156]	@ (8006fe4 <HAL_RCC_OscConfig+0x504>)
 8006f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f48:	4a26      	ldr	r2, [pc, #152]	@ (8006fe4 <HAL_RCC_OscConfig+0x504>)
 8006f4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f50:	4b24      	ldr	r3, [pc, #144]	@ (8006fe4 <HAL_RCC_OscConfig+0x504>)
 8006f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f58:	60bb      	str	r3, [r7, #8]
 8006f5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f60:	4b21      	ldr	r3, [pc, #132]	@ (8006fe8 <HAL_RCC_OscConfig+0x508>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d118      	bne.n	8006f9e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f6c:	4b1e      	ldr	r3, [pc, #120]	@ (8006fe8 <HAL_RCC_OscConfig+0x508>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a1d      	ldr	r2, [pc, #116]	@ (8006fe8 <HAL_RCC_OscConfig+0x508>)
 8006f72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f78:	f7fc fc22 	bl	80037c0 <HAL_GetTick>
 8006f7c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f7e:	e008      	b.n	8006f92 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f80:	f7fc fc1e 	bl	80037c0 <HAL_GetTick>
 8006f84:	4602      	mov	r2, r0
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d901      	bls.n	8006f92 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e1b8      	b.n	8007304 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f92:	4b15      	ldr	r3, [pc, #84]	@ (8006fe8 <HAL_RCC_OscConfig+0x508>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d0f0      	beq.n	8006f80 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d108      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x4d8>
 8006fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8006fe4 <HAL_RCC_OscConfig+0x504>)
 8006fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fac:	4a0d      	ldr	r2, [pc, #52]	@ (8006fe4 <HAL_RCC_OscConfig+0x504>)
 8006fae:	f043 0301 	orr.w	r3, r3, #1
 8006fb2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006fb6:	e029      	b.n	800700c <HAL_RCC_OscConfig+0x52c>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	2b05      	cmp	r3, #5
 8006fbe:	d115      	bne.n	8006fec <HAL_RCC_OscConfig+0x50c>
 8006fc0:	4b08      	ldr	r3, [pc, #32]	@ (8006fe4 <HAL_RCC_OscConfig+0x504>)
 8006fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fc6:	4a07      	ldr	r2, [pc, #28]	@ (8006fe4 <HAL_RCC_OscConfig+0x504>)
 8006fc8:	f043 0304 	orr.w	r3, r3, #4
 8006fcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006fd0:	4b04      	ldr	r3, [pc, #16]	@ (8006fe4 <HAL_RCC_OscConfig+0x504>)
 8006fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fd6:	4a03      	ldr	r2, [pc, #12]	@ (8006fe4 <HAL_RCC_OscConfig+0x504>)
 8006fd8:	f043 0301 	orr.w	r3, r3, #1
 8006fdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006fe0:	e014      	b.n	800700c <HAL_RCC_OscConfig+0x52c>
 8006fe2:	bf00      	nop
 8006fe4:	40021000 	.word	0x40021000
 8006fe8:	40007000 	.word	0x40007000
 8006fec:	4b9d      	ldr	r3, [pc, #628]	@ (8007264 <HAL_RCC_OscConfig+0x784>)
 8006fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ff2:	4a9c      	ldr	r2, [pc, #624]	@ (8007264 <HAL_RCC_OscConfig+0x784>)
 8006ff4:	f023 0301 	bic.w	r3, r3, #1
 8006ff8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006ffc:	4b99      	ldr	r3, [pc, #612]	@ (8007264 <HAL_RCC_OscConfig+0x784>)
 8006ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007002:	4a98      	ldr	r2, [pc, #608]	@ (8007264 <HAL_RCC_OscConfig+0x784>)
 8007004:	f023 0304 	bic.w	r3, r3, #4
 8007008:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d016      	beq.n	8007042 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007014:	f7fc fbd4 	bl	80037c0 <HAL_GetTick>
 8007018:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800701a:	e00a      	b.n	8007032 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800701c:	f7fc fbd0 	bl	80037c0 <HAL_GetTick>
 8007020:	4602      	mov	r2, r0
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	f241 3288 	movw	r2, #5000	@ 0x1388
 800702a:	4293      	cmp	r3, r2
 800702c:	d901      	bls.n	8007032 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800702e:	2303      	movs	r3, #3
 8007030:	e168      	b.n	8007304 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007032:	4b8c      	ldr	r3, [pc, #560]	@ (8007264 <HAL_RCC_OscConfig+0x784>)
 8007034:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007038:	f003 0302 	and.w	r3, r3, #2
 800703c:	2b00      	cmp	r3, #0
 800703e:	d0ed      	beq.n	800701c <HAL_RCC_OscConfig+0x53c>
 8007040:	e015      	b.n	800706e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007042:	f7fc fbbd 	bl	80037c0 <HAL_GetTick>
 8007046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007048:	e00a      	b.n	8007060 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800704a:	f7fc fbb9 	bl	80037c0 <HAL_GetTick>
 800704e:	4602      	mov	r2, r0
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007058:	4293      	cmp	r3, r2
 800705a:	d901      	bls.n	8007060 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800705c:	2303      	movs	r3, #3
 800705e:	e151      	b.n	8007304 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007060:	4b80      	ldr	r3, [pc, #512]	@ (8007264 <HAL_RCC_OscConfig+0x784>)
 8007062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007066:	f003 0302 	and.w	r3, r3, #2
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1ed      	bne.n	800704a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800706e:	7ffb      	ldrb	r3, [r7, #31]
 8007070:	2b01      	cmp	r3, #1
 8007072:	d105      	bne.n	8007080 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007074:	4b7b      	ldr	r3, [pc, #492]	@ (8007264 <HAL_RCC_OscConfig+0x784>)
 8007076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007078:	4a7a      	ldr	r2, [pc, #488]	@ (8007264 <HAL_RCC_OscConfig+0x784>)
 800707a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800707e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 0320 	and.w	r3, r3, #32
 8007088:	2b00      	cmp	r3, #0
 800708a:	d03c      	beq.n	8007106 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007090:	2b00      	cmp	r3, #0
 8007092:	d01c      	beq.n	80070ce <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007094:	4b73      	ldr	r3, [pc, #460]	@ (8007264 <HAL_RCC_OscConfig+0x784>)
 8007096:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800709a:	4a72      	ldr	r2, [pc, #456]	@ (8007264 <HAL_RCC_OscConfig+0x784>)
 800709c:	f043 0301 	orr.w	r3, r3, #1
 80070a0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070a4:	f7fc fb8c 	bl	80037c0 <HAL_GetTick>
 80070a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80070aa:	e008      	b.n	80070be <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80070ac:	f7fc fb88 	bl	80037c0 <HAL_GetTick>
 80070b0:	4602      	mov	r2, r0
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d901      	bls.n	80070be <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80070ba:	2303      	movs	r3, #3
 80070bc:	e122      	b.n	8007304 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80070be:	4b69      	ldr	r3, [pc, #420]	@ (8007264 <HAL_RCC_OscConfig+0x784>)
 80070c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80070c4:	f003 0302 	and.w	r3, r3, #2
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d0ef      	beq.n	80070ac <HAL_RCC_OscConfig+0x5cc>
 80070cc:	e01b      	b.n	8007106 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80070ce:	4b65      	ldr	r3, [pc, #404]	@ (8007264 <HAL_RCC_OscConfig+0x784>)
 80070d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80070d4:	4a63      	ldr	r2, [pc, #396]	@ (8007264 <HAL_RCC_OscConfig+0x784>)
 80070d6:	f023 0301 	bic.w	r3, r3, #1
 80070da:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070de:	f7fc fb6f 	bl	80037c0 <HAL_GetTick>
 80070e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80070e4:	e008      	b.n	80070f8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80070e6:	f7fc fb6b 	bl	80037c0 <HAL_GetTick>
 80070ea:	4602      	mov	r2, r0
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d901      	bls.n	80070f8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80070f4:	2303      	movs	r3, #3
 80070f6:	e105      	b.n	8007304 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80070f8:	4b5a      	ldr	r3, [pc, #360]	@ (8007264 <HAL_RCC_OscConfig+0x784>)
 80070fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80070fe:	f003 0302 	and.w	r3, r3, #2
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1ef      	bne.n	80070e6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800710a:	2b00      	cmp	r3, #0
 800710c:	f000 80f9 	beq.w	8007302 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007114:	2b02      	cmp	r3, #2
 8007116:	f040 80cf 	bne.w	80072b8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800711a:	4b52      	ldr	r3, [pc, #328]	@ (8007264 <HAL_RCC_OscConfig+0x784>)
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	f003 0203 	and.w	r2, r3, #3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800712a:	429a      	cmp	r2, r3
 800712c:	d12c      	bne.n	8007188 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007138:	3b01      	subs	r3, #1
 800713a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800713c:	429a      	cmp	r2, r3
 800713e:	d123      	bne.n	8007188 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800714a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800714c:	429a      	cmp	r2, r3
 800714e:	d11b      	bne.n	8007188 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800715a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800715c:	429a      	cmp	r2, r3
 800715e:	d113      	bne.n	8007188 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800716a:	085b      	lsrs	r3, r3, #1
 800716c:	3b01      	subs	r3, #1
 800716e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007170:	429a      	cmp	r2, r3
 8007172:	d109      	bne.n	8007188 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800717e:	085b      	lsrs	r3, r3, #1
 8007180:	3b01      	subs	r3, #1
 8007182:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007184:	429a      	cmp	r2, r3
 8007186:	d071      	beq.n	800726c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	2b0c      	cmp	r3, #12
 800718c:	d068      	beq.n	8007260 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800718e:	4b35      	ldr	r3, [pc, #212]	@ (8007264 <HAL_RCC_OscConfig+0x784>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007196:	2b00      	cmp	r3, #0
 8007198:	d105      	bne.n	80071a6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800719a:	4b32      	ldr	r3, [pc, #200]	@ (8007264 <HAL_RCC_OscConfig+0x784>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d001      	beq.n	80071aa <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e0ac      	b.n	8007304 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80071aa:	4b2e      	ldr	r3, [pc, #184]	@ (8007264 <HAL_RCC_OscConfig+0x784>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a2d      	ldr	r2, [pc, #180]	@ (8007264 <HAL_RCC_OscConfig+0x784>)
 80071b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80071b4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80071b6:	f7fc fb03 	bl	80037c0 <HAL_GetTick>
 80071ba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071bc:	e008      	b.n	80071d0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071be:	f7fc faff 	bl	80037c0 <HAL_GetTick>
 80071c2:	4602      	mov	r2, r0
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d901      	bls.n	80071d0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80071cc:	2303      	movs	r3, #3
 80071ce:	e099      	b.n	8007304 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071d0:	4b24      	ldr	r3, [pc, #144]	@ (8007264 <HAL_RCC_OscConfig+0x784>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1f0      	bne.n	80071be <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80071dc:	4b21      	ldr	r3, [pc, #132]	@ (8007264 <HAL_RCC_OscConfig+0x784>)
 80071de:	68da      	ldr	r2, [r3, #12]
 80071e0:	4b21      	ldr	r3, [pc, #132]	@ (8007268 <HAL_RCC_OscConfig+0x788>)
 80071e2:	4013      	ands	r3, r2
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80071ec:	3a01      	subs	r2, #1
 80071ee:	0112      	lsls	r2, r2, #4
 80071f0:	4311      	orrs	r1, r2
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80071f6:	0212      	lsls	r2, r2, #8
 80071f8:	4311      	orrs	r1, r2
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80071fe:	0852      	lsrs	r2, r2, #1
 8007200:	3a01      	subs	r2, #1
 8007202:	0552      	lsls	r2, r2, #21
 8007204:	4311      	orrs	r1, r2
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800720a:	0852      	lsrs	r2, r2, #1
 800720c:	3a01      	subs	r2, #1
 800720e:	0652      	lsls	r2, r2, #25
 8007210:	4311      	orrs	r1, r2
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007216:	06d2      	lsls	r2, r2, #27
 8007218:	430a      	orrs	r2, r1
 800721a:	4912      	ldr	r1, [pc, #72]	@ (8007264 <HAL_RCC_OscConfig+0x784>)
 800721c:	4313      	orrs	r3, r2
 800721e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007220:	4b10      	ldr	r3, [pc, #64]	@ (8007264 <HAL_RCC_OscConfig+0x784>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a0f      	ldr	r2, [pc, #60]	@ (8007264 <HAL_RCC_OscConfig+0x784>)
 8007226:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800722a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800722c:	4b0d      	ldr	r3, [pc, #52]	@ (8007264 <HAL_RCC_OscConfig+0x784>)
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	4a0c      	ldr	r2, [pc, #48]	@ (8007264 <HAL_RCC_OscConfig+0x784>)
 8007232:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007236:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007238:	f7fc fac2 	bl	80037c0 <HAL_GetTick>
 800723c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800723e:	e008      	b.n	8007252 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007240:	f7fc fabe 	bl	80037c0 <HAL_GetTick>
 8007244:	4602      	mov	r2, r0
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	2b02      	cmp	r3, #2
 800724c:	d901      	bls.n	8007252 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e058      	b.n	8007304 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007252:	4b04      	ldr	r3, [pc, #16]	@ (8007264 <HAL_RCC_OscConfig+0x784>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800725a:	2b00      	cmp	r3, #0
 800725c:	d0f0      	beq.n	8007240 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800725e:	e050      	b.n	8007302 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	e04f      	b.n	8007304 <HAL_RCC_OscConfig+0x824>
 8007264:	40021000 	.word	0x40021000
 8007268:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800726c:	4b27      	ldr	r3, [pc, #156]	@ (800730c <HAL_RCC_OscConfig+0x82c>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007274:	2b00      	cmp	r3, #0
 8007276:	d144      	bne.n	8007302 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007278:	4b24      	ldr	r3, [pc, #144]	@ (800730c <HAL_RCC_OscConfig+0x82c>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a23      	ldr	r2, [pc, #140]	@ (800730c <HAL_RCC_OscConfig+0x82c>)
 800727e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007282:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007284:	4b21      	ldr	r3, [pc, #132]	@ (800730c <HAL_RCC_OscConfig+0x82c>)
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	4a20      	ldr	r2, [pc, #128]	@ (800730c <HAL_RCC_OscConfig+0x82c>)
 800728a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800728e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007290:	f7fc fa96 	bl	80037c0 <HAL_GetTick>
 8007294:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007296:	e008      	b.n	80072aa <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007298:	f7fc fa92 	bl	80037c0 <HAL_GetTick>
 800729c:	4602      	mov	r2, r0
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d901      	bls.n	80072aa <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e02c      	b.n	8007304 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80072aa:	4b18      	ldr	r3, [pc, #96]	@ (800730c <HAL_RCC_OscConfig+0x82c>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d0f0      	beq.n	8007298 <HAL_RCC_OscConfig+0x7b8>
 80072b6:	e024      	b.n	8007302 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	2b0c      	cmp	r3, #12
 80072bc:	d01f      	beq.n	80072fe <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072be:	4b13      	ldr	r3, [pc, #76]	@ (800730c <HAL_RCC_OscConfig+0x82c>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a12      	ldr	r2, [pc, #72]	@ (800730c <HAL_RCC_OscConfig+0x82c>)
 80072c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80072c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072ca:	f7fc fa79 	bl	80037c0 <HAL_GetTick>
 80072ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072d0:	e008      	b.n	80072e4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072d2:	f7fc fa75 	bl	80037c0 <HAL_GetTick>
 80072d6:	4602      	mov	r2, r0
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d901      	bls.n	80072e4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e00f      	b.n	8007304 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072e4:	4b09      	ldr	r3, [pc, #36]	@ (800730c <HAL_RCC_OscConfig+0x82c>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1f0      	bne.n	80072d2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80072f0:	4b06      	ldr	r3, [pc, #24]	@ (800730c <HAL_RCC_OscConfig+0x82c>)
 80072f2:	68da      	ldr	r2, [r3, #12]
 80072f4:	4905      	ldr	r1, [pc, #20]	@ (800730c <HAL_RCC_OscConfig+0x82c>)
 80072f6:	4b06      	ldr	r3, [pc, #24]	@ (8007310 <HAL_RCC_OscConfig+0x830>)
 80072f8:	4013      	ands	r3, r2
 80072fa:	60cb      	str	r3, [r1, #12]
 80072fc:	e001      	b.n	8007302 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e000      	b.n	8007304 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3720      	adds	r7, #32
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	40021000 	.word	0x40021000
 8007310:	feeefffc 	.word	0xfeeefffc

08007314 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b086      	sub	sp, #24
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800731e:	2300      	movs	r3, #0
 8007320:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d101      	bne.n	800732c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	e11d      	b.n	8007568 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800732c:	4b90      	ldr	r3, [pc, #576]	@ (8007570 <HAL_RCC_ClockConfig+0x25c>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 030f 	and.w	r3, r3, #15
 8007334:	683a      	ldr	r2, [r7, #0]
 8007336:	429a      	cmp	r2, r3
 8007338:	d910      	bls.n	800735c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800733a:	4b8d      	ldr	r3, [pc, #564]	@ (8007570 <HAL_RCC_ClockConfig+0x25c>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f023 020f 	bic.w	r2, r3, #15
 8007342:	498b      	ldr	r1, [pc, #556]	@ (8007570 <HAL_RCC_ClockConfig+0x25c>)
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	4313      	orrs	r3, r2
 8007348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800734a:	4b89      	ldr	r3, [pc, #548]	@ (8007570 <HAL_RCC_ClockConfig+0x25c>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 030f 	and.w	r3, r3, #15
 8007352:	683a      	ldr	r2, [r7, #0]
 8007354:	429a      	cmp	r2, r3
 8007356:	d001      	beq.n	800735c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e105      	b.n	8007568 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 0302 	and.w	r3, r3, #2
 8007364:	2b00      	cmp	r3, #0
 8007366:	d010      	beq.n	800738a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	689a      	ldr	r2, [r3, #8]
 800736c:	4b81      	ldr	r3, [pc, #516]	@ (8007574 <HAL_RCC_ClockConfig+0x260>)
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007374:	429a      	cmp	r2, r3
 8007376:	d908      	bls.n	800738a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007378:	4b7e      	ldr	r3, [pc, #504]	@ (8007574 <HAL_RCC_ClockConfig+0x260>)
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	497b      	ldr	r1, [pc, #492]	@ (8007574 <HAL_RCC_ClockConfig+0x260>)
 8007386:	4313      	orrs	r3, r2
 8007388:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 0301 	and.w	r3, r3, #1
 8007392:	2b00      	cmp	r3, #0
 8007394:	d079      	beq.n	800748a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	2b03      	cmp	r3, #3
 800739c:	d11e      	bne.n	80073dc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800739e:	4b75      	ldr	r3, [pc, #468]	@ (8007574 <HAL_RCC_ClockConfig+0x260>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d101      	bne.n	80073ae <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e0dc      	b.n	8007568 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80073ae:	f000 fa3b 	bl	8007828 <RCC_GetSysClockFreqFromPLLSource>
 80073b2:	4603      	mov	r3, r0
 80073b4:	4a70      	ldr	r2, [pc, #448]	@ (8007578 <HAL_RCC_ClockConfig+0x264>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d946      	bls.n	8007448 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80073ba:	4b6e      	ldr	r3, [pc, #440]	@ (8007574 <HAL_RCC_ClockConfig+0x260>)
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d140      	bne.n	8007448 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80073c6:	4b6b      	ldr	r3, [pc, #428]	@ (8007574 <HAL_RCC_ClockConfig+0x260>)
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80073ce:	4a69      	ldr	r2, [pc, #420]	@ (8007574 <HAL_RCC_ClockConfig+0x260>)
 80073d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80073d6:	2380      	movs	r3, #128	@ 0x80
 80073d8:	617b      	str	r3, [r7, #20]
 80073da:	e035      	b.n	8007448 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d107      	bne.n	80073f4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80073e4:	4b63      	ldr	r3, [pc, #396]	@ (8007574 <HAL_RCC_ClockConfig+0x260>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d115      	bne.n	800741c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	e0b9      	b.n	8007568 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d107      	bne.n	800740c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80073fc:	4b5d      	ldr	r3, [pc, #372]	@ (8007574 <HAL_RCC_ClockConfig+0x260>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f003 0302 	and.w	r3, r3, #2
 8007404:	2b00      	cmp	r3, #0
 8007406:	d109      	bne.n	800741c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	e0ad      	b.n	8007568 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800740c:	4b59      	ldr	r3, [pc, #356]	@ (8007574 <HAL_RCC_ClockConfig+0x260>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007414:	2b00      	cmp	r3, #0
 8007416:	d101      	bne.n	800741c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	e0a5      	b.n	8007568 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800741c:	f000 f8b4 	bl	8007588 <HAL_RCC_GetSysClockFreq>
 8007420:	4603      	mov	r3, r0
 8007422:	4a55      	ldr	r2, [pc, #340]	@ (8007578 <HAL_RCC_ClockConfig+0x264>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d90f      	bls.n	8007448 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007428:	4b52      	ldr	r3, [pc, #328]	@ (8007574 <HAL_RCC_ClockConfig+0x260>)
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d109      	bne.n	8007448 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007434:	4b4f      	ldr	r3, [pc, #316]	@ (8007574 <HAL_RCC_ClockConfig+0x260>)
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800743c:	4a4d      	ldr	r2, [pc, #308]	@ (8007574 <HAL_RCC_ClockConfig+0x260>)
 800743e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007442:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007444:	2380      	movs	r3, #128	@ 0x80
 8007446:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007448:	4b4a      	ldr	r3, [pc, #296]	@ (8007574 <HAL_RCC_ClockConfig+0x260>)
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	f023 0203 	bic.w	r2, r3, #3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	4947      	ldr	r1, [pc, #284]	@ (8007574 <HAL_RCC_ClockConfig+0x260>)
 8007456:	4313      	orrs	r3, r2
 8007458:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800745a:	f7fc f9b1 	bl	80037c0 <HAL_GetTick>
 800745e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007460:	e00a      	b.n	8007478 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007462:	f7fc f9ad 	bl	80037c0 <HAL_GetTick>
 8007466:	4602      	mov	r2, r0
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007470:	4293      	cmp	r3, r2
 8007472:	d901      	bls.n	8007478 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8007474:	2303      	movs	r3, #3
 8007476:	e077      	b.n	8007568 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007478:	4b3e      	ldr	r3, [pc, #248]	@ (8007574 <HAL_RCC_ClockConfig+0x260>)
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	f003 020c 	and.w	r2, r3, #12
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	429a      	cmp	r2, r3
 8007488:	d1eb      	bne.n	8007462 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	2b80      	cmp	r3, #128	@ 0x80
 800748e:	d105      	bne.n	800749c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007490:	4b38      	ldr	r3, [pc, #224]	@ (8007574 <HAL_RCC_ClockConfig+0x260>)
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	4a37      	ldr	r2, [pc, #220]	@ (8007574 <HAL_RCC_ClockConfig+0x260>)
 8007496:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800749a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 0302 	and.w	r3, r3, #2
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d010      	beq.n	80074ca <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	689a      	ldr	r2, [r3, #8]
 80074ac:	4b31      	ldr	r3, [pc, #196]	@ (8007574 <HAL_RCC_ClockConfig+0x260>)
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d208      	bcs.n	80074ca <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074b8:	4b2e      	ldr	r3, [pc, #184]	@ (8007574 <HAL_RCC_ClockConfig+0x260>)
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	492b      	ldr	r1, [pc, #172]	@ (8007574 <HAL_RCC_ClockConfig+0x260>)
 80074c6:	4313      	orrs	r3, r2
 80074c8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80074ca:	4b29      	ldr	r3, [pc, #164]	@ (8007570 <HAL_RCC_ClockConfig+0x25c>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 030f 	and.w	r3, r3, #15
 80074d2:	683a      	ldr	r2, [r7, #0]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d210      	bcs.n	80074fa <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074d8:	4b25      	ldr	r3, [pc, #148]	@ (8007570 <HAL_RCC_ClockConfig+0x25c>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f023 020f 	bic.w	r2, r3, #15
 80074e0:	4923      	ldr	r1, [pc, #140]	@ (8007570 <HAL_RCC_ClockConfig+0x25c>)
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074e8:	4b21      	ldr	r3, [pc, #132]	@ (8007570 <HAL_RCC_ClockConfig+0x25c>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 030f 	and.w	r3, r3, #15
 80074f0:	683a      	ldr	r2, [r7, #0]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d001      	beq.n	80074fa <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e036      	b.n	8007568 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 0304 	and.w	r3, r3, #4
 8007502:	2b00      	cmp	r3, #0
 8007504:	d008      	beq.n	8007518 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007506:	4b1b      	ldr	r3, [pc, #108]	@ (8007574 <HAL_RCC_ClockConfig+0x260>)
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	4918      	ldr	r1, [pc, #96]	@ (8007574 <HAL_RCC_ClockConfig+0x260>)
 8007514:	4313      	orrs	r3, r2
 8007516:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0308 	and.w	r3, r3, #8
 8007520:	2b00      	cmp	r3, #0
 8007522:	d009      	beq.n	8007538 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007524:	4b13      	ldr	r3, [pc, #76]	@ (8007574 <HAL_RCC_ClockConfig+0x260>)
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	00db      	lsls	r3, r3, #3
 8007532:	4910      	ldr	r1, [pc, #64]	@ (8007574 <HAL_RCC_ClockConfig+0x260>)
 8007534:	4313      	orrs	r3, r2
 8007536:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007538:	f000 f826 	bl	8007588 <HAL_RCC_GetSysClockFreq>
 800753c:	4602      	mov	r2, r0
 800753e:	4b0d      	ldr	r3, [pc, #52]	@ (8007574 <HAL_RCC_ClockConfig+0x260>)
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	091b      	lsrs	r3, r3, #4
 8007544:	f003 030f 	and.w	r3, r3, #15
 8007548:	490c      	ldr	r1, [pc, #48]	@ (800757c <HAL_RCC_ClockConfig+0x268>)
 800754a:	5ccb      	ldrb	r3, [r1, r3]
 800754c:	f003 031f 	and.w	r3, r3, #31
 8007550:	fa22 f303 	lsr.w	r3, r2, r3
 8007554:	4a0a      	ldr	r2, [pc, #40]	@ (8007580 <HAL_RCC_ClockConfig+0x26c>)
 8007556:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007558:	4b0a      	ldr	r3, [pc, #40]	@ (8007584 <HAL_RCC_ClockConfig+0x270>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4618      	mov	r0, r3
 800755e:	f7fb fd19 	bl	8002f94 <HAL_InitTick>
 8007562:	4603      	mov	r3, r0
 8007564:	73fb      	strb	r3, [r7, #15]

  return status;
 8007566:	7bfb      	ldrb	r3, [r7, #15]
}
 8007568:	4618      	mov	r0, r3
 800756a:	3718      	adds	r7, #24
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	40022000 	.word	0x40022000
 8007574:	40021000 	.word	0x40021000
 8007578:	04c4b400 	.word	0x04c4b400
 800757c:	0800cb04 	.word	0x0800cb04
 8007580:	2000004c 	.word	0x2000004c
 8007584:	200000b8 	.word	0x200000b8

08007588 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007588:	b480      	push	{r7}
 800758a:	b089      	sub	sp, #36	@ 0x24
 800758c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800758e:	2300      	movs	r3, #0
 8007590:	61fb      	str	r3, [r7, #28]
 8007592:	2300      	movs	r3, #0
 8007594:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007596:	4b3e      	ldr	r3, [pc, #248]	@ (8007690 <HAL_RCC_GetSysClockFreq+0x108>)
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	f003 030c 	and.w	r3, r3, #12
 800759e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80075a0:	4b3b      	ldr	r3, [pc, #236]	@ (8007690 <HAL_RCC_GetSysClockFreq+0x108>)
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	f003 0303 	and.w	r3, r3, #3
 80075a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d005      	beq.n	80075bc <HAL_RCC_GetSysClockFreq+0x34>
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	2b0c      	cmp	r3, #12
 80075b4:	d121      	bne.n	80075fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d11e      	bne.n	80075fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80075bc:	4b34      	ldr	r3, [pc, #208]	@ (8007690 <HAL_RCC_GetSysClockFreq+0x108>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 0308 	and.w	r3, r3, #8
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d107      	bne.n	80075d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80075c8:	4b31      	ldr	r3, [pc, #196]	@ (8007690 <HAL_RCC_GetSysClockFreq+0x108>)
 80075ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075ce:	0a1b      	lsrs	r3, r3, #8
 80075d0:	f003 030f 	and.w	r3, r3, #15
 80075d4:	61fb      	str	r3, [r7, #28]
 80075d6:	e005      	b.n	80075e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80075d8:	4b2d      	ldr	r3, [pc, #180]	@ (8007690 <HAL_RCC_GetSysClockFreq+0x108>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	091b      	lsrs	r3, r3, #4
 80075de:	f003 030f 	and.w	r3, r3, #15
 80075e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80075e4:	4a2b      	ldr	r2, [pc, #172]	@ (8007694 <HAL_RCC_GetSysClockFreq+0x10c>)
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10d      	bne.n	8007610 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80075f8:	e00a      	b.n	8007610 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	2b04      	cmp	r3, #4
 80075fe:	d102      	bne.n	8007606 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007600:	4b25      	ldr	r3, [pc, #148]	@ (8007698 <HAL_RCC_GetSysClockFreq+0x110>)
 8007602:	61bb      	str	r3, [r7, #24]
 8007604:	e004      	b.n	8007610 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	2b08      	cmp	r3, #8
 800760a:	d101      	bne.n	8007610 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800760c:	4b23      	ldr	r3, [pc, #140]	@ (800769c <HAL_RCC_GetSysClockFreq+0x114>)
 800760e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	2b0c      	cmp	r3, #12
 8007614:	d134      	bne.n	8007680 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007616:	4b1e      	ldr	r3, [pc, #120]	@ (8007690 <HAL_RCC_GetSysClockFreq+0x108>)
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	f003 0303 	and.w	r3, r3, #3
 800761e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	2b02      	cmp	r3, #2
 8007624:	d003      	beq.n	800762e <HAL_RCC_GetSysClockFreq+0xa6>
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	2b03      	cmp	r3, #3
 800762a:	d003      	beq.n	8007634 <HAL_RCC_GetSysClockFreq+0xac>
 800762c:	e005      	b.n	800763a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800762e:	4b1a      	ldr	r3, [pc, #104]	@ (8007698 <HAL_RCC_GetSysClockFreq+0x110>)
 8007630:	617b      	str	r3, [r7, #20]
      break;
 8007632:	e005      	b.n	8007640 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007634:	4b19      	ldr	r3, [pc, #100]	@ (800769c <HAL_RCC_GetSysClockFreq+0x114>)
 8007636:	617b      	str	r3, [r7, #20]
      break;
 8007638:	e002      	b.n	8007640 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	617b      	str	r3, [r7, #20]
      break;
 800763e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007640:	4b13      	ldr	r3, [pc, #76]	@ (8007690 <HAL_RCC_GetSysClockFreq+0x108>)
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	091b      	lsrs	r3, r3, #4
 8007646:	f003 030f 	and.w	r3, r3, #15
 800764a:	3301      	adds	r3, #1
 800764c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800764e:	4b10      	ldr	r3, [pc, #64]	@ (8007690 <HAL_RCC_GetSysClockFreq+0x108>)
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	0a1b      	lsrs	r3, r3, #8
 8007654:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007658:	697a      	ldr	r2, [r7, #20]
 800765a:	fb03 f202 	mul.w	r2, r3, r2
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	fbb2 f3f3 	udiv	r3, r2, r3
 8007664:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007666:	4b0a      	ldr	r3, [pc, #40]	@ (8007690 <HAL_RCC_GetSysClockFreq+0x108>)
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	0e5b      	lsrs	r3, r3, #25
 800766c:	f003 0303 	and.w	r3, r3, #3
 8007670:	3301      	adds	r3, #1
 8007672:	005b      	lsls	r3, r3, #1
 8007674:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007676:	697a      	ldr	r2, [r7, #20]
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	fbb2 f3f3 	udiv	r3, r2, r3
 800767e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007680:	69bb      	ldr	r3, [r7, #24]
}
 8007682:	4618      	mov	r0, r3
 8007684:	3724      	adds	r7, #36	@ 0x24
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	40021000 	.word	0x40021000
 8007694:	0800cb1c 	.word	0x0800cb1c
 8007698:	00f42400 	.word	0x00f42400
 800769c:	007a1200 	.word	0x007a1200

080076a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076a0:	b480      	push	{r7}
 80076a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80076a4:	4b03      	ldr	r3, [pc, #12]	@ (80076b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80076a6:	681b      	ldr	r3, [r3, #0]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	2000004c 	.word	0x2000004c

080076b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80076bc:	f7ff fff0 	bl	80076a0 <HAL_RCC_GetHCLKFreq>
 80076c0:	4602      	mov	r2, r0
 80076c2:	4b06      	ldr	r3, [pc, #24]	@ (80076dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	0a1b      	lsrs	r3, r3, #8
 80076c8:	f003 0307 	and.w	r3, r3, #7
 80076cc:	4904      	ldr	r1, [pc, #16]	@ (80076e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80076ce:	5ccb      	ldrb	r3, [r1, r3]
 80076d0:	f003 031f 	and.w	r3, r3, #31
 80076d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076d8:	4618      	mov	r0, r3
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	40021000 	.word	0x40021000
 80076e0:	0800cb14 	.word	0x0800cb14

080076e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80076e8:	f7ff ffda 	bl	80076a0 <HAL_RCC_GetHCLKFreq>
 80076ec:	4602      	mov	r2, r0
 80076ee:	4b06      	ldr	r3, [pc, #24]	@ (8007708 <HAL_RCC_GetPCLK2Freq+0x24>)
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	0adb      	lsrs	r3, r3, #11
 80076f4:	f003 0307 	and.w	r3, r3, #7
 80076f8:	4904      	ldr	r1, [pc, #16]	@ (800770c <HAL_RCC_GetPCLK2Freq+0x28>)
 80076fa:	5ccb      	ldrb	r3, [r1, r3]
 80076fc:	f003 031f 	and.w	r3, r3, #31
 8007700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007704:	4618      	mov	r0, r3
 8007706:	bd80      	pop	{r7, pc}
 8007708:	40021000 	.word	0x40021000
 800770c:	0800cb14 	.word	0x0800cb14

08007710 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	220f      	movs	r2, #15
 800771e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007720:	4b12      	ldr	r3, [pc, #72]	@ (800776c <HAL_RCC_GetClockConfig+0x5c>)
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	f003 0203 	and.w	r2, r3, #3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800772c:	4b0f      	ldr	r3, [pc, #60]	@ (800776c <HAL_RCC_GetClockConfig+0x5c>)
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007738:	4b0c      	ldr	r3, [pc, #48]	@ (800776c <HAL_RCC_GetClockConfig+0x5c>)
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007744:	4b09      	ldr	r3, [pc, #36]	@ (800776c <HAL_RCC_GetClockConfig+0x5c>)
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	08db      	lsrs	r3, r3, #3
 800774a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007752:	4b07      	ldr	r3, [pc, #28]	@ (8007770 <HAL_RCC_GetClockConfig+0x60>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 020f 	and.w	r2, r3, #15
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	601a      	str	r2, [r3, #0]
}
 800775e:	bf00      	nop
 8007760:	370c      	adds	r7, #12
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	40021000 	.word	0x40021000
 8007770:	40022000 	.word	0x40022000

08007774 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b086      	sub	sp, #24
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800777c:	2300      	movs	r3, #0
 800777e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007780:	4b27      	ldr	r3, [pc, #156]	@ (8007820 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007784:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007788:	2b00      	cmp	r3, #0
 800778a:	d003      	beq.n	8007794 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800778c:	f7ff f8e4 	bl	8006958 <HAL_PWREx_GetVoltageRange>
 8007790:	6178      	str	r0, [r7, #20]
 8007792:	e014      	b.n	80077be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007794:	4b22      	ldr	r3, [pc, #136]	@ (8007820 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007798:	4a21      	ldr	r2, [pc, #132]	@ (8007820 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800779a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800779e:	6593      	str	r3, [r2, #88]	@ 0x58
 80077a0:	4b1f      	ldr	r3, [pc, #124]	@ (8007820 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80077a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077a8:	60fb      	str	r3, [r7, #12]
 80077aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80077ac:	f7ff f8d4 	bl	8006958 <HAL_PWREx_GetVoltageRange>
 80077b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80077b2:	4b1b      	ldr	r3, [pc, #108]	@ (8007820 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80077b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077b6:	4a1a      	ldr	r2, [pc, #104]	@ (8007820 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80077b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077c4:	d10b      	bne.n	80077de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2b80      	cmp	r3, #128	@ 0x80
 80077ca:	d913      	bls.n	80077f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2ba0      	cmp	r3, #160	@ 0xa0
 80077d0:	d902      	bls.n	80077d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80077d2:	2302      	movs	r3, #2
 80077d4:	613b      	str	r3, [r7, #16]
 80077d6:	e00d      	b.n	80077f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80077d8:	2301      	movs	r3, #1
 80077da:	613b      	str	r3, [r7, #16]
 80077dc:	e00a      	b.n	80077f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80077e2:	d902      	bls.n	80077ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80077e4:	2302      	movs	r3, #2
 80077e6:	613b      	str	r3, [r7, #16]
 80077e8:	e004      	b.n	80077f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2b70      	cmp	r3, #112	@ 0x70
 80077ee:	d101      	bne.n	80077f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80077f0:	2301      	movs	r3, #1
 80077f2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80077f4:	4b0b      	ldr	r3, [pc, #44]	@ (8007824 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f023 020f 	bic.w	r2, r3, #15
 80077fc:	4909      	ldr	r1, [pc, #36]	@ (8007824 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	4313      	orrs	r3, r2
 8007802:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007804:	4b07      	ldr	r3, [pc, #28]	@ (8007824 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f003 030f 	and.w	r3, r3, #15
 800780c:	693a      	ldr	r2, [r7, #16]
 800780e:	429a      	cmp	r2, r3
 8007810:	d001      	beq.n	8007816 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	e000      	b.n	8007818 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8007816:	2300      	movs	r3, #0
}
 8007818:	4618      	mov	r0, r3
 800781a:	3718      	adds	r7, #24
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}
 8007820:	40021000 	.word	0x40021000
 8007824:	40022000 	.word	0x40022000

08007828 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007828:	b480      	push	{r7}
 800782a:	b087      	sub	sp, #28
 800782c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800782e:	4b2d      	ldr	r3, [pc, #180]	@ (80078e4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007830:	68db      	ldr	r3, [r3, #12]
 8007832:	f003 0303 	and.w	r3, r3, #3
 8007836:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2b03      	cmp	r3, #3
 800783c:	d00b      	beq.n	8007856 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2b03      	cmp	r3, #3
 8007842:	d825      	bhi.n	8007890 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2b01      	cmp	r3, #1
 8007848:	d008      	beq.n	800785c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2b02      	cmp	r3, #2
 800784e:	d11f      	bne.n	8007890 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8007850:	4b25      	ldr	r3, [pc, #148]	@ (80078e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007852:	613b      	str	r3, [r7, #16]
    break;
 8007854:	e01f      	b.n	8007896 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8007856:	4b25      	ldr	r3, [pc, #148]	@ (80078ec <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8007858:	613b      	str	r3, [r7, #16]
    break;
 800785a:	e01c      	b.n	8007896 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800785c:	4b21      	ldr	r3, [pc, #132]	@ (80078e4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f003 0308 	and.w	r3, r3, #8
 8007864:	2b00      	cmp	r3, #0
 8007866:	d107      	bne.n	8007878 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007868:	4b1e      	ldr	r3, [pc, #120]	@ (80078e4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800786a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800786e:	0a1b      	lsrs	r3, r3, #8
 8007870:	f003 030f 	and.w	r3, r3, #15
 8007874:	617b      	str	r3, [r7, #20]
 8007876:	e005      	b.n	8007884 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007878:	4b1a      	ldr	r3, [pc, #104]	@ (80078e4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	091b      	lsrs	r3, r3, #4
 800787e:	f003 030f 	and.w	r3, r3, #15
 8007882:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8007884:	4a1a      	ldr	r2, [pc, #104]	@ (80078f0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800788c:	613b      	str	r3, [r7, #16]
    break;
 800788e:	e002      	b.n	8007896 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8007890:	2300      	movs	r3, #0
 8007892:	613b      	str	r3, [r7, #16]
    break;
 8007894:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007896:	4b13      	ldr	r3, [pc, #76]	@ (80078e4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	091b      	lsrs	r3, r3, #4
 800789c:	f003 030f 	and.w	r3, r3, #15
 80078a0:	3301      	adds	r3, #1
 80078a2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80078a4:	4b0f      	ldr	r3, [pc, #60]	@ (80078e4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	0a1b      	lsrs	r3, r3, #8
 80078aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078ae:	693a      	ldr	r2, [r7, #16]
 80078b0:	fb03 f202 	mul.w	r2, r3, r2
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ba:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80078bc:	4b09      	ldr	r3, [pc, #36]	@ (80078e4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	0e5b      	lsrs	r3, r3, #25
 80078c2:	f003 0303 	and.w	r3, r3, #3
 80078c6:	3301      	adds	r3, #1
 80078c8:	005b      	lsls	r3, r3, #1
 80078ca:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80078cc:	693a      	ldr	r2, [r7, #16]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078d4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80078d6:	683b      	ldr	r3, [r7, #0]
}
 80078d8:	4618      	mov	r0, r3
 80078da:	371c      	adds	r7, #28
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr
 80078e4:	40021000 	.word	0x40021000
 80078e8:	00f42400 	.word	0x00f42400
 80078ec:	007a1200 	.word	0x007a1200
 80078f0:	0800cb1c 	.word	0x0800cb1c

080078f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b086      	sub	sp, #24
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80078fc:	2300      	movs	r3, #0
 80078fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007900:	2300      	movs	r3, #0
 8007902:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800790c:	2b00      	cmp	r3, #0
 800790e:	d040      	beq.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007914:	2b80      	cmp	r3, #128	@ 0x80
 8007916:	d02a      	beq.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007918:	2b80      	cmp	r3, #128	@ 0x80
 800791a:	d825      	bhi.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800791c:	2b60      	cmp	r3, #96	@ 0x60
 800791e:	d026      	beq.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007920:	2b60      	cmp	r3, #96	@ 0x60
 8007922:	d821      	bhi.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007924:	2b40      	cmp	r3, #64	@ 0x40
 8007926:	d006      	beq.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8007928:	2b40      	cmp	r3, #64	@ 0x40
 800792a:	d81d      	bhi.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800792c:	2b00      	cmp	r3, #0
 800792e:	d009      	beq.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8007930:	2b20      	cmp	r3, #32
 8007932:	d010      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8007934:	e018      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007936:	4b89      	ldr	r3, [pc, #548]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	4a88      	ldr	r2, [pc, #544]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800793c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007940:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007942:	e015      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	3304      	adds	r3, #4
 8007948:	2100      	movs	r1, #0
 800794a:	4618      	mov	r0, r3
 800794c:	f000 fb02 	bl	8007f54 <RCCEx_PLLSAI1_Config>
 8007950:	4603      	mov	r3, r0
 8007952:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007954:	e00c      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	3320      	adds	r3, #32
 800795a:	2100      	movs	r1, #0
 800795c:	4618      	mov	r0, r3
 800795e:	f000 fbed 	bl	800813c <RCCEx_PLLSAI2_Config>
 8007962:	4603      	mov	r3, r0
 8007964:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007966:	e003      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	74fb      	strb	r3, [r7, #19]
      break;
 800796c:	e000      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800796e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007970:	7cfb      	ldrb	r3, [r7, #19]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10b      	bne.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007976:	4b79      	ldr	r3, [pc, #484]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007978:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800797c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007984:	4975      	ldr	r1, [pc, #468]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007986:	4313      	orrs	r3, r2
 8007988:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800798c:	e001      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800798e:	7cfb      	ldrb	r3, [r7, #19]
 8007990:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800799a:	2b00      	cmp	r3, #0
 800799c:	d047      	beq.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079a6:	d030      	beq.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80079a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079ac:	d82a      	bhi.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80079ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079b2:	d02a      	beq.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80079b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079b8:	d824      	bhi.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80079ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079be:	d008      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80079c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079c4:	d81e      	bhi.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d00a      	beq.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80079ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079ce:	d010      	beq.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80079d0:	e018      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80079d2:	4b62      	ldr	r3, [pc, #392]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	4a61      	ldr	r2, [pc, #388]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80079d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079dc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80079de:	e015      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	3304      	adds	r3, #4
 80079e4:	2100      	movs	r1, #0
 80079e6:	4618      	mov	r0, r3
 80079e8:	f000 fab4 	bl	8007f54 <RCCEx_PLLSAI1_Config>
 80079ec:	4603      	mov	r3, r0
 80079ee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80079f0:	e00c      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	3320      	adds	r3, #32
 80079f6:	2100      	movs	r1, #0
 80079f8:	4618      	mov	r0, r3
 80079fa:	f000 fb9f 	bl	800813c <RCCEx_PLLSAI2_Config>
 80079fe:	4603      	mov	r3, r0
 8007a00:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007a02:	e003      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	74fb      	strb	r3, [r7, #19]
      break;
 8007a08:	e000      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8007a0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a0c:	7cfb      	ldrb	r3, [r7, #19]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10b      	bne.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007a12:	4b52      	ldr	r3, [pc, #328]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a14:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007a18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a20:	494e      	ldr	r1, [pc, #312]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a22:	4313      	orrs	r3, r2
 8007a24:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8007a28:	e001      	b.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a2a:	7cfb      	ldrb	r3, [r7, #19]
 8007a2c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	f000 809f 	beq.w	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007a40:	4b46      	ldr	r3, [pc, #280]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d101      	bne.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e000      	b.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8007a50:	2300      	movs	r3, #0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00d      	beq.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a56:	4b41      	ldr	r3, [pc, #260]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a5a:	4a40      	ldr	r2, [pc, #256]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a60:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a62:	4b3e      	ldr	r3, [pc, #248]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a6a:	60bb      	str	r3, [r7, #8]
 8007a6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a72:	4b3b      	ldr	r3, [pc, #236]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a3a      	ldr	r2, [pc, #232]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007a78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a7e:	f7fb fe9f 	bl	80037c0 <HAL_GetTick>
 8007a82:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007a84:	e009      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a86:	f7fb fe9b 	bl	80037c0 <HAL_GetTick>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	d902      	bls.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8007a94:	2303      	movs	r3, #3
 8007a96:	74fb      	strb	r3, [r7, #19]
        break;
 8007a98:	e005      	b.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007a9a:	4b31      	ldr	r3, [pc, #196]	@ (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d0ef      	beq.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8007aa6:	7cfb      	ldrb	r3, [r7, #19]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d15b      	bne.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007aac:	4b2b      	ldr	r3, [pc, #172]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ab2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ab6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d01f      	beq.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ac4:	697a      	ldr	r2, [r7, #20]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d019      	beq.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007aca:	4b24      	ldr	r3, [pc, #144]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ad0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ad4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007ad6:	4b21      	ldr	r3, [pc, #132]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007adc:	4a1f      	ldr	r2, [pc, #124]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007ade:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ae2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007ae6:	4b1d      	ldr	r3, [pc, #116]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aec:	4a1b      	ldr	r2, [pc, #108]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007aee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007af2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007af6:	4a19      	ldr	r2, [pc, #100]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	f003 0301 	and.w	r3, r3, #1
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d016      	beq.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b08:	f7fb fe5a 	bl	80037c0 <HAL_GetTick>
 8007b0c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b0e:	e00b      	b.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b10:	f7fb fe56 	bl	80037c0 <HAL_GetTick>
 8007b14:	4602      	mov	r2, r0
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d902      	bls.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	74fb      	strb	r3, [r7, #19]
            break;
 8007b26:	e006      	b.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b28:	4b0c      	ldr	r3, [pc, #48]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b2e:	f003 0302 	and.w	r3, r3, #2
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d0ec      	beq.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8007b36:	7cfb      	ldrb	r3, [r7, #19]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10c      	bne.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b3c:	4b07      	ldr	r3, [pc, #28]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b42:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b4c:	4903      	ldr	r1, [pc, #12]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007b54:	e008      	b.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b56:	7cfb      	ldrb	r3, [r7, #19]
 8007b58:	74bb      	strb	r3, [r7, #18]
 8007b5a:	e005      	b.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8007b5c:	40021000 	.word	0x40021000
 8007b60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b64:	7cfb      	ldrb	r3, [r7, #19]
 8007b66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b68:	7c7b      	ldrb	r3, [r7, #17]
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d105      	bne.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b6e:	4ba0      	ldr	r3, [pc, #640]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b72:	4a9f      	ldr	r2, [pc, #636]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b78:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 0301 	and.w	r3, r3, #1
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00a      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b86:	4b9a      	ldr	r3, [pc, #616]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b8c:	f023 0203 	bic.w	r2, r3, #3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b94:	4996      	ldr	r1, [pc, #600]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b96:	4313      	orrs	r3, r2
 8007b98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 0302 	and.w	r3, r3, #2
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00a      	beq.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007ba8:	4b91      	ldr	r3, [pc, #580]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bae:	f023 020c 	bic.w	r2, r3, #12
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bb6:	498e      	ldr	r1, [pc, #568]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f003 0304 	and.w	r3, r3, #4
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d00a      	beq.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007bca:	4b89      	ldr	r3, [pc, #548]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bd0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bd8:	4985      	ldr	r1, [pc, #532]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 0308 	and.w	r3, r3, #8
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d00a      	beq.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007bec:	4b80      	ldr	r3, [pc, #512]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bf2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bfa:	497d      	ldr	r1, [pc, #500]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f003 0310 	and.w	r3, r3, #16
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00a      	beq.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007c0e:	4b78      	ldr	r3, [pc, #480]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c1c:	4974      	ldr	r1, [pc, #464]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f003 0320 	and.w	r3, r3, #32
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00a      	beq.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007c30:	4b6f      	ldr	r3, [pc, #444]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c36:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c3e:	496c      	ldr	r1, [pc, #432]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c40:	4313      	orrs	r3, r2
 8007c42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00a      	beq.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c52:	4b67      	ldr	r3, [pc, #412]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c58:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c60:	4963      	ldr	r1, [pc, #396]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c62:	4313      	orrs	r3, r2
 8007c64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d00a      	beq.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007c74:	4b5e      	ldr	r3, [pc, #376]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c7a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007c82:	495b      	ldr	r1, [pc, #364]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c84:	4313      	orrs	r3, r2
 8007c86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00a      	beq.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007c96:	4b56      	ldr	r3, [pc, #344]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c9c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ca4:	4952      	ldr	r1, [pc, #328]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00a      	beq.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007cb8:	4b4d      	ldr	r3, [pc, #308]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cbe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cc6:	494a      	ldr	r1, [pc, #296]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00a      	beq.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007cda:	4b45      	ldr	r3, [pc, #276]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ce0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ce8:	4941      	ldr	r1, [pc, #260]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cea:	4313      	orrs	r3, r2
 8007cec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00a      	beq.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007cfc:	4b3c      	ldr	r3, [pc, #240]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d02:	f023 0203 	bic.w	r2, r3, #3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d0a:	4939      	ldr	r1, [pc, #228]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d028      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d1e:	4b34      	ldr	r3, [pc, #208]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d24:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d2c:	4930      	ldr	r1, [pc, #192]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d3c:	d106      	bne.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d3e:	4b2c      	ldr	r3, [pc, #176]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	4a2b      	ldr	r2, [pc, #172]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d44:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d48:	60d3      	str	r3, [r2, #12]
 8007d4a:	e011      	b.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d50:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007d54:	d10c      	bne.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	3304      	adds	r3, #4
 8007d5a:	2101      	movs	r1, #1
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f000 f8f9 	bl	8007f54 <RCCEx_PLLSAI1_Config>
 8007d62:	4603      	mov	r3, r0
 8007d64:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007d66:	7cfb      	ldrb	r3, [r7, #19]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d001      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8007d6c:	7cfb      	ldrb	r3, [r7, #19]
 8007d6e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d04d      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d84:	d108      	bne.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8007d86:	4b1a      	ldr	r3, [pc, #104]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d88:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d8c:	4a18      	ldr	r2, [pc, #96]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007d92:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8007d96:	e012      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8007d98:	4b15      	ldr	r3, [pc, #84]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d9e:	4a14      	ldr	r2, [pc, #80]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007da0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007da4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8007da8:	4b11      	ldr	r3, [pc, #68]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007db6:	490e      	ldr	r1, [pc, #56]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007db8:	4313      	orrs	r3, r2
 8007dba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007dc2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007dc6:	d106      	bne.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007dc8:	4b09      	ldr	r3, [pc, #36]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	4a08      	ldr	r2, [pc, #32]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007dce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007dd2:	60d3      	str	r3, [r2, #12]
 8007dd4:	e020      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007dda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007dde:	d109      	bne.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007de0:	4b03      	ldr	r3, [pc, #12]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	4a02      	ldr	r2, [pc, #8]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007de6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007dea:	60d3      	str	r3, [r2, #12]
 8007dec:	e014      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007dee:	bf00      	nop
 8007df0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007df8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007dfc:	d10c      	bne.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	3304      	adds	r3, #4
 8007e02:	2101      	movs	r1, #1
 8007e04:	4618      	mov	r0, r3
 8007e06:	f000 f8a5 	bl	8007f54 <RCCEx_PLLSAI1_Config>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007e0e:	7cfb      	ldrb	r3, [r7, #19]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d001      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8007e14:	7cfb      	ldrb	r3, [r7, #19]
 8007e16:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d028      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e24:	4b4a      	ldr	r3, [pc, #296]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e2a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e32:	4947      	ldr	r1, [pc, #284]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e34:	4313      	orrs	r3, r2
 8007e36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e42:	d106      	bne.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e44:	4b42      	ldr	r3, [pc, #264]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	4a41      	ldr	r2, [pc, #260]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e4e:	60d3      	str	r3, [r2, #12]
 8007e50:	e011      	b.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e56:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007e5a:	d10c      	bne.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	3304      	adds	r3, #4
 8007e60:	2101      	movs	r1, #1
 8007e62:	4618      	mov	r0, r3
 8007e64:	f000 f876 	bl	8007f54 <RCCEx_PLLSAI1_Config>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007e6c:	7cfb      	ldrb	r3, [r7, #19]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d001      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8007e72:	7cfb      	ldrb	r3, [r7, #19]
 8007e74:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d01e      	beq.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007e82:	4b33      	ldr	r3, [pc, #204]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e88:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e92:	492f      	ldr	r1, [pc, #188]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e94:	4313      	orrs	r3, r2
 8007e96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ea0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ea4:	d10c      	bne.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	3304      	adds	r3, #4
 8007eaa:	2102      	movs	r1, #2
 8007eac:	4618      	mov	r0, r3
 8007eae:	f000 f851 	bl	8007f54 <RCCEx_PLLSAI1_Config>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007eb6:	7cfb      	ldrb	r3, [r7, #19]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d001      	beq.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8007ebc:	7cfb      	ldrb	r3, [r7, #19]
 8007ebe:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00b      	beq.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007ecc:	4b20      	ldr	r3, [pc, #128]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ece:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007ed2:	f023 0204 	bic.w	r2, r3, #4
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007edc:	491c      	ldr	r1, [pc, #112]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d00b      	beq.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007ef0:	4b17      	ldr	r3, [pc, #92]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ef2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007ef6:	f023 0218 	bic.w	r2, r3, #24
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f00:	4913      	ldr	r1, [pc, #76]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f02:	4313      	orrs	r3, r2
 8007f04:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d017      	beq.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007f14:	4b0e      	ldr	r3, [pc, #56]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f24:	490a      	ldr	r1, [pc, #40]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f26:	4313      	orrs	r3, r2
 8007f28:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f36:	d105      	bne.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f38:	4b05      	ldr	r3, [pc, #20]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	4a04      	ldr	r2, [pc, #16]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f42:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007f44:	7cbb      	ldrb	r3, [r7, #18]
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3718      	adds	r7, #24
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	40021000 	.word	0x40021000

08007f54 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007f62:	4b72      	ldr	r3, [pc, #456]	@ (800812c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	f003 0303 	and.w	r3, r3, #3
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00e      	beq.n	8007f8c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007f6e:	4b6f      	ldr	r3, [pc, #444]	@ (800812c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	f003 0203 	and.w	r2, r3, #3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d103      	bne.n	8007f86 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
       ||
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d142      	bne.n	800800c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	73fb      	strb	r3, [r7, #15]
 8007f8a:	e03f      	b.n	800800c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2b03      	cmp	r3, #3
 8007f92:	d018      	beq.n	8007fc6 <RCCEx_PLLSAI1_Config+0x72>
 8007f94:	2b03      	cmp	r3, #3
 8007f96:	d825      	bhi.n	8007fe4 <RCCEx_PLLSAI1_Config+0x90>
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d002      	beq.n	8007fa2 <RCCEx_PLLSAI1_Config+0x4e>
 8007f9c:	2b02      	cmp	r3, #2
 8007f9e:	d009      	beq.n	8007fb4 <RCCEx_PLLSAI1_Config+0x60>
 8007fa0:	e020      	b.n	8007fe4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007fa2:	4b62      	ldr	r3, [pc, #392]	@ (800812c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f003 0302 	and.w	r3, r3, #2
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d11d      	bne.n	8007fea <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007fb2:	e01a      	b.n	8007fea <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007fb4:	4b5d      	ldr	r3, [pc, #372]	@ (800812c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d116      	bne.n	8007fee <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007fc4:	e013      	b.n	8007fee <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007fc6:	4b59      	ldr	r3, [pc, #356]	@ (800812c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d10f      	bne.n	8007ff2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007fd2:	4b56      	ldr	r3, [pc, #344]	@ (800812c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d109      	bne.n	8007ff2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007fe2:	e006      	b.n	8007ff2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8007fe8:	e004      	b.n	8007ff4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007fea:	bf00      	nop
 8007fec:	e002      	b.n	8007ff4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007fee:	bf00      	nop
 8007ff0:	e000      	b.n	8007ff4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007ff2:	bf00      	nop
    }

    if(status == HAL_OK)
 8007ff4:	7bfb      	ldrb	r3, [r7, #15]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d108      	bne.n	800800c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8007ffa:	4b4c      	ldr	r3, [pc, #304]	@ (800812c <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	f023 0203 	bic.w	r2, r3, #3
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4949      	ldr	r1, [pc, #292]	@ (800812c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008008:	4313      	orrs	r3, r2
 800800a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800800c:	7bfb      	ldrb	r3, [r7, #15]
 800800e:	2b00      	cmp	r3, #0
 8008010:	f040 8086 	bne.w	8008120 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008014:	4b45      	ldr	r3, [pc, #276]	@ (800812c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a44      	ldr	r2, [pc, #272]	@ (800812c <RCCEx_PLLSAI1_Config+0x1d8>)
 800801a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800801e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008020:	f7fb fbce 	bl	80037c0 <HAL_GetTick>
 8008024:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008026:	e009      	b.n	800803c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008028:	f7fb fbca 	bl	80037c0 <HAL_GetTick>
 800802c:	4602      	mov	r2, r0
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	1ad3      	subs	r3, r2, r3
 8008032:	2b02      	cmp	r3, #2
 8008034:	d902      	bls.n	800803c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8008036:	2303      	movs	r3, #3
 8008038:	73fb      	strb	r3, [r7, #15]
        break;
 800803a:	e005      	b.n	8008048 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800803c:	4b3b      	ldr	r3, [pc, #236]	@ (800812c <RCCEx_PLLSAI1_Config+0x1d8>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008044:	2b00      	cmp	r3, #0
 8008046:	d1ef      	bne.n	8008028 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008048:	7bfb      	ldrb	r3, [r7, #15]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d168      	bne.n	8008120 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d113      	bne.n	800807c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008054:	4b35      	ldr	r3, [pc, #212]	@ (800812c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008056:	691a      	ldr	r2, [r3, #16]
 8008058:	4b35      	ldr	r3, [pc, #212]	@ (8008130 <RCCEx_PLLSAI1_Config+0x1dc>)
 800805a:	4013      	ands	r3, r2
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	6892      	ldr	r2, [r2, #8]
 8008060:	0211      	lsls	r1, r2, #8
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	68d2      	ldr	r2, [r2, #12]
 8008066:	06d2      	lsls	r2, r2, #27
 8008068:	4311      	orrs	r1, r2
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	6852      	ldr	r2, [r2, #4]
 800806e:	3a01      	subs	r2, #1
 8008070:	0112      	lsls	r2, r2, #4
 8008072:	430a      	orrs	r2, r1
 8008074:	492d      	ldr	r1, [pc, #180]	@ (800812c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008076:	4313      	orrs	r3, r2
 8008078:	610b      	str	r3, [r1, #16]
 800807a:	e02d      	b.n	80080d8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	2b01      	cmp	r3, #1
 8008080:	d115      	bne.n	80080ae <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008082:	4b2a      	ldr	r3, [pc, #168]	@ (800812c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008084:	691a      	ldr	r2, [r3, #16]
 8008086:	4b2b      	ldr	r3, [pc, #172]	@ (8008134 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008088:	4013      	ands	r3, r2
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	6892      	ldr	r2, [r2, #8]
 800808e:	0211      	lsls	r1, r2, #8
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	6912      	ldr	r2, [r2, #16]
 8008094:	0852      	lsrs	r2, r2, #1
 8008096:	3a01      	subs	r2, #1
 8008098:	0552      	lsls	r2, r2, #21
 800809a:	4311      	orrs	r1, r2
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	6852      	ldr	r2, [r2, #4]
 80080a0:	3a01      	subs	r2, #1
 80080a2:	0112      	lsls	r2, r2, #4
 80080a4:	430a      	orrs	r2, r1
 80080a6:	4921      	ldr	r1, [pc, #132]	@ (800812c <RCCEx_PLLSAI1_Config+0x1d8>)
 80080a8:	4313      	orrs	r3, r2
 80080aa:	610b      	str	r3, [r1, #16]
 80080ac:	e014      	b.n	80080d8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80080ae:	4b1f      	ldr	r3, [pc, #124]	@ (800812c <RCCEx_PLLSAI1_Config+0x1d8>)
 80080b0:	691a      	ldr	r2, [r3, #16]
 80080b2:	4b21      	ldr	r3, [pc, #132]	@ (8008138 <RCCEx_PLLSAI1_Config+0x1e4>)
 80080b4:	4013      	ands	r3, r2
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	6892      	ldr	r2, [r2, #8]
 80080ba:	0211      	lsls	r1, r2, #8
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	6952      	ldr	r2, [r2, #20]
 80080c0:	0852      	lsrs	r2, r2, #1
 80080c2:	3a01      	subs	r2, #1
 80080c4:	0652      	lsls	r2, r2, #25
 80080c6:	4311      	orrs	r1, r2
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	6852      	ldr	r2, [r2, #4]
 80080cc:	3a01      	subs	r2, #1
 80080ce:	0112      	lsls	r2, r2, #4
 80080d0:	430a      	orrs	r2, r1
 80080d2:	4916      	ldr	r1, [pc, #88]	@ (800812c <RCCEx_PLLSAI1_Config+0x1d8>)
 80080d4:	4313      	orrs	r3, r2
 80080d6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80080d8:	4b14      	ldr	r3, [pc, #80]	@ (800812c <RCCEx_PLLSAI1_Config+0x1d8>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a13      	ldr	r2, [pc, #76]	@ (800812c <RCCEx_PLLSAI1_Config+0x1d8>)
 80080de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80080e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080e4:	f7fb fb6c 	bl	80037c0 <HAL_GetTick>
 80080e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80080ea:	e009      	b.n	8008100 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80080ec:	f7fb fb68 	bl	80037c0 <HAL_GetTick>
 80080f0:	4602      	mov	r2, r0
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	1ad3      	subs	r3, r2, r3
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	d902      	bls.n	8008100 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80080fa:	2303      	movs	r3, #3
 80080fc:	73fb      	strb	r3, [r7, #15]
          break;
 80080fe:	e005      	b.n	800810c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008100:	4b0a      	ldr	r3, [pc, #40]	@ (800812c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008108:	2b00      	cmp	r3, #0
 800810a:	d0ef      	beq.n	80080ec <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800810c:	7bfb      	ldrb	r3, [r7, #15]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d106      	bne.n	8008120 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008112:	4b06      	ldr	r3, [pc, #24]	@ (800812c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008114:	691a      	ldr	r2, [r3, #16]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	699b      	ldr	r3, [r3, #24]
 800811a:	4904      	ldr	r1, [pc, #16]	@ (800812c <RCCEx_PLLSAI1_Config+0x1d8>)
 800811c:	4313      	orrs	r3, r2
 800811e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008120:	7bfb      	ldrb	r3, [r7, #15]
}
 8008122:	4618      	mov	r0, r3
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	40021000 	.word	0x40021000
 8008130:	07ff800f 	.word	0x07ff800f
 8008134:	ff9f800f 	.word	0xff9f800f
 8008138:	f9ff800f 	.word	0xf9ff800f

0800813c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008146:	2300      	movs	r3, #0
 8008148:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800814a:	4b72      	ldr	r3, [pc, #456]	@ (8008314 <RCCEx_PLLSAI2_Config+0x1d8>)
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	f003 0303 	and.w	r3, r3, #3
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00e      	beq.n	8008174 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008156:	4b6f      	ldr	r3, [pc, #444]	@ (8008314 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	f003 0203 	and.w	r2, r3, #3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	429a      	cmp	r2, r3
 8008164:	d103      	bne.n	800816e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
       ||
 800816a:	2b00      	cmp	r3, #0
 800816c:	d142      	bne.n	80081f4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	73fb      	strb	r3, [r7, #15]
 8008172:	e03f      	b.n	80081f4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2b03      	cmp	r3, #3
 800817a:	d018      	beq.n	80081ae <RCCEx_PLLSAI2_Config+0x72>
 800817c:	2b03      	cmp	r3, #3
 800817e:	d825      	bhi.n	80081cc <RCCEx_PLLSAI2_Config+0x90>
 8008180:	2b01      	cmp	r3, #1
 8008182:	d002      	beq.n	800818a <RCCEx_PLLSAI2_Config+0x4e>
 8008184:	2b02      	cmp	r3, #2
 8008186:	d009      	beq.n	800819c <RCCEx_PLLSAI2_Config+0x60>
 8008188:	e020      	b.n	80081cc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800818a:	4b62      	ldr	r3, [pc, #392]	@ (8008314 <RCCEx_PLLSAI2_Config+0x1d8>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f003 0302 	and.w	r3, r3, #2
 8008192:	2b00      	cmp	r3, #0
 8008194:	d11d      	bne.n	80081d2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800819a:	e01a      	b.n	80081d2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800819c:	4b5d      	ldr	r3, [pc, #372]	@ (8008314 <RCCEx_PLLSAI2_Config+0x1d8>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d116      	bne.n	80081d6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80081ac:	e013      	b.n	80081d6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80081ae:	4b59      	ldr	r3, [pc, #356]	@ (8008314 <RCCEx_PLLSAI2_Config+0x1d8>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d10f      	bne.n	80081da <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80081ba:	4b56      	ldr	r3, [pc, #344]	@ (8008314 <RCCEx_PLLSAI2_Config+0x1d8>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d109      	bne.n	80081da <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80081ca:	e006      	b.n	80081da <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	73fb      	strb	r3, [r7, #15]
      break;
 80081d0:	e004      	b.n	80081dc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80081d2:	bf00      	nop
 80081d4:	e002      	b.n	80081dc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80081d6:	bf00      	nop
 80081d8:	e000      	b.n	80081dc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80081da:	bf00      	nop
    }

    if(status == HAL_OK)
 80081dc:	7bfb      	ldrb	r3, [r7, #15]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d108      	bne.n	80081f4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80081e2:	4b4c      	ldr	r3, [pc, #304]	@ (8008314 <RCCEx_PLLSAI2_Config+0x1d8>)
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	f023 0203 	bic.w	r2, r3, #3
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4949      	ldr	r1, [pc, #292]	@ (8008314 <RCCEx_PLLSAI2_Config+0x1d8>)
 80081f0:	4313      	orrs	r3, r2
 80081f2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80081f4:	7bfb      	ldrb	r3, [r7, #15]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	f040 8086 	bne.w	8008308 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80081fc:	4b45      	ldr	r3, [pc, #276]	@ (8008314 <RCCEx_PLLSAI2_Config+0x1d8>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a44      	ldr	r2, [pc, #272]	@ (8008314 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008202:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008206:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008208:	f7fb fada 	bl	80037c0 <HAL_GetTick>
 800820c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800820e:	e009      	b.n	8008224 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008210:	f7fb fad6 	bl	80037c0 <HAL_GetTick>
 8008214:	4602      	mov	r2, r0
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	1ad3      	subs	r3, r2, r3
 800821a:	2b02      	cmp	r3, #2
 800821c:	d902      	bls.n	8008224 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800821e:	2303      	movs	r3, #3
 8008220:	73fb      	strb	r3, [r7, #15]
        break;
 8008222:	e005      	b.n	8008230 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008224:	4b3b      	ldr	r3, [pc, #236]	@ (8008314 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800822c:	2b00      	cmp	r3, #0
 800822e:	d1ef      	bne.n	8008210 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008230:	7bfb      	ldrb	r3, [r7, #15]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d168      	bne.n	8008308 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d113      	bne.n	8008264 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800823c:	4b35      	ldr	r3, [pc, #212]	@ (8008314 <RCCEx_PLLSAI2_Config+0x1d8>)
 800823e:	695a      	ldr	r2, [r3, #20]
 8008240:	4b35      	ldr	r3, [pc, #212]	@ (8008318 <RCCEx_PLLSAI2_Config+0x1dc>)
 8008242:	4013      	ands	r3, r2
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	6892      	ldr	r2, [r2, #8]
 8008248:	0211      	lsls	r1, r2, #8
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	68d2      	ldr	r2, [r2, #12]
 800824e:	06d2      	lsls	r2, r2, #27
 8008250:	4311      	orrs	r1, r2
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	6852      	ldr	r2, [r2, #4]
 8008256:	3a01      	subs	r2, #1
 8008258:	0112      	lsls	r2, r2, #4
 800825a:	430a      	orrs	r2, r1
 800825c:	492d      	ldr	r1, [pc, #180]	@ (8008314 <RCCEx_PLLSAI2_Config+0x1d8>)
 800825e:	4313      	orrs	r3, r2
 8008260:	614b      	str	r3, [r1, #20]
 8008262:	e02d      	b.n	80082c0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	2b01      	cmp	r3, #1
 8008268:	d115      	bne.n	8008296 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800826a:	4b2a      	ldr	r3, [pc, #168]	@ (8008314 <RCCEx_PLLSAI2_Config+0x1d8>)
 800826c:	695a      	ldr	r2, [r3, #20]
 800826e:	4b2b      	ldr	r3, [pc, #172]	@ (800831c <RCCEx_PLLSAI2_Config+0x1e0>)
 8008270:	4013      	ands	r3, r2
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	6892      	ldr	r2, [r2, #8]
 8008276:	0211      	lsls	r1, r2, #8
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	6912      	ldr	r2, [r2, #16]
 800827c:	0852      	lsrs	r2, r2, #1
 800827e:	3a01      	subs	r2, #1
 8008280:	0552      	lsls	r2, r2, #21
 8008282:	4311      	orrs	r1, r2
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	6852      	ldr	r2, [r2, #4]
 8008288:	3a01      	subs	r2, #1
 800828a:	0112      	lsls	r2, r2, #4
 800828c:	430a      	orrs	r2, r1
 800828e:	4921      	ldr	r1, [pc, #132]	@ (8008314 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008290:	4313      	orrs	r3, r2
 8008292:	614b      	str	r3, [r1, #20]
 8008294:	e014      	b.n	80082c0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008296:	4b1f      	ldr	r3, [pc, #124]	@ (8008314 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008298:	695a      	ldr	r2, [r3, #20]
 800829a:	4b21      	ldr	r3, [pc, #132]	@ (8008320 <RCCEx_PLLSAI2_Config+0x1e4>)
 800829c:	4013      	ands	r3, r2
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	6892      	ldr	r2, [r2, #8]
 80082a2:	0211      	lsls	r1, r2, #8
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	6952      	ldr	r2, [r2, #20]
 80082a8:	0852      	lsrs	r2, r2, #1
 80082aa:	3a01      	subs	r2, #1
 80082ac:	0652      	lsls	r2, r2, #25
 80082ae:	4311      	orrs	r1, r2
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	6852      	ldr	r2, [r2, #4]
 80082b4:	3a01      	subs	r2, #1
 80082b6:	0112      	lsls	r2, r2, #4
 80082b8:	430a      	orrs	r2, r1
 80082ba:	4916      	ldr	r1, [pc, #88]	@ (8008314 <RCCEx_PLLSAI2_Config+0x1d8>)
 80082bc:	4313      	orrs	r3, r2
 80082be:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80082c0:	4b14      	ldr	r3, [pc, #80]	@ (8008314 <RCCEx_PLLSAI2_Config+0x1d8>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a13      	ldr	r2, [pc, #76]	@ (8008314 <RCCEx_PLLSAI2_Config+0x1d8>)
 80082c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80082ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082cc:	f7fb fa78 	bl	80037c0 <HAL_GetTick>
 80082d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80082d2:	e009      	b.n	80082e8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80082d4:	f7fb fa74 	bl	80037c0 <HAL_GetTick>
 80082d8:	4602      	mov	r2, r0
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	1ad3      	subs	r3, r2, r3
 80082de:	2b02      	cmp	r3, #2
 80082e0:	d902      	bls.n	80082e8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80082e2:	2303      	movs	r3, #3
 80082e4:	73fb      	strb	r3, [r7, #15]
          break;
 80082e6:	e005      	b.n	80082f4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80082e8:	4b0a      	ldr	r3, [pc, #40]	@ (8008314 <RCCEx_PLLSAI2_Config+0x1d8>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d0ef      	beq.n	80082d4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80082f4:	7bfb      	ldrb	r3, [r7, #15]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d106      	bne.n	8008308 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80082fa:	4b06      	ldr	r3, [pc, #24]	@ (8008314 <RCCEx_PLLSAI2_Config+0x1d8>)
 80082fc:	695a      	ldr	r2, [r3, #20]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	699b      	ldr	r3, [r3, #24]
 8008302:	4904      	ldr	r1, [pc, #16]	@ (8008314 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008304:	4313      	orrs	r3, r2
 8008306:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008308:	7bfb      	ldrb	r3, [r7, #15]
}
 800830a:	4618      	mov	r0, r3
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	40021000 	.word	0x40021000
 8008318:	07ff800f 	.word	0x07ff800f
 800831c:	ff9f800f 	.word	0xff9f800f
 8008320:	f9ff800f 	.word	0xf9ff800f

08008324 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d101      	bne.n	8008336 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e049      	b.n	80083ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800833c:	b2db      	uxtb	r3, r3
 800833e:	2b00      	cmp	r3, #0
 8008340:	d106      	bne.n	8008350 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f7fa fda6 	bl	8002e9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2202      	movs	r2, #2
 8008354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	3304      	adds	r3, #4
 8008360:	4619      	mov	r1, r3
 8008362:	4610      	mov	r0, r2
 8008364:	f000 fb06 	bl	8008974 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3708      	adds	r7, #8
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
	...

080083d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d001      	beq.n	80083ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	e047      	b.n	800847c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2202      	movs	r2, #2
 80083f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a23      	ldr	r2, [pc, #140]	@ (8008488 <HAL_TIM_Base_Start+0xb4>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d01d      	beq.n	800843a <HAL_TIM_Base_Start+0x66>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008406:	d018      	beq.n	800843a <HAL_TIM_Base_Start+0x66>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a1f      	ldr	r2, [pc, #124]	@ (800848c <HAL_TIM_Base_Start+0xb8>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d013      	beq.n	800843a <HAL_TIM_Base_Start+0x66>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a1e      	ldr	r2, [pc, #120]	@ (8008490 <HAL_TIM_Base_Start+0xbc>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d00e      	beq.n	800843a <HAL_TIM_Base_Start+0x66>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a1c      	ldr	r2, [pc, #112]	@ (8008494 <HAL_TIM_Base_Start+0xc0>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d009      	beq.n	800843a <HAL_TIM_Base_Start+0x66>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a1b      	ldr	r2, [pc, #108]	@ (8008498 <HAL_TIM_Base_Start+0xc4>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d004      	beq.n	800843a <HAL_TIM_Base_Start+0x66>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a19      	ldr	r2, [pc, #100]	@ (800849c <HAL_TIM_Base_Start+0xc8>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d115      	bne.n	8008466 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	689a      	ldr	r2, [r3, #8]
 8008440:	4b17      	ldr	r3, [pc, #92]	@ (80084a0 <HAL_TIM_Base_Start+0xcc>)
 8008442:	4013      	ands	r3, r2
 8008444:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2b06      	cmp	r3, #6
 800844a:	d015      	beq.n	8008478 <HAL_TIM_Base_Start+0xa4>
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008452:	d011      	beq.n	8008478 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f042 0201 	orr.w	r2, r2, #1
 8008462:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008464:	e008      	b.n	8008478 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f042 0201 	orr.w	r2, r2, #1
 8008474:	601a      	str	r2, [r3, #0]
 8008476:	e000      	b.n	800847a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008478:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	3714      	adds	r7, #20
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr
 8008488:	40012c00 	.word	0x40012c00
 800848c:	40000400 	.word	0x40000400
 8008490:	40000800 	.word	0x40000800
 8008494:	40000c00 	.word	0x40000c00
 8008498:	40013400 	.word	0x40013400
 800849c:	40014000 	.word	0x40014000
 80084a0:	00010007 	.word	0x00010007

080084a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b085      	sub	sp, #20
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d001      	beq.n	80084bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	e04f      	b.n	800855c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2202      	movs	r2, #2
 80084c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	68da      	ldr	r2, [r3, #12]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f042 0201 	orr.w	r2, r2, #1
 80084d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a23      	ldr	r2, [pc, #140]	@ (8008568 <HAL_TIM_Base_Start_IT+0xc4>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d01d      	beq.n	800851a <HAL_TIM_Base_Start_IT+0x76>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084e6:	d018      	beq.n	800851a <HAL_TIM_Base_Start_IT+0x76>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a1f      	ldr	r2, [pc, #124]	@ (800856c <HAL_TIM_Base_Start_IT+0xc8>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d013      	beq.n	800851a <HAL_TIM_Base_Start_IT+0x76>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a1e      	ldr	r2, [pc, #120]	@ (8008570 <HAL_TIM_Base_Start_IT+0xcc>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d00e      	beq.n	800851a <HAL_TIM_Base_Start_IT+0x76>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a1c      	ldr	r2, [pc, #112]	@ (8008574 <HAL_TIM_Base_Start_IT+0xd0>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d009      	beq.n	800851a <HAL_TIM_Base_Start_IT+0x76>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a1b      	ldr	r2, [pc, #108]	@ (8008578 <HAL_TIM_Base_Start_IT+0xd4>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d004      	beq.n	800851a <HAL_TIM_Base_Start_IT+0x76>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a19      	ldr	r2, [pc, #100]	@ (800857c <HAL_TIM_Base_Start_IT+0xd8>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d115      	bne.n	8008546 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	689a      	ldr	r2, [r3, #8]
 8008520:	4b17      	ldr	r3, [pc, #92]	@ (8008580 <HAL_TIM_Base_Start_IT+0xdc>)
 8008522:	4013      	ands	r3, r2
 8008524:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2b06      	cmp	r3, #6
 800852a:	d015      	beq.n	8008558 <HAL_TIM_Base_Start_IT+0xb4>
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008532:	d011      	beq.n	8008558 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f042 0201 	orr.w	r2, r2, #1
 8008542:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008544:	e008      	b.n	8008558 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f042 0201 	orr.w	r2, r2, #1
 8008554:	601a      	str	r2, [r3, #0]
 8008556:	e000      	b.n	800855a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008558:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	3714      	adds	r7, #20
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr
 8008568:	40012c00 	.word	0x40012c00
 800856c:	40000400 	.word	0x40000400
 8008570:	40000800 	.word	0x40000800
 8008574:	40000c00 	.word	0x40000c00
 8008578:	40013400 	.word	0x40013400
 800857c:	40014000 	.word	0x40014000
 8008580:	00010007 	.word	0x00010007

08008584 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	68db      	ldr	r3, [r3, #12]
 8008592:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	f003 0302 	and.w	r3, r3, #2
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d020      	beq.n	80085e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f003 0302 	and.w	r3, r3, #2
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d01b      	beq.n	80085e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f06f 0202 	mvn.w	r2, #2
 80085b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2201      	movs	r2, #1
 80085be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	f003 0303 	and.w	r3, r3, #3
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d003      	beq.n	80085d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 f9b2 	bl	8008938 <HAL_TIM_IC_CaptureCallback>
 80085d4:	e005      	b.n	80085e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 f9a4 	bl	8008924 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 f9b5 	bl	800894c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2200      	movs	r2, #0
 80085e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	f003 0304 	and.w	r3, r3, #4
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d020      	beq.n	8008634 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f003 0304 	and.w	r3, r3, #4
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d01b      	beq.n	8008634 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f06f 0204 	mvn.w	r2, #4
 8008604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2202      	movs	r2, #2
 800860a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	699b      	ldr	r3, [r3, #24]
 8008612:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008616:	2b00      	cmp	r3, #0
 8008618:	d003      	beq.n	8008622 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 f98c 	bl	8008938 <HAL_TIM_IC_CaptureCallback>
 8008620:	e005      	b.n	800862e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 f97e 	bl	8008924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 f98f 	bl	800894c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	f003 0308 	and.w	r3, r3, #8
 800863a:	2b00      	cmp	r3, #0
 800863c:	d020      	beq.n	8008680 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f003 0308 	and.w	r3, r3, #8
 8008644:	2b00      	cmp	r3, #0
 8008646:	d01b      	beq.n	8008680 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f06f 0208 	mvn.w	r2, #8
 8008650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2204      	movs	r2, #4
 8008656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	69db      	ldr	r3, [r3, #28]
 800865e:	f003 0303 	and.w	r3, r3, #3
 8008662:	2b00      	cmp	r3, #0
 8008664:	d003      	beq.n	800866e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 f966 	bl	8008938 <HAL_TIM_IC_CaptureCallback>
 800866c:	e005      	b.n	800867a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 f958 	bl	8008924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 f969 	bl	800894c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	f003 0310 	and.w	r3, r3, #16
 8008686:	2b00      	cmp	r3, #0
 8008688:	d020      	beq.n	80086cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f003 0310 	and.w	r3, r3, #16
 8008690:	2b00      	cmp	r3, #0
 8008692:	d01b      	beq.n	80086cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f06f 0210 	mvn.w	r2, #16
 800869c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2208      	movs	r2, #8
 80086a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	69db      	ldr	r3, [r3, #28]
 80086aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d003      	beq.n	80086ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 f940 	bl	8008938 <HAL_TIM_IC_CaptureCallback>
 80086b8:	e005      	b.n	80086c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 f932 	bl	8008924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 f943 	bl	800894c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	f003 0301 	and.w	r3, r3, #1
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00c      	beq.n	80086f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f003 0301 	and.w	r3, r3, #1
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d007      	beq.n	80086f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f06f 0201 	mvn.w	r2, #1
 80086e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f7f9 fb5a 	bl	8001da4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d104      	bne.n	8008704 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008700:	2b00      	cmp	r3, #0
 8008702:	d00c      	beq.n	800871e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800870a:	2b00      	cmp	r3, #0
 800870c:	d007      	beq.n	800871e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008716:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 fafd 	bl	8008d18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008724:	2b00      	cmp	r3, #0
 8008726:	d00c      	beq.n	8008742 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800872e:	2b00      	cmp	r3, #0
 8008730:	d007      	beq.n	8008742 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800873a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 faf5 	bl	8008d2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008748:	2b00      	cmp	r3, #0
 800874a:	d00c      	beq.n	8008766 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008752:	2b00      	cmp	r3, #0
 8008754:	d007      	beq.n	8008766 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800875e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 f8fd 	bl	8008960 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	f003 0320 	and.w	r3, r3, #32
 800876c:	2b00      	cmp	r3, #0
 800876e:	d00c      	beq.n	800878a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f003 0320 	and.w	r3, r3, #32
 8008776:	2b00      	cmp	r3, #0
 8008778:	d007      	beq.n	800878a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f06f 0220 	mvn.w	r2, #32
 8008782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 fabd 	bl	8008d04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800878a:	bf00      	nop
 800878c:	3710      	adds	r7, #16
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008792:	b580      	push	{r7, lr}
 8008794:	b084      	sub	sp, #16
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
 800879a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800879c:	2300      	movs	r3, #0
 800879e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d101      	bne.n	80087ae <HAL_TIM_ConfigClockSource+0x1c>
 80087aa:	2302      	movs	r3, #2
 80087ac:	e0b6      	b.n	800891c <HAL_TIM_ConfigClockSource+0x18a>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2201      	movs	r2, #1
 80087b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2202      	movs	r2, #2
 80087ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80087cc:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80087d0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80087d8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	68ba      	ldr	r2, [r7, #8]
 80087e0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087ea:	d03e      	beq.n	800886a <HAL_TIM_ConfigClockSource+0xd8>
 80087ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087f0:	f200 8087 	bhi.w	8008902 <HAL_TIM_ConfigClockSource+0x170>
 80087f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087f8:	f000 8086 	beq.w	8008908 <HAL_TIM_ConfigClockSource+0x176>
 80087fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008800:	d87f      	bhi.n	8008902 <HAL_TIM_ConfigClockSource+0x170>
 8008802:	2b70      	cmp	r3, #112	@ 0x70
 8008804:	d01a      	beq.n	800883c <HAL_TIM_ConfigClockSource+0xaa>
 8008806:	2b70      	cmp	r3, #112	@ 0x70
 8008808:	d87b      	bhi.n	8008902 <HAL_TIM_ConfigClockSource+0x170>
 800880a:	2b60      	cmp	r3, #96	@ 0x60
 800880c:	d050      	beq.n	80088b0 <HAL_TIM_ConfigClockSource+0x11e>
 800880e:	2b60      	cmp	r3, #96	@ 0x60
 8008810:	d877      	bhi.n	8008902 <HAL_TIM_ConfigClockSource+0x170>
 8008812:	2b50      	cmp	r3, #80	@ 0x50
 8008814:	d03c      	beq.n	8008890 <HAL_TIM_ConfigClockSource+0xfe>
 8008816:	2b50      	cmp	r3, #80	@ 0x50
 8008818:	d873      	bhi.n	8008902 <HAL_TIM_ConfigClockSource+0x170>
 800881a:	2b40      	cmp	r3, #64	@ 0x40
 800881c:	d058      	beq.n	80088d0 <HAL_TIM_ConfigClockSource+0x13e>
 800881e:	2b40      	cmp	r3, #64	@ 0x40
 8008820:	d86f      	bhi.n	8008902 <HAL_TIM_ConfigClockSource+0x170>
 8008822:	2b30      	cmp	r3, #48	@ 0x30
 8008824:	d064      	beq.n	80088f0 <HAL_TIM_ConfigClockSource+0x15e>
 8008826:	2b30      	cmp	r3, #48	@ 0x30
 8008828:	d86b      	bhi.n	8008902 <HAL_TIM_ConfigClockSource+0x170>
 800882a:	2b20      	cmp	r3, #32
 800882c:	d060      	beq.n	80088f0 <HAL_TIM_ConfigClockSource+0x15e>
 800882e:	2b20      	cmp	r3, #32
 8008830:	d867      	bhi.n	8008902 <HAL_TIM_ConfigClockSource+0x170>
 8008832:	2b00      	cmp	r3, #0
 8008834:	d05c      	beq.n	80088f0 <HAL_TIM_ConfigClockSource+0x15e>
 8008836:	2b10      	cmp	r3, #16
 8008838:	d05a      	beq.n	80088f0 <HAL_TIM_ConfigClockSource+0x15e>
 800883a:	e062      	b.n	8008902 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800884c:	f000 f9b2 	bl	8008bb4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800885e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68ba      	ldr	r2, [r7, #8]
 8008866:	609a      	str	r2, [r3, #8]
      break;
 8008868:	e04f      	b.n	800890a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800887a:	f000 f99b 	bl	8008bb4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	689a      	ldr	r2, [r3, #8]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800888c:	609a      	str	r2, [r3, #8]
      break;
 800888e:	e03c      	b.n	800890a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800889c:	461a      	mov	r2, r3
 800889e:	f000 f90f 	bl	8008ac0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	2150      	movs	r1, #80	@ 0x50
 80088a8:	4618      	mov	r0, r3
 80088aa:	f000 f968 	bl	8008b7e <TIM_ITRx_SetConfig>
      break;
 80088ae:	e02c      	b.n	800890a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80088bc:	461a      	mov	r2, r3
 80088be:	f000 f92e 	bl	8008b1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2160      	movs	r1, #96	@ 0x60
 80088c8:	4618      	mov	r0, r3
 80088ca:	f000 f958 	bl	8008b7e <TIM_ITRx_SetConfig>
      break;
 80088ce:	e01c      	b.n	800890a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80088dc:	461a      	mov	r2, r3
 80088de:	f000 f8ef 	bl	8008ac0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	2140      	movs	r1, #64	@ 0x40
 80088e8:	4618      	mov	r0, r3
 80088ea:	f000 f948 	bl	8008b7e <TIM_ITRx_SetConfig>
      break;
 80088ee:	e00c      	b.n	800890a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4619      	mov	r1, r3
 80088fa:	4610      	mov	r0, r2
 80088fc:	f000 f93f 	bl	8008b7e <TIM_ITRx_SetConfig>
      break;
 8008900:	e003      	b.n	800890a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	73fb      	strb	r3, [r7, #15]
      break;
 8008906:	e000      	b.n	800890a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008908:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2201      	movs	r2, #1
 800890e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800891a:	7bfb      	ldrb	r3, [r7, #15]
}
 800891c:	4618      	mov	r0, r3
 800891e:	3710      	adds	r7, #16
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800892c:	bf00      	nop
 800892e:	370c      	adds	r7, #12
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008940:	bf00      	nop
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008954:	bf00      	nop
 8008956:	370c      	adds	r7, #12
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008968:	bf00      	nop
 800896a:	370c      	adds	r7, #12
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008974:	b480      	push	{r7}
 8008976:	b085      	sub	sp, #20
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a46      	ldr	r2, [pc, #280]	@ (8008aa0 <TIM_Base_SetConfig+0x12c>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d013      	beq.n	80089b4 <TIM_Base_SetConfig+0x40>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008992:	d00f      	beq.n	80089b4 <TIM_Base_SetConfig+0x40>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a43      	ldr	r2, [pc, #268]	@ (8008aa4 <TIM_Base_SetConfig+0x130>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d00b      	beq.n	80089b4 <TIM_Base_SetConfig+0x40>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a42      	ldr	r2, [pc, #264]	@ (8008aa8 <TIM_Base_SetConfig+0x134>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d007      	beq.n	80089b4 <TIM_Base_SetConfig+0x40>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4a41      	ldr	r2, [pc, #260]	@ (8008aac <TIM_Base_SetConfig+0x138>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d003      	beq.n	80089b4 <TIM_Base_SetConfig+0x40>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4a40      	ldr	r2, [pc, #256]	@ (8008ab0 <TIM_Base_SetConfig+0x13c>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d108      	bne.n	80089c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	68fa      	ldr	r2, [r7, #12]
 80089c2:	4313      	orrs	r3, r2
 80089c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	4a35      	ldr	r2, [pc, #212]	@ (8008aa0 <TIM_Base_SetConfig+0x12c>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d01f      	beq.n	8008a0e <TIM_Base_SetConfig+0x9a>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089d4:	d01b      	beq.n	8008a0e <TIM_Base_SetConfig+0x9a>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	4a32      	ldr	r2, [pc, #200]	@ (8008aa4 <TIM_Base_SetConfig+0x130>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d017      	beq.n	8008a0e <TIM_Base_SetConfig+0x9a>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	4a31      	ldr	r2, [pc, #196]	@ (8008aa8 <TIM_Base_SetConfig+0x134>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d013      	beq.n	8008a0e <TIM_Base_SetConfig+0x9a>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	4a30      	ldr	r2, [pc, #192]	@ (8008aac <TIM_Base_SetConfig+0x138>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d00f      	beq.n	8008a0e <TIM_Base_SetConfig+0x9a>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	4a2f      	ldr	r2, [pc, #188]	@ (8008ab0 <TIM_Base_SetConfig+0x13c>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d00b      	beq.n	8008a0e <TIM_Base_SetConfig+0x9a>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4a2e      	ldr	r2, [pc, #184]	@ (8008ab4 <TIM_Base_SetConfig+0x140>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d007      	beq.n	8008a0e <TIM_Base_SetConfig+0x9a>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	4a2d      	ldr	r2, [pc, #180]	@ (8008ab8 <TIM_Base_SetConfig+0x144>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d003      	beq.n	8008a0e <TIM_Base_SetConfig+0x9a>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4a2c      	ldr	r2, [pc, #176]	@ (8008abc <TIM_Base_SetConfig+0x148>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d108      	bne.n	8008a20 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	68fa      	ldr	r2, [r7, #12]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	695b      	ldr	r3, [r3, #20]
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	68fa      	ldr	r2, [r7, #12]
 8008a32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	689a      	ldr	r2, [r3, #8]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	4a16      	ldr	r2, [pc, #88]	@ (8008aa0 <TIM_Base_SetConfig+0x12c>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d00f      	beq.n	8008a6c <TIM_Base_SetConfig+0xf8>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	4a18      	ldr	r2, [pc, #96]	@ (8008ab0 <TIM_Base_SetConfig+0x13c>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d00b      	beq.n	8008a6c <TIM_Base_SetConfig+0xf8>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	4a17      	ldr	r2, [pc, #92]	@ (8008ab4 <TIM_Base_SetConfig+0x140>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d007      	beq.n	8008a6c <TIM_Base_SetConfig+0xf8>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	4a16      	ldr	r2, [pc, #88]	@ (8008ab8 <TIM_Base_SetConfig+0x144>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d003      	beq.n	8008a6c <TIM_Base_SetConfig+0xf8>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	4a15      	ldr	r2, [pc, #84]	@ (8008abc <TIM_Base_SetConfig+0x148>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d103      	bne.n	8008a74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	691a      	ldr	r2, [r3, #16]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2201      	movs	r2, #1
 8008a78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	691b      	ldr	r3, [r3, #16]
 8008a7e:	f003 0301 	and.w	r3, r3, #1
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d105      	bne.n	8008a92 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	f023 0201 	bic.w	r2, r3, #1
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	611a      	str	r2, [r3, #16]
  }
}
 8008a92:	bf00      	nop
 8008a94:	3714      	adds	r7, #20
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop
 8008aa0:	40012c00 	.word	0x40012c00
 8008aa4:	40000400 	.word	0x40000400
 8008aa8:	40000800 	.word	0x40000800
 8008aac:	40000c00 	.word	0x40000c00
 8008ab0:	40013400 	.word	0x40013400
 8008ab4:	40014000 	.word	0x40014000
 8008ab8:	40014400 	.word	0x40014400
 8008abc:	40014800 	.word	0x40014800

08008ac0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b087      	sub	sp, #28
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6a1b      	ldr	r3, [r3, #32]
 8008ad0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	6a1b      	ldr	r3, [r3, #32]
 8008ad6:	f023 0201 	bic.w	r2, r3, #1
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	699b      	ldr	r3, [r3, #24]
 8008ae2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008aea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	011b      	lsls	r3, r3, #4
 8008af0:	693a      	ldr	r2, [r7, #16]
 8008af2:	4313      	orrs	r3, r2
 8008af4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	f023 030a 	bic.w	r3, r3, #10
 8008afc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008afe:	697a      	ldr	r2, [r7, #20]
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	693a      	ldr	r2, [r7, #16]
 8008b0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	697a      	ldr	r2, [r7, #20]
 8008b10:	621a      	str	r2, [r3, #32]
}
 8008b12:	bf00      	nop
 8008b14:	371c      	adds	r7, #28
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr

08008b1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b1e:	b480      	push	{r7}
 8008b20:	b087      	sub	sp, #28
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	60f8      	str	r0, [r7, #12]
 8008b26:	60b9      	str	r1, [r7, #8]
 8008b28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	6a1b      	ldr	r3, [r3, #32]
 8008b2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	6a1b      	ldr	r3, [r3, #32]
 8008b34:	f023 0210 	bic.w	r2, r3, #16
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	699b      	ldr	r3, [r3, #24]
 8008b40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008b48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	031b      	lsls	r3, r3, #12
 8008b4e:	693a      	ldr	r2, [r7, #16]
 8008b50:	4313      	orrs	r3, r2
 8008b52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008b5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	011b      	lsls	r3, r3, #4
 8008b60:	697a      	ldr	r2, [r7, #20]
 8008b62:	4313      	orrs	r3, r2
 8008b64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	693a      	ldr	r2, [r7, #16]
 8008b6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	697a      	ldr	r2, [r7, #20]
 8008b70:	621a      	str	r2, [r3, #32]
}
 8008b72:	bf00      	nop
 8008b74:	371c      	adds	r7, #28
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr

08008b7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008b7e:	b480      	push	{r7}
 8008b80:	b085      	sub	sp, #20
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
 8008b86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b96:	683a      	ldr	r2, [r7, #0]
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	f043 0307 	orr.w	r3, r3, #7
 8008ba0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	609a      	str	r2, [r3, #8]
}
 8008ba8:	bf00      	nop
 8008baa:	3714      	adds	r7, #20
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b087      	sub	sp, #28
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	607a      	str	r2, [r7, #4]
 8008bc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008bce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	021a      	lsls	r2, r3, #8
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	431a      	orrs	r2, r3
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	697a      	ldr	r2, [r7, #20]
 8008bde:	4313      	orrs	r3, r2
 8008be0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	697a      	ldr	r2, [r7, #20]
 8008be6:	609a      	str	r2, [r3, #8]
}
 8008be8:	bf00      	nop
 8008bea:	371c      	adds	r7, #28
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b085      	sub	sp, #20
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d101      	bne.n	8008c0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c08:	2302      	movs	r3, #2
 8008c0a:	e068      	b.n	8008cde <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2202      	movs	r2, #2
 8008c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a2e      	ldr	r2, [pc, #184]	@ (8008cec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d004      	beq.n	8008c40 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a2d      	ldr	r2, [pc, #180]	@ (8008cf0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d108      	bne.n	8008c52 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008c46:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	68fa      	ldr	r2, [r7, #12]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	68fa      	ldr	r2, [r7, #12]
 8008c60:	4313      	orrs	r3, r2
 8008c62:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a1e      	ldr	r2, [pc, #120]	@ (8008cec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d01d      	beq.n	8008cb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c7e:	d018      	beq.n	8008cb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a1b      	ldr	r2, [pc, #108]	@ (8008cf4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d013      	beq.n	8008cb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a1a      	ldr	r2, [pc, #104]	@ (8008cf8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d00e      	beq.n	8008cb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a18      	ldr	r2, [pc, #96]	@ (8008cfc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d009      	beq.n	8008cb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a13      	ldr	r2, [pc, #76]	@ (8008cf0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d004      	beq.n	8008cb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a14      	ldr	r2, [pc, #80]	@ (8008d00 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d10c      	bne.n	8008ccc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008cb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	68ba      	ldr	r2, [r7, #8]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	68ba      	ldr	r2, [r7, #8]
 8008cca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3714      	adds	r7, #20
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr
 8008cea:	bf00      	nop
 8008cec:	40012c00 	.word	0x40012c00
 8008cf0:	40013400 	.word	0x40013400
 8008cf4:	40000400 	.word	0x40000400
 8008cf8:	40000800 	.word	0x40000800
 8008cfc:	40000c00 	.word	0x40000c00
 8008d00:	40014000 	.word	0x40014000

08008d04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d0c:	bf00      	nop
 8008d0e:	370c      	adds	r7, #12
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d20:	bf00      	nop
 8008d22:	370c      	adds	r7, #12
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008d34:	bf00      	nop
 8008d36:	370c      	adds	r7, #12
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d101      	bne.n	8008d52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e042      	b.n	8008dd8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d106      	bne.n	8008d6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f7fa f8b7 	bl	8002ed8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2224      	movs	r2, #36	@ 0x24
 8008d6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f022 0201 	bic.w	r2, r2, #1
 8008d80:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d002      	beq.n	8008d90 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 fbb2 	bl	80094f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 f8b3 	bl	8008efc <UART_SetConfig>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d101      	bne.n	8008da0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	e01b      	b.n	8008dd8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	685a      	ldr	r2, [r3, #4]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008dae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	689a      	ldr	r2, [r3, #8]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008dbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f042 0201 	orr.w	r2, r2, #1
 8008dce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 fc31 	bl	8009638 <UART_CheckIdleState>
 8008dd6:	4603      	mov	r3, r0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3708      	adds	r7, #8
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b08a      	sub	sp, #40	@ 0x28
 8008de4:	af02      	add	r7, sp, #8
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	603b      	str	r3, [r7, #0]
 8008dec:	4613      	mov	r3, r2
 8008dee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008df6:	2b20      	cmp	r3, #32
 8008df8:	d17b      	bne.n	8008ef2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d002      	beq.n	8008e06 <HAL_UART_Transmit+0x26>
 8008e00:	88fb      	ldrh	r3, [r7, #6]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d101      	bne.n	8008e0a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
 8008e08:	e074      	b.n	8008ef4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2221      	movs	r2, #33	@ 0x21
 8008e16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e1a:	f7fa fcd1 	bl	80037c0 <HAL_GetTick>
 8008e1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	88fa      	ldrh	r2, [r7, #6]
 8008e24:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	88fa      	ldrh	r2, [r7, #6]
 8008e2c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e38:	d108      	bne.n	8008e4c <HAL_UART_Transmit+0x6c>
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	691b      	ldr	r3, [r3, #16]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d104      	bne.n	8008e4c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008e42:	2300      	movs	r3, #0
 8008e44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	61bb      	str	r3, [r7, #24]
 8008e4a:	e003      	b.n	8008e54 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e50:	2300      	movs	r3, #0
 8008e52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008e54:	e030      	b.n	8008eb8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	9300      	str	r3, [sp, #0]
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	2180      	movs	r1, #128	@ 0x80
 8008e60:	68f8      	ldr	r0, [r7, #12]
 8008e62:	f000 fc93 	bl	800978c <UART_WaitOnFlagUntilTimeout>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d005      	beq.n	8008e78 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2220      	movs	r2, #32
 8008e70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008e74:	2303      	movs	r3, #3
 8008e76:	e03d      	b.n	8008ef4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d10b      	bne.n	8008e96 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008e7e:	69bb      	ldr	r3, [r7, #24]
 8008e80:	881a      	ldrh	r2, [r3, #0]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e8a:	b292      	uxth	r2, r2
 8008e8c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008e8e:	69bb      	ldr	r3, [r7, #24]
 8008e90:	3302      	adds	r3, #2
 8008e92:	61bb      	str	r3, [r7, #24]
 8008e94:	e007      	b.n	8008ea6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	781a      	ldrb	r2, [r3, #0]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	3b01      	subs	r3, #1
 8008eb0:	b29a      	uxth	r2, r3
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d1c8      	bne.n	8008e56 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	9300      	str	r3, [sp, #0]
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	2140      	movs	r1, #64	@ 0x40
 8008ece:	68f8      	ldr	r0, [r7, #12]
 8008ed0:	f000 fc5c 	bl	800978c <UART_WaitOnFlagUntilTimeout>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d005      	beq.n	8008ee6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2220      	movs	r2, #32
 8008ede:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008ee2:	2303      	movs	r3, #3
 8008ee4:	e006      	b.n	8008ef4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2220      	movs	r2, #32
 8008eea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	e000      	b.n	8008ef4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008ef2:	2302      	movs	r3, #2
  }
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3720      	adds	r7, #32
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008efc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f00:	b08c      	sub	sp, #48	@ 0x30
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008f06:	2300      	movs	r3, #0
 8008f08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	689a      	ldr	r2, [r3, #8]
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	691b      	ldr	r3, [r3, #16]
 8008f14:	431a      	orrs	r2, r3
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	695b      	ldr	r3, [r3, #20]
 8008f1a:	431a      	orrs	r2, r3
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	69db      	ldr	r3, [r3, #28]
 8008f20:	4313      	orrs	r3, r2
 8008f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	4baa      	ldr	r3, [pc, #680]	@ (80091d4 <UART_SetConfig+0x2d8>)
 8008f2c:	4013      	ands	r3, r2
 8008f2e:	697a      	ldr	r2, [r7, #20]
 8008f30:	6812      	ldr	r2, [r2, #0]
 8008f32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f34:	430b      	orrs	r3, r1
 8008f36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	68da      	ldr	r2, [r3, #12]
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	430a      	orrs	r2, r1
 8008f4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	699b      	ldr	r3, [r3, #24]
 8008f52:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a9f      	ldr	r2, [pc, #636]	@ (80091d8 <UART_SetConfig+0x2dc>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d004      	beq.n	8008f68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	6a1b      	ldr	r3, [r3, #32]
 8008f62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f64:	4313      	orrs	r3, r2
 8008f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008f72:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008f76:	697a      	ldr	r2, [r7, #20]
 8008f78:	6812      	ldr	r2, [r2, #0]
 8008f7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f7c:	430b      	orrs	r3, r1
 8008f7e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f86:	f023 010f 	bic.w	r1, r3, #15
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	430a      	orrs	r2, r1
 8008f94:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a90      	ldr	r2, [pc, #576]	@ (80091dc <UART_SetConfig+0x2e0>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d125      	bne.n	8008fec <UART_SetConfig+0xf0>
 8008fa0:	4b8f      	ldr	r3, [pc, #572]	@ (80091e0 <UART_SetConfig+0x2e4>)
 8008fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fa6:	f003 0303 	and.w	r3, r3, #3
 8008faa:	2b03      	cmp	r3, #3
 8008fac:	d81a      	bhi.n	8008fe4 <UART_SetConfig+0xe8>
 8008fae:	a201      	add	r2, pc, #4	@ (adr r2, 8008fb4 <UART_SetConfig+0xb8>)
 8008fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb4:	08008fc5 	.word	0x08008fc5
 8008fb8:	08008fd5 	.word	0x08008fd5
 8008fbc:	08008fcd 	.word	0x08008fcd
 8008fc0:	08008fdd 	.word	0x08008fdd
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fca:	e116      	b.n	80091fa <UART_SetConfig+0x2fe>
 8008fcc:	2302      	movs	r3, #2
 8008fce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fd2:	e112      	b.n	80091fa <UART_SetConfig+0x2fe>
 8008fd4:	2304      	movs	r3, #4
 8008fd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fda:	e10e      	b.n	80091fa <UART_SetConfig+0x2fe>
 8008fdc:	2308      	movs	r3, #8
 8008fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fe2:	e10a      	b.n	80091fa <UART_SetConfig+0x2fe>
 8008fe4:	2310      	movs	r3, #16
 8008fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fea:	e106      	b.n	80091fa <UART_SetConfig+0x2fe>
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a7c      	ldr	r2, [pc, #496]	@ (80091e4 <UART_SetConfig+0x2e8>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d138      	bne.n	8009068 <UART_SetConfig+0x16c>
 8008ff6:	4b7a      	ldr	r3, [pc, #488]	@ (80091e0 <UART_SetConfig+0x2e4>)
 8008ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ffc:	f003 030c 	and.w	r3, r3, #12
 8009000:	2b0c      	cmp	r3, #12
 8009002:	d82d      	bhi.n	8009060 <UART_SetConfig+0x164>
 8009004:	a201      	add	r2, pc, #4	@ (adr r2, 800900c <UART_SetConfig+0x110>)
 8009006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800900a:	bf00      	nop
 800900c:	08009041 	.word	0x08009041
 8009010:	08009061 	.word	0x08009061
 8009014:	08009061 	.word	0x08009061
 8009018:	08009061 	.word	0x08009061
 800901c:	08009051 	.word	0x08009051
 8009020:	08009061 	.word	0x08009061
 8009024:	08009061 	.word	0x08009061
 8009028:	08009061 	.word	0x08009061
 800902c:	08009049 	.word	0x08009049
 8009030:	08009061 	.word	0x08009061
 8009034:	08009061 	.word	0x08009061
 8009038:	08009061 	.word	0x08009061
 800903c:	08009059 	.word	0x08009059
 8009040:	2300      	movs	r3, #0
 8009042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009046:	e0d8      	b.n	80091fa <UART_SetConfig+0x2fe>
 8009048:	2302      	movs	r3, #2
 800904a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800904e:	e0d4      	b.n	80091fa <UART_SetConfig+0x2fe>
 8009050:	2304      	movs	r3, #4
 8009052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009056:	e0d0      	b.n	80091fa <UART_SetConfig+0x2fe>
 8009058:	2308      	movs	r3, #8
 800905a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800905e:	e0cc      	b.n	80091fa <UART_SetConfig+0x2fe>
 8009060:	2310      	movs	r3, #16
 8009062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009066:	e0c8      	b.n	80091fa <UART_SetConfig+0x2fe>
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a5e      	ldr	r2, [pc, #376]	@ (80091e8 <UART_SetConfig+0x2ec>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d125      	bne.n	80090be <UART_SetConfig+0x1c2>
 8009072:	4b5b      	ldr	r3, [pc, #364]	@ (80091e0 <UART_SetConfig+0x2e4>)
 8009074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009078:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800907c:	2b30      	cmp	r3, #48	@ 0x30
 800907e:	d016      	beq.n	80090ae <UART_SetConfig+0x1b2>
 8009080:	2b30      	cmp	r3, #48	@ 0x30
 8009082:	d818      	bhi.n	80090b6 <UART_SetConfig+0x1ba>
 8009084:	2b20      	cmp	r3, #32
 8009086:	d00a      	beq.n	800909e <UART_SetConfig+0x1a2>
 8009088:	2b20      	cmp	r3, #32
 800908a:	d814      	bhi.n	80090b6 <UART_SetConfig+0x1ba>
 800908c:	2b00      	cmp	r3, #0
 800908e:	d002      	beq.n	8009096 <UART_SetConfig+0x19a>
 8009090:	2b10      	cmp	r3, #16
 8009092:	d008      	beq.n	80090a6 <UART_SetConfig+0x1aa>
 8009094:	e00f      	b.n	80090b6 <UART_SetConfig+0x1ba>
 8009096:	2300      	movs	r3, #0
 8009098:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800909c:	e0ad      	b.n	80091fa <UART_SetConfig+0x2fe>
 800909e:	2302      	movs	r3, #2
 80090a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090a4:	e0a9      	b.n	80091fa <UART_SetConfig+0x2fe>
 80090a6:	2304      	movs	r3, #4
 80090a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090ac:	e0a5      	b.n	80091fa <UART_SetConfig+0x2fe>
 80090ae:	2308      	movs	r3, #8
 80090b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090b4:	e0a1      	b.n	80091fa <UART_SetConfig+0x2fe>
 80090b6:	2310      	movs	r3, #16
 80090b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090bc:	e09d      	b.n	80091fa <UART_SetConfig+0x2fe>
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a4a      	ldr	r2, [pc, #296]	@ (80091ec <UART_SetConfig+0x2f0>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d125      	bne.n	8009114 <UART_SetConfig+0x218>
 80090c8:	4b45      	ldr	r3, [pc, #276]	@ (80091e0 <UART_SetConfig+0x2e4>)
 80090ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090ce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80090d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80090d4:	d016      	beq.n	8009104 <UART_SetConfig+0x208>
 80090d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80090d8:	d818      	bhi.n	800910c <UART_SetConfig+0x210>
 80090da:	2b80      	cmp	r3, #128	@ 0x80
 80090dc:	d00a      	beq.n	80090f4 <UART_SetConfig+0x1f8>
 80090de:	2b80      	cmp	r3, #128	@ 0x80
 80090e0:	d814      	bhi.n	800910c <UART_SetConfig+0x210>
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d002      	beq.n	80090ec <UART_SetConfig+0x1f0>
 80090e6:	2b40      	cmp	r3, #64	@ 0x40
 80090e8:	d008      	beq.n	80090fc <UART_SetConfig+0x200>
 80090ea:	e00f      	b.n	800910c <UART_SetConfig+0x210>
 80090ec:	2300      	movs	r3, #0
 80090ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090f2:	e082      	b.n	80091fa <UART_SetConfig+0x2fe>
 80090f4:	2302      	movs	r3, #2
 80090f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090fa:	e07e      	b.n	80091fa <UART_SetConfig+0x2fe>
 80090fc:	2304      	movs	r3, #4
 80090fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009102:	e07a      	b.n	80091fa <UART_SetConfig+0x2fe>
 8009104:	2308      	movs	r3, #8
 8009106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800910a:	e076      	b.n	80091fa <UART_SetConfig+0x2fe>
 800910c:	2310      	movs	r3, #16
 800910e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009112:	e072      	b.n	80091fa <UART_SetConfig+0x2fe>
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a35      	ldr	r2, [pc, #212]	@ (80091f0 <UART_SetConfig+0x2f4>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d12a      	bne.n	8009174 <UART_SetConfig+0x278>
 800911e:	4b30      	ldr	r3, [pc, #192]	@ (80091e0 <UART_SetConfig+0x2e4>)
 8009120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009124:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009128:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800912c:	d01a      	beq.n	8009164 <UART_SetConfig+0x268>
 800912e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009132:	d81b      	bhi.n	800916c <UART_SetConfig+0x270>
 8009134:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009138:	d00c      	beq.n	8009154 <UART_SetConfig+0x258>
 800913a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800913e:	d815      	bhi.n	800916c <UART_SetConfig+0x270>
 8009140:	2b00      	cmp	r3, #0
 8009142:	d003      	beq.n	800914c <UART_SetConfig+0x250>
 8009144:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009148:	d008      	beq.n	800915c <UART_SetConfig+0x260>
 800914a:	e00f      	b.n	800916c <UART_SetConfig+0x270>
 800914c:	2300      	movs	r3, #0
 800914e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009152:	e052      	b.n	80091fa <UART_SetConfig+0x2fe>
 8009154:	2302      	movs	r3, #2
 8009156:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800915a:	e04e      	b.n	80091fa <UART_SetConfig+0x2fe>
 800915c:	2304      	movs	r3, #4
 800915e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009162:	e04a      	b.n	80091fa <UART_SetConfig+0x2fe>
 8009164:	2308      	movs	r3, #8
 8009166:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800916a:	e046      	b.n	80091fa <UART_SetConfig+0x2fe>
 800916c:	2310      	movs	r3, #16
 800916e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009172:	e042      	b.n	80091fa <UART_SetConfig+0x2fe>
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a17      	ldr	r2, [pc, #92]	@ (80091d8 <UART_SetConfig+0x2dc>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d13a      	bne.n	80091f4 <UART_SetConfig+0x2f8>
 800917e:	4b18      	ldr	r3, [pc, #96]	@ (80091e0 <UART_SetConfig+0x2e4>)
 8009180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009184:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009188:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800918c:	d01a      	beq.n	80091c4 <UART_SetConfig+0x2c8>
 800918e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009192:	d81b      	bhi.n	80091cc <UART_SetConfig+0x2d0>
 8009194:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009198:	d00c      	beq.n	80091b4 <UART_SetConfig+0x2b8>
 800919a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800919e:	d815      	bhi.n	80091cc <UART_SetConfig+0x2d0>
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d003      	beq.n	80091ac <UART_SetConfig+0x2b0>
 80091a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091a8:	d008      	beq.n	80091bc <UART_SetConfig+0x2c0>
 80091aa:	e00f      	b.n	80091cc <UART_SetConfig+0x2d0>
 80091ac:	2300      	movs	r3, #0
 80091ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091b2:	e022      	b.n	80091fa <UART_SetConfig+0x2fe>
 80091b4:	2302      	movs	r3, #2
 80091b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091ba:	e01e      	b.n	80091fa <UART_SetConfig+0x2fe>
 80091bc:	2304      	movs	r3, #4
 80091be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091c2:	e01a      	b.n	80091fa <UART_SetConfig+0x2fe>
 80091c4:	2308      	movs	r3, #8
 80091c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091ca:	e016      	b.n	80091fa <UART_SetConfig+0x2fe>
 80091cc:	2310      	movs	r3, #16
 80091ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091d2:	e012      	b.n	80091fa <UART_SetConfig+0x2fe>
 80091d4:	cfff69f3 	.word	0xcfff69f3
 80091d8:	40008000 	.word	0x40008000
 80091dc:	40013800 	.word	0x40013800
 80091e0:	40021000 	.word	0x40021000
 80091e4:	40004400 	.word	0x40004400
 80091e8:	40004800 	.word	0x40004800
 80091ec:	40004c00 	.word	0x40004c00
 80091f0:	40005000 	.word	0x40005000
 80091f4:	2310      	movs	r3, #16
 80091f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4aae      	ldr	r2, [pc, #696]	@ (80094b8 <UART_SetConfig+0x5bc>)
 8009200:	4293      	cmp	r3, r2
 8009202:	f040 8097 	bne.w	8009334 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009206:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800920a:	2b08      	cmp	r3, #8
 800920c:	d823      	bhi.n	8009256 <UART_SetConfig+0x35a>
 800920e:	a201      	add	r2, pc, #4	@ (adr r2, 8009214 <UART_SetConfig+0x318>)
 8009210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009214:	08009239 	.word	0x08009239
 8009218:	08009257 	.word	0x08009257
 800921c:	08009241 	.word	0x08009241
 8009220:	08009257 	.word	0x08009257
 8009224:	08009247 	.word	0x08009247
 8009228:	08009257 	.word	0x08009257
 800922c:	08009257 	.word	0x08009257
 8009230:	08009257 	.word	0x08009257
 8009234:	0800924f 	.word	0x0800924f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009238:	f7fe fa3e 	bl	80076b8 <HAL_RCC_GetPCLK1Freq>
 800923c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800923e:	e010      	b.n	8009262 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009240:	4b9e      	ldr	r3, [pc, #632]	@ (80094bc <UART_SetConfig+0x5c0>)
 8009242:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009244:	e00d      	b.n	8009262 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009246:	f7fe f99f 	bl	8007588 <HAL_RCC_GetSysClockFreq>
 800924a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800924c:	e009      	b.n	8009262 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800924e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009252:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009254:	e005      	b.n	8009262 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009256:	2300      	movs	r3, #0
 8009258:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800925a:	2301      	movs	r3, #1
 800925c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009260:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009264:	2b00      	cmp	r3, #0
 8009266:	f000 8130 	beq.w	80094ca <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800926e:	4a94      	ldr	r2, [pc, #592]	@ (80094c0 <UART_SetConfig+0x5c4>)
 8009270:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009274:	461a      	mov	r2, r3
 8009276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009278:	fbb3 f3f2 	udiv	r3, r3, r2
 800927c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	685a      	ldr	r2, [r3, #4]
 8009282:	4613      	mov	r3, r2
 8009284:	005b      	lsls	r3, r3, #1
 8009286:	4413      	add	r3, r2
 8009288:	69ba      	ldr	r2, [r7, #24]
 800928a:	429a      	cmp	r2, r3
 800928c:	d305      	bcc.n	800929a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009294:	69ba      	ldr	r2, [r7, #24]
 8009296:	429a      	cmp	r2, r3
 8009298:	d903      	bls.n	80092a2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800929a:	2301      	movs	r3, #1
 800929c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80092a0:	e113      	b.n	80094ca <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a4:	2200      	movs	r2, #0
 80092a6:	60bb      	str	r3, [r7, #8]
 80092a8:	60fa      	str	r2, [r7, #12]
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092ae:	4a84      	ldr	r2, [pc, #528]	@ (80094c0 <UART_SetConfig+0x5c4>)
 80092b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	2200      	movs	r2, #0
 80092b8:	603b      	str	r3, [r7, #0]
 80092ba:	607a      	str	r2, [r7, #4]
 80092bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80092c4:	f7f7 fc88 	bl	8000bd8 <__aeabi_uldivmod>
 80092c8:	4602      	mov	r2, r0
 80092ca:	460b      	mov	r3, r1
 80092cc:	4610      	mov	r0, r2
 80092ce:	4619      	mov	r1, r3
 80092d0:	f04f 0200 	mov.w	r2, #0
 80092d4:	f04f 0300 	mov.w	r3, #0
 80092d8:	020b      	lsls	r3, r1, #8
 80092da:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80092de:	0202      	lsls	r2, r0, #8
 80092e0:	6979      	ldr	r1, [r7, #20]
 80092e2:	6849      	ldr	r1, [r1, #4]
 80092e4:	0849      	lsrs	r1, r1, #1
 80092e6:	2000      	movs	r0, #0
 80092e8:	460c      	mov	r4, r1
 80092ea:	4605      	mov	r5, r0
 80092ec:	eb12 0804 	adds.w	r8, r2, r4
 80092f0:	eb43 0905 	adc.w	r9, r3, r5
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	2200      	movs	r2, #0
 80092fa:	469a      	mov	sl, r3
 80092fc:	4693      	mov	fp, r2
 80092fe:	4652      	mov	r2, sl
 8009300:	465b      	mov	r3, fp
 8009302:	4640      	mov	r0, r8
 8009304:	4649      	mov	r1, r9
 8009306:	f7f7 fc67 	bl	8000bd8 <__aeabi_uldivmod>
 800930a:	4602      	mov	r2, r0
 800930c:	460b      	mov	r3, r1
 800930e:	4613      	mov	r3, r2
 8009310:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009312:	6a3b      	ldr	r3, [r7, #32]
 8009314:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009318:	d308      	bcc.n	800932c <UART_SetConfig+0x430>
 800931a:	6a3b      	ldr	r3, [r7, #32]
 800931c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009320:	d204      	bcs.n	800932c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	6a3a      	ldr	r2, [r7, #32]
 8009328:	60da      	str	r2, [r3, #12]
 800932a:	e0ce      	b.n	80094ca <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800932c:	2301      	movs	r3, #1
 800932e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009332:	e0ca      	b.n	80094ca <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	69db      	ldr	r3, [r3, #28]
 8009338:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800933c:	d166      	bne.n	800940c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800933e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009342:	2b08      	cmp	r3, #8
 8009344:	d827      	bhi.n	8009396 <UART_SetConfig+0x49a>
 8009346:	a201      	add	r2, pc, #4	@ (adr r2, 800934c <UART_SetConfig+0x450>)
 8009348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800934c:	08009371 	.word	0x08009371
 8009350:	08009379 	.word	0x08009379
 8009354:	08009381 	.word	0x08009381
 8009358:	08009397 	.word	0x08009397
 800935c:	08009387 	.word	0x08009387
 8009360:	08009397 	.word	0x08009397
 8009364:	08009397 	.word	0x08009397
 8009368:	08009397 	.word	0x08009397
 800936c:	0800938f 	.word	0x0800938f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009370:	f7fe f9a2 	bl	80076b8 <HAL_RCC_GetPCLK1Freq>
 8009374:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009376:	e014      	b.n	80093a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009378:	f7fe f9b4 	bl	80076e4 <HAL_RCC_GetPCLK2Freq>
 800937c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800937e:	e010      	b.n	80093a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009380:	4b4e      	ldr	r3, [pc, #312]	@ (80094bc <UART_SetConfig+0x5c0>)
 8009382:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009384:	e00d      	b.n	80093a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009386:	f7fe f8ff 	bl	8007588 <HAL_RCC_GetSysClockFreq>
 800938a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800938c:	e009      	b.n	80093a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800938e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009392:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009394:	e005      	b.n	80093a2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009396:	2300      	movs	r3, #0
 8009398:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80093a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80093a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	f000 8090 	beq.w	80094ca <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093ae:	4a44      	ldr	r2, [pc, #272]	@ (80094c0 <UART_SetConfig+0x5c4>)
 80093b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093b4:	461a      	mov	r2, r3
 80093b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80093bc:	005a      	lsls	r2, r3, #1
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	085b      	lsrs	r3, r3, #1
 80093c4:	441a      	add	r2, r3
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80093ce:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093d0:	6a3b      	ldr	r3, [r7, #32]
 80093d2:	2b0f      	cmp	r3, #15
 80093d4:	d916      	bls.n	8009404 <UART_SetConfig+0x508>
 80093d6:	6a3b      	ldr	r3, [r7, #32]
 80093d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093dc:	d212      	bcs.n	8009404 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80093de:	6a3b      	ldr	r3, [r7, #32]
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	f023 030f 	bic.w	r3, r3, #15
 80093e6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80093e8:	6a3b      	ldr	r3, [r7, #32]
 80093ea:	085b      	lsrs	r3, r3, #1
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	f003 0307 	and.w	r3, r3, #7
 80093f2:	b29a      	uxth	r2, r3
 80093f4:	8bfb      	ldrh	r3, [r7, #30]
 80093f6:	4313      	orrs	r3, r2
 80093f8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	8bfa      	ldrh	r2, [r7, #30]
 8009400:	60da      	str	r2, [r3, #12]
 8009402:	e062      	b.n	80094ca <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800940a:	e05e      	b.n	80094ca <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800940c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009410:	2b08      	cmp	r3, #8
 8009412:	d828      	bhi.n	8009466 <UART_SetConfig+0x56a>
 8009414:	a201      	add	r2, pc, #4	@ (adr r2, 800941c <UART_SetConfig+0x520>)
 8009416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800941a:	bf00      	nop
 800941c:	08009441 	.word	0x08009441
 8009420:	08009449 	.word	0x08009449
 8009424:	08009451 	.word	0x08009451
 8009428:	08009467 	.word	0x08009467
 800942c:	08009457 	.word	0x08009457
 8009430:	08009467 	.word	0x08009467
 8009434:	08009467 	.word	0x08009467
 8009438:	08009467 	.word	0x08009467
 800943c:	0800945f 	.word	0x0800945f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009440:	f7fe f93a 	bl	80076b8 <HAL_RCC_GetPCLK1Freq>
 8009444:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009446:	e014      	b.n	8009472 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009448:	f7fe f94c 	bl	80076e4 <HAL_RCC_GetPCLK2Freq>
 800944c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800944e:	e010      	b.n	8009472 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009450:	4b1a      	ldr	r3, [pc, #104]	@ (80094bc <UART_SetConfig+0x5c0>)
 8009452:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009454:	e00d      	b.n	8009472 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009456:	f7fe f897 	bl	8007588 <HAL_RCC_GetSysClockFreq>
 800945a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800945c:	e009      	b.n	8009472 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800945e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009462:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009464:	e005      	b.n	8009472 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009466:	2300      	movs	r3, #0
 8009468:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800946a:	2301      	movs	r3, #1
 800946c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009470:	bf00      	nop
    }

    if (pclk != 0U)
 8009472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009474:	2b00      	cmp	r3, #0
 8009476:	d028      	beq.n	80094ca <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800947c:	4a10      	ldr	r2, [pc, #64]	@ (80094c0 <UART_SetConfig+0x5c4>)
 800947e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009482:	461a      	mov	r2, r3
 8009484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009486:	fbb3 f2f2 	udiv	r2, r3, r2
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	085b      	lsrs	r3, r3, #1
 8009490:	441a      	add	r2, r3
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	fbb2 f3f3 	udiv	r3, r2, r3
 800949a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800949c:	6a3b      	ldr	r3, [r7, #32]
 800949e:	2b0f      	cmp	r3, #15
 80094a0:	d910      	bls.n	80094c4 <UART_SetConfig+0x5c8>
 80094a2:	6a3b      	ldr	r3, [r7, #32]
 80094a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094a8:	d20c      	bcs.n	80094c4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80094aa:	6a3b      	ldr	r3, [r7, #32]
 80094ac:	b29a      	uxth	r2, r3
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	60da      	str	r2, [r3, #12]
 80094b4:	e009      	b.n	80094ca <UART_SetConfig+0x5ce>
 80094b6:	bf00      	nop
 80094b8:	40008000 	.word	0x40008000
 80094bc:	00f42400 	.word	0x00f42400
 80094c0:	0800cb4c 	.word	0x0800cb4c
      }
      else
      {
        ret = HAL_ERROR;
 80094c4:	2301      	movs	r3, #1
 80094c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	2201      	movs	r2, #1
 80094ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	2201      	movs	r2, #1
 80094d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	2200      	movs	r2, #0
 80094de:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	2200      	movs	r2, #0
 80094e4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80094e6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3730      	adds	r7, #48	@ 0x30
 80094ee:	46bd      	mov	sp, r7
 80094f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080094f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009500:	f003 0308 	and.w	r3, r3, #8
 8009504:	2b00      	cmp	r3, #0
 8009506:	d00a      	beq.n	800951e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	430a      	orrs	r2, r1
 800951c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009522:	f003 0301 	and.w	r3, r3, #1
 8009526:	2b00      	cmp	r3, #0
 8009528:	d00a      	beq.n	8009540 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	430a      	orrs	r2, r1
 800953e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009544:	f003 0302 	and.w	r3, r3, #2
 8009548:	2b00      	cmp	r3, #0
 800954a:	d00a      	beq.n	8009562 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	430a      	orrs	r2, r1
 8009560:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009566:	f003 0304 	and.w	r3, r3, #4
 800956a:	2b00      	cmp	r3, #0
 800956c:	d00a      	beq.n	8009584 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	430a      	orrs	r2, r1
 8009582:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009588:	f003 0310 	and.w	r3, r3, #16
 800958c:	2b00      	cmp	r3, #0
 800958e:	d00a      	beq.n	80095a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	430a      	orrs	r2, r1
 80095a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095aa:	f003 0320 	and.w	r3, r3, #32
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d00a      	beq.n	80095c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	430a      	orrs	r2, r1
 80095c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d01a      	beq.n	800960a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	430a      	orrs	r2, r1
 80095e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80095f2:	d10a      	bne.n	800960a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	430a      	orrs	r2, r1
 8009608:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800960e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009612:	2b00      	cmp	r3, #0
 8009614:	d00a      	beq.n	800962c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	430a      	orrs	r2, r1
 800962a:	605a      	str	r2, [r3, #4]
  }
}
 800962c:	bf00      	nop
 800962e:	370c      	adds	r7, #12
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr

08009638 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b098      	sub	sp, #96	@ 0x60
 800963c:	af02      	add	r7, sp, #8
 800963e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2200      	movs	r2, #0
 8009644:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009648:	f7fa f8ba 	bl	80037c0 <HAL_GetTick>
 800964c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f003 0308 	and.w	r3, r3, #8
 8009658:	2b08      	cmp	r3, #8
 800965a:	d12f      	bne.n	80096bc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800965c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009660:	9300      	str	r3, [sp, #0]
 8009662:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009664:	2200      	movs	r2, #0
 8009666:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 f88e 	bl	800978c <UART_WaitOnFlagUntilTimeout>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d022      	beq.n	80096bc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800967e:	e853 3f00 	ldrex	r3, [r3]
 8009682:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009686:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800968a:	653b      	str	r3, [r7, #80]	@ 0x50
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	461a      	mov	r2, r3
 8009692:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009694:	647b      	str	r3, [r7, #68]	@ 0x44
 8009696:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009698:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800969a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800969c:	e841 2300 	strex	r3, r2, [r1]
 80096a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80096a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d1e6      	bne.n	8009676 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2220      	movs	r2, #32
 80096ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096b8:	2303      	movs	r3, #3
 80096ba:	e063      	b.n	8009784 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f003 0304 	and.w	r3, r3, #4
 80096c6:	2b04      	cmp	r3, #4
 80096c8:	d149      	bne.n	800975e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096ca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80096ce:	9300      	str	r3, [sp, #0]
 80096d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80096d2:	2200      	movs	r2, #0
 80096d4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f000 f857 	bl	800978c <UART_WaitOnFlagUntilTimeout>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d03c      	beq.n	800975e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ec:	e853 3f00 	ldrex	r3, [r3]
 80096f0:	623b      	str	r3, [r7, #32]
   return(result);
 80096f2:	6a3b      	ldr	r3, [r7, #32]
 80096f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80096f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	461a      	mov	r2, r3
 8009700:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009702:	633b      	str	r3, [r7, #48]	@ 0x30
 8009704:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009706:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009708:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800970a:	e841 2300 	strex	r3, r2, [r1]
 800970e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009712:	2b00      	cmp	r3, #0
 8009714:	d1e6      	bne.n	80096e4 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	3308      	adds	r3, #8
 800971c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	e853 3f00 	ldrex	r3, [r3]
 8009724:	60fb      	str	r3, [r7, #12]
   return(result);
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	f023 0301 	bic.w	r3, r3, #1
 800972c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	3308      	adds	r3, #8
 8009734:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009736:	61fa      	str	r2, [r7, #28]
 8009738:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800973a:	69b9      	ldr	r1, [r7, #24]
 800973c:	69fa      	ldr	r2, [r7, #28]
 800973e:	e841 2300 	strex	r3, r2, [r1]
 8009742:	617b      	str	r3, [r7, #20]
   return(result);
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d1e5      	bne.n	8009716 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2220      	movs	r2, #32
 800974e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800975a:	2303      	movs	r3, #3
 800975c:	e012      	b.n	8009784 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2220      	movs	r2, #32
 8009762:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2220      	movs	r2, #32
 800976a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2200      	movs	r2, #0
 8009772:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009782:	2300      	movs	r3, #0
}
 8009784:	4618      	mov	r0, r3
 8009786:	3758      	adds	r7, #88	@ 0x58
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	603b      	str	r3, [r7, #0]
 8009798:	4613      	mov	r3, r2
 800979a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800979c:	e04f      	b.n	800983e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800979e:	69bb      	ldr	r3, [r7, #24]
 80097a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80097a4:	d04b      	beq.n	800983e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097a6:	f7fa f80b 	bl	80037c0 <HAL_GetTick>
 80097aa:	4602      	mov	r2, r0
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	1ad3      	subs	r3, r2, r3
 80097b0:	69ba      	ldr	r2, [r7, #24]
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d302      	bcc.n	80097bc <UART_WaitOnFlagUntilTimeout+0x30>
 80097b6:	69bb      	ldr	r3, [r7, #24]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d101      	bne.n	80097c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80097bc:	2303      	movs	r3, #3
 80097be:	e04e      	b.n	800985e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f003 0304 	and.w	r3, r3, #4
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d037      	beq.n	800983e <UART_WaitOnFlagUntilTimeout+0xb2>
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	2b80      	cmp	r3, #128	@ 0x80
 80097d2:	d034      	beq.n	800983e <UART_WaitOnFlagUntilTimeout+0xb2>
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	2b40      	cmp	r3, #64	@ 0x40
 80097d8:	d031      	beq.n	800983e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	69db      	ldr	r3, [r3, #28]
 80097e0:	f003 0308 	and.w	r3, r3, #8
 80097e4:	2b08      	cmp	r3, #8
 80097e6:	d110      	bne.n	800980a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2208      	movs	r2, #8
 80097ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80097f0:	68f8      	ldr	r0, [r7, #12]
 80097f2:	f000 f838 	bl	8009866 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2208      	movs	r2, #8
 80097fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2200      	movs	r2, #0
 8009802:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009806:	2301      	movs	r3, #1
 8009808:	e029      	b.n	800985e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	69db      	ldr	r3, [r3, #28]
 8009810:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009814:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009818:	d111      	bne.n	800983e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009822:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009824:	68f8      	ldr	r0, [r7, #12]
 8009826:	f000 f81e 	bl	8009866 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2220      	movs	r2, #32
 800982e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2200      	movs	r2, #0
 8009836:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800983a:	2303      	movs	r3, #3
 800983c:	e00f      	b.n	800985e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	69da      	ldr	r2, [r3, #28]
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	4013      	ands	r3, r2
 8009848:	68ba      	ldr	r2, [r7, #8]
 800984a:	429a      	cmp	r2, r3
 800984c:	bf0c      	ite	eq
 800984e:	2301      	moveq	r3, #1
 8009850:	2300      	movne	r3, #0
 8009852:	b2db      	uxtb	r3, r3
 8009854:	461a      	mov	r2, r3
 8009856:	79fb      	ldrb	r3, [r7, #7]
 8009858:	429a      	cmp	r2, r3
 800985a:	d0a0      	beq.n	800979e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800985c:	2300      	movs	r3, #0
}
 800985e:	4618      	mov	r0, r3
 8009860:	3710      	adds	r7, #16
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009866:	b480      	push	{r7}
 8009868:	b095      	sub	sp, #84	@ 0x54
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009876:	e853 3f00 	ldrex	r3, [r3]
 800987a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800987c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800987e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009882:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	461a      	mov	r2, r3
 800988a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800988c:	643b      	str	r3, [r7, #64]	@ 0x40
 800988e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009890:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009892:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009894:	e841 2300 	strex	r3, r2, [r1]
 8009898:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800989a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800989c:	2b00      	cmp	r3, #0
 800989e:	d1e6      	bne.n	800986e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	3308      	adds	r3, #8
 80098a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a8:	6a3b      	ldr	r3, [r7, #32]
 80098aa:	e853 3f00 	ldrex	r3, [r3]
 80098ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80098b0:	69fb      	ldr	r3, [r7, #28]
 80098b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80098b6:	f023 0301 	bic.w	r3, r3, #1
 80098ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	3308      	adds	r3, #8
 80098c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80098c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80098c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098cc:	e841 2300 	strex	r3, r2, [r1]
 80098d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80098d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d1e3      	bne.n	80098a0 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d118      	bne.n	8009912 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	e853 3f00 	ldrex	r3, [r3]
 80098ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	f023 0310 	bic.w	r3, r3, #16
 80098f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	461a      	mov	r2, r3
 80098fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098fe:	61bb      	str	r3, [r7, #24]
 8009900:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009902:	6979      	ldr	r1, [r7, #20]
 8009904:	69ba      	ldr	r2, [r7, #24]
 8009906:	e841 2300 	strex	r3, r2, [r1]
 800990a:	613b      	str	r3, [r7, #16]
   return(result);
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d1e6      	bne.n	80098e0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2220      	movs	r2, #32
 8009916:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2200      	movs	r2, #0
 8009924:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009926:	bf00      	nop
 8009928:	3754      	adds	r7, #84	@ 0x54
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr

08009932 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009932:	b480      	push	{r7}
 8009934:	b085      	sub	sp, #20
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009940:	2b01      	cmp	r3, #1
 8009942:	d101      	bne.n	8009948 <HAL_UARTEx_DisableFifoMode+0x16>
 8009944:	2302      	movs	r3, #2
 8009946:	e027      	b.n	8009998 <HAL_UARTEx_DisableFifoMode+0x66>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2201      	movs	r2, #1
 800994c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2224      	movs	r2, #36	@ 0x24
 8009954:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f022 0201 	bic.w	r2, r2, #1
 800996e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009976:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2200      	movs	r2, #0
 800997c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	68fa      	ldr	r2, [r7, #12]
 8009984:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2220      	movs	r2, #32
 800998a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2200      	movs	r2, #0
 8009992:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009996:	2300      	movs	r3, #0
}
 8009998:	4618      	mov	r0, r3
 800999a:	3714      	adds	r7, #20
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d101      	bne.n	80099bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80099b8:	2302      	movs	r3, #2
 80099ba:	e02d      	b.n	8009a18 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2201      	movs	r2, #1
 80099c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2224      	movs	r2, #36	@ 0x24
 80099c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f022 0201 	bic.w	r2, r2, #1
 80099e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	689b      	ldr	r3, [r3, #8]
 80099ea:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	683a      	ldr	r2, [r7, #0]
 80099f4:	430a      	orrs	r2, r1
 80099f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 f84f 	bl	8009a9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	68fa      	ldr	r2, [r7, #12]
 8009a04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2220      	movs	r2, #32
 8009a0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2200      	movs	r2, #0
 8009a12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a16:	2300      	movs	r3, #0
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3710      	adds	r7, #16
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d101      	bne.n	8009a38 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009a34:	2302      	movs	r3, #2
 8009a36:	e02d      	b.n	8009a94 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2224      	movs	r2, #36	@ 0x24
 8009a44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f022 0201 	bic.w	r2, r2, #1
 8009a5e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	689b      	ldr	r3, [r3, #8]
 8009a66:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	683a      	ldr	r2, [r7, #0]
 8009a70:	430a      	orrs	r2, r1
 8009a72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 f811 	bl	8009a9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	68fa      	ldr	r2, [r7, #12]
 8009a80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2220      	movs	r2, #32
 8009a86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a92:	2300      	movs	r3, #0
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3710      	adds	r7, #16
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b085      	sub	sp, #20
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d108      	bne.n	8009abe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009abc:	e031      	b.n	8009b22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009abe:	2308      	movs	r3, #8
 8009ac0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009ac2:	2308      	movs	r3, #8
 8009ac4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	689b      	ldr	r3, [r3, #8]
 8009acc:	0e5b      	lsrs	r3, r3, #25
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	f003 0307 	and.w	r3, r3, #7
 8009ad4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	689b      	ldr	r3, [r3, #8]
 8009adc:	0f5b      	lsrs	r3, r3, #29
 8009ade:	b2db      	uxtb	r3, r3
 8009ae0:	f003 0307 	and.w	r3, r3, #7
 8009ae4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ae6:	7bbb      	ldrb	r3, [r7, #14]
 8009ae8:	7b3a      	ldrb	r2, [r7, #12]
 8009aea:	4911      	ldr	r1, [pc, #68]	@ (8009b30 <UARTEx_SetNbDataToProcess+0x94>)
 8009aec:	5c8a      	ldrb	r2, [r1, r2]
 8009aee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009af2:	7b3a      	ldrb	r2, [r7, #12]
 8009af4:	490f      	ldr	r1, [pc, #60]	@ (8009b34 <UARTEx_SetNbDataToProcess+0x98>)
 8009af6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009af8:	fb93 f3f2 	sdiv	r3, r3, r2
 8009afc:	b29a      	uxth	r2, r3
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b04:	7bfb      	ldrb	r3, [r7, #15]
 8009b06:	7b7a      	ldrb	r2, [r7, #13]
 8009b08:	4909      	ldr	r1, [pc, #36]	@ (8009b30 <UARTEx_SetNbDataToProcess+0x94>)
 8009b0a:	5c8a      	ldrb	r2, [r1, r2]
 8009b0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009b10:	7b7a      	ldrb	r2, [r7, #13]
 8009b12:	4908      	ldr	r1, [pc, #32]	@ (8009b34 <UARTEx_SetNbDataToProcess+0x98>)
 8009b14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b16:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b1a:	b29a      	uxth	r2, r3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009b22:	bf00      	nop
 8009b24:	3714      	adds	r7, #20
 8009b26:	46bd      	mov	sp, r7
 8009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2c:	4770      	bx	lr
 8009b2e:	bf00      	nop
 8009b30:	0800cb64 	.word	0x0800cb64
 8009b34:	0800cb6c 	.word	0x0800cb6c

08009b38 <arm_sin_f32>:
 8009b38:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8009bb8 <arm_sin_f32+0x80>
 8009b3c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009b40:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b48:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009b4c:	d504      	bpl.n	8009b58 <arm_sin_f32+0x20>
 8009b4e:	ee17 3a90 	vmov	r3, s15
 8009b52:	3b01      	subs	r3, #1
 8009b54:	ee07 3a90 	vmov	s15, r3
 8009b58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b5c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8009bbc <arm_sin_f32+0x84>
 8009b60:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009b64:	ee20 0a07 	vmul.f32	s0, s0, s14
 8009b68:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8009b6c:	ee17 3a90 	vmov	r3, s15
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b76:	d21a      	bcs.n	8009bae <arm_sin_f32+0x76>
 8009b78:	ee07 3a90 	vmov	s15, r3
 8009b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b80:	1c59      	adds	r1, r3, #1
 8009b82:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009b86:	4a0e      	ldr	r2, [pc, #56]	@ (8009bc0 <arm_sin_f32+0x88>)
 8009b88:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009b8c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009b90:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8009b94:	ed93 7a00 	vldr	s14, [r3]
 8009b98:	edd2 6a00 	vldr	s13, [r2]
 8009b9c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009ba0:	ee20 0a26 	vmul.f32	s0, s0, s13
 8009ba4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009ba8:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009bac:	4770      	bx	lr
 8009bae:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009bb2:	2101      	movs	r1, #1
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	e7e6      	b.n	8009b86 <arm_sin_f32+0x4e>
 8009bb8:	3e22f983 	.word	0x3e22f983
 8009bbc:	44000000 	.word	0x44000000
 8009bc0:	0800cb74 	.word	0x0800cb74

08009bc4 <__cvt>:
 8009bc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bc8:	ec57 6b10 	vmov	r6, r7, d0
 8009bcc:	2f00      	cmp	r7, #0
 8009bce:	460c      	mov	r4, r1
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	463b      	mov	r3, r7
 8009bd4:	bfbb      	ittet	lt
 8009bd6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009bda:	461f      	movlt	r7, r3
 8009bdc:	2300      	movge	r3, #0
 8009bde:	232d      	movlt	r3, #45	@ 0x2d
 8009be0:	700b      	strb	r3, [r1, #0]
 8009be2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009be4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009be8:	4691      	mov	r9, r2
 8009bea:	f023 0820 	bic.w	r8, r3, #32
 8009bee:	bfbc      	itt	lt
 8009bf0:	4632      	movlt	r2, r6
 8009bf2:	4616      	movlt	r6, r2
 8009bf4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009bf8:	d005      	beq.n	8009c06 <__cvt+0x42>
 8009bfa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009bfe:	d100      	bne.n	8009c02 <__cvt+0x3e>
 8009c00:	3401      	adds	r4, #1
 8009c02:	2102      	movs	r1, #2
 8009c04:	e000      	b.n	8009c08 <__cvt+0x44>
 8009c06:	2103      	movs	r1, #3
 8009c08:	ab03      	add	r3, sp, #12
 8009c0a:	9301      	str	r3, [sp, #4]
 8009c0c:	ab02      	add	r3, sp, #8
 8009c0e:	9300      	str	r3, [sp, #0]
 8009c10:	ec47 6b10 	vmov	d0, r6, r7
 8009c14:	4653      	mov	r3, sl
 8009c16:	4622      	mov	r2, r4
 8009c18:	f000 fe82 	bl	800a920 <_dtoa_r>
 8009c1c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009c20:	4605      	mov	r5, r0
 8009c22:	d119      	bne.n	8009c58 <__cvt+0x94>
 8009c24:	f019 0f01 	tst.w	r9, #1
 8009c28:	d00e      	beq.n	8009c48 <__cvt+0x84>
 8009c2a:	eb00 0904 	add.w	r9, r0, r4
 8009c2e:	2200      	movs	r2, #0
 8009c30:	2300      	movs	r3, #0
 8009c32:	4630      	mov	r0, r6
 8009c34:	4639      	mov	r1, r7
 8009c36:	f7f6 ff5f 	bl	8000af8 <__aeabi_dcmpeq>
 8009c3a:	b108      	cbz	r0, 8009c40 <__cvt+0x7c>
 8009c3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009c40:	2230      	movs	r2, #48	@ 0x30
 8009c42:	9b03      	ldr	r3, [sp, #12]
 8009c44:	454b      	cmp	r3, r9
 8009c46:	d31e      	bcc.n	8009c86 <__cvt+0xc2>
 8009c48:	9b03      	ldr	r3, [sp, #12]
 8009c4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c4c:	1b5b      	subs	r3, r3, r5
 8009c4e:	4628      	mov	r0, r5
 8009c50:	6013      	str	r3, [r2, #0]
 8009c52:	b004      	add	sp, #16
 8009c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c58:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009c5c:	eb00 0904 	add.w	r9, r0, r4
 8009c60:	d1e5      	bne.n	8009c2e <__cvt+0x6a>
 8009c62:	7803      	ldrb	r3, [r0, #0]
 8009c64:	2b30      	cmp	r3, #48	@ 0x30
 8009c66:	d10a      	bne.n	8009c7e <__cvt+0xba>
 8009c68:	2200      	movs	r2, #0
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	4630      	mov	r0, r6
 8009c6e:	4639      	mov	r1, r7
 8009c70:	f7f6 ff42 	bl	8000af8 <__aeabi_dcmpeq>
 8009c74:	b918      	cbnz	r0, 8009c7e <__cvt+0xba>
 8009c76:	f1c4 0401 	rsb	r4, r4, #1
 8009c7a:	f8ca 4000 	str.w	r4, [sl]
 8009c7e:	f8da 3000 	ldr.w	r3, [sl]
 8009c82:	4499      	add	r9, r3
 8009c84:	e7d3      	b.n	8009c2e <__cvt+0x6a>
 8009c86:	1c59      	adds	r1, r3, #1
 8009c88:	9103      	str	r1, [sp, #12]
 8009c8a:	701a      	strb	r2, [r3, #0]
 8009c8c:	e7d9      	b.n	8009c42 <__cvt+0x7e>

08009c8e <__exponent>:
 8009c8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c90:	2900      	cmp	r1, #0
 8009c92:	bfba      	itte	lt
 8009c94:	4249      	neglt	r1, r1
 8009c96:	232d      	movlt	r3, #45	@ 0x2d
 8009c98:	232b      	movge	r3, #43	@ 0x2b
 8009c9a:	2909      	cmp	r1, #9
 8009c9c:	7002      	strb	r2, [r0, #0]
 8009c9e:	7043      	strb	r3, [r0, #1]
 8009ca0:	dd29      	ble.n	8009cf6 <__exponent+0x68>
 8009ca2:	f10d 0307 	add.w	r3, sp, #7
 8009ca6:	461d      	mov	r5, r3
 8009ca8:	270a      	movs	r7, #10
 8009caa:	461a      	mov	r2, r3
 8009cac:	fbb1 f6f7 	udiv	r6, r1, r7
 8009cb0:	fb07 1416 	mls	r4, r7, r6, r1
 8009cb4:	3430      	adds	r4, #48	@ 0x30
 8009cb6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009cba:	460c      	mov	r4, r1
 8009cbc:	2c63      	cmp	r4, #99	@ 0x63
 8009cbe:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8009cc2:	4631      	mov	r1, r6
 8009cc4:	dcf1      	bgt.n	8009caa <__exponent+0x1c>
 8009cc6:	3130      	adds	r1, #48	@ 0x30
 8009cc8:	1e94      	subs	r4, r2, #2
 8009cca:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009cce:	1c41      	adds	r1, r0, #1
 8009cd0:	4623      	mov	r3, r4
 8009cd2:	42ab      	cmp	r3, r5
 8009cd4:	d30a      	bcc.n	8009cec <__exponent+0x5e>
 8009cd6:	f10d 0309 	add.w	r3, sp, #9
 8009cda:	1a9b      	subs	r3, r3, r2
 8009cdc:	42ac      	cmp	r4, r5
 8009cde:	bf88      	it	hi
 8009ce0:	2300      	movhi	r3, #0
 8009ce2:	3302      	adds	r3, #2
 8009ce4:	4403      	add	r3, r0
 8009ce6:	1a18      	subs	r0, r3, r0
 8009ce8:	b003      	add	sp, #12
 8009cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cec:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009cf0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009cf4:	e7ed      	b.n	8009cd2 <__exponent+0x44>
 8009cf6:	2330      	movs	r3, #48	@ 0x30
 8009cf8:	3130      	adds	r1, #48	@ 0x30
 8009cfa:	7083      	strb	r3, [r0, #2]
 8009cfc:	70c1      	strb	r1, [r0, #3]
 8009cfe:	1d03      	adds	r3, r0, #4
 8009d00:	e7f1      	b.n	8009ce6 <__exponent+0x58>
	...

08009d04 <_printf_float>:
 8009d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d08:	b08d      	sub	sp, #52	@ 0x34
 8009d0a:	460c      	mov	r4, r1
 8009d0c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009d10:	4616      	mov	r6, r2
 8009d12:	461f      	mov	r7, r3
 8009d14:	4605      	mov	r5, r0
 8009d16:	f000 fd2b 	bl	800a770 <_localeconv_r>
 8009d1a:	6803      	ldr	r3, [r0, #0]
 8009d1c:	9304      	str	r3, [sp, #16]
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7f6 fabe 	bl	80002a0 <strlen>
 8009d24:	2300      	movs	r3, #0
 8009d26:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d28:	f8d8 3000 	ldr.w	r3, [r8]
 8009d2c:	9005      	str	r0, [sp, #20]
 8009d2e:	3307      	adds	r3, #7
 8009d30:	f023 0307 	bic.w	r3, r3, #7
 8009d34:	f103 0208 	add.w	r2, r3, #8
 8009d38:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009d3c:	f8d4 b000 	ldr.w	fp, [r4]
 8009d40:	f8c8 2000 	str.w	r2, [r8]
 8009d44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d48:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009d4c:	9307      	str	r3, [sp, #28]
 8009d4e:	f8cd 8018 	str.w	r8, [sp, #24]
 8009d52:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009d56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d5a:	4b9c      	ldr	r3, [pc, #624]	@ (8009fcc <_printf_float+0x2c8>)
 8009d5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009d60:	f7f6 fefc 	bl	8000b5c <__aeabi_dcmpun>
 8009d64:	bb70      	cbnz	r0, 8009dc4 <_printf_float+0xc0>
 8009d66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d6a:	4b98      	ldr	r3, [pc, #608]	@ (8009fcc <_printf_float+0x2c8>)
 8009d6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009d70:	f7f6 fed6 	bl	8000b20 <__aeabi_dcmple>
 8009d74:	bb30      	cbnz	r0, 8009dc4 <_printf_float+0xc0>
 8009d76:	2200      	movs	r2, #0
 8009d78:	2300      	movs	r3, #0
 8009d7a:	4640      	mov	r0, r8
 8009d7c:	4649      	mov	r1, r9
 8009d7e:	f7f6 fec5 	bl	8000b0c <__aeabi_dcmplt>
 8009d82:	b110      	cbz	r0, 8009d8a <_printf_float+0x86>
 8009d84:	232d      	movs	r3, #45	@ 0x2d
 8009d86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d8a:	4a91      	ldr	r2, [pc, #580]	@ (8009fd0 <_printf_float+0x2cc>)
 8009d8c:	4b91      	ldr	r3, [pc, #580]	@ (8009fd4 <_printf_float+0x2d0>)
 8009d8e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009d92:	bf94      	ite	ls
 8009d94:	4690      	movls	r8, r2
 8009d96:	4698      	movhi	r8, r3
 8009d98:	2303      	movs	r3, #3
 8009d9a:	6123      	str	r3, [r4, #16]
 8009d9c:	f02b 0304 	bic.w	r3, fp, #4
 8009da0:	6023      	str	r3, [r4, #0]
 8009da2:	f04f 0900 	mov.w	r9, #0
 8009da6:	9700      	str	r7, [sp, #0]
 8009da8:	4633      	mov	r3, r6
 8009daa:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009dac:	4621      	mov	r1, r4
 8009dae:	4628      	mov	r0, r5
 8009db0:	f000 f9d2 	bl	800a158 <_printf_common>
 8009db4:	3001      	adds	r0, #1
 8009db6:	f040 808d 	bne.w	8009ed4 <_printf_float+0x1d0>
 8009dba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009dbe:	b00d      	add	sp, #52	@ 0x34
 8009dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc4:	4642      	mov	r2, r8
 8009dc6:	464b      	mov	r3, r9
 8009dc8:	4640      	mov	r0, r8
 8009dca:	4649      	mov	r1, r9
 8009dcc:	f7f6 fec6 	bl	8000b5c <__aeabi_dcmpun>
 8009dd0:	b140      	cbz	r0, 8009de4 <_printf_float+0xe0>
 8009dd2:	464b      	mov	r3, r9
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	bfbc      	itt	lt
 8009dd8:	232d      	movlt	r3, #45	@ 0x2d
 8009dda:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009dde:	4a7e      	ldr	r2, [pc, #504]	@ (8009fd8 <_printf_float+0x2d4>)
 8009de0:	4b7e      	ldr	r3, [pc, #504]	@ (8009fdc <_printf_float+0x2d8>)
 8009de2:	e7d4      	b.n	8009d8e <_printf_float+0x8a>
 8009de4:	6863      	ldr	r3, [r4, #4]
 8009de6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009dea:	9206      	str	r2, [sp, #24]
 8009dec:	1c5a      	adds	r2, r3, #1
 8009dee:	d13b      	bne.n	8009e68 <_printf_float+0x164>
 8009df0:	2306      	movs	r3, #6
 8009df2:	6063      	str	r3, [r4, #4]
 8009df4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009df8:	2300      	movs	r3, #0
 8009dfa:	6022      	str	r2, [r4, #0]
 8009dfc:	9303      	str	r3, [sp, #12]
 8009dfe:	ab0a      	add	r3, sp, #40	@ 0x28
 8009e00:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009e04:	ab09      	add	r3, sp, #36	@ 0x24
 8009e06:	9300      	str	r3, [sp, #0]
 8009e08:	6861      	ldr	r1, [r4, #4]
 8009e0a:	ec49 8b10 	vmov	d0, r8, r9
 8009e0e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009e12:	4628      	mov	r0, r5
 8009e14:	f7ff fed6 	bl	8009bc4 <__cvt>
 8009e18:	9b06      	ldr	r3, [sp, #24]
 8009e1a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009e1c:	2b47      	cmp	r3, #71	@ 0x47
 8009e1e:	4680      	mov	r8, r0
 8009e20:	d129      	bne.n	8009e76 <_printf_float+0x172>
 8009e22:	1cc8      	adds	r0, r1, #3
 8009e24:	db02      	blt.n	8009e2c <_printf_float+0x128>
 8009e26:	6863      	ldr	r3, [r4, #4]
 8009e28:	4299      	cmp	r1, r3
 8009e2a:	dd41      	ble.n	8009eb0 <_printf_float+0x1ac>
 8009e2c:	f1aa 0a02 	sub.w	sl, sl, #2
 8009e30:	fa5f fa8a 	uxtb.w	sl, sl
 8009e34:	3901      	subs	r1, #1
 8009e36:	4652      	mov	r2, sl
 8009e38:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009e3c:	9109      	str	r1, [sp, #36]	@ 0x24
 8009e3e:	f7ff ff26 	bl	8009c8e <__exponent>
 8009e42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e44:	1813      	adds	r3, r2, r0
 8009e46:	2a01      	cmp	r2, #1
 8009e48:	4681      	mov	r9, r0
 8009e4a:	6123      	str	r3, [r4, #16]
 8009e4c:	dc02      	bgt.n	8009e54 <_printf_float+0x150>
 8009e4e:	6822      	ldr	r2, [r4, #0]
 8009e50:	07d2      	lsls	r2, r2, #31
 8009e52:	d501      	bpl.n	8009e58 <_printf_float+0x154>
 8009e54:	3301      	adds	r3, #1
 8009e56:	6123      	str	r3, [r4, #16]
 8009e58:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d0a2      	beq.n	8009da6 <_printf_float+0xa2>
 8009e60:	232d      	movs	r3, #45	@ 0x2d
 8009e62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e66:	e79e      	b.n	8009da6 <_printf_float+0xa2>
 8009e68:	9a06      	ldr	r2, [sp, #24]
 8009e6a:	2a47      	cmp	r2, #71	@ 0x47
 8009e6c:	d1c2      	bne.n	8009df4 <_printf_float+0xf0>
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d1c0      	bne.n	8009df4 <_printf_float+0xf0>
 8009e72:	2301      	movs	r3, #1
 8009e74:	e7bd      	b.n	8009df2 <_printf_float+0xee>
 8009e76:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009e7a:	d9db      	bls.n	8009e34 <_printf_float+0x130>
 8009e7c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009e80:	d118      	bne.n	8009eb4 <_printf_float+0x1b0>
 8009e82:	2900      	cmp	r1, #0
 8009e84:	6863      	ldr	r3, [r4, #4]
 8009e86:	dd0b      	ble.n	8009ea0 <_printf_float+0x19c>
 8009e88:	6121      	str	r1, [r4, #16]
 8009e8a:	b913      	cbnz	r3, 8009e92 <_printf_float+0x18e>
 8009e8c:	6822      	ldr	r2, [r4, #0]
 8009e8e:	07d0      	lsls	r0, r2, #31
 8009e90:	d502      	bpl.n	8009e98 <_printf_float+0x194>
 8009e92:	3301      	adds	r3, #1
 8009e94:	440b      	add	r3, r1
 8009e96:	6123      	str	r3, [r4, #16]
 8009e98:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009e9a:	f04f 0900 	mov.w	r9, #0
 8009e9e:	e7db      	b.n	8009e58 <_printf_float+0x154>
 8009ea0:	b913      	cbnz	r3, 8009ea8 <_printf_float+0x1a4>
 8009ea2:	6822      	ldr	r2, [r4, #0]
 8009ea4:	07d2      	lsls	r2, r2, #31
 8009ea6:	d501      	bpl.n	8009eac <_printf_float+0x1a8>
 8009ea8:	3302      	adds	r3, #2
 8009eaa:	e7f4      	b.n	8009e96 <_printf_float+0x192>
 8009eac:	2301      	movs	r3, #1
 8009eae:	e7f2      	b.n	8009e96 <_printf_float+0x192>
 8009eb0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009eb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009eb6:	4299      	cmp	r1, r3
 8009eb8:	db05      	blt.n	8009ec6 <_printf_float+0x1c2>
 8009eba:	6823      	ldr	r3, [r4, #0]
 8009ebc:	6121      	str	r1, [r4, #16]
 8009ebe:	07d8      	lsls	r0, r3, #31
 8009ec0:	d5ea      	bpl.n	8009e98 <_printf_float+0x194>
 8009ec2:	1c4b      	adds	r3, r1, #1
 8009ec4:	e7e7      	b.n	8009e96 <_printf_float+0x192>
 8009ec6:	2900      	cmp	r1, #0
 8009ec8:	bfd4      	ite	le
 8009eca:	f1c1 0202 	rsble	r2, r1, #2
 8009ece:	2201      	movgt	r2, #1
 8009ed0:	4413      	add	r3, r2
 8009ed2:	e7e0      	b.n	8009e96 <_printf_float+0x192>
 8009ed4:	6823      	ldr	r3, [r4, #0]
 8009ed6:	055a      	lsls	r2, r3, #21
 8009ed8:	d407      	bmi.n	8009eea <_printf_float+0x1e6>
 8009eda:	6923      	ldr	r3, [r4, #16]
 8009edc:	4642      	mov	r2, r8
 8009ede:	4631      	mov	r1, r6
 8009ee0:	4628      	mov	r0, r5
 8009ee2:	47b8      	blx	r7
 8009ee4:	3001      	adds	r0, #1
 8009ee6:	d12b      	bne.n	8009f40 <_printf_float+0x23c>
 8009ee8:	e767      	b.n	8009dba <_printf_float+0xb6>
 8009eea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009eee:	f240 80dd 	bls.w	800a0ac <_printf_float+0x3a8>
 8009ef2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	2300      	movs	r3, #0
 8009efa:	f7f6 fdfd 	bl	8000af8 <__aeabi_dcmpeq>
 8009efe:	2800      	cmp	r0, #0
 8009f00:	d033      	beq.n	8009f6a <_printf_float+0x266>
 8009f02:	4a37      	ldr	r2, [pc, #220]	@ (8009fe0 <_printf_float+0x2dc>)
 8009f04:	2301      	movs	r3, #1
 8009f06:	4631      	mov	r1, r6
 8009f08:	4628      	mov	r0, r5
 8009f0a:	47b8      	blx	r7
 8009f0c:	3001      	adds	r0, #1
 8009f0e:	f43f af54 	beq.w	8009dba <_printf_float+0xb6>
 8009f12:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009f16:	4543      	cmp	r3, r8
 8009f18:	db02      	blt.n	8009f20 <_printf_float+0x21c>
 8009f1a:	6823      	ldr	r3, [r4, #0]
 8009f1c:	07d8      	lsls	r0, r3, #31
 8009f1e:	d50f      	bpl.n	8009f40 <_printf_float+0x23c>
 8009f20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f24:	4631      	mov	r1, r6
 8009f26:	4628      	mov	r0, r5
 8009f28:	47b8      	blx	r7
 8009f2a:	3001      	adds	r0, #1
 8009f2c:	f43f af45 	beq.w	8009dba <_printf_float+0xb6>
 8009f30:	f04f 0900 	mov.w	r9, #0
 8009f34:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8009f38:	f104 0a1a 	add.w	sl, r4, #26
 8009f3c:	45c8      	cmp	r8, r9
 8009f3e:	dc09      	bgt.n	8009f54 <_printf_float+0x250>
 8009f40:	6823      	ldr	r3, [r4, #0]
 8009f42:	079b      	lsls	r3, r3, #30
 8009f44:	f100 8103 	bmi.w	800a14e <_printf_float+0x44a>
 8009f48:	68e0      	ldr	r0, [r4, #12]
 8009f4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f4c:	4298      	cmp	r0, r3
 8009f4e:	bfb8      	it	lt
 8009f50:	4618      	movlt	r0, r3
 8009f52:	e734      	b.n	8009dbe <_printf_float+0xba>
 8009f54:	2301      	movs	r3, #1
 8009f56:	4652      	mov	r2, sl
 8009f58:	4631      	mov	r1, r6
 8009f5a:	4628      	mov	r0, r5
 8009f5c:	47b8      	blx	r7
 8009f5e:	3001      	adds	r0, #1
 8009f60:	f43f af2b 	beq.w	8009dba <_printf_float+0xb6>
 8009f64:	f109 0901 	add.w	r9, r9, #1
 8009f68:	e7e8      	b.n	8009f3c <_printf_float+0x238>
 8009f6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	dc39      	bgt.n	8009fe4 <_printf_float+0x2e0>
 8009f70:	4a1b      	ldr	r2, [pc, #108]	@ (8009fe0 <_printf_float+0x2dc>)
 8009f72:	2301      	movs	r3, #1
 8009f74:	4631      	mov	r1, r6
 8009f76:	4628      	mov	r0, r5
 8009f78:	47b8      	blx	r7
 8009f7a:	3001      	adds	r0, #1
 8009f7c:	f43f af1d 	beq.w	8009dba <_printf_float+0xb6>
 8009f80:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009f84:	ea59 0303 	orrs.w	r3, r9, r3
 8009f88:	d102      	bne.n	8009f90 <_printf_float+0x28c>
 8009f8a:	6823      	ldr	r3, [r4, #0]
 8009f8c:	07d9      	lsls	r1, r3, #31
 8009f8e:	d5d7      	bpl.n	8009f40 <_printf_float+0x23c>
 8009f90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f94:	4631      	mov	r1, r6
 8009f96:	4628      	mov	r0, r5
 8009f98:	47b8      	blx	r7
 8009f9a:	3001      	adds	r0, #1
 8009f9c:	f43f af0d 	beq.w	8009dba <_printf_float+0xb6>
 8009fa0:	f04f 0a00 	mov.w	sl, #0
 8009fa4:	f104 0b1a 	add.w	fp, r4, #26
 8009fa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009faa:	425b      	negs	r3, r3
 8009fac:	4553      	cmp	r3, sl
 8009fae:	dc01      	bgt.n	8009fb4 <_printf_float+0x2b0>
 8009fb0:	464b      	mov	r3, r9
 8009fb2:	e793      	b.n	8009edc <_printf_float+0x1d8>
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	465a      	mov	r2, fp
 8009fb8:	4631      	mov	r1, r6
 8009fba:	4628      	mov	r0, r5
 8009fbc:	47b8      	blx	r7
 8009fbe:	3001      	adds	r0, #1
 8009fc0:	f43f aefb 	beq.w	8009dba <_printf_float+0xb6>
 8009fc4:	f10a 0a01 	add.w	sl, sl, #1
 8009fc8:	e7ee      	b.n	8009fa8 <_printf_float+0x2a4>
 8009fca:	bf00      	nop
 8009fcc:	7fefffff 	.word	0x7fefffff
 8009fd0:	0800d378 	.word	0x0800d378
 8009fd4:	0800d37c 	.word	0x0800d37c
 8009fd8:	0800d380 	.word	0x0800d380
 8009fdc:	0800d384 	.word	0x0800d384
 8009fe0:	0800d388 	.word	0x0800d388
 8009fe4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009fe6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009fea:	4553      	cmp	r3, sl
 8009fec:	bfa8      	it	ge
 8009fee:	4653      	movge	r3, sl
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	4699      	mov	r9, r3
 8009ff4:	dc36      	bgt.n	800a064 <_printf_float+0x360>
 8009ff6:	f04f 0b00 	mov.w	fp, #0
 8009ffa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ffe:	f104 021a 	add.w	r2, r4, #26
 800a002:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a004:	9306      	str	r3, [sp, #24]
 800a006:	eba3 0309 	sub.w	r3, r3, r9
 800a00a:	455b      	cmp	r3, fp
 800a00c:	dc31      	bgt.n	800a072 <_printf_float+0x36e>
 800a00e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a010:	459a      	cmp	sl, r3
 800a012:	dc3a      	bgt.n	800a08a <_printf_float+0x386>
 800a014:	6823      	ldr	r3, [r4, #0]
 800a016:	07da      	lsls	r2, r3, #31
 800a018:	d437      	bmi.n	800a08a <_printf_float+0x386>
 800a01a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a01c:	ebaa 0903 	sub.w	r9, sl, r3
 800a020:	9b06      	ldr	r3, [sp, #24]
 800a022:	ebaa 0303 	sub.w	r3, sl, r3
 800a026:	4599      	cmp	r9, r3
 800a028:	bfa8      	it	ge
 800a02a:	4699      	movge	r9, r3
 800a02c:	f1b9 0f00 	cmp.w	r9, #0
 800a030:	dc33      	bgt.n	800a09a <_printf_float+0x396>
 800a032:	f04f 0800 	mov.w	r8, #0
 800a036:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a03a:	f104 0b1a 	add.w	fp, r4, #26
 800a03e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a040:	ebaa 0303 	sub.w	r3, sl, r3
 800a044:	eba3 0309 	sub.w	r3, r3, r9
 800a048:	4543      	cmp	r3, r8
 800a04a:	f77f af79 	ble.w	8009f40 <_printf_float+0x23c>
 800a04e:	2301      	movs	r3, #1
 800a050:	465a      	mov	r2, fp
 800a052:	4631      	mov	r1, r6
 800a054:	4628      	mov	r0, r5
 800a056:	47b8      	blx	r7
 800a058:	3001      	adds	r0, #1
 800a05a:	f43f aeae 	beq.w	8009dba <_printf_float+0xb6>
 800a05e:	f108 0801 	add.w	r8, r8, #1
 800a062:	e7ec      	b.n	800a03e <_printf_float+0x33a>
 800a064:	4642      	mov	r2, r8
 800a066:	4631      	mov	r1, r6
 800a068:	4628      	mov	r0, r5
 800a06a:	47b8      	blx	r7
 800a06c:	3001      	adds	r0, #1
 800a06e:	d1c2      	bne.n	8009ff6 <_printf_float+0x2f2>
 800a070:	e6a3      	b.n	8009dba <_printf_float+0xb6>
 800a072:	2301      	movs	r3, #1
 800a074:	4631      	mov	r1, r6
 800a076:	4628      	mov	r0, r5
 800a078:	9206      	str	r2, [sp, #24]
 800a07a:	47b8      	blx	r7
 800a07c:	3001      	adds	r0, #1
 800a07e:	f43f ae9c 	beq.w	8009dba <_printf_float+0xb6>
 800a082:	9a06      	ldr	r2, [sp, #24]
 800a084:	f10b 0b01 	add.w	fp, fp, #1
 800a088:	e7bb      	b.n	800a002 <_printf_float+0x2fe>
 800a08a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a08e:	4631      	mov	r1, r6
 800a090:	4628      	mov	r0, r5
 800a092:	47b8      	blx	r7
 800a094:	3001      	adds	r0, #1
 800a096:	d1c0      	bne.n	800a01a <_printf_float+0x316>
 800a098:	e68f      	b.n	8009dba <_printf_float+0xb6>
 800a09a:	9a06      	ldr	r2, [sp, #24]
 800a09c:	464b      	mov	r3, r9
 800a09e:	4442      	add	r2, r8
 800a0a0:	4631      	mov	r1, r6
 800a0a2:	4628      	mov	r0, r5
 800a0a4:	47b8      	blx	r7
 800a0a6:	3001      	adds	r0, #1
 800a0a8:	d1c3      	bne.n	800a032 <_printf_float+0x32e>
 800a0aa:	e686      	b.n	8009dba <_printf_float+0xb6>
 800a0ac:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a0b0:	f1ba 0f01 	cmp.w	sl, #1
 800a0b4:	dc01      	bgt.n	800a0ba <_printf_float+0x3b6>
 800a0b6:	07db      	lsls	r3, r3, #31
 800a0b8:	d536      	bpl.n	800a128 <_printf_float+0x424>
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	4642      	mov	r2, r8
 800a0be:	4631      	mov	r1, r6
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	47b8      	blx	r7
 800a0c4:	3001      	adds	r0, #1
 800a0c6:	f43f ae78 	beq.w	8009dba <_printf_float+0xb6>
 800a0ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0ce:	4631      	mov	r1, r6
 800a0d0:	4628      	mov	r0, r5
 800a0d2:	47b8      	blx	r7
 800a0d4:	3001      	adds	r0, #1
 800a0d6:	f43f ae70 	beq.w	8009dba <_printf_float+0xb6>
 800a0da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a0de:	2200      	movs	r2, #0
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a0e6:	f7f6 fd07 	bl	8000af8 <__aeabi_dcmpeq>
 800a0ea:	b9c0      	cbnz	r0, 800a11e <_printf_float+0x41a>
 800a0ec:	4653      	mov	r3, sl
 800a0ee:	f108 0201 	add.w	r2, r8, #1
 800a0f2:	4631      	mov	r1, r6
 800a0f4:	4628      	mov	r0, r5
 800a0f6:	47b8      	blx	r7
 800a0f8:	3001      	adds	r0, #1
 800a0fa:	d10c      	bne.n	800a116 <_printf_float+0x412>
 800a0fc:	e65d      	b.n	8009dba <_printf_float+0xb6>
 800a0fe:	2301      	movs	r3, #1
 800a100:	465a      	mov	r2, fp
 800a102:	4631      	mov	r1, r6
 800a104:	4628      	mov	r0, r5
 800a106:	47b8      	blx	r7
 800a108:	3001      	adds	r0, #1
 800a10a:	f43f ae56 	beq.w	8009dba <_printf_float+0xb6>
 800a10e:	f108 0801 	add.w	r8, r8, #1
 800a112:	45d0      	cmp	r8, sl
 800a114:	dbf3      	blt.n	800a0fe <_printf_float+0x3fa>
 800a116:	464b      	mov	r3, r9
 800a118:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a11c:	e6df      	b.n	8009ede <_printf_float+0x1da>
 800a11e:	f04f 0800 	mov.w	r8, #0
 800a122:	f104 0b1a 	add.w	fp, r4, #26
 800a126:	e7f4      	b.n	800a112 <_printf_float+0x40e>
 800a128:	2301      	movs	r3, #1
 800a12a:	4642      	mov	r2, r8
 800a12c:	e7e1      	b.n	800a0f2 <_printf_float+0x3ee>
 800a12e:	2301      	movs	r3, #1
 800a130:	464a      	mov	r2, r9
 800a132:	4631      	mov	r1, r6
 800a134:	4628      	mov	r0, r5
 800a136:	47b8      	blx	r7
 800a138:	3001      	adds	r0, #1
 800a13a:	f43f ae3e 	beq.w	8009dba <_printf_float+0xb6>
 800a13e:	f108 0801 	add.w	r8, r8, #1
 800a142:	68e3      	ldr	r3, [r4, #12]
 800a144:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a146:	1a5b      	subs	r3, r3, r1
 800a148:	4543      	cmp	r3, r8
 800a14a:	dcf0      	bgt.n	800a12e <_printf_float+0x42a>
 800a14c:	e6fc      	b.n	8009f48 <_printf_float+0x244>
 800a14e:	f04f 0800 	mov.w	r8, #0
 800a152:	f104 0919 	add.w	r9, r4, #25
 800a156:	e7f4      	b.n	800a142 <_printf_float+0x43e>

0800a158 <_printf_common>:
 800a158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a15c:	4616      	mov	r6, r2
 800a15e:	4698      	mov	r8, r3
 800a160:	688a      	ldr	r2, [r1, #8]
 800a162:	690b      	ldr	r3, [r1, #16]
 800a164:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a168:	4293      	cmp	r3, r2
 800a16a:	bfb8      	it	lt
 800a16c:	4613      	movlt	r3, r2
 800a16e:	6033      	str	r3, [r6, #0]
 800a170:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a174:	4607      	mov	r7, r0
 800a176:	460c      	mov	r4, r1
 800a178:	b10a      	cbz	r2, 800a17e <_printf_common+0x26>
 800a17a:	3301      	adds	r3, #1
 800a17c:	6033      	str	r3, [r6, #0]
 800a17e:	6823      	ldr	r3, [r4, #0]
 800a180:	0699      	lsls	r1, r3, #26
 800a182:	bf42      	ittt	mi
 800a184:	6833      	ldrmi	r3, [r6, #0]
 800a186:	3302      	addmi	r3, #2
 800a188:	6033      	strmi	r3, [r6, #0]
 800a18a:	6825      	ldr	r5, [r4, #0]
 800a18c:	f015 0506 	ands.w	r5, r5, #6
 800a190:	d106      	bne.n	800a1a0 <_printf_common+0x48>
 800a192:	f104 0a19 	add.w	sl, r4, #25
 800a196:	68e3      	ldr	r3, [r4, #12]
 800a198:	6832      	ldr	r2, [r6, #0]
 800a19a:	1a9b      	subs	r3, r3, r2
 800a19c:	42ab      	cmp	r3, r5
 800a19e:	dc26      	bgt.n	800a1ee <_printf_common+0x96>
 800a1a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a1a4:	6822      	ldr	r2, [r4, #0]
 800a1a6:	3b00      	subs	r3, #0
 800a1a8:	bf18      	it	ne
 800a1aa:	2301      	movne	r3, #1
 800a1ac:	0692      	lsls	r2, r2, #26
 800a1ae:	d42b      	bmi.n	800a208 <_printf_common+0xb0>
 800a1b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a1b4:	4641      	mov	r1, r8
 800a1b6:	4638      	mov	r0, r7
 800a1b8:	47c8      	blx	r9
 800a1ba:	3001      	adds	r0, #1
 800a1bc:	d01e      	beq.n	800a1fc <_printf_common+0xa4>
 800a1be:	6823      	ldr	r3, [r4, #0]
 800a1c0:	6922      	ldr	r2, [r4, #16]
 800a1c2:	f003 0306 	and.w	r3, r3, #6
 800a1c6:	2b04      	cmp	r3, #4
 800a1c8:	bf02      	ittt	eq
 800a1ca:	68e5      	ldreq	r5, [r4, #12]
 800a1cc:	6833      	ldreq	r3, [r6, #0]
 800a1ce:	1aed      	subeq	r5, r5, r3
 800a1d0:	68a3      	ldr	r3, [r4, #8]
 800a1d2:	bf0c      	ite	eq
 800a1d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1d8:	2500      	movne	r5, #0
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	bfc4      	itt	gt
 800a1de:	1a9b      	subgt	r3, r3, r2
 800a1e0:	18ed      	addgt	r5, r5, r3
 800a1e2:	2600      	movs	r6, #0
 800a1e4:	341a      	adds	r4, #26
 800a1e6:	42b5      	cmp	r5, r6
 800a1e8:	d11a      	bne.n	800a220 <_printf_common+0xc8>
 800a1ea:	2000      	movs	r0, #0
 800a1ec:	e008      	b.n	800a200 <_printf_common+0xa8>
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	4652      	mov	r2, sl
 800a1f2:	4641      	mov	r1, r8
 800a1f4:	4638      	mov	r0, r7
 800a1f6:	47c8      	blx	r9
 800a1f8:	3001      	adds	r0, #1
 800a1fa:	d103      	bne.n	800a204 <_printf_common+0xac>
 800a1fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a204:	3501      	adds	r5, #1
 800a206:	e7c6      	b.n	800a196 <_printf_common+0x3e>
 800a208:	18e1      	adds	r1, r4, r3
 800a20a:	1c5a      	adds	r2, r3, #1
 800a20c:	2030      	movs	r0, #48	@ 0x30
 800a20e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a212:	4422      	add	r2, r4
 800a214:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a218:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a21c:	3302      	adds	r3, #2
 800a21e:	e7c7      	b.n	800a1b0 <_printf_common+0x58>
 800a220:	2301      	movs	r3, #1
 800a222:	4622      	mov	r2, r4
 800a224:	4641      	mov	r1, r8
 800a226:	4638      	mov	r0, r7
 800a228:	47c8      	blx	r9
 800a22a:	3001      	adds	r0, #1
 800a22c:	d0e6      	beq.n	800a1fc <_printf_common+0xa4>
 800a22e:	3601      	adds	r6, #1
 800a230:	e7d9      	b.n	800a1e6 <_printf_common+0x8e>
	...

0800a234 <_printf_i>:
 800a234:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a238:	7e0f      	ldrb	r7, [r1, #24]
 800a23a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a23c:	2f78      	cmp	r7, #120	@ 0x78
 800a23e:	4691      	mov	r9, r2
 800a240:	4680      	mov	r8, r0
 800a242:	460c      	mov	r4, r1
 800a244:	469a      	mov	sl, r3
 800a246:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a24a:	d807      	bhi.n	800a25c <_printf_i+0x28>
 800a24c:	2f62      	cmp	r7, #98	@ 0x62
 800a24e:	d80a      	bhi.n	800a266 <_printf_i+0x32>
 800a250:	2f00      	cmp	r7, #0
 800a252:	f000 80d2 	beq.w	800a3fa <_printf_i+0x1c6>
 800a256:	2f58      	cmp	r7, #88	@ 0x58
 800a258:	f000 80b9 	beq.w	800a3ce <_printf_i+0x19a>
 800a25c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a260:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a264:	e03a      	b.n	800a2dc <_printf_i+0xa8>
 800a266:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a26a:	2b15      	cmp	r3, #21
 800a26c:	d8f6      	bhi.n	800a25c <_printf_i+0x28>
 800a26e:	a101      	add	r1, pc, #4	@ (adr r1, 800a274 <_printf_i+0x40>)
 800a270:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a274:	0800a2cd 	.word	0x0800a2cd
 800a278:	0800a2e1 	.word	0x0800a2e1
 800a27c:	0800a25d 	.word	0x0800a25d
 800a280:	0800a25d 	.word	0x0800a25d
 800a284:	0800a25d 	.word	0x0800a25d
 800a288:	0800a25d 	.word	0x0800a25d
 800a28c:	0800a2e1 	.word	0x0800a2e1
 800a290:	0800a25d 	.word	0x0800a25d
 800a294:	0800a25d 	.word	0x0800a25d
 800a298:	0800a25d 	.word	0x0800a25d
 800a29c:	0800a25d 	.word	0x0800a25d
 800a2a0:	0800a3e1 	.word	0x0800a3e1
 800a2a4:	0800a30b 	.word	0x0800a30b
 800a2a8:	0800a39b 	.word	0x0800a39b
 800a2ac:	0800a25d 	.word	0x0800a25d
 800a2b0:	0800a25d 	.word	0x0800a25d
 800a2b4:	0800a403 	.word	0x0800a403
 800a2b8:	0800a25d 	.word	0x0800a25d
 800a2bc:	0800a30b 	.word	0x0800a30b
 800a2c0:	0800a25d 	.word	0x0800a25d
 800a2c4:	0800a25d 	.word	0x0800a25d
 800a2c8:	0800a3a3 	.word	0x0800a3a3
 800a2cc:	6833      	ldr	r3, [r6, #0]
 800a2ce:	1d1a      	adds	r2, r3, #4
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	6032      	str	r2, [r6, #0]
 800a2d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a2d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a2dc:	2301      	movs	r3, #1
 800a2de:	e09d      	b.n	800a41c <_printf_i+0x1e8>
 800a2e0:	6833      	ldr	r3, [r6, #0]
 800a2e2:	6820      	ldr	r0, [r4, #0]
 800a2e4:	1d19      	adds	r1, r3, #4
 800a2e6:	6031      	str	r1, [r6, #0]
 800a2e8:	0606      	lsls	r6, r0, #24
 800a2ea:	d501      	bpl.n	800a2f0 <_printf_i+0xbc>
 800a2ec:	681d      	ldr	r5, [r3, #0]
 800a2ee:	e003      	b.n	800a2f8 <_printf_i+0xc4>
 800a2f0:	0645      	lsls	r5, r0, #25
 800a2f2:	d5fb      	bpl.n	800a2ec <_printf_i+0xb8>
 800a2f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a2f8:	2d00      	cmp	r5, #0
 800a2fa:	da03      	bge.n	800a304 <_printf_i+0xd0>
 800a2fc:	232d      	movs	r3, #45	@ 0x2d
 800a2fe:	426d      	negs	r5, r5
 800a300:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a304:	4859      	ldr	r0, [pc, #356]	@ (800a46c <_printf_i+0x238>)
 800a306:	230a      	movs	r3, #10
 800a308:	e011      	b.n	800a32e <_printf_i+0xfa>
 800a30a:	6821      	ldr	r1, [r4, #0]
 800a30c:	6833      	ldr	r3, [r6, #0]
 800a30e:	0608      	lsls	r0, r1, #24
 800a310:	f853 5b04 	ldr.w	r5, [r3], #4
 800a314:	d402      	bmi.n	800a31c <_printf_i+0xe8>
 800a316:	0649      	lsls	r1, r1, #25
 800a318:	bf48      	it	mi
 800a31a:	b2ad      	uxthmi	r5, r5
 800a31c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a31e:	4853      	ldr	r0, [pc, #332]	@ (800a46c <_printf_i+0x238>)
 800a320:	6033      	str	r3, [r6, #0]
 800a322:	bf14      	ite	ne
 800a324:	230a      	movne	r3, #10
 800a326:	2308      	moveq	r3, #8
 800a328:	2100      	movs	r1, #0
 800a32a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a32e:	6866      	ldr	r6, [r4, #4]
 800a330:	60a6      	str	r6, [r4, #8]
 800a332:	2e00      	cmp	r6, #0
 800a334:	bfa2      	ittt	ge
 800a336:	6821      	ldrge	r1, [r4, #0]
 800a338:	f021 0104 	bicge.w	r1, r1, #4
 800a33c:	6021      	strge	r1, [r4, #0]
 800a33e:	b90d      	cbnz	r5, 800a344 <_printf_i+0x110>
 800a340:	2e00      	cmp	r6, #0
 800a342:	d04b      	beq.n	800a3dc <_printf_i+0x1a8>
 800a344:	4616      	mov	r6, r2
 800a346:	fbb5 f1f3 	udiv	r1, r5, r3
 800a34a:	fb03 5711 	mls	r7, r3, r1, r5
 800a34e:	5dc7      	ldrb	r7, [r0, r7]
 800a350:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a354:	462f      	mov	r7, r5
 800a356:	42bb      	cmp	r3, r7
 800a358:	460d      	mov	r5, r1
 800a35a:	d9f4      	bls.n	800a346 <_printf_i+0x112>
 800a35c:	2b08      	cmp	r3, #8
 800a35e:	d10b      	bne.n	800a378 <_printf_i+0x144>
 800a360:	6823      	ldr	r3, [r4, #0]
 800a362:	07df      	lsls	r7, r3, #31
 800a364:	d508      	bpl.n	800a378 <_printf_i+0x144>
 800a366:	6923      	ldr	r3, [r4, #16]
 800a368:	6861      	ldr	r1, [r4, #4]
 800a36a:	4299      	cmp	r1, r3
 800a36c:	bfde      	ittt	le
 800a36e:	2330      	movle	r3, #48	@ 0x30
 800a370:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a374:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a378:	1b92      	subs	r2, r2, r6
 800a37a:	6122      	str	r2, [r4, #16]
 800a37c:	f8cd a000 	str.w	sl, [sp]
 800a380:	464b      	mov	r3, r9
 800a382:	aa03      	add	r2, sp, #12
 800a384:	4621      	mov	r1, r4
 800a386:	4640      	mov	r0, r8
 800a388:	f7ff fee6 	bl	800a158 <_printf_common>
 800a38c:	3001      	adds	r0, #1
 800a38e:	d14a      	bne.n	800a426 <_printf_i+0x1f2>
 800a390:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a394:	b004      	add	sp, #16
 800a396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a39a:	6823      	ldr	r3, [r4, #0]
 800a39c:	f043 0320 	orr.w	r3, r3, #32
 800a3a0:	6023      	str	r3, [r4, #0]
 800a3a2:	4833      	ldr	r0, [pc, #204]	@ (800a470 <_printf_i+0x23c>)
 800a3a4:	2778      	movs	r7, #120	@ 0x78
 800a3a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a3aa:	6823      	ldr	r3, [r4, #0]
 800a3ac:	6831      	ldr	r1, [r6, #0]
 800a3ae:	061f      	lsls	r7, r3, #24
 800a3b0:	f851 5b04 	ldr.w	r5, [r1], #4
 800a3b4:	d402      	bmi.n	800a3bc <_printf_i+0x188>
 800a3b6:	065f      	lsls	r7, r3, #25
 800a3b8:	bf48      	it	mi
 800a3ba:	b2ad      	uxthmi	r5, r5
 800a3bc:	6031      	str	r1, [r6, #0]
 800a3be:	07d9      	lsls	r1, r3, #31
 800a3c0:	bf44      	itt	mi
 800a3c2:	f043 0320 	orrmi.w	r3, r3, #32
 800a3c6:	6023      	strmi	r3, [r4, #0]
 800a3c8:	b11d      	cbz	r5, 800a3d2 <_printf_i+0x19e>
 800a3ca:	2310      	movs	r3, #16
 800a3cc:	e7ac      	b.n	800a328 <_printf_i+0xf4>
 800a3ce:	4827      	ldr	r0, [pc, #156]	@ (800a46c <_printf_i+0x238>)
 800a3d0:	e7e9      	b.n	800a3a6 <_printf_i+0x172>
 800a3d2:	6823      	ldr	r3, [r4, #0]
 800a3d4:	f023 0320 	bic.w	r3, r3, #32
 800a3d8:	6023      	str	r3, [r4, #0]
 800a3da:	e7f6      	b.n	800a3ca <_printf_i+0x196>
 800a3dc:	4616      	mov	r6, r2
 800a3de:	e7bd      	b.n	800a35c <_printf_i+0x128>
 800a3e0:	6833      	ldr	r3, [r6, #0]
 800a3e2:	6825      	ldr	r5, [r4, #0]
 800a3e4:	6961      	ldr	r1, [r4, #20]
 800a3e6:	1d18      	adds	r0, r3, #4
 800a3e8:	6030      	str	r0, [r6, #0]
 800a3ea:	062e      	lsls	r6, r5, #24
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	d501      	bpl.n	800a3f4 <_printf_i+0x1c0>
 800a3f0:	6019      	str	r1, [r3, #0]
 800a3f2:	e002      	b.n	800a3fa <_printf_i+0x1c6>
 800a3f4:	0668      	lsls	r0, r5, #25
 800a3f6:	d5fb      	bpl.n	800a3f0 <_printf_i+0x1bc>
 800a3f8:	8019      	strh	r1, [r3, #0]
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	6123      	str	r3, [r4, #16]
 800a3fe:	4616      	mov	r6, r2
 800a400:	e7bc      	b.n	800a37c <_printf_i+0x148>
 800a402:	6833      	ldr	r3, [r6, #0]
 800a404:	1d1a      	adds	r2, r3, #4
 800a406:	6032      	str	r2, [r6, #0]
 800a408:	681e      	ldr	r6, [r3, #0]
 800a40a:	6862      	ldr	r2, [r4, #4]
 800a40c:	2100      	movs	r1, #0
 800a40e:	4630      	mov	r0, r6
 800a410:	f7f5 fef6 	bl	8000200 <memchr>
 800a414:	b108      	cbz	r0, 800a41a <_printf_i+0x1e6>
 800a416:	1b80      	subs	r0, r0, r6
 800a418:	6060      	str	r0, [r4, #4]
 800a41a:	6863      	ldr	r3, [r4, #4]
 800a41c:	6123      	str	r3, [r4, #16]
 800a41e:	2300      	movs	r3, #0
 800a420:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a424:	e7aa      	b.n	800a37c <_printf_i+0x148>
 800a426:	6923      	ldr	r3, [r4, #16]
 800a428:	4632      	mov	r2, r6
 800a42a:	4649      	mov	r1, r9
 800a42c:	4640      	mov	r0, r8
 800a42e:	47d0      	blx	sl
 800a430:	3001      	adds	r0, #1
 800a432:	d0ad      	beq.n	800a390 <_printf_i+0x15c>
 800a434:	6823      	ldr	r3, [r4, #0]
 800a436:	079b      	lsls	r3, r3, #30
 800a438:	d413      	bmi.n	800a462 <_printf_i+0x22e>
 800a43a:	68e0      	ldr	r0, [r4, #12]
 800a43c:	9b03      	ldr	r3, [sp, #12]
 800a43e:	4298      	cmp	r0, r3
 800a440:	bfb8      	it	lt
 800a442:	4618      	movlt	r0, r3
 800a444:	e7a6      	b.n	800a394 <_printf_i+0x160>
 800a446:	2301      	movs	r3, #1
 800a448:	4632      	mov	r2, r6
 800a44a:	4649      	mov	r1, r9
 800a44c:	4640      	mov	r0, r8
 800a44e:	47d0      	blx	sl
 800a450:	3001      	adds	r0, #1
 800a452:	d09d      	beq.n	800a390 <_printf_i+0x15c>
 800a454:	3501      	adds	r5, #1
 800a456:	68e3      	ldr	r3, [r4, #12]
 800a458:	9903      	ldr	r1, [sp, #12]
 800a45a:	1a5b      	subs	r3, r3, r1
 800a45c:	42ab      	cmp	r3, r5
 800a45e:	dcf2      	bgt.n	800a446 <_printf_i+0x212>
 800a460:	e7eb      	b.n	800a43a <_printf_i+0x206>
 800a462:	2500      	movs	r5, #0
 800a464:	f104 0619 	add.w	r6, r4, #25
 800a468:	e7f5      	b.n	800a456 <_printf_i+0x222>
 800a46a:	bf00      	nop
 800a46c:	0800d38a 	.word	0x0800d38a
 800a470:	0800d39b 	.word	0x0800d39b

0800a474 <sniprintf>:
 800a474:	b40c      	push	{r2, r3}
 800a476:	b530      	push	{r4, r5, lr}
 800a478:	4b17      	ldr	r3, [pc, #92]	@ (800a4d8 <sniprintf+0x64>)
 800a47a:	1e0c      	subs	r4, r1, #0
 800a47c:	681d      	ldr	r5, [r3, #0]
 800a47e:	b09d      	sub	sp, #116	@ 0x74
 800a480:	da08      	bge.n	800a494 <sniprintf+0x20>
 800a482:	238b      	movs	r3, #139	@ 0x8b
 800a484:	602b      	str	r3, [r5, #0]
 800a486:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a48a:	b01d      	add	sp, #116	@ 0x74
 800a48c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a490:	b002      	add	sp, #8
 800a492:	4770      	bx	lr
 800a494:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a498:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a49c:	bf14      	ite	ne
 800a49e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800a4a2:	4623      	moveq	r3, r4
 800a4a4:	9304      	str	r3, [sp, #16]
 800a4a6:	9307      	str	r3, [sp, #28]
 800a4a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a4ac:	9002      	str	r0, [sp, #8]
 800a4ae:	9006      	str	r0, [sp, #24]
 800a4b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a4b4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a4b6:	ab21      	add	r3, sp, #132	@ 0x84
 800a4b8:	a902      	add	r1, sp, #8
 800a4ba:	4628      	mov	r0, r5
 800a4bc:	9301      	str	r3, [sp, #4]
 800a4be:	f001 f84f 	bl	800b560 <_svfiprintf_r>
 800a4c2:	1c43      	adds	r3, r0, #1
 800a4c4:	bfbc      	itt	lt
 800a4c6:	238b      	movlt	r3, #139	@ 0x8b
 800a4c8:	602b      	strlt	r3, [r5, #0]
 800a4ca:	2c00      	cmp	r4, #0
 800a4cc:	d0dd      	beq.n	800a48a <sniprintf+0x16>
 800a4ce:	9b02      	ldr	r3, [sp, #8]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	701a      	strb	r2, [r3, #0]
 800a4d4:	e7d9      	b.n	800a48a <sniprintf+0x16>
 800a4d6:	bf00      	nop
 800a4d8:	200000cc 	.word	0x200000cc

0800a4dc <srand>:
 800a4dc:	b538      	push	{r3, r4, r5, lr}
 800a4de:	4b10      	ldr	r3, [pc, #64]	@ (800a520 <srand+0x44>)
 800a4e0:	681d      	ldr	r5, [r3, #0]
 800a4e2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800a4e4:	4604      	mov	r4, r0
 800a4e6:	b9b3      	cbnz	r3, 800a516 <srand+0x3a>
 800a4e8:	2018      	movs	r0, #24
 800a4ea:	f001 f935 	bl	800b758 <malloc>
 800a4ee:	4602      	mov	r2, r0
 800a4f0:	6328      	str	r0, [r5, #48]	@ 0x30
 800a4f2:	b920      	cbnz	r0, 800a4fe <srand+0x22>
 800a4f4:	4b0b      	ldr	r3, [pc, #44]	@ (800a524 <srand+0x48>)
 800a4f6:	480c      	ldr	r0, [pc, #48]	@ (800a528 <srand+0x4c>)
 800a4f8:	2146      	movs	r1, #70	@ 0x46
 800a4fa:	f000 f96b 	bl	800a7d4 <__assert_func>
 800a4fe:	490b      	ldr	r1, [pc, #44]	@ (800a52c <srand+0x50>)
 800a500:	4b0b      	ldr	r3, [pc, #44]	@ (800a530 <srand+0x54>)
 800a502:	e9c0 1300 	strd	r1, r3, [r0]
 800a506:	4b0b      	ldr	r3, [pc, #44]	@ (800a534 <srand+0x58>)
 800a508:	6083      	str	r3, [r0, #8]
 800a50a:	230b      	movs	r3, #11
 800a50c:	8183      	strh	r3, [r0, #12]
 800a50e:	2100      	movs	r1, #0
 800a510:	2001      	movs	r0, #1
 800a512:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800a516:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800a518:	2200      	movs	r2, #0
 800a51a:	611c      	str	r4, [r3, #16]
 800a51c:	615a      	str	r2, [r3, #20]
 800a51e:	bd38      	pop	{r3, r4, r5, pc}
 800a520:	200000cc 	.word	0x200000cc
 800a524:	0800d3ac 	.word	0x0800d3ac
 800a528:	0800d3c3 	.word	0x0800d3c3
 800a52c:	abcd330e 	.word	0xabcd330e
 800a530:	e66d1234 	.word	0xe66d1234
 800a534:	0005deec 	.word	0x0005deec

0800a538 <rand>:
 800a538:	4b16      	ldr	r3, [pc, #88]	@ (800a594 <rand+0x5c>)
 800a53a:	b510      	push	{r4, lr}
 800a53c:	681c      	ldr	r4, [r3, #0]
 800a53e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a540:	b9b3      	cbnz	r3, 800a570 <rand+0x38>
 800a542:	2018      	movs	r0, #24
 800a544:	f001 f908 	bl	800b758 <malloc>
 800a548:	4602      	mov	r2, r0
 800a54a:	6320      	str	r0, [r4, #48]	@ 0x30
 800a54c:	b920      	cbnz	r0, 800a558 <rand+0x20>
 800a54e:	4b12      	ldr	r3, [pc, #72]	@ (800a598 <rand+0x60>)
 800a550:	4812      	ldr	r0, [pc, #72]	@ (800a59c <rand+0x64>)
 800a552:	2152      	movs	r1, #82	@ 0x52
 800a554:	f000 f93e 	bl	800a7d4 <__assert_func>
 800a558:	4911      	ldr	r1, [pc, #68]	@ (800a5a0 <rand+0x68>)
 800a55a:	4b12      	ldr	r3, [pc, #72]	@ (800a5a4 <rand+0x6c>)
 800a55c:	e9c0 1300 	strd	r1, r3, [r0]
 800a560:	4b11      	ldr	r3, [pc, #68]	@ (800a5a8 <rand+0x70>)
 800a562:	6083      	str	r3, [r0, #8]
 800a564:	230b      	movs	r3, #11
 800a566:	8183      	strh	r3, [r0, #12]
 800a568:	2100      	movs	r1, #0
 800a56a:	2001      	movs	r0, #1
 800a56c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800a570:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a572:	480e      	ldr	r0, [pc, #56]	@ (800a5ac <rand+0x74>)
 800a574:	690b      	ldr	r3, [r1, #16]
 800a576:	694c      	ldr	r4, [r1, #20]
 800a578:	4a0d      	ldr	r2, [pc, #52]	@ (800a5b0 <rand+0x78>)
 800a57a:	4358      	muls	r0, r3
 800a57c:	fb02 0004 	mla	r0, r2, r4, r0
 800a580:	fba3 3202 	umull	r3, r2, r3, r2
 800a584:	3301      	adds	r3, #1
 800a586:	eb40 0002 	adc.w	r0, r0, r2
 800a58a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800a58e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800a592:	bd10      	pop	{r4, pc}
 800a594:	200000cc 	.word	0x200000cc
 800a598:	0800d3ac 	.word	0x0800d3ac
 800a59c:	0800d3c3 	.word	0x0800d3c3
 800a5a0:	abcd330e 	.word	0xabcd330e
 800a5a4:	e66d1234 	.word	0xe66d1234
 800a5a8:	0005deec 	.word	0x0005deec
 800a5ac:	5851f42d 	.word	0x5851f42d
 800a5b0:	4c957f2d 	.word	0x4c957f2d

0800a5b4 <std>:
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	b510      	push	{r4, lr}
 800a5b8:	4604      	mov	r4, r0
 800a5ba:	e9c0 3300 	strd	r3, r3, [r0]
 800a5be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a5c2:	6083      	str	r3, [r0, #8]
 800a5c4:	8181      	strh	r1, [r0, #12]
 800a5c6:	6643      	str	r3, [r0, #100]	@ 0x64
 800a5c8:	81c2      	strh	r2, [r0, #14]
 800a5ca:	6183      	str	r3, [r0, #24]
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	2208      	movs	r2, #8
 800a5d0:	305c      	adds	r0, #92	@ 0x5c
 800a5d2:	f000 f8c4 	bl	800a75e <memset>
 800a5d6:	4b0d      	ldr	r3, [pc, #52]	@ (800a60c <std+0x58>)
 800a5d8:	6263      	str	r3, [r4, #36]	@ 0x24
 800a5da:	4b0d      	ldr	r3, [pc, #52]	@ (800a610 <std+0x5c>)
 800a5dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a5de:	4b0d      	ldr	r3, [pc, #52]	@ (800a614 <std+0x60>)
 800a5e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a5e2:	4b0d      	ldr	r3, [pc, #52]	@ (800a618 <std+0x64>)
 800a5e4:	6323      	str	r3, [r4, #48]	@ 0x30
 800a5e6:	4b0d      	ldr	r3, [pc, #52]	@ (800a61c <std+0x68>)
 800a5e8:	6224      	str	r4, [r4, #32]
 800a5ea:	429c      	cmp	r4, r3
 800a5ec:	d006      	beq.n	800a5fc <std+0x48>
 800a5ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a5f2:	4294      	cmp	r4, r2
 800a5f4:	d002      	beq.n	800a5fc <std+0x48>
 800a5f6:	33d0      	adds	r3, #208	@ 0xd0
 800a5f8:	429c      	cmp	r4, r3
 800a5fa:	d105      	bne.n	800a608 <std+0x54>
 800a5fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a604:	f000 b8e2 	b.w	800a7cc <__retarget_lock_init_recursive>
 800a608:	bd10      	pop	{r4, pc}
 800a60a:	bf00      	nop
 800a60c:	0800c121 	.word	0x0800c121
 800a610:	0800c143 	.word	0x0800c143
 800a614:	0800c17b 	.word	0x0800c17b
 800a618:	0800c19f 	.word	0x0800c19f
 800a61c:	2000086c 	.word	0x2000086c

0800a620 <stdio_exit_handler>:
 800a620:	4a02      	ldr	r2, [pc, #8]	@ (800a62c <stdio_exit_handler+0xc>)
 800a622:	4903      	ldr	r1, [pc, #12]	@ (800a630 <stdio_exit_handler+0x10>)
 800a624:	4803      	ldr	r0, [pc, #12]	@ (800a634 <stdio_exit_handler+0x14>)
 800a626:	f000 b869 	b.w	800a6fc <_fwalk_sglue>
 800a62a:	bf00      	nop
 800a62c:	200000c0 	.word	0x200000c0
 800a630:	0800b9b5 	.word	0x0800b9b5
 800a634:	200000d0 	.word	0x200000d0

0800a638 <cleanup_stdio>:
 800a638:	6841      	ldr	r1, [r0, #4]
 800a63a:	4b0c      	ldr	r3, [pc, #48]	@ (800a66c <cleanup_stdio+0x34>)
 800a63c:	4299      	cmp	r1, r3
 800a63e:	b510      	push	{r4, lr}
 800a640:	4604      	mov	r4, r0
 800a642:	d001      	beq.n	800a648 <cleanup_stdio+0x10>
 800a644:	f001 f9b6 	bl	800b9b4 <_fflush_r>
 800a648:	68a1      	ldr	r1, [r4, #8]
 800a64a:	4b09      	ldr	r3, [pc, #36]	@ (800a670 <cleanup_stdio+0x38>)
 800a64c:	4299      	cmp	r1, r3
 800a64e:	d002      	beq.n	800a656 <cleanup_stdio+0x1e>
 800a650:	4620      	mov	r0, r4
 800a652:	f001 f9af 	bl	800b9b4 <_fflush_r>
 800a656:	68e1      	ldr	r1, [r4, #12]
 800a658:	4b06      	ldr	r3, [pc, #24]	@ (800a674 <cleanup_stdio+0x3c>)
 800a65a:	4299      	cmp	r1, r3
 800a65c:	d004      	beq.n	800a668 <cleanup_stdio+0x30>
 800a65e:	4620      	mov	r0, r4
 800a660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a664:	f001 b9a6 	b.w	800b9b4 <_fflush_r>
 800a668:	bd10      	pop	{r4, pc}
 800a66a:	bf00      	nop
 800a66c:	2000086c 	.word	0x2000086c
 800a670:	200008d4 	.word	0x200008d4
 800a674:	2000093c 	.word	0x2000093c

0800a678 <global_stdio_init.part.0>:
 800a678:	b510      	push	{r4, lr}
 800a67a:	4b0b      	ldr	r3, [pc, #44]	@ (800a6a8 <global_stdio_init.part.0+0x30>)
 800a67c:	4c0b      	ldr	r4, [pc, #44]	@ (800a6ac <global_stdio_init.part.0+0x34>)
 800a67e:	4a0c      	ldr	r2, [pc, #48]	@ (800a6b0 <global_stdio_init.part.0+0x38>)
 800a680:	601a      	str	r2, [r3, #0]
 800a682:	4620      	mov	r0, r4
 800a684:	2200      	movs	r2, #0
 800a686:	2104      	movs	r1, #4
 800a688:	f7ff ff94 	bl	800a5b4 <std>
 800a68c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a690:	2201      	movs	r2, #1
 800a692:	2109      	movs	r1, #9
 800a694:	f7ff ff8e 	bl	800a5b4 <std>
 800a698:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a69c:	2202      	movs	r2, #2
 800a69e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6a2:	2112      	movs	r1, #18
 800a6a4:	f7ff bf86 	b.w	800a5b4 <std>
 800a6a8:	200009a4 	.word	0x200009a4
 800a6ac:	2000086c 	.word	0x2000086c
 800a6b0:	0800a621 	.word	0x0800a621

0800a6b4 <__sfp_lock_acquire>:
 800a6b4:	4801      	ldr	r0, [pc, #4]	@ (800a6bc <__sfp_lock_acquire+0x8>)
 800a6b6:	f000 b88a 	b.w	800a7ce <__retarget_lock_acquire_recursive>
 800a6ba:	bf00      	nop
 800a6bc:	200009a9 	.word	0x200009a9

0800a6c0 <__sfp_lock_release>:
 800a6c0:	4801      	ldr	r0, [pc, #4]	@ (800a6c8 <__sfp_lock_release+0x8>)
 800a6c2:	f000 b885 	b.w	800a7d0 <__retarget_lock_release_recursive>
 800a6c6:	bf00      	nop
 800a6c8:	200009a9 	.word	0x200009a9

0800a6cc <__sinit>:
 800a6cc:	b510      	push	{r4, lr}
 800a6ce:	4604      	mov	r4, r0
 800a6d0:	f7ff fff0 	bl	800a6b4 <__sfp_lock_acquire>
 800a6d4:	6a23      	ldr	r3, [r4, #32]
 800a6d6:	b11b      	cbz	r3, 800a6e0 <__sinit+0x14>
 800a6d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6dc:	f7ff bff0 	b.w	800a6c0 <__sfp_lock_release>
 800a6e0:	4b04      	ldr	r3, [pc, #16]	@ (800a6f4 <__sinit+0x28>)
 800a6e2:	6223      	str	r3, [r4, #32]
 800a6e4:	4b04      	ldr	r3, [pc, #16]	@ (800a6f8 <__sinit+0x2c>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d1f5      	bne.n	800a6d8 <__sinit+0xc>
 800a6ec:	f7ff ffc4 	bl	800a678 <global_stdio_init.part.0>
 800a6f0:	e7f2      	b.n	800a6d8 <__sinit+0xc>
 800a6f2:	bf00      	nop
 800a6f4:	0800a639 	.word	0x0800a639
 800a6f8:	200009a4 	.word	0x200009a4

0800a6fc <_fwalk_sglue>:
 800a6fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a700:	4607      	mov	r7, r0
 800a702:	4688      	mov	r8, r1
 800a704:	4614      	mov	r4, r2
 800a706:	2600      	movs	r6, #0
 800a708:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a70c:	f1b9 0901 	subs.w	r9, r9, #1
 800a710:	d505      	bpl.n	800a71e <_fwalk_sglue+0x22>
 800a712:	6824      	ldr	r4, [r4, #0]
 800a714:	2c00      	cmp	r4, #0
 800a716:	d1f7      	bne.n	800a708 <_fwalk_sglue+0xc>
 800a718:	4630      	mov	r0, r6
 800a71a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a71e:	89ab      	ldrh	r3, [r5, #12]
 800a720:	2b01      	cmp	r3, #1
 800a722:	d907      	bls.n	800a734 <_fwalk_sglue+0x38>
 800a724:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a728:	3301      	adds	r3, #1
 800a72a:	d003      	beq.n	800a734 <_fwalk_sglue+0x38>
 800a72c:	4629      	mov	r1, r5
 800a72e:	4638      	mov	r0, r7
 800a730:	47c0      	blx	r8
 800a732:	4306      	orrs	r6, r0
 800a734:	3568      	adds	r5, #104	@ 0x68
 800a736:	e7e9      	b.n	800a70c <_fwalk_sglue+0x10>

0800a738 <strncat>:
 800a738:	b530      	push	{r4, r5, lr}
 800a73a:	4604      	mov	r4, r0
 800a73c:	7825      	ldrb	r5, [r4, #0]
 800a73e:	4623      	mov	r3, r4
 800a740:	3401      	adds	r4, #1
 800a742:	2d00      	cmp	r5, #0
 800a744:	d1fa      	bne.n	800a73c <strncat+0x4>
 800a746:	3a01      	subs	r2, #1
 800a748:	d304      	bcc.n	800a754 <strncat+0x1c>
 800a74a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a74e:	f803 4b01 	strb.w	r4, [r3], #1
 800a752:	b904      	cbnz	r4, 800a756 <strncat+0x1e>
 800a754:	bd30      	pop	{r4, r5, pc}
 800a756:	2a00      	cmp	r2, #0
 800a758:	d1f5      	bne.n	800a746 <strncat+0xe>
 800a75a:	701a      	strb	r2, [r3, #0]
 800a75c:	e7f3      	b.n	800a746 <strncat+0xe>

0800a75e <memset>:
 800a75e:	4402      	add	r2, r0
 800a760:	4603      	mov	r3, r0
 800a762:	4293      	cmp	r3, r2
 800a764:	d100      	bne.n	800a768 <memset+0xa>
 800a766:	4770      	bx	lr
 800a768:	f803 1b01 	strb.w	r1, [r3], #1
 800a76c:	e7f9      	b.n	800a762 <memset+0x4>
	...

0800a770 <_localeconv_r>:
 800a770:	4800      	ldr	r0, [pc, #0]	@ (800a774 <_localeconv_r+0x4>)
 800a772:	4770      	bx	lr
 800a774:	2000020c 	.word	0x2000020c

0800a778 <__errno>:
 800a778:	4b01      	ldr	r3, [pc, #4]	@ (800a780 <__errno+0x8>)
 800a77a:	6818      	ldr	r0, [r3, #0]
 800a77c:	4770      	bx	lr
 800a77e:	bf00      	nop
 800a780:	200000cc 	.word	0x200000cc

0800a784 <__libc_init_array>:
 800a784:	b570      	push	{r4, r5, r6, lr}
 800a786:	4d0d      	ldr	r5, [pc, #52]	@ (800a7bc <__libc_init_array+0x38>)
 800a788:	4c0d      	ldr	r4, [pc, #52]	@ (800a7c0 <__libc_init_array+0x3c>)
 800a78a:	1b64      	subs	r4, r4, r5
 800a78c:	10a4      	asrs	r4, r4, #2
 800a78e:	2600      	movs	r6, #0
 800a790:	42a6      	cmp	r6, r4
 800a792:	d109      	bne.n	800a7a8 <__libc_init_array+0x24>
 800a794:	4d0b      	ldr	r5, [pc, #44]	@ (800a7c4 <__libc_init_array+0x40>)
 800a796:	4c0c      	ldr	r4, [pc, #48]	@ (800a7c8 <__libc_init_array+0x44>)
 800a798:	f002 f8f0 	bl	800c97c <_init>
 800a79c:	1b64      	subs	r4, r4, r5
 800a79e:	10a4      	asrs	r4, r4, #2
 800a7a0:	2600      	movs	r6, #0
 800a7a2:	42a6      	cmp	r6, r4
 800a7a4:	d105      	bne.n	800a7b2 <__libc_init_array+0x2e>
 800a7a6:	bd70      	pop	{r4, r5, r6, pc}
 800a7a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7ac:	4798      	blx	r3
 800a7ae:	3601      	adds	r6, #1
 800a7b0:	e7ee      	b.n	800a790 <__libc_init_array+0xc>
 800a7b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7b6:	4798      	blx	r3
 800a7b8:	3601      	adds	r6, #1
 800a7ba:	e7f2      	b.n	800a7a2 <__libc_init_array+0x1e>
 800a7bc:	0800d74c 	.word	0x0800d74c
 800a7c0:	0800d74c 	.word	0x0800d74c
 800a7c4:	0800d74c 	.word	0x0800d74c
 800a7c8:	0800d750 	.word	0x0800d750

0800a7cc <__retarget_lock_init_recursive>:
 800a7cc:	4770      	bx	lr

0800a7ce <__retarget_lock_acquire_recursive>:
 800a7ce:	4770      	bx	lr

0800a7d0 <__retarget_lock_release_recursive>:
 800a7d0:	4770      	bx	lr
	...

0800a7d4 <__assert_func>:
 800a7d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a7d6:	4614      	mov	r4, r2
 800a7d8:	461a      	mov	r2, r3
 800a7da:	4b09      	ldr	r3, [pc, #36]	@ (800a800 <__assert_func+0x2c>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4605      	mov	r5, r0
 800a7e0:	68d8      	ldr	r0, [r3, #12]
 800a7e2:	b954      	cbnz	r4, 800a7fa <__assert_func+0x26>
 800a7e4:	4b07      	ldr	r3, [pc, #28]	@ (800a804 <__assert_func+0x30>)
 800a7e6:	461c      	mov	r4, r3
 800a7e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a7ec:	9100      	str	r1, [sp, #0]
 800a7ee:	462b      	mov	r3, r5
 800a7f0:	4905      	ldr	r1, [pc, #20]	@ (800a808 <__assert_func+0x34>)
 800a7f2:	f001 fcd9 	bl	800c1a8 <fiprintf>
 800a7f6:	f001 fd95 	bl	800c324 <abort>
 800a7fa:	4b04      	ldr	r3, [pc, #16]	@ (800a80c <__assert_func+0x38>)
 800a7fc:	e7f4      	b.n	800a7e8 <__assert_func+0x14>
 800a7fe:	bf00      	nop
 800a800:	200000cc 	.word	0x200000cc
 800a804:	0800d456 	.word	0x0800d456
 800a808:	0800d428 	.word	0x0800d428
 800a80c:	0800d41b 	.word	0x0800d41b

0800a810 <quorem>:
 800a810:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a814:	6903      	ldr	r3, [r0, #16]
 800a816:	690c      	ldr	r4, [r1, #16]
 800a818:	42a3      	cmp	r3, r4
 800a81a:	4607      	mov	r7, r0
 800a81c:	db7e      	blt.n	800a91c <quorem+0x10c>
 800a81e:	3c01      	subs	r4, #1
 800a820:	f101 0814 	add.w	r8, r1, #20
 800a824:	00a3      	lsls	r3, r4, #2
 800a826:	f100 0514 	add.w	r5, r0, #20
 800a82a:	9300      	str	r3, [sp, #0]
 800a82c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a830:	9301      	str	r3, [sp, #4]
 800a832:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a836:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a83a:	3301      	adds	r3, #1
 800a83c:	429a      	cmp	r2, r3
 800a83e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a842:	fbb2 f6f3 	udiv	r6, r2, r3
 800a846:	d32e      	bcc.n	800a8a6 <quorem+0x96>
 800a848:	f04f 0a00 	mov.w	sl, #0
 800a84c:	46c4      	mov	ip, r8
 800a84e:	46ae      	mov	lr, r5
 800a850:	46d3      	mov	fp, sl
 800a852:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a856:	b298      	uxth	r0, r3
 800a858:	fb06 a000 	mla	r0, r6, r0, sl
 800a85c:	0c02      	lsrs	r2, r0, #16
 800a85e:	0c1b      	lsrs	r3, r3, #16
 800a860:	fb06 2303 	mla	r3, r6, r3, r2
 800a864:	f8de 2000 	ldr.w	r2, [lr]
 800a868:	b280      	uxth	r0, r0
 800a86a:	b292      	uxth	r2, r2
 800a86c:	1a12      	subs	r2, r2, r0
 800a86e:	445a      	add	r2, fp
 800a870:	f8de 0000 	ldr.w	r0, [lr]
 800a874:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a878:	b29b      	uxth	r3, r3
 800a87a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a87e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a882:	b292      	uxth	r2, r2
 800a884:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a888:	45e1      	cmp	r9, ip
 800a88a:	f84e 2b04 	str.w	r2, [lr], #4
 800a88e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a892:	d2de      	bcs.n	800a852 <quorem+0x42>
 800a894:	9b00      	ldr	r3, [sp, #0]
 800a896:	58eb      	ldr	r3, [r5, r3]
 800a898:	b92b      	cbnz	r3, 800a8a6 <quorem+0x96>
 800a89a:	9b01      	ldr	r3, [sp, #4]
 800a89c:	3b04      	subs	r3, #4
 800a89e:	429d      	cmp	r5, r3
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	d32f      	bcc.n	800a904 <quorem+0xf4>
 800a8a4:	613c      	str	r4, [r7, #16]
 800a8a6:	4638      	mov	r0, r7
 800a8a8:	f001 fb32 	bl	800bf10 <__mcmp>
 800a8ac:	2800      	cmp	r0, #0
 800a8ae:	db25      	blt.n	800a8fc <quorem+0xec>
 800a8b0:	4629      	mov	r1, r5
 800a8b2:	2000      	movs	r0, #0
 800a8b4:	f858 2b04 	ldr.w	r2, [r8], #4
 800a8b8:	f8d1 c000 	ldr.w	ip, [r1]
 800a8bc:	fa1f fe82 	uxth.w	lr, r2
 800a8c0:	fa1f f38c 	uxth.w	r3, ip
 800a8c4:	eba3 030e 	sub.w	r3, r3, lr
 800a8c8:	4403      	add	r3, r0
 800a8ca:	0c12      	lsrs	r2, r2, #16
 800a8cc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a8d0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a8d4:	b29b      	uxth	r3, r3
 800a8d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8da:	45c1      	cmp	r9, r8
 800a8dc:	f841 3b04 	str.w	r3, [r1], #4
 800a8e0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a8e4:	d2e6      	bcs.n	800a8b4 <quorem+0xa4>
 800a8e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a8ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8ee:	b922      	cbnz	r2, 800a8fa <quorem+0xea>
 800a8f0:	3b04      	subs	r3, #4
 800a8f2:	429d      	cmp	r5, r3
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	d30b      	bcc.n	800a910 <quorem+0x100>
 800a8f8:	613c      	str	r4, [r7, #16]
 800a8fa:	3601      	adds	r6, #1
 800a8fc:	4630      	mov	r0, r6
 800a8fe:	b003      	add	sp, #12
 800a900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a904:	6812      	ldr	r2, [r2, #0]
 800a906:	3b04      	subs	r3, #4
 800a908:	2a00      	cmp	r2, #0
 800a90a:	d1cb      	bne.n	800a8a4 <quorem+0x94>
 800a90c:	3c01      	subs	r4, #1
 800a90e:	e7c6      	b.n	800a89e <quorem+0x8e>
 800a910:	6812      	ldr	r2, [r2, #0]
 800a912:	3b04      	subs	r3, #4
 800a914:	2a00      	cmp	r2, #0
 800a916:	d1ef      	bne.n	800a8f8 <quorem+0xe8>
 800a918:	3c01      	subs	r4, #1
 800a91a:	e7ea      	b.n	800a8f2 <quorem+0xe2>
 800a91c:	2000      	movs	r0, #0
 800a91e:	e7ee      	b.n	800a8fe <quorem+0xee>

0800a920 <_dtoa_r>:
 800a920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a924:	69c7      	ldr	r7, [r0, #28]
 800a926:	b099      	sub	sp, #100	@ 0x64
 800a928:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a92c:	ec55 4b10 	vmov	r4, r5, d0
 800a930:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a932:	9109      	str	r1, [sp, #36]	@ 0x24
 800a934:	4683      	mov	fp, r0
 800a936:	920e      	str	r2, [sp, #56]	@ 0x38
 800a938:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a93a:	b97f      	cbnz	r7, 800a95c <_dtoa_r+0x3c>
 800a93c:	2010      	movs	r0, #16
 800a93e:	f000 ff0b 	bl	800b758 <malloc>
 800a942:	4602      	mov	r2, r0
 800a944:	f8cb 001c 	str.w	r0, [fp, #28]
 800a948:	b920      	cbnz	r0, 800a954 <_dtoa_r+0x34>
 800a94a:	4ba7      	ldr	r3, [pc, #668]	@ (800abe8 <_dtoa_r+0x2c8>)
 800a94c:	21ef      	movs	r1, #239	@ 0xef
 800a94e:	48a7      	ldr	r0, [pc, #668]	@ (800abec <_dtoa_r+0x2cc>)
 800a950:	f7ff ff40 	bl	800a7d4 <__assert_func>
 800a954:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a958:	6007      	str	r7, [r0, #0]
 800a95a:	60c7      	str	r7, [r0, #12]
 800a95c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a960:	6819      	ldr	r1, [r3, #0]
 800a962:	b159      	cbz	r1, 800a97c <_dtoa_r+0x5c>
 800a964:	685a      	ldr	r2, [r3, #4]
 800a966:	604a      	str	r2, [r1, #4]
 800a968:	2301      	movs	r3, #1
 800a96a:	4093      	lsls	r3, r2
 800a96c:	608b      	str	r3, [r1, #8]
 800a96e:	4658      	mov	r0, fp
 800a970:	f001 f894 	bl	800ba9c <_Bfree>
 800a974:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a978:	2200      	movs	r2, #0
 800a97a:	601a      	str	r2, [r3, #0]
 800a97c:	1e2b      	subs	r3, r5, #0
 800a97e:	bfb9      	ittee	lt
 800a980:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a984:	9303      	strlt	r3, [sp, #12]
 800a986:	2300      	movge	r3, #0
 800a988:	6033      	strge	r3, [r6, #0]
 800a98a:	9f03      	ldr	r7, [sp, #12]
 800a98c:	4b98      	ldr	r3, [pc, #608]	@ (800abf0 <_dtoa_r+0x2d0>)
 800a98e:	bfbc      	itt	lt
 800a990:	2201      	movlt	r2, #1
 800a992:	6032      	strlt	r2, [r6, #0]
 800a994:	43bb      	bics	r3, r7
 800a996:	d112      	bne.n	800a9be <_dtoa_r+0x9e>
 800a998:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a99a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a99e:	6013      	str	r3, [r2, #0]
 800a9a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a9a4:	4323      	orrs	r3, r4
 800a9a6:	f000 854d 	beq.w	800b444 <_dtoa_r+0xb24>
 800a9aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a9ac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ac04 <_dtoa_r+0x2e4>
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	f000 854f 	beq.w	800b454 <_dtoa_r+0xb34>
 800a9b6:	f10a 0303 	add.w	r3, sl, #3
 800a9ba:	f000 bd49 	b.w	800b450 <_dtoa_r+0xb30>
 800a9be:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	ec51 0b17 	vmov	r0, r1, d7
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a9ce:	f7f6 f893 	bl	8000af8 <__aeabi_dcmpeq>
 800a9d2:	4680      	mov	r8, r0
 800a9d4:	b158      	cbz	r0, 800a9ee <_dtoa_r+0xce>
 800a9d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a9d8:	2301      	movs	r3, #1
 800a9da:	6013      	str	r3, [r2, #0]
 800a9dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a9de:	b113      	cbz	r3, 800a9e6 <_dtoa_r+0xc6>
 800a9e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a9e2:	4b84      	ldr	r3, [pc, #528]	@ (800abf4 <_dtoa_r+0x2d4>)
 800a9e4:	6013      	str	r3, [r2, #0]
 800a9e6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ac08 <_dtoa_r+0x2e8>
 800a9ea:	f000 bd33 	b.w	800b454 <_dtoa_r+0xb34>
 800a9ee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a9f2:	aa16      	add	r2, sp, #88	@ 0x58
 800a9f4:	a917      	add	r1, sp, #92	@ 0x5c
 800a9f6:	4658      	mov	r0, fp
 800a9f8:	f001 fb3a 	bl	800c070 <__d2b>
 800a9fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800aa00:	4681      	mov	r9, r0
 800aa02:	2e00      	cmp	r6, #0
 800aa04:	d077      	beq.n	800aaf6 <_dtoa_r+0x1d6>
 800aa06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aa08:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800aa0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa14:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800aa18:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800aa1c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800aa20:	4619      	mov	r1, r3
 800aa22:	2200      	movs	r2, #0
 800aa24:	4b74      	ldr	r3, [pc, #464]	@ (800abf8 <_dtoa_r+0x2d8>)
 800aa26:	f7f5 fc47 	bl	80002b8 <__aeabi_dsub>
 800aa2a:	a369      	add	r3, pc, #420	@ (adr r3, 800abd0 <_dtoa_r+0x2b0>)
 800aa2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa30:	f7f5 fdfa 	bl	8000628 <__aeabi_dmul>
 800aa34:	a368      	add	r3, pc, #416	@ (adr r3, 800abd8 <_dtoa_r+0x2b8>)
 800aa36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa3a:	f7f5 fc3f 	bl	80002bc <__adddf3>
 800aa3e:	4604      	mov	r4, r0
 800aa40:	4630      	mov	r0, r6
 800aa42:	460d      	mov	r5, r1
 800aa44:	f7f5 fd86 	bl	8000554 <__aeabi_i2d>
 800aa48:	a365      	add	r3, pc, #404	@ (adr r3, 800abe0 <_dtoa_r+0x2c0>)
 800aa4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4e:	f7f5 fdeb 	bl	8000628 <__aeabi_dmul>
 800aa52:	4602      	mov	r2, r0
 800aa54:	460b      	mov	r3, r1
 800aa56:	4620      	mov	r0, r4
 800aa58:	4629      	mov	r1, r5
 800aa5a:	f7f5 fc2f 	bl	80002bc <__adddf3>
 800aa5e:	4604      	mov	r4, r0
 800aa60:	460d      	mov	r5, r1
 800aa62:	f7f6 f891 	bl	8000b88 <__aeabi_d2iz>
 800aa66:	2200      	movs	r2, #0
 800aa68:	4607      	mov	r7, r0
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	4620      	mov	r0, r4
 800aa6e:	4629      	mov	r1, r5
 800aa70:	f7f6 f84c 	bl	8000b0c <__aeabi_dcmplt>
 800aa74:	b140      	cbz	r0, 800aa88 <_dtoa_r+0x168>
 800aa76:	4638      	mov	r0, r7
 800aa78:	f7f5 fd6c 	bl	8000554 <__aeabi_i2d>
 800aa7c:	4622      	mov	r2, r4
 800aa7e:	462b      	mov	r3, r5
 800aa80:	f7f6 f83a 	bl	8000af8 <__aeabi_dcmpeq>
 800aa84:	b900      	cbnz	r0, 800aa88 <_dtoa_r+0x168>
 800aa86:	3f01      	subs	r7, #1
 800aa88:	2f16      	cmp	r7, #22
 800aa8a:	d851      	bhi.n	800ab30 <_dtoa_r+0x210>
 800aa8c:	4b5b      	ldr	r3, [pc, #364]	@ (800abfc <_dtoa_r+0x2dc>)
 800aa8e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aa92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa9a:	f7f6 f837 	bl	8000b0c <__aeabi_dcmplt>
 800aa9e:	2800      	cmp	r0, #0
 800aaa0:	d048      	beq.n	800ab34 <_dtoa_r+0x214>
 800aaa2:	3f01      	subs	r7, #1
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	9312      	str	r3, [sp, #72]	@ 0x48
 800aaa8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800aaaa:	1b9b      	subs	r3, r3, r6
 800aaac:	1e5a      	subs	r2, r3, #1
 800aaae:	bf44      	itt	mi
 800aab0:	f1c3 0801 	rsbmi	r8, r3, #1
 800aab4:	2300      	movmi	r3, #0
 800aab6:	9208      	str	r2, [sp, #32]
 800aab8:	bf54      	ite	pl
 800aaba:	f04f 0800 	movpl.w	r8, #0
 800aabe:	9308      	strmi	r3, [sp, #32]
 800aac0:	2f00      	cmp	r7, #0
 800aac2:	db39      	blt.n	800ab38 <_dtoa_r+0x218>
 800aac4:	9b08      	ldr	r3, [sp, #32]
 800aac6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800aac8:	443b      	add	r3, r7
 800aaca:	9308      	str	r3, [sp, #32]
 800aacc:	2300      	movs	r3, #0
 800aace:	930a      	str	r3, [sp, #40]	@ 0x28
 800aad0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aad2:	2b09      	cmp	r3, #9
 800aad4:	d864      	bhi.n	800aba0 <_dtoa_r+0x280>
 800aad6:	2b05      	cmp	r3, #5
 800aad8:	bfc4      	itt	gt
 800aada:	3b04      	subgt	r3, #4
 800aadc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800aade:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aae0:	f1a3 0302 	sub.w	r3, r3, #2
 800aae4:	bfcc      	ite	gt
 800aae6:	2400      	movgt	r4, #0
 800aae8:	2401      	movle	r4, #1
 800aaea:	2b03      	cmp	r3, #3
 800aaec:	d863      	bhi.n	800abb6 <_dtoa_r+0x296>
 800aaee:	e8df f003 	tbb	[pc, r3]
 800aaf2:	372a      	.short	0x372a
 800aaf4:	5535      	.short	0x5535
 800aaf6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800aafa:	441e      	add	r6, r3
 800aafc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ab00:	2b20      	cmp	r3, #32
 800ab02:	bfc1      	itttt	gt
 800ab04:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ab08:	409f      	lslgt	r7, r3
 800ab0a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ab0e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ab12:	bfd6      	itet	le
 800ab14:	f1c3 0320 	rsble	r3, r3, #32
 800ab18:	ea47 0003 	orrgt.w	r0, r7, r3
 800ab1c:	fa04 f003 	lslle.w	r0, r4, r3
 800ab20:	f7f5 fd08 	bl	8000534 <__aeabi_ui2d>
 800ab24:	2201      	movs	r2, #1
 800ab26:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ab2a:	3e01      	subs	r6, #1
 800ab2c:	9214      	str	r2, [sp, #80]	@ 0x50
 800ab2e:	e777      	b.n	800aa20 <_dtoa_r+0x100>
 800ab30:	2301      	movs	r3, #1
 800ab32:	e7b8      	b.n	800aaa6 <_dtoa_r+0x186>
 800ab34:	9012      	str	r0, [sp, #72]	@ 0x48
 800ab36:	e7b7      	b.n	800aaa8 <_dtoa_r+0x188>
 800ab38:	427b      	negs	r3, r7
 800ab3a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	eba8 0807 	sub.w	r8, r8, r7
 800ab42:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ab44:	e7c4      	b.n	800aad0 <_dtoa_r+0x1b0>
 800ab46:	2300      	movs	r3, #0
 800ab48:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	dc35      	bgt.n	800abbc <_dtoa_r+0x29c>
 800ab50:	2301      	movs	r3, #1
 800ab52:	9300      	str	r3, [sp, #0]
 800ab54:	9307      	str	r3, [sp, #28]
 800ab56:	461a      	mov	r2, r3
 800ab58:	920e      	str	r2, [sp, #56]	@ 0x38
 800ab5a:	e00b      	b.n	800ab74 <_dtoa_r+0x254>
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	e7f3      	b.n	800ab48 <_dtoa_r+0x228>
 800ab60:	2300      	movs	r3, #0
 800ab62:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab66:	18fb      	adds	r3, r7, r3
 800ab68:	9300      	str	r3, [sp, #0]
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	9307      	str	r3, [sp, #28]
 800ab70:	bfb8      	it	lt
 800ab72:	2301      	movlt	r3, #1
 800ab74:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ab78:	2100      	movs	r1, #0
 800ab7a:	2204      	movs	r2, #4
 800ab7c:	f102 0514 	add.w	r5, r2, #20
 800ab80:	429d      	cmp	r5, r3
 800ab82:	d91f      	bls.n	800abc4 <_dtoa_r+0x2a4>
 800ab84:	6041      	str	r1, [r0, #4]
 800ab86:	4658      	mov	r0, fp
 800ab88:	f000 ff48 	bl	800ba1c <_Balloc>
 800ab8c:	4682      	mov	sl, r0
 800ab8e:	2800      	cmp	r0, #0
 800ab90:	d13c      	bne.n	800ac0c <_dtoa_r+0x2ec>
 800ab92:	4b1b      	ldr	r3, [pc, #108]	@ (800ac00 <_dtoa_r+0x2e0>)
 800ab94:	4602      	mov	r2, r0
 800ab96:	f240 11af 	movw	r1, #431	@ 0x1af
 800ab9a:	e6d8      	b.n	800a94e <_dtoa_r+0x2e>
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	e7e0      	b.n	800ab62 <_dtoa_r+0x242>
 800aba0:	2401      	movs	r4, #1
 800aba2:	2300      	movs	r3, #0
 800aba4:	9309      	str	r3, [sp, #36]	@ 0x24
 800aba6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800aba8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800abac:	9300      	str	r3, [sp, #0]
 800abae:	9307      	str	r3, [sp, #28]
 800abb0:	2200      	movs	r2, #0
 800abb2:	2312      	movs	r3, #18
 800abb4:	e7d0      	b.n	800ab58 <_dtoa_r+0x238>
 800abb6:	2301      	movs	r3, #1
 800abb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800abba:	e7f5      	b.n	800aba8 <_dtoa_r+0x288>
 800abbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abbe:	9300      	str	r3, [sp, #0]
 800abc0:	9307      	str	r3, [sp, #28]
 800abc2:	e7d7      	b.n	800ab74 <_dtoa_r+0x254>
 800abc4:	3101      	adds	r1, #1
 800abc6:	0052      	lsls	r2, r2, #1
 800abc8:	e7d8      	b.n	800ab7c <_dtoa_r+0x25c>
 800abca:	bf00      	nop
 800abcc:	f3af 8000 	nop.w
 800abd0:	636f4361 	.word	0x636f4361
 800abd4:	3fd287a7 	.word	0x3fd287a7
 800abd8:	8b60c8b3 	.word	0x8b60c8b3
 800abdc:	3fc68a28 	.word	0x3fc68a28
 800abe0:	509f79fb 	.word	0x509f79fb
 800abe4:	3fd34413 	.word	0x3fd34413
 800abe8:	0800d3ac 	.word	0x0800d3ac
 800abec:	0800d464 	.word	0x0800d464
 800abf0:	7ff00000 	.word	0x7ff00000
 800abf4:	0800d389 	.word	0x0800d389
 800abf8:	3ff80000 	.word	0x3ff80000
 800abfc:	0800d570 	.word	0x0800d570
 800ac00:	0800d4bc 	.word	0x0800d4bc
 800ac04:	0800d460 	.word	0x0800d460
 800ac08:	0800d388 	.word	0x0800d388
 800ac0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ac10:	6018      	str	r0, [r3, #0]
 800ac12:	9b07      	ldr	r3, [sp, #28]
 800ac14:	2b0e      	cmp	r3, #14
 800ac16:	f200 80a4 	bhi.w	800ad62 <_dtoa_r+0x442>
 800ac1a:	2c00      	cmp	r4, #0
 800ac1c:	f000 80a1 	beq.w	800ad62 <_dtoa_r+0x442>
 800ac20:	2f00      	cmp	r7, #0
 800ac22:	dd33      	ble.n	800ac8c <_dtoa_r+0x36c>
 800ac24:	4bad      	ldr	r3, [pc, #692]	@ (800aedc <_dtoa_r+0x5bc>)
 800ac26:	f007 020f 	and.w	r2, r7, #15
 800ac2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac2e:	ed93 7b00 	vldr	d7, [r3]
 800ac32:	05f8      	lsls	r0, r7, #23
 800ac34:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ac38:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ac3c:	d516      	bpl.n	800ac6c <_dtoa_r+0x34c>
 800ac3e:	4ba8      	ldr	r3, [pc, #672]	@ (800aee0 <_dtoa_r+0x5c0>)
 800ac40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ac48:	f7f5 fe18 	bl	800087c <__aeabi_ddiv>
 800ac4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac50:	f004 040f 	and.w	r4, r4, #15
 800ac54:	2603      	movs	r6, #3
 800ac56:	4da2      	ldr	r5, [pc, #648]	@ (800aee0 <_dtoa_r+0x5c0>)
 800ac58:	b954      	cbnz	r4, 800ac70 <_dtoa_r+0x350>
 800ac5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac62:	f7f5 fe0b 	bl	800087c <__aeabi_ddiv>
 800ac66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac6a:	e028      	b.n	800acbe <_dtoa_r+0x39e>
 800ac6c:	2602      	movs	r6, #2
 800ac6e:	e7f2      	b.n	800ac56 <_dtoa_r+0x336>
 800ac70:	07e1      	lsls	r1, r4, #31
 800ac72:	d508      	bpl.n	800ac86 <_dtoa_r+0x366>
 800ac74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac78:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ac7c:	f7f5 fcd4 	bl	8000628 <__aeabi_dmul>
 800ac80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac84:	3601      	adds	r6, #1
 800ac86:	1064      	asrs	r4, r4, #1
 800ac88:	3508      	adds	r5, #8
 800ac8a:	e7e5      	b.n	800ac58 <_dtoa_r+0x338>
 800ac8c:	f000 80d2 	beq.w	800ae34 <_dtoa_r+0x514>
 800ac90:	427c      	negs	r4, r7
 800ac92:	4b92      	ldr	r3, [pc, #584]	@ (800aedc <_dtoa_r+0x5bc>)
 800ac94:	4d92      	ldr	r5, [pc, #584]	@ (800aee0 <_dtoa_r+0x5c0>)
 800ac96:	f004 020f 	and.w	r2, r4, #15
 800ac9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aca6:	f7f5 fcbf 	bl	8000628 <__aeabi_dmul>
 800acaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acae:	1124      	asrs	r4, r4, #4
 800acb0:	2300      	movs	r3, #0
 800acb2:	2602      	movs	r6, #2
 800acb4:	2c00      	cmp	r4, #0
 800acb6:	f040 80b2 	bne.w	800ae1e <_dtoa_r+0x4fe>
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d1d3      	bne.n	800ac66 <_dtoa_r+0x346>
 800acbe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800acc0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	f000 80b7 	beq.w	800ae38 <_dtoa_r+0x518>
 800acca:	4b86      	ldr	r3, [pc, #536]	@ (800aee4 <_dtoa_r+0x5c4>)
 800accc:	2200      	movs	r2, #0
 800acce:	4620      	mov	r0, r4
 800acd0:	4629      	mov	r1, r5
 800acd2:	f7f5 ff1b 	bl	8000b0c <__aeabi_dcmplt>
 800acd6:	2800      	cmp	r0, #0
 800acd8:	f000 80ae 	beq.w	800ae38 <_dtoa_r+0x518>
 800acdc:	9b07      	ldr	r3, [sp, #28]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	f000 80aa 	beq.w	800ae38 <_dtoa_r+0x518>
 800ace4:	9b00      	ldr	r3, [sp, #0]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	dd37      	ble.n	800ad5a <_dtoa_r+0x43a>
 800acea:	1e7b      	subs	r3, r7, #1
 800acec:	9304      	str	r3, [sp, #16]
 800acee:	4620      	mov	r0, r4
 800acf0:	4b7d      	ldr	r3, [pc, #500]	@ (800aee8 <_dtoa_r+0x5c8>)
 800acf2:	2200      	movs	r2, #0
 800acf4:	4629      	mov	r1, r5
 800acf6:	f7f5 fc97 	bl	8000628 <__aeabi_dmul>
 800acfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acfe:	9c00      	ldr	r4, [sp, #0]
 800ad00:	3601      	adds	r6, #1
 800ad02:	4630      	mov	r0, r6
 800ad04:	f7f5 fc26 	bl	8000554 <__aeabi_i2d>
 800ad08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad0c:	f7f5 fc8c 	bl	8000628 <__aeabi_dmul>
 800ad10:	4b76      	ldr	r3, [pc, #472]	@ (800aeec <_dtoa_r+0x5cc>)
 800ad12:	2200      	movs	r2, #0
 800ad14:	f7f5 fad2 	bl	80002bc <__adddf3>
 800ad18:	4605      	mov	r5, r0
 800ad1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ad1e:	2c00      	cmp	r4, #0
 800ad20:	f040 808d 	bne.w	800ae3e <_dtoa_r+0x51e>
 800ad24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad28:	4b71      	ldr	r3, [pc, #452]	@ (800aef0 <_dtoa_r+0x5d0>)
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f7f5 fac4 	bl	80002b8 <__aeabi_dsub>
 800ad30:	4602      	mov	r2, r0
 800ad32:	460b      	mov	r3, r1
 800ad34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad38:	462a      	mov	r2, r5
 800ad3a:	4633      	mov	r3, r6
 800ad3c:	f7f5 ff04 	bl	8000b48 <__aeabi_dcmpgt>
 800ad40:	2800      	cmp	r0, #0
 800ad42:	f040 828b 	bne.w	800b25c <_dtoa_r+0x93c>
 800ad46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad4a:	462a      	mov	r2, r5
 800ad4c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ad50:	f7f5 fedc 	bl	8000b0c <__aeabi_dcmplt>
 800ad54:	2800      	cmp	r0, #0
 800ad56:	f040 8128 	bne.w	800afaa <_dtoa_r+0x68a>
 800ad5a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ad5e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ad62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	f2c0 815a 	blt.w	800b01e <_dtoa_r+0x6fe>
 800ad6a:	2f0e      	cmp	r7, #14
 800ad6c:	f300 8157 	bgt.w	800b01e <_dtoa_r+0x6fe>
 800ad70:	4b5a      	ldr	r3, [pc, #360]	@ (800aedc <_dtoa_r+0x5bc>)
 800ad72:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ad76:	ed93 7b00 	vldr	d7, [r3]
 800ad7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	ed8d 7b00 	vstr	d7, [sp]
 800ad82:	da03      	bge.n	800ad8c <_dtoa_r+0x46c>
 800ad84:	9b07      	ldr	r3, [sp, #28]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	f340 8101 	ble.w	800af8e <_dtoa_r+0x66e>
 800ad8c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ad90:	4656      	mov	r6, sl
 800ad92:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad96:	4620      	mov	r0, r4
 800ad98:	4629      	mov	r1, r5
 800ad9a:	f7f5 fd6f 	bl	800087c <__aeabi_ddiv>
 800ad9e:	f7f5 fef3 	bl	8000b88 <__aeabi_d2iz>
 800ada2:	4680      	mov	r8, r0
 800ada4:	f7f5 fbd6 	bl	8000554 <__aeabi_i2d>
 800ada8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800adac:	f7f5 fc3c 	bl	8000628 <__aeabi_dmul>
 800adb0:	4602      	mov	r2, r0
 800adb2:	460b      	mov	r3, r1
 800adb4:	4620      	mov	r0, r4
 800adb6:	4629      	mov	r1, r5
 800adb8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800adbc:	f7f5 fa7c 	bl	80002b8 <__aeabi_dsub>
 800adc0:	f806 4b01 	strb.w	r4, [r6], #1
 800adc4:	9d07      	ldr	r5, [sp, #28]
 800adc6:	eba6 040a 	sub.w	r4, r6, sl
 800adca:	42a5      	cmp	r5, r4
 800adcc:	4602      	mov	r2, r0
 800adce:	460b      	mov	r3, r1
 800add0:	f040 8117 	bne.w	800b002 <_dtoa_r+0x6e2>
 800add4:	f7f5 fa72 	bl	80002bc <__adddf3>
 800add8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800addc:	4604      	mov	r4, r0
 800adde:	460d      	mov	r5, r1
 800ade0:	f7f5 feb2 	bl	8000b48 <__aeabi_dcmpgt>
 800ade4:	2800      	cmp	r0, #0
 800ade6:	f040 80f9 	bne.w	800afdc <_dtoa_r+0x6bc>
 800adea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800adee:	4620      	mov	r0, r4
 800adf0:	4629      	mov	r1, r5
 800adf2:	f7f5 fe81 	bl	8000af8 <__aeabi_dcmpeq>
 800adf6:	b118      	cbz	r0, 800ae00 <_dtoa_r+0x4e0>
 800adf8:	f018 0f01 	tst.w	r8, #1
 800adfc:	f040 80ee 	bne.w	800afdc <_dtoa_r+0x6bc>
 800ae00:	4649      	mov	r1, r9
 800ae02:	4658      	mov	r0, fp
 800ae04:	f000 fe4a 	bl	800ba9c <_Bfree>
 800ae08:	2300      	movs	r3, #0
 800ae0a:	7033      	strb	r3, [r6, #0]
 800ae0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ae0e:	3701      	adds	r7, #1
 800ae10:	601f      	str	r7, [r3, #0]
 800ae12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	f000 831d 	beq.w	800b454 <_dtoa_r+0xb34>
 800ae1a:	601e      	str	r6, [r3, #0]
 800ae1c:	e31a      	b.n	800b454 <_dtoa_r+0xb34>
 800ae1e:	07e2      	lsls	r2, r4, #31
 800ae20:	d505      	bpl.n	800ae2e <_dtoa_r+0x50e>
 800ae22:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ae26:	f7f5 fbff 	bl	8000628 <__aeabi_dmul>
 800ae2a:	3601      	adds	r6, #1
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	1064      	asrs	r4, r4, #1
 800ae30:	3508      	adds	r5, #8
 800ae32:	e73f      	b.n	800acb4 <_dtoa_r+0x394>
 800ae34:	2602      	movs	r6, #2
 800ae36:	e742      	b.n	800acbe <_dtoa_r+0x39e>
 800ae38:	9c07      	ldr	r4, [sp, #28]
 800ae3a:	9704      	str	r7, [sp, #16]
 800ae3c:	e761      	b.n	800ad02 <_dtoa_r+0x3e2>
 800ae3e:	4b27      	ldr	r3, [pc, #156]	@ (800aedc <_dtoa_r+0x5bc>)
 800ae40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ae42:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ae46:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ae4a:	4454      	add	r4, sl
 800ae4c:	2900      	cmp	r1, #0
 800ae4e:	d053      	beq.n	800aef8 <_dtoa_r+0x5d8>
 800ae50:	4928      	ldr	r1, [pc, #160]	@ (800aef4 <_dtoa_r+0x5d4>)
 800ae52:	2000      	movs	r0, #0
 800ae54:	f7f5 fd12 	bl	800087c <__aeabi_ddiv>
 800ae58:	4633      	mov	r3, r6
 800ae5a:	462a      	mov	r2, r5
 800ae5c:	f7f5 fa2c 	bl	80002b8 <__aeabi_dsub>
 800ae60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ae64:	4656      	mov	r6, sl
 800ae66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae6a:	f7f5 fe8d 	bl	8000b88 <__aeabi_d2iz>
 800ae6e:	4605      	mov	r5, r0
 800ae70:	f7f5 fb70 	bl	8000554 <__aeabi_i2d>
 800ae74:	4602      	mov	r2, r0
 800ae76:	460b      	mov	r3, r1
 800ae78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae7c:	f7f5 fa1c 	bl	80002b8 <__aeabi_dsub>
 800ae80:	3530      	adds	r5, #48	@ 0x30
 800ae82:	4602      	mov	r2, r0
 800ae84:	460b      	mov	r3, r1
 800ae86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae8a:	f806 5b01 	strb.w	r5, [r6], #1
 800ae8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ae92:	f7f5 fe3b 	bl	8000b0c <__aeabi_dcmplt>
 800ae96:	2800      	cmp	r0, #0
 800ae98:	d171      	bne.n	800af7e <_dtoa_r+0x65e>
 800ae9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae9e:	4911      	ldr	r1, [pc, #68]	@ (800aee4 <_dtoa_r+0x5c4>)
 800aea0:	2000      	movs	r0, #0
 800aea2:	f7f5 fa09 	bl	80002b8 <__aeabi_dsub>
 800aea6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aeaa:	f7f5 fe2f 	bl	8000b0c <__aeabi_dcmplt>
 800aeae:	2800      	cmp	r0, #0
 800aeb0:	f040 8095 	bne.w	800afde <_dtoa_r+0x6be>
 800aeb4:	42a6      	cmp	r6, r4
 800aeb6:	f43f af50 	beq.w	800ad5a <_dtoa_r+0x43a>
 800aeba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800aebe:	4b0a      	ldr	r3, [pc, #40]	@ (800aee8 <_dtoa_r+0x5c8>)
 800aec0:	2200      	movs	r2, #0
 800aec2:	f7f5 fbb1 	bl	8000628 <__aeabi_dmul>
 800aec6:	4b08      	ldr	r3, [pc, #32]	@ (800aee8 <_dtoa_r+0x5c8>)
 800aec8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aecc:	2200      	movs	r2, #0
 800aece:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aed2:	f7f5 fba9 	bl	8000628 <__aeabi_dmul>
 800aed6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aeda:	e7c4      	b.n	800ae66 <_dtoa_r+0x546>
 800aedc:	0800d570 	.word	0x0800d570
 800aee0:	0800d548 	.word	0x0800d548
 800aee4:	3ff00000 	.word	0x3ff00000
 800aee8:	40240000 	.word	0x40240000
 800aeec:	401c0000 	.word	0x401c0000
 800aef0:	40140000 	.word	0x40140000
 800aef4:	3fe00000 	.word	0x3fe00000
 800aef8:	4631      	mov	r1, r6
 800aefa:	4628      	mov	r0, r5
 800aefc:	f7f5 fb94 	bl	8000628 <__aeabi_dmul>
 800af00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800af04:	9415      	str	r4, [sp, #84]	@ 0x54
 800af06:	4656      	mov	r6, sl
 800af08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af0c:	f7f5 fe3c 	bl	8000b88 <__aeabi_d2iz>
 800af10:	4605      	mov	r5, r0
 800af12:	f7f5 fb1f 	bl	8000554 <__aeabi_i2d>
 800af16:	4602      	mov	r2, r0
 800af18:	460b      	mov	r3, r1
 800af1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af1e:	f7f5 f9cb 	bl	80002b8 <__aeabi_dsub>
 800af22:	3530      	adds	r5, #48	@ 0x30
 800af24:	f806 5b01 	strb.w	r5, [r6], #1
 800af28:	4602      	mov	r2, r0
 800af2a:	460b      	mov	r3, r1
 800af2c:	42a6      	cmp	r6, r4
 800af2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af32:	f04f 0200 	mov.w	r2, #0
 800af36:	d124      	bne.n	800af82 <_dtoa_r+0x662>
 800af38:	4bac      	ldr	r3, [pc, #688]	@ (800b1ec <_dtoa_r+0x8cc>)
 800af3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800af3e:	f7f5 f9bd 	bl	80002bc <__adddf3>
 800af42:	4602      	mov	r2, r0
 800af44:	460b      	mov	r3, r1
 800af46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af4a:	f7f5 fdfd 	bl	8000b48 <__aeabi_dcmpgt>
 800af4e:	2800      	cmp	r0, #0
 800af50:	d145      	bne.n	800afde <_dtoa_r+0x6be>
 800af52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800af56:	49a5      	ldr	r1, [pc, #660]	@ (800b1ec <_dtoa_r+0x8cc>)
 800af58:	2000      	movs	r0, #0
 800af5a:	f7f5 f9ad 	bl	80002b8 <__aeabi_dsub>
 800af5e:	4602      	mov	r2, r0
 800af60:	460b      	mov	r3, r1
 800af62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af66:	f7f5 fdd1 	bl	8000b0c <__aeabi_dcmplt>
 800af6a:	2800      	cmp	r0, #0
 800af6c:	f43f aef5 	beq.w	800ad5a <_dtoa_r+0x43a>
 800af70:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800af72:	1e73      	subs	r3, r6, #1
 800af74:	9315      	str	r3, [sp, #84]	@ 0x54
 800af76:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800af7a:	2b30      	cmp	r3, #48	@ 0x30
 800af7c:	d0f8      	beq.n	800af70 <_dtoa_r+0x650>
 800af7e:	9f04      	ldr	r7, [sp, #16]
 800af80:	e73e      	b.n	800ae00 <_dtoa_r+0x4e0>
 800af82:	4b9b      	ldr	r3, [pc, #620]	@ (800b1f0 <_dtoa_r+0x8d0>)
 800af84:	f7f5 fb50 	bl	8000628 <__aeabi_dmul>
 800af88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af8c:	e7bc      	b.n	800af08 <_dtoa_r+0x5e8>
 800af8e:	d10c      	bne.n	800afaa <_dtoa_r+0x68a>
 800af90:	4b98      	ldr	r3, [pc, #608]	@ (800b1f4 <_dtoa_r+0x8d4>)
 800af92:	2200      	movs	r2, #0
 800af94:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af98:	f7f5 fb46 	bl	8000628 <__aeabi_dmul>
 800af9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800afa0:	f7f5 fdc8 	bl	8000b34 <__aeabi_dcmpge>
 800afa4:	2800      	cmp	r0, #0
 800afa6:	f000 8157 	beq.w	800b258 <_dtoa_r+0x938>
 800afaa:	2400      	movs	r4, #0
 800afac:	4625      	mov	r5, r4
 800afae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afb0:	43db      	mvns	r3, r3
 800afb2:	9304      	str	r3, [sp, #16]
 800afb4:	4656      	mov	r6, sl
 800afb6:	2700      	movs	r7, #0
 800afb8:	4621      	mov	r1, r4
 800afba:	4658      	mov	r0, fp
 800afbc:	f000 fd6e 	bl	800ba9c <_Bfree>
 800afc0:	2d00      	cmp	r5, #0
 800afc2:	d0dc      	beq.n	800af7e <_dtoa_r+0x65e>
 800afc4:	b12f      	cbz	r7, 800afd2 <_dtoa_r+0x6b2>
 800afc6:	42af      	cmp	r7, r5
 800afc8:	d003      	beq.n	800afd2 <_dtoa_r+0x6b2>
 800afca:	4639      	mov	r1, r7
 800afcc:	4658      	mov	r0, fp
 800afce:	f000 fd65 	bl	800ba9c <_Bfree>
 800afd2:	4629      	mov	r1, r5
 800afd4:	4658      	mov	r0, fp
 800afd6:	f000 fd61 	bl	800ba9c <_Bfree>
 800afda:	e7d0      	b.n	800af7e <_dtoa_r+0x65e>
 800afdc:	9704      	str	r7, [sp, #16]
 800afde:	4633      	mov	r3, r6
 800afe0:	461e      	mov	r6, r3
 800afe2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800afe6:	2a39      	cmp	r2, #57	@ 0x39
 800afe8:	d107      	bne.n	800affa <_dtoa_r+0x6da>
 800afea:	459a      	cmp	sl, r3
 800afec:	d1f8      	bne.n	800afe0 <_dtoa_r+0x6c0>
 800afee:	9a04      	ldr	r2, [sp, #16]
 800aff0:	3201      	adds	r2, #1
 800aff2:	9204      	str	r2, [sp, #16]
 800aff4:	2230      	movs	r2, #48	@ 0x30
 800aff6:	f88a 2000 	strb.w	r2, [sl]
 800affa:	781a      	ldrb	r2, [r3, #0]
 800affc:	3201      	adds	r2, #1
 800affe:	701a      	strb	r2, [r3, #0]
 800b000:	e7bd      	b.n	800af7e <_dtoa_r+0x65e>
 800b002:	4b7b      	ldr	r3, [pc, #492]	@ (800b1f0 <_dtoa_r+0x8d0>)
 800b004:	2200      	movs	r2, #0
 800b006:	f7f5 fb0f 	bl	8000628 <__aeabi_dmul>
 800b00a:	2200      	movs	r2, #0
 800b00c:	2300      	movs	r3, #0
 800b00e:	4604      	mov	r4, r0
 800b010:	460d      	mov	r5, r1
 800b012:	f7f5 fd71 	bl	8000af8 <__aeabi_dcmpeq>
 800b016:	2800      	cmp	r0, #0
 800b018:	f43f aebb 	beq.w	800ad92 <_dtoa_r+0x472>
 800b01c:	e6f0      	b.n	800ae00 <_dtoa_r+0x4e0>
 800b01e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b020:	2a00      	cmp	r2, #0
 800b022:	f000 80db 	beq.w	800b1dc <_dtoa_r+0x8bc>
 800b026:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b028:	2a01      	cmp	r2, #1
 800b02a:	f300 80bf 	bgt.w	800b1ac <_dtoa_r+0x88c>
 800b02e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b030:	2a00      	cmp	r2, #0
 800b032:	f000 80b7 	beq.w	800b1a4 <_dtoa_r+0x884>
 800b036:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b03a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b03c:	4646      	mov	r6, r8
 800b03e:	9a08      	ldr	r2, [sp, #32]
 800b040:	2101      	movs	r1, #1
 800b042:	441a      	add	r2, r3
 800b044:	4658      	mov	r0, fp
 800b046:	4498      	add	r8, r3
 800b048:	9208      	str	r2, [sp, #32]
 800b04a:	f000 fddb 	bl	800bc04 <__i2b>
 800b04e:	4605      	mov	r5, r0
 800b050:	b15e      	cbz	r6, 800b06a <_dtoa_r+0x74a>
 800b052:	9b08      	ldr	r3, [sp, #32]
 800b054:	2b00      	cmp	r3, #0
 800b056:	dd08      	ble.n	800b06a <_dtoa_r+0x74a>
 800b058:	42b3      	cmp	r3, r6
 800b05a:	9a08      	ldr	r2, [sp, #32]
 800b05c:	bfa8      	it	ge
 800b05e:	4633      	movge	r3, r6
 800b060:	eba8 0803 	sub.w	r8, r8, r3
 800b064:	1af6      	subs	r6, r6, r3
 800b066:	1ad3      	subs	r3, r2, r3
 800b068:	9308      	str	r3, [sp, #32]
 800b06a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b06c:	b1f3      	cbz	r3, 800b0ac <_dtoa_r+0x78c>
 800b06e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b070:	2b00      	cmp	r3, #0
 800b072:	f000 80b7 	beq.w	800b1e4 <_dtoa_r+0x8c4>
 800b076:	b18c      	cbz	r4, 800b09c <_dtoa_r+0x77c>
 800b078:	4629      	mov	r1, r5
 800b07a:	4622      	mov	r2, r4
 800b07c:	4658      	mov	r0, fp
 800b07e:	f000 fe81 	bl	800bd84 <__pow5mult>
 800b082:	464a      	mov	r2, r9
 800b084:	4601      	mov	r1, r0
 800b086:	4605      	mov	r5, r0
 800b088:	4658      	mov	r0, fp
 800b08a:	f000 fdd1 	bl	800bc30 <__multiply>
 800b08e:	4649      	mov	r1, r9
 800b090:	9004      	str	r0, [sp, #16]
 800b092:	4658      	mov	r0, fp
 800b094:	f000 fd02 	bl	800ba9c <_Bfree>
 800b098:	9b04      	ldr	r3, [sp, #16]
 800b09a:	4699      	mov	r9, r3
 800b09c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b09e:	1b1a      	subs	r2, r3, r4
 800b0a0:	d004      	beq.n	800b0ac <_dtoa_r+0x78c>
 800b0a2:	4649      	mov	r1, r9
 800b0a4:	4658      	mov	r0, fp
 800b0a6:	f000 fe6d 	bl	800bd84 <__pow5mult>
 800b0aa:	4681      	mov	r9, r0
 800b0ac:	2101      	movs	r1, #1
 800b0ae:	4658      	mov	r0, fp
 800b0b0:	f000 fda8 	bl	800bc04 <__i2b>
 800b0b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0b6:	4604      	mov	r4, r0
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	f000 81cf 	beq.w	800b45c <_dtoa_r+0xb3c>
 800b0be:	461a      	mov	r2, r3
 800b0c0:	4601      	mov	r1, r0
 800b0c2:	4658      	mov	r0, fp
 800b0c4:	f000 fe5e 	bl	800bd84 <__pow5mult>
 800b0c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0ca:	2b01      	cmp	r3, #1
 800b0cc:	4604      	mov	r4, r0
 800b0ce:	f300 8095 	bgt.w	800b1fc <_dtoa_r+0x8dc>
 800b0d2:	9b02      	ldr	r3, [sp, #8]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	f040 8087 	bne.w	800b1e8 <_dtoa_r+0x8c8>
 800b0da:	9b03      	ldr	r3, [sp, #12]
 800b0dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	f040 8089 	bne.w	800b1f8 <_dtoa_r+0x8d8>
 800b0e6:	9b03      	ldr	r3, [sp, #12]
 800b0e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b0ec:	0d1b      	lsrs	r3, r3, #20
 800b0ee:	051b      	lsls	r3, r3, #20
 800b0f0:	b12b      	cbz	r3, 800b0fe <_dtoa_r+0x7de>
 800b0f2:	9b08      	ldr	r3, [sp, #32]
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	9308      	str	r3, [sp, #32]
 800b0f8:	f108 0801 	add.w	r8, r8, #1
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800b100:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b102:	2b00      	cmp	r3, #0
 800b104:	f000 81b0 	beq.w	800b468 <_dtoa_r+0xb48>
 800b108:	6923      	ldr	r3, [r4, #16]
 800b10a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b10e:	6918      	ldr	r0, [r3, #16]
 800b110:	f000 fd2c 	bl	800bb6c <__hi0bits>
 800b114:	f1c0 0020 	rsb	r0, r0, #32
 800b118:	9b08      	ldr	r3, [sp, #32]
 800b11a:	4418      	add	r0, r3
 800b11c:	f010 001f 	ands.w	r0, r0, #31
 800b120:	d077      	beq.n	800b212 <_dtoa_r+0x8f2>
 800b122:	f1c0 0320 	rsb	r3, r0, #32
 800b126:	2b04      	cmp	r3, #4
 800b128:	dd6b      	ble.n	800b202 <_dtoa_r+0x8e2>
 800b12a:	9b08      	ldr	r3, [sp, #32]
 800b12c:	f1c0 001c 	rsb	r0, r0, #28
 800b130:	4403      	add	r3, r0
 800b132:	4480      	add	r8, r0
 800b134:	4406      	add	r6, r0
 800b136:	9308      	str	r3, [sp, #32]
 800b138:	f1b8 0f00 	cmp.w	r8, #0
 800b13c:	dd05      	ble.n	800b14a <_dtoa_r+0x82a>
 800b13e:	4649      	mov	r1, r9
 800b140:	4642      	mov	r2, r8
 800b142:	4658      	mov	r0, fp
 800b144:	f000 fe78 	bl	800be38 <__lshift>
 800b148:	4681      	mov	r9, r0
 800b14a:	9b08      	ldr	r3, [sp, #32]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	dd05      	ble.n	800b15c <_dtoa_r+0x83c>
 800b150:	4621      	mov	r1, r4
 800b152:	461a      	mov	r2, r3
 800b154:	4658      	mov	r0, fp
 800b156:	f000 fe6f 	bl	800be38 <__lshift>
 800b15a:	4604      	mov	r4, r0
 800b15c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d059      	beq.n	800b216 <_dtoa_r+0x8f6>
 800b162:	4621      	mov	r1, r4
 800b164:	4648      	mov	r0, r9
 800b166:	f000 fed3 	bl	800bf10 <__mcmp>
 800b16a:	2800      	cmp	r0, #0
 800b16c:	da53      	bge.n	800b216 <_dtoa_r+0x8f6>
 800b16e:	1e7b      	subs	r3, r7, #1
 800b170:	9304      	str	r3, [sp, #16]
 800b172:	4649      	mov	r1, r9
 800b174:	2300      	movs	r3, #0
 800b176:	220a      	movs	r2, #10
 800b178:	4658      	mov	r0, fp
 800b17a:	f000 fcb1 	bl	800bae0 <__multadd>
 800b17e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b180:	4681      	mov	r9, r0
 800b182:	2b00      	cmp	r3, #0
 800b184:	f000 8172 	beq.w	800b46c <_dtoa_r+0xb4c>
 800b188:	2300      	movs	r3, #0
 800b18a:	4629      	mov	r1, r5
 800b18c:	220a      	movs	r2, #10
 800b18e:	4658      	mov	r0, fp
 800b190:	f000 fca6 	bl	800bae0 <__multadd>
 800b194:	9b00      	ldr	r3, [sp, #0]
 800b196:	2b00      	cmp	r3, #0
 800b198:	4605      	mov	r5, r0
 800b19a:	dc67      	bgt.n	800b26c <_dtoa_r+0x94c>
 800b19c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b19e:	2b02      	cmp	r3, #2
 800b1a0:	dc41      	bgt.n	800b226 <_dtoa_r+0x906>
 800b1a2:	e063      	b.n	800b26c <_dtoa_r+0x94c>
 800b1a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b1a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b1aa:	e746      	b.n	800b03a <_dtoa_r+0x71a>
 800b1ac:	9b07      	ldr	r3, [sp, #28]
 800b1ae:	1e5c      	subs	r4, r3, #1
 800b1b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1b2:	42a3      	cmp	r3, r4
 800b1b4:	bfbf      	itttt	lt
 800b1b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b1b8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b1ba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b1bc:	1ae3      	sublt	r3, r4, r3
 800b1be:	bfb4      	ite	lt
 800b1c0:	18d2      	addlt	r2, r2, r3
 800b1c2:	1b1c      	subge	r4, r3, r4
 800b1c4:	9b07      	ldr	r3, [sp, #28]
 800b1c6:	bfbc      	itt	lt
 800b1c8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b1ca:	2400      	movlt	r4, #0
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	bfb5      	itete	lt
 800b1d0:	eba8 0603 	sublt.w	r6, r8, r3
 800b1d4:	9b07      	ldrge	r3, [sp, #28]
 800b1d6:	2300      	movlt	r3, #0
 800b1d8:	4646      	movge	r6, r8
 800b1da:	e730      	b.n	800b03e <_dtoa_r+0x71e>
 800b1dc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b1de:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b1e0:	4646      	mov	r6, r8
 800b1e2:	e735      	b.n	800b050 <_dtoa_r+0x730>
 800b1e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b1e6:	e75c      	b.n	800b0a2 <_dtoa_r+0x782>
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	e788      	b.n	800b0fe <_dtoa_r+0x7de>
 800b1ec:	3fe00000 	.word	0x3fe00000
 800b1f0:	40240000 	.word	0x40240000
 800b1f4:	40140000 	.word	0x40140000
 800b1f8:	9b02      	ldr	r3, [sp, #8]
 800b1fa:	e780      	b.n	800b0fe <_dtoa_r+0x7de>
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800b200:	e782      	b.n	800b108 <_dtoa_r+0x7e8>
 800b202:	d099      	beq.n	800b138 <_dtoa_r+0x818>
 800b204:	9a08      	ldr	r2, [sp, #32]
 800b206:	331c      	adds	r3, #28
 800b208:	441a      	add	r2, r3
 800b20a:	4498      	add	r8, r3
 800b20c:	441e      	add	r6, r3
 800b20e:	9208      	str	r2, [sp, #32]
 800b210:	e792      	b.n	800b138 <_dtoa_r+0x818>
 800b212:	4603      	mov	r3, r0
 800b214:	e7f6      	b.n	800b204 <_dtoa_r+0x8e4>
 800b216:	9b07      	ldr	r3, [sp, #28]
 800b218:	9704      	str	r7, [sp, #16]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	dc20      	bgt.n	800b260 <_dtoa_r+0x940>
 800b21e:	9300      	str	r3, [sp, #0]
 800b220:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b222:	2b02      	cmp	r3, #2
 800b224:	dd1e      	ble.n	800b264 <_dtoa_r+0x944>
 800b226:	9b00      	ldr	r3, [sp, #0]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	f47f aec0 	bne.w	800afae <_dtoa_r+0x68e>
 800b22e:	4621      	mov	r1, r4
 800b230:	2205      	movs	r2, #5
 800b232:	4658      	mov	r0, fp
 800b234:	f000 fc54 	bl	800bae0 <__multadd>
 800b238:	4601      	mov	r1, r0
 800b23a:	4604      	mov	r4, r0
 800b23c:	4648      	mov	r0, r9
 800b23e:	f000 fe67 	bl	800bf10 <__mcmp>
 800b242:	2800      	cmp	r0, #0
 800b244:	f77f aeb3 	ble.w	800afae <_dtoa_r+0x68e>
 800b248:	4656      	mov	r6, sl
 800b24a:	2331      	movs	r3, #49	@ 0x31
 800b24c:	f806 3b01 	strb.w	r3, [r6], #1
 800b250:	9b04      	ldr	r3, [sp, #16]
 800b252:	3301      	adds	r3, #1
 800b254:	9304      	str	r3, [sp, #16]
 800b256:	e6ae      	b.n	800afb6 <_dtoa_r+0x696>
 800b258:	9c07      	ldr	r4, [sp, #28]
 800b25a:	9704      	str	r7, [sp, #16]
 800b25c:	4625      	mov	r5, r4
 800b25e:	e7f3      	b.n	800b248 <_dtoa_r+0x928>
 800b260:	9b07      	ldr	r3, [sp, #28]
 800b262:	9300      	str	r3, [sp, #0]
 800b264:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b266:	2b00      	cmp	r3, #0
 800b268:	f000 8104 	beq.w	800b474 <_dtoa_r+0xb54>
 800b26c:	2e00      	cmp	r6, #0
 800b26e:	dd05      	ble.n	800b27c <_dtoa_r+0x95c>
 800b270:	4629      	mov	r1, r5
 800b272:	4632      	mov	r2, r6
 800b274:	4658      	mov	r0, fp
 800b276:	f000 fddf 	bl	800be38 <__lshift>
 800b27a:	4605      	mov	r5, r0
 800b27c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d05a      	beq.n	800b338 <_dtoa_r+0xa18>
 800b282:	6869      	ldr	r1, [r5, #4]
 800b284:	4658      	mov	r0, fp
 800b286:	f000 fbc9 	bl	800ba1c <_Balloc>
 800b28a:	4606      	mov	r6, r0
 800b28c:	b928      	cbnz	r0, 800b29a <_dtoa_r+0x97a>
 800b28e:	4b84      	ldr	r3, [pc, #528]	@ (800b4a0 <_dtoa_r+0xb80>)
 800b290:	4602      	mov	r2, r0
 800b292:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b296:	f7ff bb5a 	b.w	800a94e <_dtoa_r+0x2e>
 800b29a:	692a      	ldr	r2, [r5, #16]
 800b29c:	3202      	adds	r2, #2
 800b29e:	0092      	lsls	r2, r2, #2
 800b2a0:	f105 010c 	add.w	r1, r5, #12
 800b2a4:	300c      	adds	r0, #12
 800b2a6:	f001 f82f 	bl	800c308 <memcpy>
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	4631      	mov	r1, r6
 800b2ae:	4658      	mov	r0, fp
 800b2b0:	f000 fdc2 	bl	800be38 <__lshift>
 800b2b4:	f10a 0301 	add.w	r3, sl, #1
 800b2b8:	9307      	str	r3, [sp, #28]
 800b2ba:	9b00      	ldr	r3, [sp, #0]
 800b2bc:	4453      	add	r3, sl
 800b2be:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b2c0:	9b02      	ldr	r3, [sp, #8]
 800b2c2:	f003 0301 	and.w	r3, r3, #1
 800b2c6:	462f      	mov	r7, r5
 800b2c8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2ca:	4605      	mov	r5, r0
 800b2cc:	9b07      	ldr	r3, [sp, #28]
 800b2ce:	4621      	mov	r1, r4
 800b2d0:	3b01      	subs	r3, #1
 800b2d2:	4648      	mov	r0, r9
 800b2d4:	9300      	str	r3, [sp, #0]
 800b2d6:	f7ff fa9b 	bl	800a810 <quorem>
 800b2da:	4639      	mov	r1, r7
 800b2dc:	9002      	str	r0, [sp, #8]
 800b2de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b2e2:	4648      	mov	r0, r9
 800b2e4:	f000 fe14 	bl	800bf10 <__mcmp>
 800b2e8:	462a      	mov	r2, r5
 800b2ea:	9008      	str	r0, [sp, #32]
 800b2ec:	4621      	mov	r1, r4
 800b2ee:	4658      	mov	r0, fp
 800b2f0:	f000 fe2a 	bl	800bf48 <__mdiff>
 800b2f4:	68c2      	ldr	r2, [r0, #12]
 800b2f6:	4606      	mov	r6, r0
 800b2f8:	bb02      	cbnz	r2, 800b33c <_dtoa_r+0xa1c>
 800b2fa:	4601      	mov	r1, r0
 800b2fc:	4648      	mov	r0, r9
 800b2fe:	f000 fe07 	bl	800bf10 <__mcmp>
 800b302:	4602      	mov	r2, r0
 800b304:	4631      	mov	r1, r6
 800b306:	4658      	mov	r0, fp
 800b308:	920e      	str	r2, [sp, #56]	@ 0x38
 800b30a:	f000 fbc7 	bl	800ba9c <_Bfree>
 800b30e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b310:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b312:	9e07      	ldr	r6, [sp, #28]
 800b314:	ea43 0102 	orr.w	r1, r3, r2
 800b318:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b31a:	4319      	orrs	r1, r3
 800b31c:	d110      	bne.n	800b340 <_dtoa_r+0xa20>
 800b31e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b322:	d029      	beq.n	800b378 <_dtoa_r+0xa58>
 800b324:	9b08      	ldr	r3, [sp, #32]
 800b326:	2b00      	cmp	r3, #0
 800b328:	dd02      	ble.n	800b330 <_dtoa_r+0xa10>
 800b32a:	9b02      	ldr	r3, [sp, #8]
 800b32c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b330:	9b00      	ldr	r3, [sp, #0]
 800b332:	f883 8000 	strb.w	r8, [r3]
 800b336:	e63f      	b.n	800afb8 <_dtoa_r+0x698>
 800b338:	4628      	mov	r0, r5
 800b33a:	e7bb      	b.n	800b2b4 <_dtoa_r+0x994>
 800b33c:	2201      	movs	r2, #1
 800b33e:	e7e1      	b.n	800b304 <_dtoa_r+0x9e4>
 800b340:	9b08      	ldr	r3, [sp, #32]
 800b342:	2b00      	cmp	r3, #0
 800b344:	db04      	blt.n	800b350 <_dtoa_r+0xa30>
 800b346:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b348:	430b      	orrs	r3, r1
 800b34a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b34c:	430b      	orrs	r3, r1
 800b34e:	d120      	bne.n	800b392 <_dtoa_r+0xa72>
 800b350:	2a00      	cmp	r2, #0
 800b352:	dded      	ble.n	800b330 <_dtoa_r+0xa10>
 800b354:	4649      	mov	r1, r9
 800b356:	2201      	movs	r2, #1
 800b358:	4658      	mov	r0, fp
 800b35a:	f000 fd6d 	bl	800be38 <__lshift>
 800b35e:	4621      	mov	r1, r4
 800b360:	4681      	mov	r9, r0
 800b362:	f000 fdd5 	bl	800bf10 <__mcmp>
 800b366:	2800      	cmp	r0, #0
 800b368:	dc03      	bgt.n	800b372 <_dtoa_r+0xa52>
 800b36a:	d1e1      	bne.n	800b330 <_dtoa_r+0xa10>
 800b36c:	f018 0f01 	tst.w	r8, #1
 800b370:	d0de      	beq.n	800b330 <_dtoa_r+0xa10>
 800b372:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b376:	d1d8      	bne.n	800b32a <_dtoa_r+0xa0a>
 800b378:	9a00      	ldr	r2, [sp, #0]
 800b37a:	2339      	movs	r3, #57	@ 0x39
 800b37c:	7013      	strb	r3, [r2, #0]
 800b37e:	4633      	mov	r3, r6
 800b380:	461e      	mov	r6, r3
 800b382:	3b01      	subs	r3, #1
 800b384:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b388:	2a39      	cmp	r2, #57	@ 0x39
 800b38a:	d052      	beq.n	800b432 <_dtoa_r+0xb12>
 800b38c:	3201      	adds	r2, #1
 800b38e:	701a      	strb	r2, [r3, #0]
 800b390:	e612      	b.n	800afb8 <_dtoa_r+0x698>
 800b392:	2a00      	cmp	r2, #0
 800b394:	dd07      	ble.n	800b3a6 <_dtoa_r+0xa86>
 800b396:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b39a:	d0ed      	beq.n	800b378 <_dtoa_r+0xa58>
 800b39c:	9a00      	ldr	r2, [sp, #0]
 800b39e:	f108 0301 	add.w	r3, r8, #1
 800b3a2:	7013      	strb	r3, [r2, #0]
 800b3a4:	e608      	b.n	800afb8 <_dtoa_r+0x698>
 800b3a6:	9b07      	ldr	r3, [sp, #28]
 800b3a8:	9a07      	ldr	r2, [sp, #28]
 800b3aa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b3ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	d028      	beq.n	800b406 <_dtoa_r+0xae6>
 800b3b4:	4649      	mov	r1, r9
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	220a      	movs	r2, #10
 800b3ba:	4658      	mov	r0, fp
 800b3bc:	f000 fb90 	bl	800bae0 <__multadd>
 800b3c0:	42af      	cmp	r7, r5
 800b3c2:	4681      	mov	r9, r0
 800b3c4:	f04f 0300 	mov.w	r3, #0
 800b3c8:	f04f 020a 	mov.w	r2, #10
 800b3cc:	4639      	mov	r1, r7
 800b3ce:	4658      	mov	r0, fp
 800b3d0:	d107      	bne.n	800b3e2 <_dtoa_r+0xac2>
 800b3d2:	f000 fb85 	bl	800bae0 <__multadd>
 800b3d6:	4607      	mov	r7, r0
 800b3d8:	4605      	mov	r5, r0
 800b3da:	9b07      	ldr	r3, [sp, #28]
 800b3dc:	3301      	adds	r3, #1
 800b3de:	9307      	str	r3, [sp, #28]
 800b3e0:	e774      	b.n	800b2cc <_dtoa_r+0x9ac>
 800b3e2:	f000 fb7d 	bl	800bae0 <__multadd>
 800b3e6:	4629      	mov	r1, r5
 800b3e8:	4607      	mov	r7, r0
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	220a      	movs	r2, #10
 800b3ee:	4658      	mov	r0, fp
 800b3f0:	f000 fb76 	bl	800bae0 <__multadd>
 800b3f4:	4605      	mov	r5, r0
 800b3f6:	e7f0      	b.n	800b3da <_dtoa_r+0xaba>
 800b3f8:	9b00      	ldr	r3, [sp, #0]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	bfcc      	ite	gt
 800b3fe:	461e      	movgt	r6, r3
 800b400:	2601      	movle	r6, #1
 800b402:	4456      	add	r6, sl
 800b404:	2700      	movs	r7, #0
 800b406:	4649      	mov	r1, r9
 800b408:	2201      	movs	r2, #1
 800b40a:	4658      	mov	r0, fp
 800b40c:	f000 fd14 	bl	800be38 <__lshift>
 800b410:	4621      	mov	r1, r4
 800b412:	4681      	mov	r9, r0
 800b414:	f000 fd7c 	bl	800bf10 <__mcmp>
 800b418:	2800      	cmp	r0, #0
 800b41a:	dcb0      	bgt.n	800b37e <_dtoa_r+0xa5e>
 800b41c:	d102      	bne.n	800b424 <_dtoa_r+0xb04>
 800b41e:	f018 0f01 	tst.w	r8, #1
 800b422:	d1ac      	bne.n	800b37e <_dtoa_r+0xa5e>
 800b424:	4633      	mov	r3, r6
 800b426:	461e      	mov	r6, r3
 800b428:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b42c:	2a30      	cmp	r2, #48	@ 0x30
 800b42e:	d0fa      	beq.n	800b426 <_dtoa_r+0xb06>
 800b430:	e5c2      	b.n	800afb8 <_dtoa_r+0x698>
 800b432:	459a      	cmp	sl, r3
 800b434:	d1a4      	bne.n	800b380 <_dtoa_r+0xa60>
 800b436:	9b04      	ldr	r3, [sp, #16]
 800b438:	3301      	adds	r3, #1
 800b43a:	9304      	str	r3, [sp, #16]
 800b43c:	2331      	movs	r3, #49	@ 0x31
 800b43e:	f88a 3000 	strb.w	r3, [sl]
 800b442:	e5b9      	b.n	800afb8 <_dtoa_r+0x698>
 800b444:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b446:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b4a4 <_dtoa_r+0xb84>
 800b44a:	b11b      	cbz	r3, 800b454 <_dtoa_r+0xb34>
 800b44c:	f10a 0308 	add.w	r3, sl, #8
 800b450:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b452:	6013      	str	r3, [r2, #0]
 800b454:	4650      	mov	r0, sl
 800b456:	b019      	add	sp, #100	@ 0x64
 800b458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b45c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b45e:	2b01      	cmp	r3, #1
 800b460:	f77f ae37 	ble.w	800b0d2 <_dtoa_r+0x7b2>
 800b464:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b466:	930a      	str	r3, [sp, #40]	@ 0x28
 800b468:	2001      	movs	r0, #1
 800b46a:	e655      	b.n	800b118 <_dtoa_r+0x7f8>
 800b46c:	9b00      	ldr	r3, [sp, #0]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	f77f aed6 	ble.w	800b220 <_dtoa_r+0x900>
 800b474:	4656      	mov	r6, sl
 800b476:	4621      	mov	r1, r4
 800b478:	4648      	mov	r0, r9
 800b47a:	f7ff f9c9 	bl	800a810 <quorem>
 800b47e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b482:	f806 8b01 	strb.w	r8, [r6], #1
 800b486:	9b00      	ldr	r3, [sp, #0]
 800b488:	eba6 020a 	sub.w	r2, r6, sl
 800b48c:	4293      	cmp	r3, r2
 800b48e:	ddb3      	ble.n	800b3f8 <_dtoa_r+0xad8>
 800b490:	4649      	mov	r1, r9
 800b492:	2300      	movs	r3, #0
 800b494:	220a      	movs	r2, #10
 800b496:	4658      	mov	r0, fp
 800b498:	f000 fb22 	bl	800bae0 <__multadd>
 800b49c:	4681      	mov	r9, r0
 800b49e:	e7ea      	b.n	800b476 <_dtoa_r+0xb56>
 800b4a0:	0800d4bc 	.word	0x0800d4bc
 800b4a4:	0800d457 	.word	0x0800d457

0800b4a8 <__ssputs_r>:
 800b4a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4ac:	688e      	ldr	r6, [r1, #8]
 800b4ae:	461f      	mov	r7, r3
 800b4b0:	42be      	cmp	r6, r7
 800b4b2:	680b      	ldr	r3, [r1, #0]
 800b4b4:	4682      	mov	sl, r0
 800b4b6:	460c      	mov	r4, r1
 800b4b8:	4690      	mov	r8, r2
 800b4ba:	d82d      	bhi.n	800b518 <__ssputs_r+0x70>
 800b4bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b4c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b4c4:	d026      	beq.n	800b514 <__ssputs_r+0x6c>
 800b4c6:	6965      	ldr	r5, [r4, #20]
 800b4c8:	6909      	ldr	r1, [r1, #16]
 800b4ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4ce:	eba3 0901 	sub.w	r9, r3, r1
 800b4d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b4d6:	1c7b      	adds	r3, r7, #1
 800b4d8:	444b      	add	r3, r9
 800b4da:	106d      	asrs	r5, r5, #1
 800b4dc:	429d      	cmp	r5, r3
 800b4de:	bf38      	it	cc
 800b4e0:	461d      	movcc	r5, r3
 800b4e2:	0553      	lsls	r3, r2, #21
 800b4e4:	d527      	bpl.n	800b536 <__ssputs_r+0x8e>
 800b4e6:	4629      	mov	r1, r5
 800b4e8:	f000 f960 	bl	800b7ac <_malloc_r>
 800b4ec:	4606      	mov	r6, r0
 800b4ee:	b360      	cbz	r0, 800b54a <__ssputs_r+0xa2>
 800b4f0:	6921      	ldr	r1, [r4, #16]
 800b4f2:	464a      	mov	r2, r9
 800b4f4:	f000 ff08 	bl	800c308 <memcpy>
 800b4f8:	89a3      	ldrh	r3, [r4, #12]
 800b4fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b4fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b502:	81a3      	strh	r3, [r4, #12]
 800b504:	6126      	str	r6, [r4, #16]
 800b506:	6165      	str	r5, [r4, #20]
 800b508:	444e      	add	r6, r9
 800b50a:	eba5 0509 	sub.w	r5, r5, r9
 800b50e:	6026      	str	r6, [r4, #0]
 800b510:	60a5      	str	r5, [r4, #8]
 800b512:	463e      	mov	r6, r7
 800b514:	42be      	cmp	r6, r7
 800b516:	d900      	bls.n	800b51a <__ssputs_r+0x72>
 800b518:	463e      	mov	r6, r7
 800b51a:	6820      	ldr	r0, [r4, #0]
 800b51c:	4632      	mov	r2, r6
 800b51e:	4641      	mov	r1, r8
 800b520:	f000 fe82 	bl	800c228 <memmove>
 800b524:	68a3      	ldr	r3, [r4, #8]
 800b526:	1b9b      	subs	r3, r3, r6
 800b528:	60a3      	str	r3, [r4, #8]
 800b52a:	6823      	ldr	r3, [r4, #0]
 800b52c:	4433      	add	r3, r6
 800b52e:	6023      	str	r3, [r4, #0]
 800b530:	2000      	movs	r0, #0
 800b532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b536:	462a      	mov	r2, r5
 800b538:	f000 fe48 	bl	800c1cc <_realloc_r>
 800b53c:	4606      	mov	r6, r0
 800b53e:	2800      	cmp	r0, #0
 800b540:	d1e0      	bne.n	800b504 <__ssputs_r+0x5c>
 800b542:	6921      	ldr	r1, [r4, #16]
 800b544:	4650      	mov	r0, sl
 800b546:	f000 ff09 	bl	800c35c <_free_r>
 800b54a:	230c      	movs	r3, #12
 800b54c:	f8ca 3000 	str.w	r3, [sl]
 800b550:	89a3      	ldrh	r3, [r4, #12]
 800b552:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b556:	81a3      	strh	r3, [r4, #12]
 800b558:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b55c:	e7e9      	b.n	800b532 <__ssputs_r+0x8a>
	...

0800b560 <_svfiprintf_r>:
 800b560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b564:	4698      	mov	r8, r3
 800b566:	898b      	ldrh	r3, [r1, #12]
 800b568:	061b      	lsls	r3, r3, #24
 800b56a:	b09d      	sub	sp, #116	@ 0x74
 800b56c:	4607      	mov	r7, r0
 800b56e:	460d      	mov	r5, r1
 800b570:	4614      	mov	r4, r2
 800b572:	d510      	bpl.n	800b596 <_svfiprintf_r+0x36>
 800b574:	690b      	ldr	r3, [r1, #16]
 800b576:	b973      	cbnz	r3, 800b596 <_svfiprintf_r+0x36>
 800b578:	2140      	movs	r1, #64	@ 0x40
 800b57a:	f000 f917 	bl	800b7ac <_malloc_r>
 800b57e:	6028      	str	r0, [r5, #0]
 800b580:	6128      	str	r0, [r5, #16]
 800b582:	b930      	cbnz	r0, 800b592 <_svfiprintf_r+0x32>
 800b584:	230c      	movs	r3, #12
 800b586:	603b      	str	r3, [r7, #0]
 800b588:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b58c:	b01d      	add	sp, #116	@ 0x74
 800b58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b592:	2340      	movs	r3, #64	@ 0x40
 800b594:	616b      	str	r3, [r5, #20]
 800b596:	2300      	movs	r3, #0
 800b598:	9309      	str	r3, [sp, #36]	@ 0x24
 800b59a:	2320      	movs	r3, #32
 800b59c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b5a0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5a4:	2330      	movs	r3, #48	@ 0x30
 800b5a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b744 <_svfiprintf_r+0x1e4>
 800b5aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b5ae:	f04f 0901 	mov.w	r9, #1
 800b5b2:	4623      	mov	r3, r4
 800b5b4:	469a      	mov	sl, r3
 800b5b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5ba:	b10a      	cbz	r2, 800b5c0 <_svfiprintf_r+0x60>
 800b5bc:	2a25      	cmp	r2, #37	@ 0x25
 800b5be:	d1f9      	bne.n	800b5b4 <_svfiprintf_r+0x54>
 800b5c0:	ebba 0b04 	subs.w	fp, sl, r4
 800b5c4:	d00b      	beq.n	800b5de <_svfiprintf_r+0x7e>
 800b5c6:	465b      	mov	r3, fp
 800b5c8:	4622      	mov	r2, r4
 800b5ca:	4629      	mov	r1, r5
 800b5cc:	4638      	mov	r0, r7
 800b5ce:	f7ff ff6b 	bl	800b4a8 <__ssputs_r>
 800b5d2:	3001      	adds	r0, #1
 800b5d4:	f000 80a7 	beq.w	800b726 <_svfiprintf_r+0x1c6>
 800b5d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b5da:	445a      	add	r2, fp
 800b5dc:	9209      	str	r2, [sp, #36]	@ 0x24
 800b5de:	f89a 3000 	ldrb.w	r3, [sl]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	f000 809f 	beq.w	800b726 <_svfiprintf_r+0x1c6>
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b5ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5f2:	f10a 0a01 	add.w	sl, sl, #1
 800b5f6:	9304      	str	r3, [sp, #16]
 800b5f8:	9307      	str	r3, [sp, #28]
 800b5fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b5fe:	931a      	str	r3, [sp, #104]	@ 0x68
 800b600:	4654      	mov	r4, sl
 800b602:	2205      	movs	r2, #5
 800b604:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b608:	484e      	ldr	r0, [pc, #312]	@ (800b744 <_svfiprintf_r+0x1e4>)
 800b60a:	f7f4 fdf9 	bl	8000200 <memchr>
 800b60e:	9a04      	ldr	r2, [sp, #16]
 800b610:	b9d8      	cbnz	r0, 800b64a <_svfiprintf_r+0xea>
 800b612:	06d0      	lsls	r0, r2, #27
 800b614:	bf44      	itt	mi
 800b616:	2320      	movmi	r3, #32
 800b618:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b61c:	0711      	lsls	r1, r2, #28
 800b61e:	bf44      	itt	mi
 800b620:	232b      	movmi	r3, #43	@ 0x2b
 800b622:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b626:	f89a 3000 	ldrb.w	r3, [sl]
 800b62a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b62c:	d015      	beq.n	800b65a <_svfiprintf_r+0xfa>
 800b62e:	9a07      	ldr	r2, [sp, #28]
 800b630:	4654      	mov	r4, sl
 800b632:	2000      	movs	r0, #0
 800b634:	f04f 0c0a 	mov.w	ip, #10
 800b638:	4621      	mov	r1, r4
 800b63a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b63e:	3b30      	subs	r3, #48	@ 0x30
 800b640:	2b09      	cmp	r3, #9
 800b642:	d94b      	bls.n	800b6dc <_svfiprintf_r+0x17c>
 800b644:	b1b0      	cbz	r0, 800b674 <_svfiprintf_r+0x114>
 800b646:	9207      	str	r2, [sp, #28]
 800b648:	e014      	b.n	800b674 <_svfiprintf_r+0x114>
 800b64a:	eba0 0308 	sub.w	r3, r0, r8
 800b64e:	fa09 f303 	lsl.w	r3, r9, r3
 800b652:	4313      	orrs	r3, r2
 800b654:	9304      	str	r3, [sp, #16]
 800b656:	46a2      	mov	sl, r4
 800b658:	e7d2      	b.n	800b600 <_svfiprintf_r+0xa0>
 800b65a:	9b03      	ldr	r3, [sp, #12]
 800b65c:	1d19      	adds	r1, r3, #4
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	9103      	str	r1, [sp, #12]
 800b662:	2b00      	cmp	r3, #0
 800b664:	bfbb      	ittet	lt
 800b666:	425b      	neglt	r3, r3
 800b668:	f042 0202 	orrlt.w	r2, r2, #2
 800b66c:	9307      	strge	r3, [sp, #28]
 800b66e:	9307      	strlt	r3, [sp, #28]
 800b670:	bfb8      	it	lt
 800b672:	9204      	strlt	r2, [sp, #16]
 800b674:	7823      	ldrb	r3, [r4, #0]
 800b676:	2b2e      	cmp	r3, #46	@ 0x2e
 800b678:	d10a      	bne.n	800b690 <_svfiprintf_r+0x130>
 800b67a:	7863      	ldrb	r3, [r4, #1]
 800b67c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b67e:	d132      	bne.n	800b6e6 <_svfiprintf_r+0x186>
 800b680:	9b03      	ldr	r3, [sp, #12]
 800b682:	1d1a      	adds	r2, r3, #4
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	9203      	str	r2, [sp, #12]
 800b688:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b68c:	3402      	adds	r4, #2
 800b68e:	9305      	str	r3, [sp, #20]
 800b690:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b754 <_svfiprintf_r+0x1f4>
 800b694:	7821      	ldrb	r1, [r4, #0]
 800b696:	2203      	movs	r2, #3
 800b698:	4650      	mov	r0, sl
 800b69a:	f7f4 fdb1 	bl	8000200 <memchr>
 800b69e:	b138      	cbz	r0, 800b6b0 <_svfiprintf_r+0x150>
 800b6a0:	9b04      	ldr	r3, [sp, #16]
 800b6a2:	eba0 000a 	sub.w	r0, r0, sl
 800b6a6:	2240      	movs	r2, #64	@ 0x40
 800b6a8:	4082      	lsls	r2, r0
 800b6aa:	4313      	orrs	r3, r2
 800b6ac:	3401      	adds	r4, #1
 800b6ae:	9304      	str	r3, [sp, #16]
 800b6b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6b4:	4824      	ldr	r0, [pc, #144]	@ (800b748 <_svfiprintf_r+0x1e8>)
 800b6b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b6ba:	2206      	movs	r2, #6
 800b6bc:	f7f4 fda0 	bl	8000200 <memchr>
 800b6c0:	2800      	cmp	r0, #0
 800b6c2:	d036      	beq.n	800b732 <_svfiprintf_r+0x1d2>
 800b6c4:	4b21      	ldr	r3, [pc, #132]	@ (800b74c <_svfiprintf_r+0x1ec>)
 800b6c6:	bb1b      	cbnz	r3, 800b710 <_svfiprintf_r+0x1b0>
 800b6c8:	9b03      	ldr	r3, [sp, #12]
 800b6ca:	3307      	adds	r3, #7
 800b6cc:	f023 0307 	bic.w	r3, r3, #7
 800b6d0:	3308      	adds	r3, #8
 800b6d2:	9303      	str	r3, [sp, #12]
 800b6d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6d6:	4433      	add	r3, r6
 800b6d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6da:	e76a      	b.n	800b5b2 <_svfiprintf_r+0x52>
 800b6dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6e0:	460c      	mov	r4, r1
 800b6e2:	2001      	movs	r0, #1
 800b6e4:	e7a8      	b.n	800b638 <_svfiprintf_r+0xd8>
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	3401      	adds	r4, #1
 800b6ea:	9305      	str	r3, [sp, #20]
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	f04f 0c0a 	mov.w	ip, #10
 800b6f2:	4620      	mov	r0, r4
 800b6f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6f8:	3a30      	subs	r2, #48	@ 0x30
 800b6fa:	2a09      	cmp	r2, #9
 800b6fc:	d903      	bls.n	800b706 <_svfiprintf_r+0x1a6>
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d0c6      	beq.n	800b690 <_svfiprintf_r+0x130>
 800b702:	9105      	str	r1, [sp, #20]
 800b704:	e7c4      	b.n	800b690 <_svfiprintf_r+0x130>
 800b706:	fb0c 2101 	mla	r1, ip, r1, r2
 800b70a:	4604      	mov	r4, r0
 800b70c:	2301      	movs	r3, #1
 800b70e:	e7f0      	b.n	800b6f2 <_svfiprintf_r+0x192>
 800b710:	ab03      	add	r3, sp, #12
 800b712:	9300      	str	r3, [sp, #0]
 800b714:	462a      	mov	r2, r5
 800b716:	4b0e      	ldr	r3, [pc, #56]	@ (800b750 <_svfiprintf_r+0x1f0>)
 800b718:	a904      	add	r1, sp, #16
 800b71a:	4638      	mov	r0, r7
 800b71c:	f7fe faf2 	bl	8009d04 <_printf_float>
 800b720:	1c42      	adds	r2, r0, #1
 800b722:	4606      	mov	r6, r0
 800b724:	d1d6      	bne.n	800b6d4 <_svfiprintf_r+0x174>
 800b726:	89ab      	ldrh	r3, [r5, #12]
 800b728:	065b      	lsls	r3, r3, #25
 800b72a:	f53f af2d 	bmi.w	800b588 <_svfiprintf_r+0x28>
 800b72e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b730:	e72c      	b.n	800b58c <_svfiprintf_r+0x2c>
 800b732:	ab03      	add	r3, sp, #12
 800b734:	9300      	str	r3, [sp, #0]
 800b736:	462a      	mov	r2, r5
 800b738:	4b05      	ldr	r3, [pc, #20]	@ (800b750 <_svfiprintf_r+0x1f0>)
 800b73a:	a904      	add	r1, sp, #16
 800b73c:	4638      	mov	r0, r7
 800b73e:	f7fe fd79 	bl	800a234 <_printf_i>
 800b742:	e7ed      	b.n	800b720 <_svfiprintf_r+0x1c0>
 800b744:	0800d4cd 	.word	0x0800d4cd
 800b748:	0800d4d7 	.word	0x0800d4d7
 800b74c:	08009d05 	.word	0x08009d05
 800b750:	0800b4a9 	.word	0x0800b4a9
 800b754:	0800d4d3 	.word	0x0800d4d3

0800b758 <malloc>:
 800b758:	4b02      	ldr	r3, [pc, #8]	@ (800b764 <malloc+0xc>)
 800b75a:	4601      	mov	r1, r0
 800b75c:	6818      	ldr	r0, [r3, #0]
 800b75e:	f000 b825 	b.w	800b7ac <_malloc_r>
 800b762:	bf00      	nop
 800b764:	200000cc 	.word	0x200000cc

0800b768 <sbrk_aligned>:
 800b768:	b570      	push	{r4, r5, r6, lr}
 800b76a:	4e0f      	ldr	r6, [pc, #60]	@ (800b7a8 <sbrk_aligned+0x40>)
 800b76c:	460c      	mov	r4, r1
 800b76e:	6831      	ldr	r1, [r6, #0]
 800b770:	4605      	mov	r5, r0
 800b772:	b911      	cbnz	r1, 800b77a <sbrk_aligned+0x12>
 800b774:	f000 fda6 	bl	800c2c4 <_sbrk_r>
 800b778:	6030      	str	r0, [r6, #0]
 800b77a:	4621      	mov	r1, r4
 800b77c:	4628      	mov	r0, r5
 800b77e:	f000 fda1 	bl	800c2c4 <_sbrk_r>
 800b782:	1c43      	adds	r3, r0, #1
 800b784:	d103      	bne.n	800b78e <sbrk_aligned+0x26>
 800b786:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b78a:	4620      	mov	r0, r4
 800b78c:	bd70      	pop	{r4, r5, r6, pc}
 800b78e:	1cc4      	adds	r4, r0, #3
 800b790:	f024 0403 	bic.w	r4, r4, #3
 800b794:	42a0      	cmp	r0, r4
 800b796:	d0f8      	beq.n	800b78a <sbrk_aligned+0x22>
 800b798:	1a21      	subs	r1, r4, r0
 800b79a:	4628      	mov	r0, r5
 800b79c:	f000 fd92 	bl	800c2c4 <_sbrk_r>
 800b7a0:	3001      	adds	r0, #1
 800b7a2:	d1f2      	bne.n	800b78a <sbrk_aligned+0x22>
 800b7a4:	e7ef      	b.n	800b786 <sbrk_aligned+0x1e>
 800b7a6:	bf00      	nop
 800b7a8:	200009ac 	.word	0x200009ac

0800b7ac <_malloc_r>:
 800b7ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7b0:	1ccd      	adds	r5, r1, #3
 800b7b2:	f025 0503 	bic.w	r5, r5, #3
 800b7b6:	3508      	adds	r5, #8
 800b7b8:	2d0c      	cmp	r5, #12
 800b7ba:	bf38      	it	cc
 800b7bc:	250c      	movcc	r5, #12
 800b7be:	2d00      	cmp	r5, #0
 800b7c0:	4606      	mov	r6, r0
 800b7c2:	db01      	blt.n	800b7c8 <_malloc_r+0x1c>
 800b7c4:	42a9      	cmp	r1, r5
 800b7c6:	d904      	bls.n	800b7d2 <_malloc_r+0x26>
 800b7c8:	230c      	movs	r3, #12
 800b7ca:	6033      	str	r3, [r6, #0]
 800b7cc:	2000      	movs	r0, #0
 800b7ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b8a8 <_malloc_r+0xfc>
 800b7d6:	f000 f915 	bl	800ba04 <__malloc_lock>
 800b7da:	f8d8 3000 	ldr.w	r3, [r8]
 800b7de:	461c      	mov	r4, r3
 800b7e0:	bb44      	cbnz	r4, 800b834 <_malloc_r+0x88>
 800b7e2:	4629      	mov	r1, r5
 800b7e4:	4630      	mov	r0, r6
 800b7e6:	f7ff ffbf 	bl	800b768 <sbrk_aligned>
 800b7ea:	1c43      	adds	r3, r0, #1
 800b7ec:	4604      	mov	r4, r0
 800b7ee:	d158      	bne.n	800b8a2 <_malloc_r+0xf6>
 800b7f0:	f8d8 4000 	ldr.w	r4, [r8]
 800b7f4:	4627      	mov	r7, r4
 800b7f6:	2f00      	cmp	r7, #0
 800b7f8:	d143      	bne.n	800b882 <_malloc_r+0xd6>
 800b7fa:	2c00      	cmp	r4, #0
 800b7fc:	d04b      	beq.n	800b896 <_malloc_r+0xea>
 800b7fe:	6823      	ldr	r3, [r4, #0]
 800b800:	4639      	mov	r1, r7
 800b802:	4630      	mov	r0, r6
 800b804:	eb04 0903 	add.w	r9, r4, r3
 800b808:	f000 fd5c 	bl	800c2c4 <_sbrk_r>
 800b80c:	4581      	cmp	r9, r0
 800b80e:	d142      	bne.n	800b896 <_malloc_r+0xea>
 800b810:	6821      	ldr	r1, [r4, #0]
 800b812:	1a6d      	subs	r5, r5, r1
 800b814:	4629      	mov	r1, r5
 800b816:	4630      	mov	r0, r6
 800b818:	f7ff ffa6 	bl	800b768 <sbrk_aligned>
 800b81c:	3001      	adds	r0, #1
 800b81e:	d03a      	beq.n	800b896 <_malloc_r+0xea>
 800b820:	6823      	ldr	r3, [r4, #0]
 800b822:	442b      	add	r3, r5
 800b824:	6023      	str	r3, [r4, #0]
 800b826:	f8d8 3000 	ldr.w	r3, [r8]
 800b82a:	685a      	ldr	r2, [r3, #4]
 800b82c:	bb62      	cbnz	r2, 800b888 <_malloc_r+0xdc>
 800b82e:	f8c8 7000 	str.w	r7, [r8]
 800b832:	e00f      	b.n	800b854 <_malloc_r+0xa8>
 800b834:	6822      	ldr	r2, [r4, #0]
 800b836:	1b52      	subs	r2, r2, r5
 800b838:	d420      	bmi.n	800b87c <_malloc_r+0xd0>
 800b83a:	2a0b      	cmp	r2, #11
 800b83c:	d917      	bls.n	800b86e <_malloc_r+0xc2>
 800b83e:	1961      	adds	r1, r4, r5
 800b840:	42a3      	cmp	r3, r4
 800b842:	6025      	str	r5, [r4, #0]
 800b844:	bf18      	it	ne
 800b846:	6059      	strne	r1, [r3, #4]
 800b848:	6863      	ldr	r3, [r4, #4]
 800b84a:	bf08      	it	eq
 800b84c:	f8c8 1000 	streq.w	r1, [r8]
 800b850:	5162      	str	r2, [r4, r5]
 800b852:	604b      	str	r3, [r1, #4]
 800b854:	4630      	mov	r0, r6
 800b856:	f000 f8db 	bl	800ba10 <__malloc_unlock>
 800b85a:	f104 000b 	add.w	r0, r4, #11
 800b85e:	1d23      	adds	r3, r4, #4
 800b860:	f020 0007 	bic.w	r0, r0, #7
 800b864:	1ac2      	subs	r2, r0, r3
 800b866:	bf1c      	itt	ne
 800b868:	1a1b      	subne	r3, r3, r0
 800b86a:	50a3      	strne	r3, [r4, r2]
 800b86c:	e7af      	b.n	800b7ce <_malloc_r+0x22>
 800b86e:	6862      	ldr	r2, [r4, #4]
 800b870:	42a3      	cmp	r3, r4
 800b872:	bf0c      	ite	eq
 800b874:	f8c8 2000 	streq.w	r2, [r8]
 800b878:	605a      	strne	r2, [r3, #4]
 800b87a:	e7eb      	b.n	800b854 <_malloc_r+0xa8>
 800b87c:	4623      	mov	r3, r4
 800b87e:	6864      	ldr	r4, [r4, #4]
 800b880:	e7ae      	b.n	800b7e0 <_malloc_r+0x34>
 800b882:	463c      	mov	r4, r7
 800b884:	687f      	ldr	r7, [r7, #4]
 800b886:	e7b6      	b.n	800b7f6 <_malloc_r+0x4a>
 800b888:	461a      	mov	r2, r3
 800b88a:	685b      	ldr	r3, [r3, #4]
 800b88c:	42a3      	cmp	r3, r4
 800b88e:	d1fb      	bne.n	800b888 <_malloc_r+0xdc>
 800b890:	2300      	movs	r3, #0
 800b892:	6053      	str	r3, [r2, #4]
 800b894:	e7de      	b.n	800b854 <_malloc_r+0xa8>
 800b896:	230c      	movs	r3, #12
 800b898:	6033      	str	r3, [r6, #0]
 800b89a:	4630      	mov	r0, r6
 800b89c:	f000 f8b8 	bl	800ba10 <__malloc_unlock>
 800b8a0:	e794      	b.n	800b7cc <_malloc_r+0x20>
 800b8a2:	6005      	str	r5, [r0, #0]
 800b8a4:	e7d6      	b.n	800b854 <_malloc_r+0xa8>
 800b8a6:	bf00      	nop
 800b8a8:	200009b0 	.word	0x200009b0

0800b8ac <__sflush_r>:
 800b8ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b8b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8b4:	0716      	lsls	r6, r2, #28
 800b8b6:	4605      	mov	r5, r0
 800b8b8:	460c      	mov	r4, r1
 800b8ba:	d454      	bmi.n	800b966 <__sflush_r+0xba>
 800b8bc:	684b      	ldr	r3, [r1, #4]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	dc02      	bgt.n	800b8c8 <__sflush_r+0x1c>
 800b8c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	dd48      	ble.n	800b95a <__sflush_r+0xae>
 800b8c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b8ca:	2e00      	cmp	r6, #0
 800b8cc:	d045      	beq.n	800b95a <__sflush_r+0xae>
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b8d4:	682f      	ldr	r7, [r5, #0]
 800b8d6:	6a21      	ldr	r1, [r4, #32]
 800b8d8:	602b      	str	r3, [r5, #0]
 800b8da:	d030      	beq.n	800b93e <__sflush_r+0x92>
 800b8dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b8de:	89a3      	ldrh	r3, [r4, #12]
 800b8e0:	0759      	lsls	r1, r3, #29
 800b8e2:	d505      	bpl.n	800b8f0 <__sflush_r+0x44>
 800b8e4:	6863      	ldr	r3, [r4, #4]
 800b8e6:	1ad2      	subs	r2, r2, r3
 800b8e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b8ea:	b10b      	cbz	r3, 800b8f0 <__sflush_r+0x44>
 800b8ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b8ee:	1ad2      	subs	r2, r2, r3
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b8f4:	6a21      	ldr	r1, [r4, #32]
 800b8f6:	4628      	mov	r0, r5
 800b8f8:	47b0      	blx	r6
 800b8fa:	1c43      	adds	r3, r0, #1
 800b8fc:	89a3      	ldrh	r3, [r4, #12]
 800b8fe:	d106      	bne.n	800b90e <__sflush_r+0x62>
 800b900:	6829      	ldr	r1, [r5, #0]
 800b902:	291d      	cmp	r1, #29
 800b904:	d82b      	bhi.n	800b95e <__sflush_r+0xb2>
 800b906:	4a2a      	ldr	r2, [pc, #168]	@ (800b9b0 <__sflush_r+0x104>)
 800b908:	410a      	asrs	r2, r1
 800b90a:	07d6      	lsls	r6, r2, #31
 800b90c:	d427      	bmi.n	800b95e <__sflush_r+0xb2>
 800b90e:	2200      	movs	r2, #0
 800b910:	6062      	str	r2, [r4, #4]
 800b912:	04d9      	lsls	r1, r3, #19
 800b914:	6922      	ldr	r2, [r4, #16]
 800b916:	6022      	str	r2, [r4, #0]
 800b918:	d504      	bpl.n	800b924 <__sflush_r+0x78>
 800b91a:	1c42      	adds	r2, r0, #1
 800b91c:	d101      	bne.n	800b922 <__sflush_r+0x76>
 800b91e:	682b      	ldr	r3, [r5, #0]
 800b920:	b903      	cbnz	r3, 800b924 <__sflush_r+0x78>
 800b922:	6560      	str	r0, [r4, #84]	@ 0x54
 800b924:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b926:	602f      	str	r7, [r5, #0]
 800b928:	b1b9      	cbz	r1, 800b95a <__sflush_r+0xae>
 800b92a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b92e:	4299      	cmp	r1, r3
 800b930:	d002      	beq.n	800b938 <__sflush_r+0x8c>
 800b932:	4628      	mov	r0, r5
 800b934:	f000 fd12 	bl	800c35c <_free_r>
 800b938:	2300      	movs	r3, #0
 800b93a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b93c:	e00d      	b.n	800b95a <__sflush_r+0xae>
 800b93e:	2301      	movs	r3, #1
 800b940:	4628      	mov	r0, r5
 800b942:	47b0      	blx	r6
 800b944:	4602      	mov	r2, r0
 800b946:	1c50      	adds	r0, r2, #1
 800b948:	d1c9      	bne.n	800b8de <__sflush_r+0x32>
 800b94a:	682b      	ldr	r3, [r5, #0]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d0c6      	beq.n	800b8de <__sflush_r+0x32>
 800b950:	2b1d      	cmp	r3, #29
 800b952:	d001      	beq.n	800b958 <__sflush_r+0xac>
 800b954:	2b16      	cmp	r3, #22
 800b956:	d11e      	bne.n	800b996 <__sflush_r+0xea>
 800b958:	602f      	str	r7, [r5, #0]
 800b95a:	2000      	movs	r0, #0
 800b95c:	e022      	b.n	800b9a4 <__sflush_r+0xf8>
 800b95e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b962:	b21b      	sxth	r3, r3
 800b964:	e01b      	b.n	800b99e <__sflush_r+0xf2>
 800b966:	690f      	ldr	r7, [r1, #16]
 800b968:	2f00      	cmp	r7, #0
 800b96a:	d0f6      	beq.n	800b95a <__sflush_r+0xae>
 800b96c:	0793      	lsls	r3, r2, #30
 800b96e:	680e      	ldr	r6, [r1, #0]
 800b970:	bf08      	it	eq
 800b972:	694b      	ldreq	r3, [r1, #20]
 800b974:	600f      	str	r7, [r1, #0]
 800b976:	bf18      	it	ne
 800b978:	2300      	movne	r3, #0
 800b97a:	eba6 0807 	sub.w	r8, r6, r7
 800b97e:	608b      	str	r3, [r1, #8]
 800b980:	f1b8 0f00 	cmp.w	r8, #0
 800b984:	dde9      	ble.n	800b95a <__sflush_r+0xae>
 800b986:	6a21      	ldr	r1, [r4, #32]
 800b988:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b98a:	4643      	mov	r3, r8
 800b98c:	463a      	mov	r2, r7
 800b98e:	4628      	mov	r0, r5
 800b990:	47b0      	blx	r6
 800b992:	2800      	cmp	r0, #0
 800b994:	dc08      	bgt.n	800b9a8 <__sflush_r+0xfc>
 800b996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b99a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b99e:	81a3      	strh	r3, [r4, #12]
 800b9a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b9a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9a8:	4407      	add	r7, r0
 800b9aa:	eba8 0800 	sub.w	r8, r8, r0
 800b9ae:	e7e7      	b.n	800b980 <__sflush_r+0xd4>
 800b9b0:	dfbffffe 	.word	0xdfbffffe

0800b9b4 <_fflush_r>:
 800b9b4:	b538      	push	{r3, r4, r5, lr}
 800b9b6:	690b      	ldr	r3, [r1, #16]
 800b9b8:	4605      	mov	r5, r0
 800b9ba:	460c      	mov	r4, r1
 800b9bc:	b913      	cbnz	r3, 800b9c4 <_fflush_r+0x10>
 800b9be:	2500      	movs	r5, #0
 800b9c0:	4628      	mov	r0, r5
 800b9c2:	bd38      	pop	{r3, r4, r5, pc}
 800b9c4:	b118      	cbz	r0, 800b9ce <_fflush_r+0x1a>
 800b9c6:	6a03      	ldr	r3, [r0, #32]
 800b9c8:	b90b      	cbnz	r3, 800b9ce <_fflush_r+0x1a>
 800b9ca:	f7fe fe7f 	bl	800a6cc <__sinit>
 800b9ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d0f3      	beq.n	800b9be <_fflush_r+0xa>
 800b9d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b9d8:	07d0      	lsls	r0, r2, #31
 800b9da:	d404      	bmi.n	800b9e6 <_fflush_r+0x32>
 800b9dc:	0599      	lsls	r1, r3, #22
 800b9de:	d402      	bmi.n	800b9e6 <_fflush_r+0x32>
 800b9e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b9e2:	f7fe fef4 	bl	800a7ce <__retarget_lock_acquire_recursive>
 800b9e6:	4628      	mov	r0, r5
 800b9e8:	4621      	mov	r1, r4
 800b9ea:	f7ff ff5f 	bl	800b8ac <__sflush_r>
 800b9ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b9f0:	07da      	lsls	r2, r3, #31
 800b9f2:	4605      	mov	r5, r0
 800b9f4:	d4e4      	bmi.n	800b9c0 <_fflush_r+0xc>
 800b9f6:	89a3      	ldrh	r3, [r4, #12]
 800b9f8:	059b      	lsls	r3, r3, #22
 800b9fa:	d4e1      	bmi.n	800b9c0 <_fflush_r+0xc>
 800b9fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b9fe:	f7fe fee7 	bl	800a7d0 <__retarget_lock_release_recursive>
 800ba02:	e7dd      	b.n	800b9c0 <_fflush_r+0xc>

0800ba04 <__malloc_lock>:
 800ba04:	4801      	ldr	r0, [pc, #4]	@ (800ba0c <__malloc_lock+0x8>)
 800ba06:	f7fe bee2 	b.w	800a7ce <__retarget_lock_acquire_recursive>
 800ba0a:	bf00      	nop
 800ba0c:	200009a8 	.word	0x200009a8

0800ba10 <__malloc_unlock>:
 800ba10:	4801      	ldr	r0, [pc, #4]	@ (800ba18 <__malloc_unlock+0x8>)
 800ba12:	f7fe bedd 	b.w	800a7d0 <__retarget_lock_release_recursive>
 800ba16:	bf00      	nop
 800ba18:	200009a8 	.word	0x200009a8

0800ba1c <_Balloc>:
 800ba1c:	b570      	push	{r4, r5, r6, lr}
 800ba1e:	69c6      	ldr	r6, [r0, #28]
 800ba20:	4604      	mov	r4, r0
 800ba22:	460d      	mov	r5, r1
 800ba24:	b976      	cbnz	r6, 800ba44 <_Balloc+0x28>
 800ba26:	2010      	movs	r0, #16
 800ba28:	f7ff fe96 	bl	800b758 <malloc>
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	61e0      	str	r0, [r4, #28]
 800ba30:	b920      	cbnz	r0, 800ba3c <_Balloc+0x20>
 800ba32:	4b18      	ldr	r3, [pc, #96]	@ (800ba94 <_Balloc+0x78>)
 800ba34:	4818      	ldr	r0, [pc, #96]	@ (800ba98 <_Balloc+0x7c>)
 800ba36:	216b      	movs	r1, #107	@ 0x6b
 800ba38:	f7fe fecc 	bl	800a7d4 <__assert_func>
 800ba3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba40:	6006      	str	r6, [r0, #0]
 800ba42:	60c6      	str	r6, [r0, #12]
 800ba44:	69e6      	ldr	r6, [r4, #28]
 800ba46:	68f3      	ldr	r3, [r6, #12]
 800ba48:	b183      	cbz	r3, 800ba6c <_Balloc+0x50>
 800ba4a:	69e3      	ldr	r3, [r4, #28]
 800ba4c:	68db      	ldr	r3, [r3, #12]
 800ba4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba52:	b9b8      	cbnz	r0, 800ba84 <_Balloc+0x68>
 800ba54:	2101      	movs	r1, #1
 800ba56:	fa01 f605 	lsl.w	r6, r1, r5
 800ba5a:	1d72      	adds	r2, r6, #5
 800ba5c:	0092      	lsls	r2, r2, #2
 800ba5e:	4620      	mov	r0, r4
 800ba60:	f000 fc67 	bl	800c332 <_calloc_r>
 800ba64:	b160      	cbz	r0, 800ba80 <_Balloc+0x64>
 800ba66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ba6a:	e00e      	b.n	800ba8a <_Balloc+0x6e>
 800ba6c:	2221      	movs	r2, #33	@ 0x21
 800ba6e:	2104      	movs	r1, #4
 800ba70:	4620      	mov	r0, r4
 800ba72:	f000 fc5e 	bl	800c332 <_calloc_r>
 800ba76:	69e3      	ldr	r3, [r4, #28]
 800ba78:	60f0      	str	r0, [r6, #12]
 800ba7a:	68db      	ldr	r3, [r3, #12]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d1e4      	bne.n	800ba4a <_Balloc+0x2e>
 800ba80:	2000      	movs	r0, #0
 800ba82:	bd70      	pop	{r4, r5, r6, pc}
 800ba84:	6802      	ldr	r2, [r0, #0]
 800ba86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ba90:	e7f7      	b.n	800ba82 <_Balloc+0x66>
 800ba92:	bf00      	nop
 800ba94:	0800d3ac 	.word	0x0800d3ac
 800ba98:	0800d4de 	.word	0x0800d4de

0800ba9c <_Bfree>:
 800ba9c:	b570      	push	{r4, r5, r6, lr}
 800ba9e:	69c6      	ldr	r6, [r0, #28]
 800baa0:	4605      	mov	r5, r0
 800baa2:	460c      	mov	r4, r1
 800baa4:	b976      	cbnz	r6, 800bac4 <_Bfree+0x28>
 800baa6:	2010      	movs	r0, #16
 800baa8:	f7ff fe56 	bl	800b758 <malloc>
 800baac:	4602      	mov	r2, r0
 800baae:	61e8      	str	r0, [r5, #28]
 800bab0:	b920      	cbnz	r0, 800babc <_Bfree+0x20>
 800bab2:	4b09      	ldr	r3, [pc, #36]	@ (800bad8 <_Bfree+0x3c>)
 800bab4:	4809      	ldr	r0, [pc, #36]	@ (800badc <_Bfree+0x40>)
 800bab6:	218f      	movs	r1, #143	@ 0x8f
 800bab8:	f7fe fe8c 	bl	800a7d4 <__assert_func>
 800babc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bac0:	6006      	str	r6, [r0, #0]
 800bac2:	60c6      	str	r6, [r0, #12]
 800bac4:	b13c      	cbz	r4, 800bad6 <_Bfree+0x3a>
 800bac6:	69eb      	ldr	r3, [r5, #28]
 800bac8:	6862      	ldr	r2, [r4, #4]
 800baca:	68db      	ldr	r3, [r3, #12]
 800bacc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bad0:	6021      	str	r1, [r4, #0]
 800bad2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bad6:	bd70      	pop	{r4, r5, r6, pc}
 800bad8:	0800d3ac 	.word	0x0800d3ac
 800badc:	0800d4de 	.word	0x0800d4de

0800bae0 <__multadd>:
 800bae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bae4:	690d      	ldr	r5, [r1, #16]
 800bae6:	4607      	mov	r7, r0
 800bae8:	460c      	mov	r4, r1
 800baea:	461e      	mov	r6, r3
 800baec:	f101 0c14 	add.w	ip, r1, #20
 800baf0:	2000      	movs	r0, #0
 800baf2:	f8dc 3000 	ldr.w	r3, [ip]
 800baf6:	b299      	uxth	r1, r3
 800baf8:	fb02 6101 	mla	r1, r2, r1, r6
 800bafc:	0c1e      	lsrs	r6, r3, #16
 800bafe:	0c0b      	lsrs	r3, r1, #16
 800bb00:	fb02 3306 	mla	r3, r2, r6, r3
 800bb04:	b289      	uxth	r1, r1
 800bb06:	3001      	adds	r0, #1
 800bb08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bb0c:	4285      	cmp	r5, r0
 800bb0e:	f84c 1b04 	str.w	r1, [ip], #4
 800bb12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bb16:	dcec      	bgt.n	800baf2 <__multadd+0x12>
 800bb18:	b30e      	cbz	r6, 800bb5e <__multadd+0x7e>
 800bb1a:	68a3      	ldr	r3, [r4, #8]
 800bb1c:	42ab      	cmp	r3, r5
 800bb1e:	dc19      	bgt.n	800bb54 <__multadd+0x74>
 800bb20:	6861      	ldr	r1, [r4, #4]
 800bb22:	4638      	mov	r0, r7
 800bb24:	3101      	adds	r1, #1
 800bb26:	f7ff ff79 	bl	800ba1c <_Balloc>
 800bb2a:	4680      	mov	r8, r0
 800bb2c:	b928      	cbnz	r0, 800bb3a <__multadd+0x5a>
 800bb2e:	4602      	mov	r2, r0
 800bb30:	4b0c      	ldr	r3, [pc, #48]	@ (800bb64 <__multadd+0x84>)
 800bb32:	480d      	ldr	r0, [pc, #52]	@ (800bb68 <__multadd+0x88>)
 800bb34:	21ba      	movs	r1, #186	@ 0xba
 800bb36:	f7fe fe4d 	bl	800a7d4 <__assert_func>
 800bb3a:	6922      	ldr	r2, [r4, #16]
 800bb3c:	3202      	adds	r2, #2
 800bb3e:	f104 010c 	add.w	r1, r4, #12
 800bb42:	0092      	lsls	r2, r2, #2
 800bb44:	300c      	adds	r0, #12
 800bb46:	f000 fbdf 	bl	800c308 <memcpy>
 800bb4a:	4621      	mov	r1, r4
 800bb4c:	4638      	mov	r0, r7
 800bb4e:	f7ff ffa5 	bl	800ba9c <_Bfree>
 800bb52:	4644      	mov	r4, r8
 800bb54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bb58:	3501      	adds	r5, #1
 800bb5a:	615e      	str	r6, [r3, #20]
 800bb5c:	6125      	str	r5, [r4, #16]
 800bb5e:	4620      	mov	r0, r4
 800bb60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb64:	0800d4bc 	.word	0x0800d4bc
 800bb68:	0800d4de 	.word	0x0800d4de

0800bb6c <__hi0bits>:
 800bb6c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bb70:	4603      	mov	r3, r0
 800bb72:	bf36      	itet	cc
 800bb74:	0403      	lslcc	r3, r0, #16
 800bb76:	2000      	movcs	r0, #0
 800bb78:	2010      	movcc	r0, #16
 800bb7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bb7e:	bf3c      	itt	cc
 800bb80:	021b      	lslcc	r3, r3, #8
 800bb82:	3008      	addcc	r0, #8
 800bb84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bb88:	bf3c      	itt	cc
 800bb8a:	011b      	lslcc	r3, r3, #4
 800bb8c:	3004      	addcc	r0, #4
 800bb8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb92:	bf3c      	itt	cc
 800bb94:	009b      	lslcc	r3, r3, #2
 800bb96:	3002      	addcc	r0, #2
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	db05      	blt.n	800bba8 <__hi0bits+0x3c>
 800bb9c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bba0:	f100 0001 	add.w	r0, r0, #1
 800bba4:	bf08      	it	eq
 800bba6:	2020      	moveq	r0, #32
 800bba8:	4770      	bx	lr

0800bbaa <__lo0bits>:
 800bbaa:	6803      	ldr	r3, [r0, #0]
 800bbac:	4602      	mov	r2, r0
 800bbae:	f013 0007 	ands.w	r0, r3, #7
 800bbb2:	d00b      	beq.n	800bbcc <__lo0bits+0x22>
 800bbb4:	07d9      	lsls	r1, r3, #31
 800bbb6:	d421      	bmi.n	800bbfc <__lo0bits+0x52>
 800bbb8:	0798      	lsls	r0, r3, #30
 800bbba:	bf49      	itett	mi
 800bbbc:	085b      	lsrmi	r3, r3, #1
 800bbbe:	089b      	lsrpl	r3, r3, #2
 800bbc0:	2001      	movmi	r0, #1
 800bbc2:	6013      	strmi	r3, [r2, #0]
 800bbc4:	bf5c      	itt	pl
 800bbc6:	6013      	strpl	r3, [r2, #0]
 800bbc8:	2002      	movpl	r0, #2
 800bbca:	4770      	bx	lr
 800bbcc:	b299      	uxth	r1, r3
 800bbce:	b909      	cbnz	r1, 800bbd4 <__lo0bits+0x2a>
 800bbd0:	0c1b      	lsrs	r3, r3, #16
 800bbd2:	2010      	movs	r0, #16
 800bbd4:	b2d9      	uxtb	r1, r3
 800bbd6:	b909      	cbnz	r1, 800bbdc <__lo0bits+0x32>
 800bbd8:	3008      	adds	r0, #8
 800bbda:	0a1b      	lsrs	r3, r3, #8
 800bbdc:	0719      	lsls	r1, r3, #28
 800bbde:	bf04      	itt	eq
 800bbe0:	091b      	lsreq	r3, r3, #4
 800bbe2:	3004      	addeq	r0, #4
 800bbe4:	0799      	lsls	r1, r3, #30
 800bbe6:	bf04      	itt	eq
 800bbe8:	089b      	lsreq	r3, r3, #2
 800bbea:	3002      	addeq	r0, #2
 800bbec:	07d9      	lsls	r1, r3, #31
 800bbee:	d403      	bmi.n	800bbf8 <__lo0bits+0x4e>
 800bbf0:	085b      	lsrs	r3, r3, #1
 800bbf2:	f100 0001 	add.w	r0, r0, #1
 800bbf6:	d003      	beq.n	800bc00 <__lo0bits+0x56>
 800bbf8:	6013      	str	r3, [r2, #0]
 800bbfa:	4770      	bx	lr
 800bbfc:	2000      	movs	r0, #0
 800bbfe:	4770      	bx	lr
 800bc00:	2020      	movs	r0, #32
 800bc02:	4770      	bx	lr

0800bc04 <__i2b>:
 800bc04:	b510      	push	{r4, lr}
 800bc06:	460c      	mov	r4, r1
 800bc08:	2101      	movs	r1, #1
 800bc0a:	f7ff ff07 	bl	800ba1c <_Balloc>
 800bc0e:	4602      	mov	r2, r0
 800bc10:	b928      	cbnz	r0, 800bc1e <__i2b+0x1a>
 800bc12:	4b05      	ldr	r3, [pc, #20]	@ (800bc28 <__i2b+0x24>)
 800bc14:	4805      	ldr	r0, [pc, #20]	@ (800bc2c <__i2b+0x28>)
 800bc16:	f240 1145 	movw	r1, #325	@ 0x145
 800bc1a:	f7fe fddb 	bl	800a7d4 <__assert_func>
 800bc1e:	2301      	movs	r3, #1
 800bc20:	6144      	str	r4, [r0, #20]
 800bc22:	6103      	str	r3, [r0, #16]
 800bc24:	bd10      	pop	{r4, pc}
 800bc26:	bf00      	nop
 800bc28:	0800d4bc 	.word	0x0800d4bc
 800bc2c:	0800d4de 	.word	0x0800d4de

0800bc30 <__multiply>:
 800bc30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc34:	4614      	mov	r4, r2
 800bc36:	690a      	ldr	r2, [r1, #16]
 800bc38:	6923      	ldr	r3, [r4, #16]
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	bfa8      	it	ge
 800bc3e:	4623      	movge	r3, r4
 800bc40:	460f      	mov	r7, r1
 800bc42:	bfa4      	itt	ge
 800bc44:	460c      	movge	r4, r1
 800bc46:	461f      	movge	r7, r3
 800bc48:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bc4c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bc50:	68a3      	ldr	r3, [r4, #8]
 800bc52:	6861      	ldr	r1, [r4, #4]
 800bc54:	eb0a 0609 	add.w	r6, sl, r9
 800bc58:	42b3      	cmp	r3, r6
 800bc5a:	b085      	sub	sp, #20
 800bc5c:	bfb8      	it	lt
 800bc5e:	3101      	addlt	r1, #1
 800bc60:	f7ff fedc 	bl	800ba1c <_Balloc>
 800bc64:	b930      	cbnz	r0, 800bc74 <__multiply+0x44>
 800bc66:	4602      	mov	r2, r0
 800bc68:	4b44      	ldr	r3, [pc, #272]	@ (800bd7c <__multiply+0x14c>)
 800bc6a:	4845      	ldr	r0, [pc, #276]	@ (800bd80 <__multiply+0x150>)
 800bc6c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bc70:	f7fe fdb0 	bl	800a7d4 <__assert_func>
 800bc74:	f100 0514 	add.w	r5, r0, #20
 800bc78:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bc7c:	462b      	mov	r3, r5
 800bc7e:	2200      	movs	r2, #0
 800bc80:	4543      	cmp	r3, r8
 800bc82:	d321      	bcc.n	800bcc8 <__multiply+0x98>
 800bc84:	f107 0114 	add.w	r1, r7, #20
 800bc88:	f104 0214 	add.w	r2, r4, #20
 800bc8c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bc90:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bc94:	9302      	str	r3, [sp, #8]
 800bc96:	1b13      	subs	r3, r2, r4
 800bc98:	3b15      	subs	r3, #21
 800bc9a:	f023 0303 	bic.w	r3, r3, #3
 800bc9e:	3304      	adds	r3, #4
 800bca0:	f104 0715 	add.w	r7, r4, #21
 800bca4:	42ba      	cmp	r2, r7
 800bca6:	bf38      	it	cc
 800bca8:	2304      	movcc	r3, #4
 800bcaa:	9301      	str	r3, [sp, #4]
 800bcac:	9b02      	ldr	r3, [sp, #8]
 800bcae:	9103      	str	r1, [sp, #12]
 800bcb0:	428b      	cmp	r3, r1
 800bcb2:	d80c      	bhi.n	800bcce <__multiply+0x9e>
 800bcb4:	2e00      	cmp	r6, #0
 800bcb6:	dd03      	ble.n	800bcc0 <__multiply+0x90>
 800bcb8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d05b      	beq.n	800bd78 <__multiply+0x148>
 800bcc0:	6106      	str	r6, [r0, #16]
 800bcc2:	b005      	add	sp, #20
 800bcc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcc8:	f843 2b04 	str.w	r2, [r3], #4
 800bccc:	e7d8      	b.n	800bc80 <__multiply+0x50>
 800bcce:	f8b1 a000 	ldrh.w	sl, [r1]
 800bcd2:	f1ba 0f00 	cmp.w	sl, #0
 800bcd6:	d024      	beq.n	800bd22 <__multiply+0xf2>
 800bcd8:	f104 0e14 	add.w	lr, r4, #20
 800bcdc:	46a9      	mov	r9, r5
 800bcde:	f04f 0c00 	mov.w	ip, #0
 800bce2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bce6:	f8d9 3000 	ldr.w	r3, [r9]
 800bcea:	fa1f fb87 	uxth.w	fp, r7
 800bcee:	b29b      	uxth	r3, r3
 800bcf0:	fb0a 330b 	mla	r3, sl, fp, r3
 800bcf4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bcf8:	f8d9 7000 	ldr.w	r7, [r9]
 800bcfc:	4463      	add	r3, ip
 800bcfe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bd02:	fb0a c70b 	mla	r7, sl, fp, ip
 800bd06:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bd0a:	b29b      	uxth	r3, r3
 800bd0c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bd10:	4572      	cmp	r2, lr
 800bd12:	f849 3b04 	str.w	r3, [r9], #4
 800bd16:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bd1a:	d8e2      	bhi.n	800bce2 <__multiply+0xb2>
 800bd1c:	9b01      	ldr	r3, [sp, #4]
 800bd1e:	f845 c003 	str.w	ip, [r5, r3]
 800bd22:	9b03      	ldr	r3, [sp, #12]
 800bd24:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bd28:	3104      	adds	r1, #4
 800bd2a:	f1b9 0f00 	cmp.w	r9, #0
 800bd2e:	d021      	beq.n	800bd74 <__multiply+0x144>
 800bd30:	682b      	ldr	r3, [r5, #0]
 800bd32:	f104 0c14 	add.w	ip, r4, #20
 800bd36:	46ae      	mov	lr, r5
 800bd38:	f04f 0a00 	mov.w	sl, #0
 800bd3c:	f8bc b000 	ldrh.w	fp, [ip]
 800bd40:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bd44:	fb09 770b 	mla	r7, r9, fp, r7
 800bd48:	4457      	add	r7, sl
 800bd4a:	b29b      	uxth	r3, r3
 800bd4c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bd50:	f84e 3b04 	str.w	r3, [lr], #4
 800bd54:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bd58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bd5c:	f8be 3000 	ldrh.w	r3, [lr]
 800bd60:	fb09 330a 	mla	r3, r9, sl, r3
 800bd64:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bd68:	4562      	cmp	r2, ip
 800bd6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bd6e:	d8e5      	bhi.n	800bd3c <__multiply+0x10c>
 800bd70:	9f01      	ldr	r7, [sp, #4]
 800bd72:	51eb      	str	r3, [r5, r7]
 800bd74:	3504      	adds	r5, #4
 800bd76:	e799      	b.n	800bcac <__multiply+0x7c>
 800bd78:	3e01      	subs	r6, #1
 800bd7a:	e79b      	b.n	800bcb4 <__multiply+0x84>
 800bd7c:	0800d4bc 	.word	0x0800d4bc
 800bd80:	0800d4de 	.word	0x0800d4de

0800bd84 <__pow5mult>:
 800bd84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd88:	4615      	mov	r5, r2
 800bd8a:	f012 0203 	ands.w	r2, r2, #3
 800bd8e:	4607      	mov	r7, r0
 800bd90:	460e      	mov	r6, r1
 800bd92:	d007      	beq.n	800bda4 <__pow5mult+0x20>
 800bd94:	4c25      	ldr	r4, [pc, #148]	@ (800be2c <__pow5mult+0xa8>)
 800bd96:	3a01      	subs	r2, #1
 800bd98:	2300      	movs	r3, #0
 800bd9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bd9e:	f7ff fe9f 	bl	800bae0 <__multadd>
 800bda2:	4606      	mov	r6, r0
 800bda4:	10ad      	asrs	r5, r5, #2
 800bda6:	d03d      	beq.n	800be24 <__pow5mult+0xa0>
 800bda8:	69fc      	ldr	r4, [r7, #28]
 800bdaa:	b97c      	cbnz	r4, 800bdcc <__pow5mult+0x48>
 800bdac:	2010      	movs	r0, #16
 800bdae:	f7ff fcd3 	bl	800b758 <malloc>
 800bdb2:	4602      	mov	r2, r0
 800bdb4:	61f8      	str	r0, [r7, #28]
 800bdb6:	b928      	cbnz	r0, 800bdc4 <__pow5mult+0x40>
 800bdb8:	4b1d      	ldr	r3, [pc, #116]	@ (800be30 <__pow5mult+0xac>)
 800bdba:	481e      	ldr	r0, [pc, #120]	@ (800be34 <__pow5mult+0xb0>)
 800bdbc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bdc0:	f7fe fd08 	bl	800a7d4 <__assert_func>
 800bdc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bdc8:	6004      	str	r4, [r0, #0]
 800bdca:	60c4      	str	r4, [r0, #12]
 800bdcc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bdd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bdd4:	b94c      	cbnz	r4, 800bdea <__pow5mult+0x66>
 800bdd6:	f240 2171 	movw	r1, #625	@ 0x271
 800bdda:	4638      	mov	r0, r7
 800bddc:	f7ff ff12 	bl	800bc04 <__i2b>
 800bde0:	2300      	movs	r3, #0
 800bde2:	f8c8 0008 	str.w	r0, [r8, #8]
 800bde6:	4604      	mov	r4, r0
 800bde8:	6003      	str	r3, [r0, #0]
 800bdea:	f04f 0900 	mov.w	r9, #0
 800bdee:	07eb      	lsls	r3, r5, #31
 800bdf0:	d50a      	bpl.n	800be08 <__pow5mult+0x84>
 800bdf2:	4631      	mov	r1, r6
 800bdf4:	4622      	mov	r2, r4
 800bdf6:	4638      	mov	r0, r7
 800bdf8:	f7ff ff1a 	bl	800bc30 <__multiply>
 800bdfc:	4631      	mov	r1, r6
 800bdfe:	4680      	mov	r8, r0
 800be00:	4638      	mov	r0, r7
 800be02:	f7ff fe4b 	bl	800ba9c <_Bfree>
 800be06:	4646      	mov	r6, r8
 800be08:	106d      	asrs	r5, r5, #1
 800be0a:	d00b      	beq.n	800be24 <__pow5mult+0xa0>
 800be0c:	6820      	ldr	r0, [r4, #0]
 800be0e:	b938      	cbnz	r0, 800be20 <__pow5mult+0x9c>
 800be10:	4622      	mov	r2, r4
 800be12:	4621      	mov	r1, r4
 800be14:	4638      	mov	r0, r7
 800be16:	f7ff ff0b 	bl	800bc30 <__multiply>
 800be1a:	6020      	str	r0, [r4, #0]
 800be1c:	f8c0 9000 	str.w	r9, [r0]
 800be20:	4604      	mov	r4, r0
 800be22:	e7e4      	b.n	800bdee <__pow5mult+0x6a>
 800be24:	4630      	mov	r0, r6
 800be26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be2a:	bf00      	nop
 800be2c:	0800d538 	.word	0x0800d538
 800be30:	0800d3ac 	.word	0x0800d3ac
 800be34:	0800d4de 	.word	0x0800d4de

0800be38 <__lshift>:
 800be38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be3c:	460c      	mov	r4, r1
 800be3e:	6849      	ldr	r1, [r1, #4]
 800be40:	6923      	ldr	r3, [r4, #16]
 800be42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800be46:	68a3      	ldr	r3, [r4, #8]
 800be48:	4607      	mov	r7, r0
 800be4a:	4691      	mov	r9, r2
 800be4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800be50:	f108 0601 	add.w	r6, r8, #1
 800be54:	42b3      	cmp	r3, r6
 800be56:	db0b      	blt.n	800be70 <__lshift+0x38>
 800be58:	4638      	mov	r0, r7
 800be5a:	f7ff fddf 	bl	800ba1c <_Balloc>
 800be5e:	4605      	mov	r5, r0
 800be60:	b948      	cbnz	r0, 800be76 <__lshift+0x3e>
 800be62:	4602      	mov	r2, r0
 800be64:	4b28      	ldr	r3, [pc, #160]	@ (800bf08 <__lshift+0xd0>)
 800be66:	4829      	ldr	r0, [pc, #164]	@ (800bf0c <__lshift+0xd4>)
 800be68:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800be6c:	f7fe fcb2 	bl	800a7d4 <__assert_func>
 800be70:	3101      	adds	r1, #1
 800be72:	005b      	lsls	r3, r3, #1
 800be74:	e7ee      	b.n	800be54 <__lshift+0x1c>
 800be76:	2300      	movs	r3, #0
 800be78:	f100 0114 	add.w	r1, r0, #20
 800be7c:	f100 0210 	add.w	r2, r0, #16
 800be80:	4618      	mov	r0, r3
 800be82:	4553      	cmp	r3, sl
 800be84:	db33      	blt.n	800beee <__lshift+0xb6>
 800be86:	6920      	ldr	r0, [r4, #16]
 800be88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800be8c:	f104 0314 	add.w	r3, r4, #20
 800be90:	f019 091f 	ands.w	r9, r9, #31
 800be94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800be98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800be9c:	d02b      	beq.n	800bef6 <__lshift+0xbe>
 800be9e:	f1c9 0e20 	rsb	lr, r9, #32
 800bea2:	468a      	mov	sl, r1
 800bea4:	2200      	movs	r2, #0
 800bea6:	6818      	ldr	r0, [r3, #0]
 800bea8:	fa00 f009 	lsl.w	r0, r0, r9
 800beac:	4310      	orrs	r0, r2
 800beae:	f84a 0b04 	str.w	r0, [sl], #4
 800beb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800beb6:	459c      	cmp	ip, r3
 800beb8:	fa22 f20e 	lsr.w	r2, r2, lr
 800bebc:	d8f3      	bhi.n	800bea6 <__lshift+0x6e>
 800bebe:	ebac 0304 	sub.w	r3, ip, r4
 800bec2:	3b15      	subs	r3, #21
 800bec4:	f023 0303 	bic.w	r3, r3, #3
 800bec8:	3304      	adds	r3, #4
 800beca:	f104 0015 	add.w	r0, r4, #21
 800bece:	4584      	cmp	ip, r0
 800bed0:	bf38      	it	cc
 800bed2:	2304      	movcc	r3, #4
 800bed4:	50ca      	str	r2, [r1, r3]
 800bed6:	b10a      	cbz	r2, 800bedc <__lshift+0xa4>
 800bed8:	f108 0602 	add.w	r6, r8, #2
 800bedc:	3e01      	subs	r6, #1
 800bede:	4638      	mov	r0, r7
 800bee0:	612e      	str	r6, [r5, #16]
 800bee2:	4621      	mov	r1, r4
 800bee4:	f7ff fdda 	bl	800ba9c <_Bfree>
 800bee8:	4628      	mov	r0, r5
 800beea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beee:	f842 0f04 	str.w	r0, [r2, #4]!
 800bef2:	3301      	adds	r3, #1
 800bef4:	e7c5      	b.n	800be82 <__lshift+0x4a>
 800bef6:	3904      	subs	r1, #4
 800bef8:	f853 2b04 	ldr.w	r2, [r3], #4
 800befc:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf00:	459c      	cmp	ip, r3
 800bf02:	d8f9      	bhi.n	800bef8 <__lshift+0xc0>
 800bf04:	e7ea      	b.n	800bedc <__lshift+0xa4>
 800bf06:	bf00      	nop
 800bf08:	0800d4bc 	.word	0x0800d4bc
 800bf0c:	0800d4de 	.word	0x0800d4de

0800bf10 <__mcmp>:
 800bf10:	690a      	ldr	r2, [r1, #16]
 800bf12:	4603      	mov	r3, r0
 800bf14:	6900      	ldr	r0, [r0, #16]
 800bf16:	1a80      	subs	r0, r0, r2
 800bf18:	b530      	push	{r4, r5, lr}
 800bf1a:	d10e      	bne.n	800bf3a <__mcmp+0x2a>
 800bf1c:	3314      	adds	r3, #20
 800bf1e:	3114      	adds	r1, #20
 800bf20:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bf24:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bf28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bf2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bf30:	4295      	cmp	r5, r2
 800bf32:	d003      	beq.n	800bf3c <__mcmp+0x2c>
 800bf34:	d205      	bcs.n	800bf42 <__mcmp+0x32>
 800bf36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bf3a:	bd30      	pop	{r4, r5, pc}
 800bf3c:	42a3      	cmp	r3, r4
 800bf3e:	d3f3      	bcc.n	800bf28 <__mcmp+0x18>
 800bf40:	e7fb      	b.n	800bf3a <__mcmp+0x2a>
 800bf42:	2001      	movs	r0, #1
 800bf44:	e7f9      	b.n	800bf3a <__mcmp+0x2a>
	...

0800bf48 <__mdiff>:
 800bf48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf4c:	4689      	mov	r9, r1
 800bf4e:	4606      	mov	r6, r0
 800bf50:	4611      	mov	r1, r2
 800bf52:	4648      	mov	r0, r9
 800bf54:	4614      	mov	r4, r2
 800bf56:	f7ff ffdb 	bl	800bf10 <__mcmp>
 800bf5a:	1e05      	subs	r5, r0, #0
 800bf5c:	d112      	bne.n	800bf84 <__mdiff+0x3c>
 800bf5e:	4629      	mov	r1, r5
 800bf60:	4630      	mov	r0, r6
 800bf62:	f7ff fd5b 	bl	800ba1c <_Balloc>
 800bf66:	4602      	mov	r2, r0
 800bf68:	b928      	cbnz	r0, 800bf76 <__mdiff+0x2e>
 800bf6a:	4b3f      	ldr	r3, [pc, #252]	@ (800c068 <__mdiff+0x120>)
 800bf6c:	f240 2137 	movw	r1, #567	@ 0x237
 800bf70:	483e      	ldr	r0, [pc, #248]	@ (800c06c <__mdiff+0x124>)
 800bf72:	f7fe fc2f 	bl	800a7d4 <__assert_func>
 800bf76:	2301      	movs	r3, #1
 800bf78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bf7c:	4610      	mov	r0, r2
 800bf7e:	b003      	add	sp, #12
 800bf80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf84:	bfbc      	itt	lt
 800bf86:	464b      	movlt	r3, r9
 800bf88:	46a1      	movlt	r9, r4
 800bf8a:	4630      	mov	r0, r6
 800bf8c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bf90:	bfba      	itte	lt
 800bf92:	461c      	movlt	r4, r3
 800bf94:	2501      	movlt	r5, #1
 800bf96:	2500      	movge	r5, #0
 800bf98:	f7ff fd40 	bl	800ba1c <_Balloc>
 800bf9c:	4602      	mov	r2, r0
 800bf9e:	b918      	cbnz	r0, 800bfa8 <__mdiff+0x60>
 800bfa0:	4b31      	ldr	r3, [pc, #196]	@ (800c068 <__mdiff+0x120>)
 800bfa2:	f240 2145 	movw	r1, #581	@ 0x245
 800bfa6:	e7e3      	b.n	800bf70 <__mdiff+0x28>
 800bfa8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bfac:	6926      	ldr	r6, [r4, #16]
 800bfae:	60c5      	str	r5, [r0, #12]
 800bfb0:	f109 0310 	add.w	r3, r9, #16
 800bfb4:	f109 0514 	add.w	r5, r9, #20
 800bfb8:	f104 0e14 	add.w	lr, r4, #20
 800bfbc:	f100 0b14 	add.w	fp, r0, #20
 800bfc0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bfc4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bfc8:	9301      	str	r3, [sp, #4]
 800bfca:	46d9      	mov	r9, fp
 800bfcc:	f04f 0c00 	mov.w	ip, #0
 800bfd0:	9b01      	ldr	r3, [sp, #4]
 800bfd2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bfd6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bfda:	9301      	str	r3, [sp, #4]
 800bfdc:	fa1f f38a 	uxth.w	r3, sl
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	b283      	uxth	r3, r0
 800bfe4:	1acb      	subs	r3, r1, r3
 800bfe6:	0c00      	lsrs	r0, r0, #16
 800bfe8:	4463      	add	r3, ip
 800bfea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bfee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bff2:	b29b      	uxth	r3, r3
 800bff4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bff8:	4576      	cmp	r6, lr
 800bffa:	f849 3b04 	str.w	r3, [r9], #4
 800bffe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c002:	d8e5      	bhi.n	800bfd0 <__mdiff+0x88>
 800c004:	1b33      	subs	r3, r6, r4
 800c006:	3b15      	subs	r3, #21
 800c008:	f023 0303 	bic.w	r3, r3, #3
 800c00c:	3415      	adds	r4, #21
 800c00e:	3304      	adds	r3, #4
 800c010:	42a6      	cmp	r6, r4
 800c012:	bf38      	it	cc
 800c014:	2304      	movcc	r3, #4
 800c016:	441d      	add	r5, r3
 800c018:	445b      	add	r3, fp
 800c01a:	461e      	mov	r6, r3
 800c01c:	462c      	mov	r4, r5
 800c01e:	4544      	cmp	r4, r8
 800c020:	d30e      	bcc.n	800c040 <__mdiff+0xf8>
 800c022:	f108 0103 	add.w	r1, r8, #3
 800c026:	1b49      	subs	r1, r1, r5
 800c028:	f021 0103 	bic.w	r1, r1, #3
 800c02c:	3d03      	subs	r5, #3
 800c02e:	45a8      	cmp	r8, r5
 800c030:	bf38      	it	cc
 800c032:	2100      	movcc	r1, #0
 800c034:	440b      	add	r3, r1
 800c036:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c03a:	b191      	cbz	r1, 800c062 <__mdiff+0x11a>
 800c03c:	6117      	str	r7, [r2, #16]
 800c03e:	e79d      	b.n	800bf7c <__mdiff+0x34>
 800c040:	f854 1b04 	ldr.w	r1, [r4], #4
 800c044:	46e6      	mov	lr, ip
 800c046:	0c08      	lsrs	r0, r1, #16
 800c048:	fa1c fc81 	uxtah	ip, ip, r1
 800c04c:	4471      	add	r1, lr
 800c04e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c052:	b289      	uxth	r1, r1
 800c054:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c058:	f846 1b04 	str.w	r1, [r6], #4
 800c05c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c060:	e7dd      	b.n	800c01e <__mdiff+0xd6>
 800c062:	3f01      	subs	r7, #1
 800c064:	e7e7      	b.n	800c036 <__mdiff+0xee>
 800c066:	bf00      	nop
 800c068:	0800d4bc 	.word	0x0800d4bc
 800c06c:	0800d4de 	.word	0x0800d4de

0800c070 <__d2b>:
 800c070:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c074:	460f      	mov	r7, r1
 800c076:	2101      	movs	r1, #1
 800c078:	ec59 8b10 	vmov	r8, r9, d0
 800c07c:	4616      	mov	r6, r2
 800c07e:	f7ff fccd 	bl	800ba1c <_Balloc>
 800c082:	4604      	mov	r4, r0
 800c084:	b930      	cbnz	r0, 800c094 <__d2b+0x24>
 800c086:	4602      	mov	r2, r0
 800c088:	4b23      	ldr	r3, [pc, #140]	@ (800c118 <__d2b+0xa8>)
 800c08a:	4824      	ldr	r0, [pc, #144]	@ (800c11c <__d2b+0xac>)
 800c08c:	f240 310f 	movw	r1, #783	@ 0x30f
 800c090:	f7fe fba0 	bl	800a7d4 <__assert_func>
 800c094:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c098:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c09c:	b10d      	cbz	r5, 800c0a2 <__d2b+0x32>
 800c09e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c0a2:	9301      	str	r3, [sp, #4]
 800c0a4:	f1b8 0300 	subs.w	r3, r8, #0
 800c0a8:	d023      	beq.n	800c0f2 <__d2b+0x82>
 800c0aa:	4668      	mov	r0, sp
 800c0ac:	9300      	str	r3, [sp, #0]
 800c0ae:	f7ff fd7c 	bl	800bbaa <__lo0bits>
 800c0b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c0b6:	b1d0      	cbz	r0, 800c0ee <__d2b+0x7e>
 800c0b8:	f1c0 0320 	rsb	r3, r0, #32
 800c0bc:	fa02 f303 	lsl.w	r3, r2, r3
 800c0c0:	430b      	orrs	r3, r1
 800c0c2:	40c2      	lsrs	r2, r0
 800c0c4:	6163      	str	r3, [r4, #20]
 800c0c6:	9201      	str	r2, [sp, #4]
 800c0c8:	9b01      	ldr	r3, [sp, #4]
 800c0ca:	61a3      	str	r3, [r4, #24]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	bf0c      	ite	eq
 800c0d0:	2201      	moveq	r2, #1
 800c0d2:	2202      	movne	r2, #2
 800c0d4:	6122      	str	r2, [r4, #16]
 800c0d6:	b1a5      	cbz	r5, 800c102 <__d2b+0x92>
 800c0d8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c0dc:	4405      	add	r5, r0
 800c0de:	603d      	str	r5, [r7, #0]
 800c0e0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c0e4:	6030      	str	r0, [r6, #0]
 800c0e6:	4620      	mov	r0, r4
 800c0e8:	b003      	add	sp, #12
 800c0ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0ee:	6161      	str	r1, [r4, #20]
 800c0f0:	e7ea      	b.n	800c0c8 <__d2b+0x58>
 800c0f2:	a801      	add	r0, sp, #4
 800c0f4:	f7ff fd59 	bl	800bbaa <__lo0bits>
 800c0f8:	9b01      	ldr	r3, [sp, #4]
 800c0fa:	6163      	str	r3, [r4, #20]
 800c0fc:	3020      	adds	r0, #32
 800c0fe:	2201      	movs	r2, #1
 800c100:	e7e8      	b.n	800c0d4 <__d2b+0x64>
 800c102:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c106:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c10a:	6038      	str	r0, [r7, #0]
 800c10c:	6918      	ldr	r0, [r3, #16]
 800c10e:	f7ff fd2d 	bl	800bb6c <__hi0bits>
 800c112:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c116:	e7e5      	b.n	800c0e4 <__d2b+0x74>
 800c118:	0800d4bc 	.word	0x0800d4bc
 800c11c:	0800d4de 	.word	0x0800d4de

0800c120 <__sread>:
 800c120:	b510      	push	{r4, lr}
 800c122:	460c      	mov	r4, r1
 800c124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c128:	f000 f8ba 	bl	800c2a0 <_read_r>
 800c12c:	2800      	cmp	r0, #0
 800c12e:	bfab      	itete	ge
 800c130:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c132:	89a3      	ldrhlt	r3, [r4, #12]
 800c134:	181b      	addge	r3, r3, r0
 800c136:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c13a:	bfac      	ite	ge
 800c13c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c13e:	81a3      	strhlt	r3, [r4, #12]
 800c140:	bd10      	pop	{r4, pc}

0800c142 <__swrite>:
 800c142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c146:	461f      	mov	r7, r3
 800c148:	898b      	ldrh	r3, [r1, #12]
 800c14a:	05db      	lsls	r3, r3, #23
 800c14c:	4605      	mov	r5, r0
 800c14e:	460c      	mov	r4, r1
 800c150:	4616      	mov	r6, r2
 800c152:	d505      	bpl.n	800c160 <__swrite+0x1e>
 800c154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c158:	2302      	movs	r3, #2
 800c15a:	2200      	movs	r2, #0
 800c15c:	f000 f88e 	bl	800c27c <_lseek_r>
 800c160:	89a3      	ldrh	r3, [r4, #12]
 800c162:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c166:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c16a:	81a3      	strh	r3, [r4, #12]
 800c16c:	4632      	mov	r2, r6
 800c16e:	463b      	mov	r3, r7
 800c170:	4628      	mov	r0, r5
 800c172:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c176:	f000 b8b5 	b.w	800c2e4 <_write_r>

0800c17a <__sseek>:
 800c17a:	b510      	push	{r4, lr}
 800c17c:	460c      	mov	r4, r1
 800c17e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c182:	f000 f87b 	bl	800c27c <_lseek_r>
 800c186:	1c43      	adds	r3, r0, #1
 800c188:	89a3      	ldrh	r3, [r4, #12]
 800c18a:	bf15      	itete	ne
 800c18c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c18e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c192:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c196:	81a3      	strheq	r3, [r4, #12]
 800c198:	bf18      	it	ne
 800c19a:	81a3      	strhne	r3, [r4, #12]
 800c19c:	bd10      	pop	{r4, pc}

0800c19e <__sclose>:
 800c19e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1a2:	f000 b85b 	b.w	800c25c <_close_r>
	...

0800c1a8 <fiprintf>:
 800c1a8:	b40e      	push	{r1, r2, r3}
 800c1aa:	b503      	push	{r0, r1, lr}
 800c1ac:	4601      	mov	r1, r0
 800c1ae:	ab03      	add	r3, sp, #12
 800c1b0:	4805      	ldr	r0, [pc, #20]	@ (800c1c8 <fiprintf+0x20>)
 800c1b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1b6:	6800      	ldr	r0, [r0, #0]
 800c1b8:	9301      	str	r3, [sp, #4]
 800c1ba:	f000 f943 	bl	800c444 <_vfiprintf_r>
 800c1be:	b002      	add	sp, #8
 800c1c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1c4:	b003      	add	sp, #12
 800c1c6:	4770      	bx	lr
 800c1c8:	200000cc 	.word	0x200000cc

0800c1cc <_realloc_r>:
 800c1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1d0:	4680      	mov	r8, r0
 800c1d2:	4615      	mov	r5, r2
 800c1d4:	460c      	mov	r4, r1
 800c1d6:	b921      	cbnz	r1, 800c1e2 <_realloc_r+0x16>
 800c1d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1dc:	4611      	mov	r1, r2
 800c1de:	f7ff bae5 	b.w	800b7ac <_malloc_r>
 800c1e2:	b92a      	cbnz	r2, 800c1f0 <_realloc_r+0x24>
 800c1e4:	f000 f8ba 	bl	800c35c <_free_r>
 800c1e8:	2400      	movs	r4, #0
 800c1ea:	4620      	mov	r0, r4
 800c1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1f0:	f000 fa52 	bl	800c698 <_malloc_usable_size_r>
 800c1f4:	4285      	cmp	r5, r0
 800c1f6:	4606      	mov	r6, r0
 800c1f8:	d802      	bhi.n	800c200 <_realloc_r+0x34>
 800c1fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c1fe:	d8f4      	bhi.n	800c1ea <_realloc_r+0x1e>
 800c200:	4629      	mov	r1, r5
 800c202:	4640      	mov	r0, r8
 800c204:	f7ff fad2 	bl	800b7ac <_malloc_r>
 800c208:	4607      	mov	r7, r0
 800c20a:	2800      	cmp	r0, #0
 800c20c:	d0ec      	beq.n	800c1e8 <_realloc_r+0x1c>
 800c20e:	42b5      	cmp	r5, r6
 800c210:	462a      	mov	r2, r5
 800c212:	4621      	mov	r1, r4
 800c214:	bf28      	it	cs
 800c216:	4632      	movcs	r2, r6
 800c218:	f000 f876 	bl	800c308 <memcpy>
 800c21c:	4621      	mov	r1, r4
 800c21e:	4640      	mov	r0, r8
 800c220:	f000 f89c 	bl	800c35c <_free_r>
 800c224:	463c      	mov	r4, r7
 800c226:	e7e0      	b.n	800c1ea <_realloc_r+0x1e>

0800c228 <memmove>:
 800c228:	4288      	cmp	r0, r1
 800c22a:	b510      	push	{r4, lr}
 800c22c:	eb01 0402 	add.w	r4, r1, r2
 800c230:	d902      	bls.n	800c238 <memmove+0x10>
 800c232:	4284      	cmp	r4, r0
 800c234:	4623      	mov	r3, r4
 800c236:	d807      	bhi.n	800c248 <memmove+0x20>
 800c238:	1e43      	subs	r3, r0, #1
 800c23a:	42a1      	cmp	r1, r4
 800c23c:	d008      	beq.n	800c250 <memmove+0x28>
 800c23e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c242:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c246:	e7f8      	b.n	800c23a <memmove+0x12>
 800c248:	4402      	add	r2, r0
 800c24a:	4601      	mov	r1, r0
 800c24c:	428a      	cmp	r2, r1
 800c24e:	d100      	bne.n	800c252 <memmove+0x2a>
 800c250:	bd10      	pop	{r4, pc}
 800c252:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c256:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c25a:	e7f7      	b.n	800c24c <memmove+0x24>

0800c25c <_close_r>:
 800c25c:	b538      	push	{r3, r4, r5, lr}
 800c25e:	4d06      	ldr	r5, [pc, #24]	@ (800c278 <_close_r+0x1c>)
 800c260:	2300      	movs	r3, #0
 800c262:	4604      	mov	r4, r0
 800c264:	4608      	mov	r0, r1
 800c266:	602b      	str	r3, [r5, #0]
 800c268:	f7f6 ffb2 	bl	80031d0 <_close>
 800c26c:	1c43      	adds	r3, r0, #1
 800c26e:	d102      	bne.n	800c276 <_close_r+0x1a>
 800c270:	682b      	ldr	r3, [r5, #0]
 800c272:	b103      	cbz	r3, 800c276 <_close_r+0x1a>
 800c274:	6023      	str	r3, [r4, #0]
 800c276:	bd38      	pop	{r3, r4, r5, pc}
 800c278:	200009b4 	.word	0x200009b4

0800c27c <_lseek_r>:
 800c27c:	b538      	push	{r3, r4, r5, lr}
 800c27e:	4d07      	ldr	r5, [pc, #28]	@ (800c29c <_lseek_r+0x20>)
 800c280:	4604      	mov	r4, r0
 800c282:	4608      	mov	r0, r1
 800c284:	4611      	mov	r1, r2
 800c286:	2200      	movs	r2, #0
 800c288:	602a      	str	r2, [r5, #0]
 800c28a:	461a      	mov	r2, r3
 800c28c:	f7f6 ffc7 	bl	800321e <_lseek>
 800c290:	1c43      	adds	r3, r0, #1
 800c292:	d102      	bne.n	800c29a <_lseek_r+0x1e>
 800c294:	682b      	ldr	r3, [r5, #0]
 800c296:	b103      	cbz	r3, 800c29a <_lseek_r+0x1e>
 800c298:	6023      	str	r3, [r4, #0]
 800c29a:	bd38      	pop	{r3, r4, r5, pc}
 800c29c:	200009b4 	.word	0x200009b4

0800c2a0 <_read_r>:
 800c2a0:	b538      	push	{r3, r4, r5, lr}
 800c2a2:	4d07      	ldr	r5, [pc, #28]	@ (800c2c0 <_read_r+0x20>)
 800c2a4:	4604      	mov	r4, r0
 800c2a6:	4608      	mov	r0, r1
 800c2a8:	4611      	mov	r1, r2
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	602a      	str	r2, [r5, #0]
 800c2ae:	461a      	mov	r2, r3
 800c2b0:	f7f6 ff55 	bl	800315e <_read>
 800c2b4:	1c43      	adds	r3, r0, #1
 800c2b6:	d102      	bne.n	800c2be <_read_r+0x1e>
 800c2b8:	682b      	ldr	r3, [r5, #0]
 800c2ba:	b103      	cbz	r3, 800c2be <_read_r+0x1e>
 800c2bc:	6023      	str	r3, [r4, #0]
 800c2be:	bd38      	pop	{r3, r4, r5, pc}
 800c2c0:	200009b4 	.word	0x200009b4

0800c2c4 <_sbrk_r>:
 800c2c4:	b538      	push	{r3, r4, r5, lr}
 800c2c6:	4d06      	ldr	r5, [pc, #24]	@ (800c2e0 <_sbrk_r+0x1c>)
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	4604      	mov	r4, r0
 800c2cc:	4608      	mov	r0, r1
 800c2ce:	602b      	str	r3, [r5, #0]
 800c2d0:	f7f6 ffb2 	bl	8003238 <_sbrk>
 800c2d4:	1c43      	adds	r3, r0, #1
 800c2d6:	d102      	bne.n	800c2de <_sbrk_r+0x1a>
 800c2d8:	682b      	ldr	r3, [r5, #0]
 800c2da:	b103      	cbz	r3, 800c2de <_sbrk_r+0x1a>
 800c2dc:	6023      	str	r3, [r4, #0]
 800c2de:	bd38      	pop	{r3, r4, r5, pc}
 800c2e0:	200009b4 	.word	0x200009b4

0800c2e4 <_write_r>:
 800c2e4:	b538      	push	{r3, r4, r5, lr}
 800c2e6:	4d07      	ldr	r5, [pc, #28]	@ (800c304 <_write_r+0x20>)
 800c2e8:	4604      	mov	r4, r0
 800c2ea:	4608      	mov	r0, r1
 800c2ec:	4611      	mov	r1, r2
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	602a      	str	r2, [r5, #0]
 800c2f2:	461a      	mov	r2, r3
 800c2f4:	f7f6 ff50 	bl	8003198 <_write>
 800c2f8:	1c43      	adds	r3, r0, #1
 800c2fa:	d102      	bne.n	800c302 <_write_r+0x1e>
 800c2fc:	682b      	ldr	r3, [r5, #0]
 800c2fe:	b103      	cbz	r3, 800c302 <_write_r+0x1e>
 800c300:	6023      	str	r3, [r4, #0]
 800c302:	bd38      	pop	{r3, r4, r5, pc}
 800c304:	200009b4 	.word	0x200009b4

0800c308 <memcpy>:
 800c308:	440a      	add	r2, r1
 800c30a:	4291      	cmp	r1, r2
 800c30c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c310:	d100      	bne.n	800c314 <memcpy+0xc>
 800c312:	4770      	bx	lr
 800c314:	b510      	push	{r4, lr}
 800c316:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c31a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c31e:	4291      	cmp	r1, r2
 800c320:	d1f9      	bne.n	800c316 <memcpy+0xe>
 800c322:	bd10      	pop	{r4, pc}

0800c324 <abort>:
 800c324:	b508      	push	{r3, lr}
 800c326:	2006      	movs	r0, #6
 800c328:	f000 fb0c 	bl	800c944 <raise>
 800c32c:	2001      	movs	r0, #1
 800c32e:	f7f6 ff0b 	bl	8003148 <_exit>

0800c332 <_calloc_r>:
 800c332:	b570      	push	{r4, r5, r6, lr}
 800c334:	fba1 5402 	umull	r5, r4, r1, r2
 800c338:	b93c      	cbnz	r4, 800c34a <_calloc_r+0x18>
 800c33a:	4629      	mov	r1, r5
 800c33c:	f7ff fa36 	bl	800b7ac <_malloc_r>
 800c340:	4606      	mov	r6, r0
 800c342:	b928      	cbnz	r0, 800c350 <_calloc_r+0x1e>
 800c344:	2600      	movs	r6, #0
 800c346:	4630      	mov	r0, r6
 800c348:	bd70      	pop	{r4, r5, r6, pc}
 800c34a:	220c      	movs	r2, #12
 800c34c:	6002      	str	r2, [r0, #0]
 800c34e:	e7f9      	b.n	800c344 <_calloc_r+0x12>
 800c350:	462a      	mov	r2, r5
 800c352:	4621      	mov	r1, r4
 800c354:	f7fe fa03 	bl	800a75e <memset>
 800c358:	e7f5      	b.n	800c346 <_calloc_r+0x14>
	...

0800c35c <_free_r>:
 800c35c:	b538      	push	{r3, r4, r5, lr}
 800c35e:	4605      	mov	r5, r0
 800c360:	2900      	cmp	r1, #0
 800c362:	d041      	beq.n	800c3e8 <_free_r+0x8c>
 800c364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c368:	1f0c      	subs	r4, r1, #4
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	bfb8      	it	lt
 800c36e:	18e4      	addlt	r4, r4, r3
 800c370:	f7ff fb48 	bl	800ba04 <__malloc_lock>
 800c374:	4a1d      	ldr	r2, [pc, #116]	@ (800c3ec <_free_r+0x90>)
 800c376:	6813      	ldr	r3, [r2, #0]
 800c378:	b933      	cbnz	r3, 800c388 <_free_r+0x2c>
 800c37a:	6063      	str	r3, [r4, #4]
 800c37c:	6014      	str	r4, [r2, #0]
 800c37e:	4628      	mov	r0, r5
 800c380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c384:	f7ff bb44 	b.w	800ba10 <__malloc_unlock>
 800c388:	42a3      	cmp	r3, r4
 800c38a:	d908      	bls.n	800c39e <_free_r+0x42>
 800c38c:	6820      	ldr	r0, [r4, #0]
 800c38e:	1821      	adds	r1, r4, r0
 800c390:	428b      	cmp	r3, r1
 800c392:	bf01      	itttt	eq
 800c394:	6819      	ldreq	r1, [r3, #0]
 800c396:	685b      	ldreq	r3, [r3, #4]
 800c398:	1809      	addeq	r1, r1, r0
 800c39a:	6021      	streq	r1, [r4, #0]
 800c39c:	e7ed      	b.n	800c37a <_free_r+0x1e>
 800c39e:	461a      	mov	r2, r3
 800c3a0:	685b      	ldr	r3, [r3, #4]
 800c3a2:	b10b      	cbz	r3, 800c3a8 <_free_r+0x4c>
 800c3a4:	42a3      	cmp	r3, r4
 800c3a6:	d9fa      	bls.n	800c39e <_free_r+0x42>
 800c3a8:	6811      	ldr	r1, [r2, #0]
 800c3aa:	1850      	adds	r0, r2, r1
 800c3ac:	42a0      	cmp	r0, r4
 800c3ae:	d10b      	bne.n	800c3c8 <_free_r+0x6c>
 800c3b0:	6820      	ldr	r0, [r4, #0]
 800c3b2:	4401      	add	r1, r0
 800c3b4:	1850      	adds	r0, r2, r1
 800c3b6:	4283      	cmp	r3, r0
 800c3b8:	6011      	str	r1, [r2, #0]
 800c3ba:	d1e0      	bne.n	800c37e <_free_r+0x22>
 800c3bc:	6818      	ldr	r0, [r3, #0]
 800c3be:	685b      	ldr	r3, [r3, #4]
 800c3c0:	6053      	str	r3, [r2, #4]
 800c3c2:	4408      	add	r0, r1
 800c3c4:	6010      	str	r0, [r2, #0]
 800c3c6:	e7da      	b.n	800c37e <_free_r+0x22>
 800c3c8:	d902      	bls.n	800c3d0 <_free_r+0x74>
 800c3ca:	230c      	movs	r3, #12
 800c3cc:	602b      	str	r3, [r5, #0]
 800c3ce:	e7d6      	b.n	800c37e <_free_r+0x22>
 800c3d0:	6820      	ldr	r0, [r4, #0]
 800c3d2:	1821      	adds	r1, r4, r0
 800c3d4:	428b      	cmp	r3, r1
 800c3d6:	bf04      	itt	eq
 800c3d8:	6819      	ldreq	r1, [r3, #0]
 800c3da:	685b      	ldreq	r3, [r3, #4]
 800c3dc:	6063      	str	r3, [r4, #4]
 800c3de:	bf04      	itt	eq
 800c3e0:	1809      	addeq	r1, r1, r0
 800c3e2:	6021      	streq	r1, [r4, #0]
 800c3e4:	6054      	str	r4, [r2, #4]
 800c3e6:	e7ca      	b.n	800c37e <_free_r+0x22>
 800c3e8:	bd38      	pop	{r3, r4, r5, pc}
 800c3ea:	bf00      	nop
 800c3ec:	200009b0 	.word	0x200009b0

0800c3f0 <__sfputc_r>:
 800c3f0:	6893      	ldr	r3, [r2, #8]
 800c3f2:	3b01      	subs	r3, #1
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	b410      	push	{r4}
 800c3f8:	6093      	str	r3, [r2, #8]
 800c3fa:	da08      	bge.n	800c40e <__sfputc_r+0x1e>
 800c3fc:	6994      	ldr	r4, [r2, #24]
 800c3fe:	42a3      	cmp	r3, r4
 800c400:	db01      	blt.n	800c406 <__sfputc_r+0x16>
 800c402:	290a      	cmp	r1, #10
 800c404:	d103      	bne.n	800c40e <__sfputc_r+0x1e>
 800c406:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c40a:	f000 b94d 	b.w	800c6a8 <__swbuf_r>
 800c40e:	6813      	ldr	r3, [r2, #0]
 800c410:	1c58      	adds	r0, r3, #1
 800c412:	6010      	str	r0, [r2, #0]
 800c414:	7019      	strb	r1, [r3, #0]
 800c416:	4608      	mov	r0, r1
 800c418:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c41c:	4770      	bx	lr

0800c41e <__sfputs_r>:
 800c41e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c420:	4606      	mov	r6, r0
 800c422:	460f      	mov	r7, r1
 800c424:	4614      	mov	r4, r2
 800c426:	18d5      	adds	r5, r2, r3
 800c428:	42ac      	cmp	r4, r5
 800c42a:	d101      	bne.n	800c430 <__sfputs_r+0x12>
 800c42c:	2000      	movs	r0, #0
 800c42e:	e007      	b.n	800c440 <__sfputs_r+0x22>
 800c430:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c434:	463a      	mov	r2, r7
 800c436:	4630      	mov	r0, r6
 800c438:	f7ff ffda 	bl	800c3f0 <__sfputc_r>
 800c43c:	1c43      	adds	r3, r0, #1
 800c43e:	d1f3      	bne.n	800c428 <__sfputs_r+0xa>
 800c440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c444 <_vfiprintf_r>:
 800c444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c448:	460d      	mov	r5, r1
 800c44a:	b09d      	sub	sp, #116	@ 0x74
 800c44c:	4614      	mov	r4, r2
 800c44e:	4698      	mov	r8, r3
 800c450:	4606      	mov	r6, r0
 800c452:	b118      	cbz	r0, 800c45c <_vfiprintf_r+0x18>
 800c454:	6a03      	ldr	r3, [r0, #32]
 800c456:	b90b      	cbnz	r3, 800c45c <_vfiprintf_r+0x18>
 800c458:	f7fe f938 	bl	800a6cc <__sinit>
 800c45c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c45e:	07d9      	lsls	r1, r3, #31
 800c460:	d405      	bmi.n	800c46e <_vfiprintf_r+0x2a>
 800c462:	89ab      	ldrh	r3, [r5, #12]
 800c464:	059a      	lsls	r2, r3, #22
 800c466:	d402      	bmi.n	800c46e <_vfiprintf_r+0x2a>
 800c468:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c46a:	f7fe f9b0 	bl	800a7ce <__retarget_lock_acquire_recursive>
 800c46e:	89ab      	ldrh	r3, [r5, #12]
 800c470:	071b      	lsls	r3, r3, #28
 800c472:	d501      	bpl.n	800c478 <_vfiprintf_r+0x34>
 800c474:	692b      	ldr	r3, [r5, #16]
 800c476:	b99b      	cbnz	r3, 800c4a0 <_vfiprintf_r+0x5c>
 800c478:	4629      	mov	r1, r5
 800c47a:	4630      	mov	r0, r6
 800c47c:	f000 f952 	bl	800c724 <__swsetup_r>
 800c480:	b170      	cbz	r0, 800c4a0 <_vfiprintf_r+0x5c>
 800c482:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c484:	07dc      	lsls	r4, r3, #31
 800c486:	d504      	bpl.n	800c492 <_vfiprintf_r+0x4e>
 800c488:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c48c:	b01d      	add	sp, #116	@ 0x74
 800c48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c492:	89ab      	ldrh	r3, [r5, #12]
 800c494:	0598      	lsls	r0, r3, #22
 800c496:	d4f7      	bmi.n	800c488 <_vfiprintf_r+0x44>
 800c498:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c49a:	f7fe f999 	bl	800a7d0 <__retarget_lock_release_recursive>
 800c49e:	e7f3      	b.n	800c488 <_vfiprintf_r+0x44>
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4a4:	2320      	movs	r3, #32
 800c4a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c4aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4ae:	2330      	movs	r3, #48	@ 0x30
 800c4b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c660 <_vfiprintf_r+0x21c>
 800c4b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c4b8:	f04f 0901 	mov.w	r9, #1
 800c4bc:	4623      	mov	r3, r4
 800c4be:	469a      	mov	sl, r3
 800c4c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4c4:	b10a      	cbz	r2, 800c4ca <_vfiprintf_r+0x86>
 800c4c6:	2a25      	cmp	r2, #37	@ 0x25
 800c4c8:	d1f9      	bne.n	800c4be <_vfiprintf_r+0x7a>
 800c4ca:	ebba 0b04 	subs.w	fp, sl, r4
 800c4ce:	d00b      	beq.n	800c4e8 <_vfiprintf_r+0xa4>
 800c4d0:	465b      	mov	r3, fp
 800c4d2:	4622      	mov	r2, r4
 800c4d4:	4629      	mov	r1, r5
 800c4d6:	4630      	mov	r0, r6
 800c4d8:	f7ff ffa1 	bl	800c41e <__sfputs_r>
 800c4dc:	3001      	adds	r0, #1
 800c4de:	f000 80a7 	beq.w	800c630 <_vfiprintf_r+0x1ec>
 800c4e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c4e4:	445a      	add	r2, fp
 800c4e6:	9209      	str	r2, [sp, #36]	@ 0x24
 800c4e8:	f89a 3000 	ldrb.w	r3, [sl]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	f000 809f 	beq.w	800c630 <_vfiprintf_r+0x1ec>
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c4f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4fc:	f10a 0a01 	add.w	sl, sl, #1
 800c500:	9304      	str	r3, [sp, #16]
 800c502:	9307      	str	r3, [sp, #28]
 800c504:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c508:	931a      	str	r3, [sp, #104]	@ 0x68
 800c50a:	4654      	mov	r4, sl
 800c50c:	2205      	movs	r2, #5
 800c50e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c512:	4853      	ldr	r0, [pc, #332]	@ (800c660 <_vfiprintf_r+0x21c>)
 800c514:	f7f3 fe74 	bl	8000200 <memchr>
 800c518:	9a04      	ldr	r2, [sp, #16]
 800c51a:	b9d8      	cbnz	r0, 800c554 <_vfiprintf_r+0x110>
 800c51c:	06d1      	lsls	r1, r2, #27
 800c51e:	bf44      	itt	mi
 800c520:	2320      	movmi	r3, #32
 800c522:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c526:	0713      	lsls	r3, r2, #28
 800c528:	bf44      	itt	mi
 800c52a:	232b      	movmi	r3, #43	@ 0x2b
 800c52c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c530:	f89a 3000 	ldrb.w	r3, [sl]
 800c534:	2b2a      	cmp	r3, #42	@ 0x2a
 800c536:	d015      	beq.n	800c564 <_vfiprintf_r+0x120>
 800c538:	9a07      	ldr	r2, [sp, #28]
 800c53a:	4654      	mov	r4, sl
 800c53c:	2000      	movs	r0, #0
 800c53e:	f04f 0c0a 	mov.w	ip, #10
 800c542:	4621      	mov	r1, r4
 800c544:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c548:	3b30      	subs	r3, #48	@ 0x30
 800c54a:	2b09      	cmp	r3, #9
 800c54c:	d94b      	bls.n	800c5e6 <_vfiprintf_r+0x1a2>
 800c54e:	b1b0      	cbz	r0, 800c57e <_vfiprintf_r+0x13a>
 800c550:	9207      	str	r2, [sp, #28]
 800c552:	e014      	b.n	800c57e <_vfiprintf_r+0x13a>
 800c554:	eba0 0308 	sub.w	r3, r0, r8
 800c558:	fa09 f303 	lsl.w	r3, r9, r3
 800c55c:	4313      	orrs	r3, r2
 800c55e:	9304      	str	r3, [sp, #16]
 800c560:	46a2      	mov	sl, r4
 800c562:	e7d2      	b.n	800c50a <_vfiprintf_r+0xc6>
 800c564:	9b03      	ldr	r3, [sp, #12]
 800c566:	1d19      	adds	r1, r3, #4
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	9103      	str	r1, [sp, #12]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	bfbb      	ittet	lt
 800c570:	425b      	neglt	r3, r3
 800c572:	f042 0202 	orrlt.w	r2, r2, #2
 800c576:	9307      	strge	r3, [sp, #28]
 800c578:	9307      	strlt	r3, [sp, #28]
 800c57a:	bfb8      	it	lt
 800c57c:	9204      	strlt	r2, [sp, #16]
 800c57e:	7823      	ldrb	r3, [r4, #0]
 800c580:	2b2e      	cmp	r3, #46	@ 0x2e
 800c582:	d10a      	bne.n	800c59a <_vfiprintf_r+0x156>
 800c584:	7863      	ldrb	r3, [r4, #1]
 800c586:	2b2a      	cmp	r3, #42	@ 0x2a
 800c588:	d132      	bne.n	800c5f0 <_vfiprintf_r+0x1ac>
 800c58a:	9b03      	ldr	r3, [sp, #12]
 800c58c:	1d1a      	adds	r2, r3, #4
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	9203      	str	r2, [sp, #12]
 800c592:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c596:	3402      	adds	r4, #2
 800c598:	9305      	str	r3, [sp, #20]
 800c59a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c670 <_vfiprintf_r+0x22c>
 800c59e:	7821      	ldrb	r1, [r4, #0]
 800c5a0:	2203      	movs	r2, #3
 800c5a2:	4650      	mov	r0, sl
 800c5a4:	f7f3 fe2c 	bl	8000200 <memchr>
 800c5a8:	b138      	cbz	r0, 800c5ba <_vfiprintf_r+0x176>
 800c5aa:	9b04      	ldr	r3, [sp, #16]
 800c5ac:	eba0 000a 	sub.w	r0, r0, sl
 800c5b0:	2240      	movs	r2, #64	@ 0x40
 800c5b2:	4082      	lsls	r2, r0
 800c5b4:	4313      	orrs	r3, r2
 800c5b6:	3401      	adds	r4, #1
 800c5b8:	9304      	str	r3, [sp, #16]
 800c5ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5be:	4829      	ldr	r0, [pc, #164]	@ (800c664 <_vfiprintf_r+0x220>)
 800c5c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c5c4:	2206      	movs	r2, #6
 800c5c6:	f7f3 fe1b 	bl	8000200 <memchr>
 800c5ca:	2800      	cmp	r0, #0
 800c5cc:	d03f      	beq.n	800c64e <_vfiprintf_r+0x20a>
 800c5ce:	4b26      	ldr	r3, [pc, #152]	@ (800c668 <_vfiprintf_r+0x224>)
 800c5d0:	bb1b      	cbnz	r3, 800c61a <_vfiprintf_r+0x1d6>
 800c5d2:	9b03      	ldr	r3, [sp, #12]
 800c5d4:	3307      	adds	r3, #7
 800c5d6:	f023 0307 	bic.w	r3, r3, #7
 800c5da:	3308      	adds	r3, #8
 800c5dc:	9303      	str	r3, [sp, #12]
 800c5de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5e0:	443b      	add	r3, r7
 800c5e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5e4:	e76a      	b.n	800c4bc <_vfiprintf_r+0x78>
 800c5e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5ea:	460c      	mov	r4, r1
 800c5ec:	2001      	movs	r0, #1
 800c5ee:	e7a8      	b.n	800c542 <_vfiprintf_r+0xfe>
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	3401      	adds	r4, #1
 800c5f4:	9305      	str	r3, [sp, #20]
 800c5f6:	4619      	mov	r1, r3
 800c5f8:	f04f 0c0a 	mov.w	ip, #10
 800c5fc:	4620      	mov	r0, r4
 800c5fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c602:	3a30      	subs	r2, #48	@ 0x30
 800c604:	2a09      	cmp	r2, #9
 800c606:	d903      	bls.n	800c610 <_vfiprintf_r+0x1cc>
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d0c6      	beq.n	800c59a <_vfiprintf_r+0x156>
 800c60c:	9105      	str	r1, [sp, #20]
 800c60e:	e7c4      	b.n	800c59a <_vfiprintf_r+0x156>
 800c610:	fb0c 2101 	mla	r1, ip, r1, r2
 800c614:	4604      	mov	r4, r0
 800c616:	2301      	movs	r3, #1
 800c618:	e7f0      	b.n	800c5fc <_vfiprintf_r+0x1b8>
 800c61a:	ab03      	add	r3, sp, #12
 800c61c:	9300      	str	r3, [sp, #0]
 800c61e:	462a      	mov	r2, r5
 800c620:	4b12      	ldr	r3, [pc, #72]	@ (800c66c <_vfiprintf_r+0x228>)
 800c622:	a904      	add	r1, sp, #16
 800c624:	4630      	mov	r0, r6
 800c626:	f7fd fb6d 	bl	8009d04 <_printf_float>
 800c62a:	4607      	mov	r7, r0
 800c62c:	1c78      	adds	r0, r7, #1
 800c62e:	d1d6      	bne.n	800c5de <_vfiprintf_r+0x19a>
 800c630:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c632:	07d9      	lsls	r1, r3, #31
 800c634:	d405      	bmi.n	800c642 <_vfiprintf_r+0x1fe>
 800c636:	89ab      	ldrh	r3, [r5, #12]
 800c638:	059a      	lsls	r2, r3, #22
 800c63a:	d402      	bmi.n	800c642 <_vfiprintf_r+0x1fe>
 800c63c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c63e:	f7fe f8c7 	bl	800a7d0 <__retarget_lock_release_recursive>
 800c642:	89ab      	ldrh	r3, [r5, #12]
 800c644:	065b      	lsls	r3, r3, #25
 800c646:	f53f af1f 	bmi.w	800c488 <_vfiprintf_r+0x44>
 800c64a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c64c:	e71e      	b.n	800c48c <_vfiprintf_r+0x48>
 800c64e:	ab03      	add	r3, sp, #12
 800c650:	9300      	str	r3, [sp, #0]
 800c652:	462a      	mov	r2, r5
 800c654:	4b05      	ldr	r3, [pc, #20]	@ (800c66c <_vfiprintf_r+0x228>)
 800c656:	a904      	add	r1, sp, #16
 800c658:	4630      	mov	r0, r6
 800c65a:	f7fd fdeb 	bl	800a234 <_printf_i>
 800c65e:	e7e4      	b.n	800c62a <_vfiprintf_r+0x1e6>
 800c660:	0800d4cd 	.word	0x0800d4cd
 800c664:	0800d4d7 	.word	0x0800d4d7
 800c668:	08009d05 	.word	0x08009d05
 800c66c:	0800c41f 	.word	0x0800c41f
 800c670:	0800d4d3 	.word	0x0800d4d3

0800c674 <__ascii_mbtowc>:
 800c674:	b082      	sub	sp, #8
 800c676:	b901      	cbnz	r1, 800c67a <__ascii_mbtowc+0x6>
 800c678:	a901      	add	r1, sp, #4
 800c67a:	b142      	cbz	r2, 800c68e <__ascii_mbtowc+0x1a>
 800c67c:	b14b      	cbz	r3, 800c692 <__ascii_mbtowc+0x1e>
 800c67e:	7813      	ldrb	r3, [r2, #0]
 800c680:	600b      	str	r3, [r1, #0]
 800c682:	7812      	ldrb	r2, [r2, #0]
 800c684:	1e10      	subs	r0, r2, #0
 800c686:	bf18      	it	ne
 800c688:	2001      	movne	r0, #1
 800c68a:	b002      	add	sp, #8
 800c68c:	4770      	bx	lr
 800c68e:	4610      	mov	r0, r2
 800c690:	e7fb      	b.n	800c68a <__ascii_mbtowc+0x16>
 800c692:	f06f 0001 	mvn.w	r0, #1
 800c696:	e7f8      	b.n	800c68a <__ascii_mbtowc+0x16>

0800c698 <_malloc_usable_size_r>:
 800c698:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c69c:	1f18      	subs	r0, r3, #4
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	bfbc      	itt	lt
 800c6a2:	580b      	ldrlt	r3, [r1, r0]
 800c6a4:	18c0      	addlt	r0, r0, r3
 800c6a6:	4770      	bx	lr

0800c6a8 <__swbuf_r>:
 800c6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6aa:	460e      	mov	r6, r1
 800c6ac:	4614      	mov	r4, r2
 800c6ae:	4605      	mov	r5, r0
 800c6b0:	b118      	cbz	r0, 800c6ba <__swbuf_r+0x12>
 800c6b2:	6a03      	ldr	r3, [r0, #32]
 800c6b4:	b90b      	cbnz	r3, 800c6ba <__swbuf_r+0x12>
 800c6b6:	f7fe f809 	bl	800a6cc <__sinit>
 800c6ba:	69a3      	ldr	r3, [r4, #24]
 800c6bc:	60a3      	str	r3, [r4, #8]
 800c6be:	89a3      	ldrh	r3, [r4, #12]
 800c6c0:	071a      	lsls	r2, r3, #28
 800c6c2:	d501      	bpl.n	800c6c8 <__swbuf_r+0x20>
 800c6c4:	6923      	ldr	r3, [r4, #16]
 800c6c6:	b943      	cbnz	r3, 800c6da <__swbuf_r+0x32>
 800c6c8:	4621      	mov	r1, r4
 800c6ca:	4628      	mov	r0, r5
 800c6cc:	f000 f82a 	bl	800c724 <__swsetup_r>
 800c6d0:	b118      	cbz	r0, 800c6da <__swbuf_r+0x32>
 800c6d2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c6d6:	4638      	mov	r0, r7
 800c6d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6da:	6823      	ldr	r3, [r4, #0]
 800c6dc:	6922      	ldr	r2, [r4, #16]
 800c6de:	1a98      	subs	r0, r3, r2
 800c6e0:	6963      	ldr	r3, [r4, #20]
 800c6e2:	b2f6      	uxtb	r6, r6
 800c6e4:	4283      	cmp	r3, r0
 800c6e6:	4637      	mov	r7, r6
 800c6e8:	dc05      	bgt.n	800c6f6 <__swbuf_r+0x4e>
 800c6ea:	4621      	mov	r1, r4
 800c6ec:	4628      	mov	r0, r5
 800c6ee:	f7ff f961 	bl	800b9b4 <_fflush_r>
 800c6f2:	2800      	cmp	r0, #0
 800c6f4:	d1ed      	bne.n	800c6d2 <__swbuf_r+0x2a>
 800c6f6:	68a3      	ldr	r3, [r4, #8]
 800c6f8:	3b01      	subs	r3, #1
 800c6fa:	60a3      	str	r3, [r4, #8]
 800c6fc:	6823      	ldr	r3, [r4, #0]
 800c6fe:	1c5a      	adds	r2, r3, #1
 800c700:	6022      	str	r2, [r4, #0]
 800c702:	701e      	strb	r6, [r3, #0]
 800c704:	6962      	ldr	r2, [r4, #20]
 800c706:	1c43      	adds	r3, r0, #1
 800c708:	429a      	cmp	r2, r3
 800c70a:	d004      	beq.n	800c716 <__swbuf_r+0x6e>
 800c70c:	89a3      	ldrh	r3, [r4, #12]
 800c70e:	07db      	lsls	r3, r3, #31
 800c710:	d5e1      	bpl.n	800c6d6 <__swbuf_r+0x2e>
 800c712:	2e0a      	cmp	r6, #10
 800c714:	d1df      	bne.n	800c6d6 <__swbuf_r+0x2e>
 800c716:	4621      	mov	r1, r4
 800c718:	4628      	mov	r0, r5
 800c71a:	f7ff f94b 	bl	800b9b4 <_fflush_r>
 800c71e:	2800      	cmp	r0, #0
 800c720:	d0d9      	beq.n	800c6d6 <__swbuf_r+0x2e>
 800c722:	e7d6      	b.n	800c6d2 <__swbuf_r+0x2a>

0800c724 <__swsetup_r>:
 800c724:	b538      	push	{r3, r4, r5, lr}
 800c726:	4b29      	ldr	r3, [pc, #164]	@ (800c7cc <__swsetup_r+0xa8>)
 800c728:	4605      	mov	r5, r0
 800c72a:	6818      	ldr	r0, [r3, #0]
 800c72c:	460c      	mov	r4, r1
 800c72e:	b118      	cbz	r0, 800c738 <__swsetup_r+0x14>
 800c730:	6a03      	ldr	r3, [r0, #32]
 800c732:	b90b      	cbnz	r3, 800c738 <__swsetup_r+0x14>
 800c734:	f7fd ffca 	bl	800a6cc <__sinit>
 800c738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c73c:	0719      	lsls	r1, r3, #28
 800c73e:	d422      	bmi.n	800c786 <__swsetup_r+0x62>
 800c740:	06da      	lsls	r2, r3, #27
 800c742:	d407      	bmi.n	800c754 <__swsetup_r+0x30>
 800c744:	2209      	movs	r2, #9
 800c746:	602a      	str	r2, [r5, #0]
 800c748:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c74c:	81a3      	strh	r3, [r4, #12]
 800c74e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c752:	e033      	b.n	800c7bc <__swsetup_r+0x98>
 800c754:	0758      	lsls	r0, r3, #29
 800c756:	d512      	bpl.n	800c77e <__swsetup_r+0x5a>
 800c758:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c75a:	b141      	cbz	r1, 800c76e <__swsetup_r+0x4a>
 800c75c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c760:	4299      	cmp	r1, r3
 800c762:	d002      	beq.n	800c76a <__swsetup_r+0x46>
 800c764:	4628      	mov	r0, r5
 800c766:	f7ff fdf9 	bl	800c35c <_free_r>
 800c76a:	2300      	movs	r3, #0
 800c76c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c76e:	89a3      	ldrh	r3, [r4, #12]
 800c770:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c774:	81a3      	strh	r3, [r4, #12]
 800c776:	2300      	movs	r3, #0
 800c778:	6063      	str	r3, [r4, #4]
 800c77a:	6923      	ldr	r3, [r4, #16]
 800c77c:	6023      	str	r3, [r4, #0]
 800c77e:	89a3      	ldrh	r3, [r4, #12]
 800c780:	f043 0308 	orr.w	r3, r3, #8
 800c784:	81a3      	strh	r3, [r4, #12]
 800c786:	6923      	ldr	r3, [r4, #16]
 800c788:	b94b      	cbnz	r3, 800c79e <__swsetup_r+0x7a>
 800c78a:	89a3      	ldrh	r3, [r4, #12]
 800c78c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c790:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c794:	d003      	beq.n	800c79e <__swsetup_r+0x7a>
 800c796:	4621      	mov	r1, r4
 800c798:	4628      	mov	r0, r5
 800c79a:	f000 f84c 	bl	800c836 <__smakebuf_r>
 800c79e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7a2:	f013 0201 	ands.w	r2, r3, #1
 800c7a6:	d00a      	beq.n	800c7be <__swsetup_r+0x9a>
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	60a2      	str	r2, [r4, #8]
 800c7ac:	6962      	ldr	r2, [r4, #20]
 800c7ae:	4252      	negs	r2, r2
 800c7b0:	61a2      	str	r2, [r4, #24]
 800c7b2:	6922      	ldr	r2, [r4, #16]
 800c7b4:	b942      	cbnz	r2, 800c7c8 <__swsetup_r+0xa4>
 800c7b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c7ba:	d1c5      	bne.n	800c748 <__swsetup_r+0x24>
 800c7bc:	bd38      	pop	{r3, r4, r5, pc}
 800c7be:	0799      	lsls	r1, r3, #30
 800c7c0:	bf58      	it	pl
 800c7c2:	6962      	ldrpl	r2, [r4, #20]
 800c7c4:	60a2      	str	r2, [r4, #8]
 800c7c6:	e7f4      	b.n	800c7b2 <__swsetup_r+0x8e>
 800c7c8:	2000      	movs	r0, #0
 800c7ca:	e7f7      	b.n	800c7bc <__swsetup_r+0x98>
 800c7cc:	200000cc 	.word	0x200000cc

0800c7d0 <__ascii_wctomb>:
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	4608      	mov	r0, r1
 800c7d4:	b141      	cbz	r1, 800c7e8 <__ascii_wctomb+0x18>
 800c7d6:	2aff      	cmp	r2, #255	@ 0xff
 800c7d8:	d904      	bls.n	800c7e4 <__ascii_wctomb+0x14>
 800c7da:	228a      	movs	r2, #138	@ 0x8a
 800c7dc:	601a      	str	r2, [r3, #0]
 800c7de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c7e2:	4770      	bx	lr
 800c7e4:	700a      	strb	r2, [r1, #0]
 800c7e6:	2001      	movs	r0, #1
 800c7e8:	4770      	bx	lr

0800c7ea <__swhatbuf_r>:
 800c7ea:	b570      	push	{r4, r5, r6, lr}
 800c7ec:	460c      	mov	r4, r1
 800c7ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7f2:	2900      	cmp	r1, #0
 800c7f4:	b096      	sub	sp, #88	@ 0x58
 800c7f6:	4615      	mov	r5, r2
 800c7f8:	461e      	mov	r6, r3
 800c7fa:	da0d      	bge.n	800c818 <__swhatbuf_r+0x2e>
 800c7fc:	89a3      	ldrh	r3, [r4, #12]
 800c7fe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c802:	f04f 0100 	mov.w	r1, #0
 800c806:	bf14      	ite	ne
 800c808:	2340      	movne	r3, #64	@ 0x40
 800c80a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c80e:	2000      	movs	r0, #0
 800c810:	6031      	str	r1, [r6, #0]
 800c812:	602b      	str	r3, [r5, #0]
 800c814:	b016      	add	sp, #88	@ 0x58
 800c816:	bd70      	pop	{r4, r5, r6, pc}
 800c818:	466a      	mov	r2, sp
 800c81a:	f000 f849 	bl	800c8b0 <_fstat_r>
 800c81e:	2800      	cmp	r0, #0
 800c820:	dbec      	blt.n	800c7fc <__swhatbuf_r+0x12>
 800c822:	9901      	ldr	r1, [sp, #4]
 800c824:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c828:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c82c:	4259      	negs	r1, r3
 800c82e:	4159      	adcs	r1, r3
 800c830:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c834:	e7eb      	b.n	800c80e <__swhatbuf_r+0x24>

0800c836 <__smakebuf_r>:
 800c836:	898b      	ldrh	r3, [r1, #12]
 800c838:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c83a:	079d      	lsls	r5, r3, #30
 800c83c:	4606      	mov	r6, r0
 800c83e:	460c      	mov	r4, r1
 800c840:	d507      	bpl.n	800c852 <__smakebuf_r+0x1c>
 800c842:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c846:	6023      	str	r3, [r4, #0]
 800c848:	6123      	str	r3, [r4, #16]
 800c84a:	2301      	movs	r3, #1
 800c84c:	6163      	str	r3, [r4, #20]
 800c84e:	b003      	add	sp, #12
 800c850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c852:	ab01      	add	r3, sp, #4
 800c854:	466a      	mov	r2, sp
 800c856:	f7ff ffc8 	bl	800c7ea <__swhatbuf_r>
 800c85a:	9f00      	ldr	r7, [sp, #0]
 800c85c:	4605      	mov	r5, r0
 800c85e:	4639      	mov	r1, r7
 800c860:	4630      	mov	r0, r6
 800c862:	f7fe ffa3 	bl	800b7ac <_malloc_r>
 800c866:	b948      	cbnz	r0, 800c87c <__smakebuf_r+0x46>
 800c868:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c86c:	059a      	lsls	r2, r3, #22
 800c86e:	d4ee      	bmi.n	800c84e <__smakebuf_r+0x18>
 800c870:	f023 0303 	bic.w	r3, r3, #3
 800c874:	f043 0302 	orr.w	r3, r3, #2
 800c878:	81a3      	strh	r3, [r4, #12]
 800c87a:	e7e2      	b.n	800c842 <__smakebuf_r+0xc>
 800c87c:	89a3      	ldrh	r3, [r4, #12]
 800c87e:	6020      	str	r0, [r4, #0]
 800c880:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c884:	81a3      	strh	r3, [r4, #12]
 800c886:	9b01      	ldr	r3, [sp, #4]
 800c888:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c88c:	b15b      	cbz	r3, 800c8a6 <__smakebuf_r+0x70>
 800c88e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c892:	4630      	mov	r0, r6
 800c894:	f000 f81e 	bl	800c8d4 <_isatty_r>
 800c898:	b128      	cbz	r0, 800c8a6 <__smakebuf_r+0x70>
 800c89a:	89a3      	ldrh	r3, [r4, #12]
 800c89c:	f023 0303 	bic.w	r3, r3, #3
 800c8a0:	f043 0301 	orr.w	r3, r3, #1
 800c8a4:	81a3      	strh	r3, [r4, #12]
 800c8a6:	89a3      	ldrh	r3, [r4, #12]
 800c8a8:	431d      	orrs	r5, r3
 800c8aa:	81a5      	strh	r5, [r4, #12]
 800c8ac:	e7cf      	b.n	800c84e <__smakebuf_r+0x18>
	...

0800c8b0 <_fstat_r>:
 800c8b0:	b538      	push	{r3, r4, r5, lr}
 800c8b2:	4d07      	ldr	r5, [pc, #28]	@ (800c8d0 <_fstat_r+0x20>)
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	4604      	mov	r4, r0
 800c8b8:	4608      	mov	r0, r1
 800c8ba:	4611      	mov	r1, r2
 800c8bc:	602b      	str	r3, [r5, #0]
 800c8be:	f7f6 fc93 	bl	80031e8 <_fstat>
 800c8c2:	1c43      	adds	r3, r0, #1
 800c8c4:	d102      	bne.n	800c8cc <_fstat_r+0x1c>
 800c8c6:	682b      	ldr	r3, [r5, #0]
 800c8c8:	b103      	cbz	r3, 800c8cc <_fstat_r+0x1c>
 800c8ca:	6023      	str	r3, [r4, #0]
 800c8cc:	bd38      	pop	{r3, r4, r5, pc}
 800c8ce:	bf00      	nop
 800c8d0:	200009b4 	.word	0x200009b4

0800c8d4 <_isatty_r>:
 800c8d4:	b538      	push	{r3, r4, r5, lr}
 800c8d6:	4d06      	ldr	r5, [pc, #24]	@ (800c8f0 <_isatty_r+0x1c>)
 800c8d8:	2300      	movs	r3, #0
 800c8da:	4604      	mov	r4, r0
 800c8dc:	4608      	mov	r0, r1
 800c8de:	602b      	str	r3, [r5, #0]
 800c8e0:	f7f6 fc92 	bl	8003208 <_isatty>
 800c8e4:	1c43      	adds	r3, r0, #1
 800c8e6:	d102      	bne.n	800c8ee <_isatty_r+0x1a>
 800c8e8:	682b      	ldr	r3, [r5, #0]
 800c8ea:	b103      	cbz	r3, 800c8ee <_isatty_r+0x1a>
 800c8ec:	6023      	str	r3, [r4, #0]
 800c8ee:	bd38      	pop	{r3, r4, r5, pc}
 800c8f0:	200009b4 	.word	0x200009b4

0800c8f4 <_raise_r>:
 800c8f4:	291f      	cmp	r1, #31
 800c8f6:	b538      	push	{r3, r4, r5, lr}
 800c8f8:	4605      	mov	r5, r0
 800c8fa:	460c      	mov	r4, r1
 800c8fc:	d904      	bls.n	800c908 <_raise_r+0x14>
 800c8fe:	2316      	movs	r3, #22
 800c900:	6003      	str	r3, [r0, #0]
 800c902:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c906:	bd38      	pop	{r3, r4, r5, pc}
 800c908:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c90a:	b112      	cbz	r2, 800c912 <_raise_r+0x1e>
 800c90c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c910:	b94b      	cbnz	r3, 800c926 <_raise_r+0x32>
 800c912:	4628      	mov	r0, r5
 800c914:	f000 f830 	bl	800c978 <_getpid_r>
 800c918:	4622      	mov	r2, r4
 800c91a:	4601      	mov	r1, r0
 800c91c:	4628      	mov	r0, r5
 800c91e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c922:	f000 b817 	b.w	800c954 <_kill_r>
 800c926:	2b01      	cmp	r3, #1
 800c928:	d00a      	beq.n	800c940 <_raise_r+0x4c>
 800c92a:	1c59      	adds	r1, r3, #1
 800c92c:	d103      	bne.n	800c936 <_raise_r+0x42>
 800c92e:	2316      	movs	r3, #22
 800c930:	6003      	str	r3, [r0, #0]
 800c932:	2001      	movs	r0, #1
 800c934:	e7e7      	b.n	800c906 <_raise_r+0x12>
 800c936:	2100      	movs	r1, #0
 800c938:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c93c:	4620      	mov	r0, r4
 800c93e:	4798      	blx	r3
 800c940:	2000      	movs	r0, #0
 800c942:	e7e0      	b.n	800c906 <_raise_r+0x12>

0800c944 <raise>:
 800c944:	4b02      	ldr	r3, [pc, #8]	@ (800c950 <raise+0xc>)
 800c946:	4601      	mov	r1, r0
 800c948:	6818      	ldr	r0, [r3, #0]
 800c94a:	f7ff bfd3 	b.w	800c8f4 <_raise_r>
 800c94e:	bf00      	nop
 800c950:	200000cc 	.word	0x200000cc

0800c954 <_kill_r>:
 800c954:	b538      	push	{r3, r4, r5, lr}
 800c956:	4d07      	ldr	r5, [pc, #28]	@ (800c974 <_kill_r+0x20>)
 800c958:	2300      	movs	r3, #0
 800c95a:	4604      	mov	r4, r0
 800c95c:	4608      	mov	r0, r1
 800c95e:	4611      	mov	r1, r2
 800c960:	602b      	str	r3, [r5, #0]
 800c962:	f7f6 fbe1 	bl	8003128 <_kill>
 800c966:	1c43      	adds	r3, r0, #1
 800c968:	d102      	bne.n	800c970 <_kill_r+0x1c>
 800c96a:	682b      	ldr	r3, [r5, #0]
 800c96c:	b103      	cbz	r3, 800c970 <_kill_r+0x1c>
 800c96e:	6023      	str	r3, [r4, #0]
 800c970:	bd38      	pop	{r3, r4, r5, pc}
 800c972:	bf00      	nop
 800c974:	200009b4 	.word	0x200009b4

0800c978 <_getpid_r>:
 800c978:	f7f6 bbce 	b.w	8003118 <_getpid>

0800c97c <_init>:
 800c97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c97e:	bf00      	nop
 800c980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c982:	bc08      	pop	{r3}
 800c984:	469e      	mov	lr, r3
 800c986:	4770      	bx	lr

0800c988 <_fini>:
 800c988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c98a:	bf00      	nop
 800c98c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c98e:	bc08      	pop	{r3}
 800c990:	469e      	mov	lr, r3
 800c992:	4770      	bx	lr
