
Treasure_Hunt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9f4  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d7c  0800abb8  0800abb8  0000bbb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b934  0800b934  0000d288  2**0
                  CONTENTS
  4 .ARM          00000008  0800b934  0800b934  0000c934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b93c  0800b93c  0000d288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b93c  0800b93c  0000c93c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b940  0800b940  0000c940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000288  20000000  0800b944  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000690  20000288  0800bbcc  0000d288  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000918  0800bbcc  0000d918  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d288  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f105  00000000  00000000  0000d2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dd3  00000000  00000000  0002c3bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d0  00000000  00000000  00030190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001254  00000000  00000000  00031960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e25a  00000000  00000000  00032bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d884  00000000  00000000  00060e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001162d7  00000000  00000000  0007e692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  00194969  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074cc  00000000  00000000  00194a24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0019bef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000000fa  00000000  00000000  0019bf4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  0019c044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000288 	.word	0x20000288
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800ab9c 	.word	0x0800ab9c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000028c 	.word	0x2000028c
 80001fc:	0800ab9c 	.word	0x0800ab9c

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bec:	f000 b96a 	b.w	8000ec4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	460c      	mov	r4, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d14e      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c14:	4694      	mov	ip, r2
 8000c16:	458c      	cmp	ip, r1
 8000c18:	4686      	mov	lr, r0
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	d962      	bls.n	8000ce6 <__udivmoddi4+0xde>
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0320 	rsb	r3, r2, #32
 8000c26:	4091      	lsls	r1, r2
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	4319      	orrs	r1, r3
 8000c32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f f68c 	uxth.w	r6, ip
 8000c3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb04 f106 	mul.w	r1, r4, r6
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c5e:	f080 8112 	bcs.w	8000e86 <__udivmoddi4+0x27e>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 810f 	bls.w	8000e86 <__udivmoddi4+0x27e>
 8000c68:	3c02      	subs	r4, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c76:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f606 	mul.w	r6, r0, r6
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c8e:	f080 80fc 	bcs.w	8000e8a <__udivmoddi4+0x282>
 8000c92:	429e      	cmp	r6, r3
 8000c94:	f240 80f9 	bls.w	8000e8a <__udivmoddi4+0x282>
 8000c98:	4463      	add	r3, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xba>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb4>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x150>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xcc>
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	f0c0 80f0 	bcc.w	8000eb4 <__udivmoddi4+0x2ac>
 8000cd4:	1a86      	subs	r6, r0, r2
 8000cd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d0e6      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce4:	e7e3      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x204>
 8000cec:	eba1 040c 	sub.w	r4, r1, ip
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb08 4416 	mls	r4, r8, r6, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb07 f006 	mul.w	r0, r7, r6
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x11c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x11a>
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000d22:	4626      	mov	r6, r4
 8000d24:	1a1c      	subs	r4, r3, r0
 8000d26:	fa1f f38e 	uxth.w	r3, lr
 8000d2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb00 f707 	mul.w	r7, r0, r7
 8000d3a:	429f      	cmp	r7, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x148>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x146>
 8000d48:	429f      	cmp	r7, r3
 8000d4a:	f200 80b0 	bhi.w	8000eae <__udivmoddi4+0x2a6>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	1bdb      	subs	r3, r3, r7
 8000d52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d68:	fa04 f301 	lsl.w	r3, r4, r1
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	40f4      	lsrs	r4, r6
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	0c38      	lsrs	r0, r7, #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fb00 441e 	mls	r4, r0, lr, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1a6>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d9e:	f080 8084 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000da2:	45a1      	cmp	r9, r4
 8000da4:	f240 8081 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000da8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x1d2>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000dd0:	d267      	bcs.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d965      	bls.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dde:	fba0 9302 	umull	r9, r3, r0, r2
 8000de2:	eba4 040c 	sub.w	r4, r4, ip
 8000de6:	429c      	cmp	r4, r3
 8000de8:	46ce      	mov	lr, r9
 8000dea:	469c      	mov	ip, r3
 8000dec:	d351      	bcc.n	8000e92 <__udivmoddi4+0x28a>
 8000dee:	d04e      	beq.n	8000e8e <__udivmoddi4+0x286>
 8000df0:	b155      	cbz	r5, 8000e08 <__udivmoddi4+0x200>
 8000df2:	ebb8 030e 	subs.w	r3, r8, lr
 8000df6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	431e      	orrs	r6, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c5 6400 	strd	r6, r4, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e750      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f103 	lsr.w	r1, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	fa24 f303 	lsr.w	r3, r4, r3
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3110 	mls	r1, r8, r0, r3
 8000e34:	0c23      	lsrs	r3, r4, #16
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f107 	mul.w	r1, r0, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x24c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e4a:	d22c      	bcs.n	8000ea6 <__udivmoddi4+0x29e>
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d92a      	bls.n	8000ea6 <__udivmoddi4+0x29e>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb01 f307 	mul.w	r3, r1, r7
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x276>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e74:	d213      	bcs.n	8000e9e <__udivmoddi4+0x296>
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	d911      	bls.n	8000e9e <__udivmoddi4+0x296>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e84:	e739      	b.n	8000cfa <__udivmoddi4+0xf2>
 8000e86:	4604      	mov	r4, r0
 8000e88:	e6f0      	b.n	8000c6c <__udivmoddi4+0x64>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e706      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e8e:	45c8      	cmp	r8, r9
 8000e90:	d2ae      	bcs.n	8000df0 <__udivmoddi4+0x1e8>
 8000e92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <__udivmoddi4+0x1e8>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	e7ed      	b.n	8000e7e <__udivmoddi4+0x276>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e799      	b.n	8000dda <__udivmoddi4+0x1d2>
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	e7d4      	b.n	8000e54 <__udivmoddi4+0x24c>
 8000eaa:	46d6      	mov	lr, sl
 8000eac:	e77f      	b.n	8000dae <__udivmoddi4+0x1a6>
 8000eae:	4463      	add	r3, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e74d      	b.n	8000d50 <__udivmoddi4+0x148>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e70f      	b.n	8000cdc <__udivmoddi4+0xd4>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	e730      	b.n	8000d24 <__udivmoddi4+0x11c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <generateArray>:
    // Scale sineValue value (4096 - 1)
    return (uint32_t) ((sineValue+1.0f)/2.0f * (float32_t)(precision-1));
}

// Part 2 and Part 3
void generateArray(uint32_t* array, uint32_t precision, uint32_t size) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
    for (uint32_t i = 0; i < size; i++) {
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61fb      	str	r3, [r7, #28]
 8000ed8:	e037      	b.n	8000f4a <generateArray+0x82>
        float rad = (float)(2.0f * PI * i / size);
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	ee07 3a90 	vmov	s15, r3
 8000ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ee4:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8000f5c <generateArray+0x94>
 8000ee8:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	ee07 3a90 	vmov	s15, r3
 8000ef2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000efa:	edc7 7a06 	vstr	s15, [r7, #24]
        // Scale sineValue to use (precision - 1) and target 2/3 of 12-bit DAC range
        float sineValue = ((arm_sin_f32(rad) + 1.0f) / 2.0f) * (float)(precision - 1);
 8000efe:	ed97 0a06 	vldr	s0, [r7, #24]
 8000f02:	f006 ff29 	bl	8007d58 <arm_sin_f32>
 8000f06:	eef0 7a40 	vmov.f32	s15, s0
 8000f0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f12:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000f16:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	ee07 3a90 	vmov	s15, r3
 8000f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f2a:	edc7 7a05 	vstr	s15, [r7, #20]
        array[i] = (uint32_t)sineValue;
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	4413      	add	r3, r2
 8000f36:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f3e:	ee17 2a90 	vmov	r2, s15
 8000f42:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < size; i++) {
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	3301      	adds	r3, #1
 8000f48:	61fb      	str	r3, [r7, #28]
 8000f4a:	69fa      	ldr	r2, [r7, #28]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d3c3      	bcc.n	8000eda <generateArray+0x12>
    }
}
 8000f52:	bf00      	nop
 8000f54:	bf00      	nop
 8000f56:	3720      	adds	r7, #32
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40c90fdb 	.word	0x40c90fdb

08000f60 <DetectMovement>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int DetectMovement(void) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b094      	sub	sp, #80	@ 0x50
 8000f64:	af00      	add	r7, sp, #0
	// measure
    float gyroData[3];
    int16_t accelData[3];
    BSP_GYRO_GetXYZ(gyroData);
 8000f66:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 fff2 	bl	8001f54 <BSP_GYRO_GetXYZ>
    BSP_ACCELERO_AccGetXYZ(accelData);
 8000f70:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 ff93 	bl	8001ea0 <BSP_ACCELERO_AccGetXYZ>

    // direction string to print
    int newDirection = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // current time
    uint32_t currentTime = HAL_GetTick();
 8000f7e:	f001 fdaf 	bl	8002ae0 <HAL_GetTick>
 8000f82:	64b8      	str	r0, [r7, #72]	@ 0x48

    // check tilt
    if (accelData[0] > accelThreshold && gyroData[0] > gyroThreshold) {
 8000f84:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8000f88:	22c8      	movs	r2, #200	@ 0xc8
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	dd0b      	ble.n	8000fa6 <DetectMovement+0x46>
 8000f8e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000f92:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001080 <DetectMovement+0x120>
 8000f96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9e:	dd02      	ble.n	8000fa6 <DetectMovement+0x46>
    	newDirection = 1; //up
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000fa4:	e03c      	b.n	8001020 <DetectMovement+0xc0>
    } else if (accelData[1] < -accelThreshold && gyroData[1] < -gyroThreshold) {
 8000fa6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8000faa:	461a      	mov	r2, r3
 8000fac:	23c8      	movs	r3, #200	@ 0xc8
 8000fae:	425b      	negs	r3, r3
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	da0d      	bge.n	8000fd0 <DetectMovement+0x70>
 8000fb4:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8000fb8:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8001080 <DetectMovement+0x120>
 8000fbc:	eef1 7a67 	vneg.f32	s15, s15
 8000fc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc8:	d502      	bpl.n	8000fd0 <DetectMovement+0x70>
    	newDirection = 2; //left
 8000fca:	2302      	movs	r3, #2
 8000fcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000fce:	e027      	b.n	8001020 <DetectMovement+0xc0>
    } else if (accelData[0] < -accelThreshold && gyroData[0] < -gyroThreshold) {
 8000fd0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	23c8      	movs	r3, #200	@ 0xc8
 8000fd8:	425b      	negs	r3, r3
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	da0d      	bge.n	8000ffa <DetectMovement+0x9a>
 8000fde:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8000fe2:	eddf 7a27 	vldr	s15, [pc, #156]	@ 8001080 <DetectMovement+0x120>
 8000fe6:	eef1 7a67 	vneg.f32	s15, s15
 8000fea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff2:	d502      	bpl.n	8000ffa <DetectMovement+0x9a>
    	newDirection = 3; //down
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000ff8:	e012      	b.n	8001020 <DetectMovement+0xc0>
    } else if (accelData[1] > accelThreshold && gyroData[1] > gyroThreshold) {
 8000ffa:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8000ffe:	22c8      	movs	r2, #200	@ 0xc8
 8001000:	4293      	cmp	r3, r2
 8001002:	dd0b      	ble.n	800101c <DetectMovement+0xbc>
 8001004:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001008:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001080 <DetectMovement+0x120>
 800100c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001014:	dd02      	ble.n	800101c <DetectMovement+0xbc>
    	newDirection = 4; //right
 8001016:	2304      	movs	r3, #4
 8001018:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800101a:	e001      	b.n	8001020 <DetectMovement+0xc0>
    } else {
    	newDirection = 0; //neutral
 800101c:	2300      	movs	r3, #0
 800101e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }

    // only print if change in direction after enough delay (debounce)
    if ((newDirection != currentDirection) && (currentTime - lastChangeTime > debounceTime)) {
 8001020:	4b18      	ldr	r3, [pc, #96]	@ (8001084 <DetectMovement+0x124>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001026:	429a      	cmp	r2, r3
 8001028:	d024      	beq.n	8001074 <DetectMovement+0x114>
 800102a:	4b17      	ldr	r3, [pc, #92]	@ (8001088 <DetectMovement+0x128>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001036:	4293      	cmp	r3, r2
 8001038:	d91c      	bls.n	8001074 <DetectMovement+0x114>
        // update direction
    	currentDirection = newDirection;
 800103a:	4a12      	ldr	r2, [pc, #72]	@ (8001084 <DetectMovement+0x124>)
 800103c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800103e:	6013      	str	r3, [r2, #0]
        lastChangeTime = currentTime;
 8001040:	4a11      	ldr	r2, [pc, #68]	@ (8001088 <DetectMovement+0x128>)
 8001042:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001044:	6013      	str	r3, [r2, #0]

        // print, for debug since we'll return direction
        if (currentDirection != 0) {
 8001046:	4b0f      	ldr	r3, [pc, #60]	@ (8001084 <DetectMovement+0x124>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d012      	beq.n	8001074 <DetectMovement+0x114>
            char buf[50];
            snprintf(buf, sizeof(buf), "Move %d\r\n", currentDirection);
 800104e:	4b0d      	ldr	r3, [pc, #52]	@ (8001084 <DetectMovement+0x124>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4638      	mov	r0, r7
 8001054:	4a0d      	ldr	r2, [pc, #52]	@ (800108c <DetectMovement+0x12c>)
 8001056:	2132      	movs	r1, #50	@ 0x32
 8001058:	f007 fb1c 	bl	8008694 <sniprintf>
            HAL_UART_Transmit(&huart1, (uint8_t *)buf, strlen(buf), HAL_MAX_DELAY);
 800105c:	463b      	mov	r3, r7
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff f91e 	bl	80002a0 <strlen>
 8001064:	4603      	mov	r3, r0
 8001066:	b29a      	uxth	r2, r3
 8001068:	4639      	mov	r1, r7
 800106a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800106e:	4808      	ldr	r0, [pc, #32]	@ (8001090 <DetectMovement+0x130>)
 8001070:	f005 ffc6 	bl	8007000 <HAL_UART_Transmit>
        }
    }

    return currentDirection;
 8001074:	4b03      	ldr	r3, [pc, #12]	@ (8001084 <DetectMovement+0x124>)
 8001076:	681b      	ldr	r3, [r3, #0]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3750      	adds	r7, #80	@ 0x50
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	447a0000 	.word	0x447a0000
 8001084:	20000714 	.word	0x20000714
 8001088:	20000718 	.word	0x20000718
 800108c:	0800abb8 	.word	0x0800abb8
 8001090:	200003b8 	.word	0x200003b8

08001094 <PrintInitialGrid>:

void PrintInitialGrid(void) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b092      	sub	sp, #72	@ 0x48
 8001098:	af00      	add	r7, sp, #0
    const char newline[] = "\r\n"; // Newline for the terminal
 800109a:	4a28      	ldr	r2, [pc, #160]	@ (800113c <PrintInitialGrid+0xa8>)
 800109c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80010a0:	6812      	ldr	r2, [r2, #0]
 80010a2:	4611      	mov	r1, r2
 80010a4:	8019      	strh	r1, [r3, #0]
 80010a6:	3302      	adds	r3, #2
 80010a8:	0c12      	lsrs	r2, r2, #16
 80010aa:	701a      	strb	r2, [r3, #0]
    char displayBuffer[64];


    srand(HAL_GetTick());
 80010ac:	f001 fd18 	bl	8002ae0 <HAL_GetTick>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f007 fb22 	bl	80086fc <srand>
    treasureRow = rand() % 4; // Random row (0-3)
 80010b8:	f007 fb4e 	bl	8008758 <rand>
 80010bc:	4603      	mov	r3, r0
 80010be:	425a      	negs	r2, r3
 80010c0:	f003 0303 	and.w	r3, r3, #3
 80010c4:	f002 0203 	and.w	r2, r2, #3
 80010c8:	bf58      	it	pl
 80010ca:	4253      	negpl	r3, r2
 80010cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001140 <PrintInitialGrid+0xac>)
 80010ce:	6013      	str	r3, [r2, #0]
    treasureCol = rand() % 4; // Random column (0-3)
 80010d0:	f007 fb42 	bl	8008758 <rand>
 80010d4:	4603      	mov	r3, r0
 80010d6:	425a      	negs	r2, r3
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	f002 0203 	and.w	r2, r2, #3
 80010e0:	bf58      	it	pl
 80010e2:	4253      	negpl	r3, r2
 80010e4:	4a17      	ldr	r2, [pc, #92]	@ (8001144 <PrintInitialGrid+0xb0>)
 80010e6:	6013      	str	r3, [r2, #0]

    // Print a grid of all '1's
    for (int i = 0; i < 4; i++) {
 80010e8:	2300      	movs	r3, #0
 80010ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80010ec:	e01e      	b.n	800112c <PrintInitialGrid+0x98>
        memset(displayBuffer, '1', 4);
 80010ee:	463b      	mov	r3, r7
 80010f0:	2204      	movs	r2, #4
 80010f2:	2131      	movs	r1, #49	@ 0x31
 80010f4:	4618      	mov	r0, r3
 80010f6:	f007 fc42 	bl	800897e <memset>
        displayBuffer[4] = '\0';
 80010fa:	2300      	movs	r3, #0
 80010fc:	713b      	strb	r3, [r7, #4]
        HAL_UART_Transmit(&huart1, (uint8_t *)displayBuffer, strlen(displayBuffer), HAL_MAX_DELAY);
 80010fe:	463b      	mov	r3, r7
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff f8cd 	bl	80002a0 <strlen>
 8001106:	4603      	mov	r3, r0
 8001108:	b29a      	uxth	r2, r3
 800110a:	4639      	mov	r1, r7
 800110c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001110:	480d      	ldr	r0, [pc, #52]	@ (8001148 <PrintInitialGrid+0xb4>)
 8001112:	f005 ff75 	bl	8007000 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart1, (uint8_t *)newline, strlen(newline), HAL_MAX_DELAY);
 8001116:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800111a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800111e:	2202      	movs	r2, #2
 8001120:	4809      	ldr	r0, [pc, #36]	@ (8001148 <PrintInitialGrid+0xb4>)
 8001122:	f005 ff6d 	bl	8007000 <HAL_UART_Transmit>
    for (int i = 0; i < 4; i++) {
 8001126:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001128:	3301      	adds	r3, #1
 800112a:	647b      	str	r3, [r7, #68]	@ 0x44
 800112c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800112e:	2b03      	cmp	r3, #3
 8001130:	dddd      	ble.n	80010ee <PrintInitialGrid+0x5a>
    }
}
 8001132:	bf00      	nop
 8001134:	bf00      	nop
 8001136:	3748      	adds	r7, #72	@ 0x48
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	0800abc4 	.word	0x0800abc4
 8001140:	20000704 	.word	0x20000704
 8001144:	20000708 	.word	0x20000708
 8001148:	200003b8 	.word	0x200003b8

0800114c <PrintTreasureGrid>:

void PrintTreasureGrid(void) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b0ae      	sub	sp, #184	@ 0xb8
 8001150:	af02      	add	r7, sp, #8
    const char newline[] = "\r\n";
 8001152:	4a77      	ldr	r2, [pc, #476]	@ (8001330 <PrintTreasureGrid+0x1e4>)
 8001154:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001158:	6812      	ldr	r2, [r2, #0]
 800115a:	4611      	mov	r1, r2
 800115c:	8019      	strh	r1, [r3, #0]
 800115e:	3302      	adds	r3, #2
 8001160:	0c12      	lsrs	r2, r2, #16
 8001162:	701a      	strb	r2, [r3, #0]
    char grid[4][4];
    char treasureBuffer[32];
    char displayBuffer[64];  // Buffer to send rows over UART

    // Initialize the grid with '.' for empty spaces
    for (int i = 0; i < 4; i++) {
 8001164:	2300      	movs	r3, #0
 8001166:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800116a:	e01c      	b.n	80011a6 <PrintTreasureGrid+0x5a>
        for (int j = 0; j < 4; j++) {
 800116c:	2300      	movs	r3, #0
 800116e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001172:	e00f      	b.n	8001194 <PrintTreasureGrid+0x48>
            grid[i][j] = '.';
 8001174:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	33b0      	adds	r3, #176	@ 0xb0
 800117c:	19da      	adds	r2, r3, r7
 800117e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001182:	4413      	add	r3, r2
 8001184:	3b24      	subs	r3, #36	@ 0x24
 8001186:	222e      	movs	r2, #46	@ 0x2e
 8001188:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 4; j++) {
 800118a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800118e:	3301      	adds	r3, #1
 8001190:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001194:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001198:	2b03      	cmp	r3, #3
 800119a:	ddeb      	ble.n	8001174 <PrintTreasureGrid+0x28>
    for (int i = 0; i < 4; i++) {
 800119c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80011a0:	3301      	adds	r3, #1
 80011a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80011a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	ddde      	ble.n	800116c <PrintTreasureGrid+0x20>
        }
    }

    // Set the treasure ('x') and player ('*') locations
    grid[treasureRow][treasureCol] = 'x'; // Treasure location
 80011ae:	4b61      	ldr	r3, [pc, #388]	@ (8001334 <PrintTreasureGrid+0x1e8>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	4b61      	ldr	r3, [pc, #388]	@ (8001338 <PrintTreasureGrid+0x1ec>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	0092      	lsls	r2, r2, #2
 80011b8:	32b0      	adds	r2, #176	@ 0xb0
 80011ba:	443a      	add	r2, r7
 80011bc:	4413      	add	r3, r2
 80011be:	3b24      	subs	r3, #36	@ 0x24
 80011c0:	2278      	movs	r2, #120	@ 0x78
 80011c2:	701a      	strb	r2, [r3, #0]
    grid[playerRow][playerCol] = '*';    // Player location
 80011c4:	4b5d      	ldr	r3, [pc, #372]	@ (800133c <PrintTreasureGrid+0x1f0>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b5d      	ldr	r3, [pc, #372]	@ (8001340 <PrintTreasureGrid+0x1f4>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	0092      	lsls	r2, r2, #2
 80011ce:	32b0      	adds	r2, #176	@ 0xb0
 80011d0:	443a      	add	r2, r7
 80011d2:	4413      	add	r3, r2
 80011d4:	3b24      	subs	r3, #36	@ 0x24
 80011d6:	222a      	movs	r2, #42	@ 0x2a
 80011d8:	701a      	strb	r2, [r3, #0]

    // Log the treasure's location internally
    snprintf(treasureBuffer, sizeof(treasureBuffer), "Treasure is at: [%d, %d]\r\n", treasureRow + 1, treasureCol + 1);
 80011da:	4b56      	ldr	r3, [pc, #344]	@ (8001334 <PrintTreasureGrid+0x1e8>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	1c5a      	adds	r2, r3, #1
 80011e0:	4b55      	ldr	r3, [pc, #340]	@ (8001338 <PrintTreasureGrid+0x1ec>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	3301      	adds	r3, #1
 80011e6:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	4613      	mov	r3, r2
 80011ee:	4a55      	ldr	r2, [pc, #340]	@ (8001344 <PrintTreasureGrid+0x1f8>)
 80011f0:	2120      	movs	r1, #32
 80011f2:	f007 fa4f 	bl	8008694 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)treasureBuffer, strlen(treasureBuffer), HAL_MAX_DELAY);
 80011f6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f850 	bl	80002a0 <strlen>
 8001200:	4603      	mov	r3, r0
 8001202:	b29a      	uxth	r2, r3
 8001204:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8001208:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800120c:	484e      	ldr	r0, [pc, #312]	@ (8001348 <PrintTreasureGrid+0x1fc>)
 800120e:	f005 fef7 	bl	8007000 <HAL_UART_Transmit>

    // Transmit the grid with borders
    for (int i = 0; i <= 4; i++) {  // Includes the top and bottom border
 8001212:	2300      	movs	r3, #0
 8001214:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001218:	e07f      	b.n	800131a <PrintTreasureGrid+0x1ce>
        if (i == 0) {
 800121a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800121e:	2b00      	cmp	r3, #0
 8001220:	d115      	bne.n	800124e <PrintTreasureGrid+0x102>
            // Transmit the top/bottom border
            snprintf(displayBuffer, sizeof(displayBuffer), "+---+---+---+---+\r\n");
 8001222:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001226:	4a49      	ldr	r2, [pc, #292]	@ (800134c <PrintTreasureGrid+0x200>)
 8001228:	2140      	movs	r1, #64	@ 0x40
 800122a:	4618      	mov	r0, r3
 800122c:	f007 fa32 	bl	8008694 <sniprintf>
            HAL_UART_Transmit(&huart1, (uint8_t *)displayBuffer, strlen(displayBuffer), HAL_MAX_DELAY);
 8001230:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff f833 	bl	80002a0 <strlen>
 800123a:	4603      	mov	r3, r0
 800123c:	b29a      	uxth	r2, r3
 800123e:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001242:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001246:	4840      	ldr	r0, [pc, #256]	@ (8001348 <PrintTreasureGrid+0x1fc>)
 8001248:	f005 feda 	bl	8007000 <HAL_UART_Transmit>
 800124c:	e060      	b.n	8001310 <PrintTreasureGrid+0x1c4>
        } else {
            // Transmit a row with cell separators
            char rowBuffer[32] = "|";  // Start with the first border
 800124e:	237c      	movs	r3, #124	@ 0x7c
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	f107 0308 	add.w	r3, r7, #8
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	611a      	str	r2, [r3, #16]
 8001262:	615a      	str	r2, [r3, #20]
 8001264:	619a      	str	r2, [r3, #24]
            for (int j = 0; j < 4; j++) {
 8001266:	2300      	movs	r3, #0
 8001268:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800126c:	e022      	b.n	80012b4 <PrintTreasureGrid+0x168>
                char cell[8];
                snprintf(cell, sizeof(cell), " %c |", grid[i - 1][j]);  // Add cell content with separators
 800126e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001272:	3b01      	subs	r3, #1
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	33b0      	adds	r3, #176	@ 0xb0
 8001278:	19da      	adds	r2, r3, r7
 800127a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800127e:	4413      	add	r3, r2
 8001280:	3b24      	subs	r3, #36	@ 0x24
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001288:	4a31      	ldr	r2, [pc, #196]	@ (8001350 <PrintTreasureGrid+0x204>)
 800128a:	2108      	movs	r1, #8
 800128c:	f007 fa02 	bl	8008694 <sniprintf>
                strncat(rowBuffer, cell, sizeof(rowBuffer) - strlen(rowBuffer) - 1);
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff f804 	bl	80002a0 <strlen>
 8001298:	4603      	mov	r3, r0
 800129a:	f1c3 021f 	rsb	r2, r3, #31
 800129e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	4618      	mov	r0, r3
 80012a6:	f007 fb57 	bl	8008958 <strncat>
            for (int j = 0; j < 4; j++) {
 80012aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80012ae:	3301      	adds	r3, #1
 80012b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80012b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80012b8:	2b03      	cmp	r3, #3
 80012ba:	ddd8      	ble.n	800126e <PrintTreasureGrid+0x122>
            }
            snprintf(displayBuffer, sizeof(displayBuffer), "%s\r\n", rowBuffer);
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80012c2:	4a24      	ldr	r2, [pc, #144]	@ (8001354 <PrintTreasureGrid+0x208>)
 80012c4:	2140      	movs	r1, #64	@ 0x40
 80012c6:	f007 f9e5 	bl	8008694 <sniprintf>
            HAL_UART_Transmit(&huart1, (uint8_t *)displayBuffer, strlen(displayBuffer), HAL_MAX_DELAY);
 80012ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7fe ffe6 	bl	80002a0 <strlen>
 80012d4:	4603      	mov	r3, r0
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80012dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012e0:	4819      	ldr	r0, [pc, #100]	@ (8001348 <PrintTreasureGrid+0x1fc>)
 80012e2:	f005 fe8d 	bl	8007000 <HAL_UART_Transmit>

            // Transmit the horizontal separator
            snprintf(displayBuffer, sizeof(displayBuffer), "+---+---+---+---+\r\n");
 80012e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012ea:	4a18      	ldr	r2, [pc, #96]	@ (800134c <PrintTreasureGrid+0x200>)
 80012ec:	2140      	movs	r1, #64	@ 0x40
 80012ee:	4618      	mov	r0, r3
 80012f0:	f007 f9d0 	bl	8008694 <sniprintf>
            HAL_UART_Transmit(&huart1, (uint8_t *)displayBuffer, strlen(displayBuffer), HAL_MAX_DELAY);
 80012f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7fe ffd1 	bl	80002a0 <strlen>
 80012fe:	4603      	mov	r3, r0
 8001300:	b29a      	uxth	r2, r3
 8001302:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001306:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800130a:	480f      	ldr	r0, [pc, #60]	@ (8001348 <PrintTreasureGrid+0x1fc>)
 800130c:	f005 fe78 	bl	8007000 <HAL_UART_Transmit>
    for (int i = 0; i <= 4; i++) {  // Includes the top and bottom border
 8001310:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001314:	3301      	adds	r3, #1
 8001316:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800131a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800131e:	2b04      	cmp	r3, #4
 8001320:	f77f af7b 	ble.w	800121a <PrintTreasureGrid+0xce>
        }
    }
}
 8001324:	bf00      	nop
 8001326:	bf00      	nop
 8001328:	37b0      	adds	r7, #176	@ 0xb0
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	0800abc4 	.word	0x0800abc4
 8001334:	20000704 	.word	0x20000704
 8001338:	20000708 	.word	0x20000708
 800133c:	2000070c 	.word	0x2000070c
 8001340:	20000710 	.word	0x20000710
 8001344:	0800abc8 	.word	0x0800abc8
 8001348:	200003b8 	.word	0x200003b8
 800134c:	0800abe4 	.word	0x0800abe4
 8001350:	0800abf8 	.word	0x0800abf8
 8001354:	0800ac00 	.word	0x0800ac00

08001358 <Move>:


void Move(void) {
 8001358:	b5b0      	push	{r4, r5, r7, lr}
 800135a:	b0b8      	sub	sp, #224	@ 0xe0
 800135c:	af02      	add	r7, sp, #8
    int movement = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

    // wait to get a valid direction (not none)
    while (movement == 0) {
 8001364:	e006      	b.n	8001374 <Move+0x1c>
        movement = DetectMovement();
 8001366:	f7ff fdfb 	bl	8000f60 <DetectMovement>
 800136a:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
        HAL_Delay(50);
 800136e:	2032      	movs	r0, #50	@ 0x32
 8001370:	f001 fbc2 	bl	8002af8 <HAL_Delay>
    while (movement == 0) {
 8001374:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0f4      	beq.n	8001366 <Move+0xe>
    }

    // move
    switch (movement) {
 800137c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001380:	3b01      	subs	r3, #1
 8001382:	2b03      	cmp	r3, #3
 8001384:	d846      	bhi.n	8001414 <Move+0xbc>
 8001386:	a201      	add	r2, pc, #4	@ (adr r2, 800138c <Move+0x34>)
 8001388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800138c:	080013f7 	.word	0x080013f7
 8001390:	0800139d 	.word	0x0800139d
 8001394:	080013bb 	.word	0x080013bb
 8001398:	080013d9 	.word	0x080013d9
        case 2: // up
            if (playerRow > 0) {
 800139c:	4b9c      	ldr	r3, [pc, #624]	@ (8001610 <Move+0x2b8>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	dd39      	ble.n	8001418 <Move+0xc0>
                playerRow--;
 80013a4:	4b9a      	ldr	r3, [pc, #616]	@ (8001610 <Move+0x2b8>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	3b01      	subs	r3, #1
 80013aa:	4a99      	ldr	r2, [pc, #612]	@ (8001610 <Move+0x2b8>)
 80013ac:	6013      	str	r3, [r2, #0]
                counter++;
 80013ae:	4b99      	ldr	r3, [pc, #612]	@ (8001614 <Move+0x2bc>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	3301      	adds	r3, #1
 80013b4:	4a97      	ldr	r2, [pc, #604]	@ (8001614 <Move+0x2bc>)
 80013b6:	6013      	str	r3, [r2, #0]
            }
            break;
 80013b8:	e02e      	b.n	8001418 <Move+0xc0>
        case 3: // right
            if (playerCol < 3) {
 80013ba:	4b97      	ldr	r3, [pc, #604]	@ (8001618 <Move+0x2c0>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b02      	cmp	r3, #2
 80013c0:	dc2c      	bgt.n	800141c <Move+0xc4>
                playerCol++;
 80013c2:	4b95      	ldr	r3, [pc, #596]	@ (8001618 <Move+0x2c0>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	3301      	adds	r3, #1
 80013c8:	4a93      	ldr	r2, [pc, #588]	@ (8001618 <Move+0x2c0>)
 80013ca:	6013      	str	r3, [r2, #0]
                counter++;
 80013cc:	4b91      	ldr	r3, [pc, #580]	@ (8001614 <Move+0x2bc>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	3301      	adds	r3, #1
 80013d2:	4a90      	ldr	r2, [pc, #576]	@ (8001614 <Move+0x2bc>)
 80013d4:	6013      	str	r3, [r2, #0]
            }
            break;
 80013d6:	e021      	b.n	800141c <Move+0xc4>
        case 4: // down
            if (playerRow < 3) {
 80013d8:	4b8d      	ldr	r3, [pc, #564]	@ (8001610 <Move+0x2b8>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b02      	cmp	r3, #2
 80013de:	dc1f      	bgt.n	8001420 <Move+0xc8>
                playerRow++;
 80013e0:	4b8b      	ldr	r3, [pc, #556]	@ (8001610 <Move+0x2b8>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	3301      	adds	r3, #1
 80013e6:	4a8a      	ldr	r2, [pc, #552]	@ (8001610 <Move+0x2b8>)
 80013e8:	6013      	str	r3, [r2, #0]
                counter++;
 80013ea:	4b8a      	ldr	r3, [pc, #552]	@ (8001614 <Move+0x2bc>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	3301      	adds	r3, #1
 80013f0:	4a88      	ldr	r2, [pc, #544]	@ (8001614 <Move+0x2bc>)
 80013f2:	6013      	str	r3, [r2, #0]
            }
            break;
 80013f4:	e014      	b.n	8001420 <Move+0xc8>
        case 1: // left
            if (playerCol > 0) {
 80013f6:	4b88      	ldr	r3, [pc, #544]	@ (8001618 <Move+0x2c0>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dd12      	ble.n	8001424 <Move+0xcc>
                playerCol--;
 80013fe:	4b86      	ldr	r3, [pc, #536]	@ (8001618 <Move+0x2c0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	3b01      	subs	r3, #1
 8001404:	4a84      	ldr	r2, [pc, #528]	@ (8001618 <Move+0x2c0>)
 8001406:	6013      	str	r3, [r2, #0]
                counter++;
 8001408:	4b82      	ldr	r3, [pc, #520]	@ (8001614 <Move+0x2bc>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	3301      	adds	r3, #1
 800140e:	4a81      	ldr	r2, [pc, #516]	@ (8001614 <Move+0x2bc>)
 8001410:	6013      	str	r3, [r2, #0]
            }
            break;
 8001412:	e007      	b.n	8001424 <Move+0xcc>
        default:
            break;
 8001414:	bf00      	nop
 8001416:	e006      	b.n	8001426 <Move+0xce>
            break;
 8001418:	bf00      	nop
 800141a:	e004      	b.n	8001426 <Move+0xce>
            break;
 800141c:	bf00      	nop
 800141e:	e002      	b.n	8001426 <Move+0xce>
            break;
 8001420:	bf00      	nop
 8001422:	e000      	b.n	8001426 <Move+0xce>
            break;
 8001424:	bf00      	nop
    }

    // show new map
    PrintTreasureGrid();
 8001426:	f7ff fe91 	bl	800114c <PrintTreasureGrid>

    // check if on treasure
    if (playerRow == treasureRow && playerCol == treasureCol) {
 800142a:	4b79      	ldr	r3, [pc, #484]	@ (8001610 <Move+0x2b8>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	4b7b      	ldr	r3, [pc, #492]	@ (800161c <Move+0x2c4>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	d158      	bne.n	80014e8 <Move+0x190>
 8001436:	4b78      	ldr	r3, [pc, #480]	@ (8001618 <Move+0x2c0>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	4b79      	ldr	r3, [pc, #484]	@ (8001620 <Move+0x2c8>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	429a      	cmp	r2, r3
 8001440:	d152      	bne.n	80014e8 <Move+0x190>
        const char winMessage[] = "You found the treasure!\r\n";
 8001442:	4b78      	ldr	r3, [pc, #480]	@ (8001624 <Move+0x2cc>)
 8001444:	f107 04ac 	add.w	r4, r7, #172	@ 0xac
 8001448:	461d      	mov	r5, r3
 800144a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800144c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800144e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001452:	c403      	stmia	r4!, {r0, r1}
 8001454:	8022      	strh	r2, [r4, #0]
        HAL_UART_Transmit(&huart1, (uint8_t *)winMessage, strlen(winMessage), HAL_MAX_DELAY);
 8001456:	f107 01ac 	add.w	r1, r7, #172	@ 0xac
 800145a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800145e:	2219      	movs	r2, #25
 8001460:	4871      	ldr	r0, [pc, #452]	@ (8001628 <Move+0x2d0>)
 8001462:	f005 fdcd 	bl	8007000 <HAL_UART_Transmit>
        HAL_Delay(1000);
 8001466:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800146a:	f001 fb45 	bl	8002af8 <HAL_Delay>


        for(int i = 0; i< victoryLength; i++){
 800146e:	2300      	movs	r3, #0
 8001470:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001474:	e02a      	b.n	80014cc <Move+0x174>


         uint32_t nextNote = victoryMelody[i]; // Get the current note
 8001476:	4a6d      	ldr	r2, [pc, #436]	@ (800162c <Move+0x2d4>)
 8001478:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800147c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001480:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
   	     uint32_t duration = victoryDurations[i]; // Get the current duration
 8001484:	4a6a      	ldr	r2, [pc, #424]	@ (8001630 <Move+0x2d8>)
 8001486:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800148a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800148e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

   	     // Stop the current DMA for buffer
   	     HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001492:	2100      	movs	r1, #0
 8001494:	4867      	ldr	r0, [pc, #412]	@ (8001634 <Move+0x2dc>)
 8001496:	f001 fd23 	bl	8002ee0 <HAL_DAC_Stop_DMA>

   	     // Start DMA with the new note
   	     HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, notes[nextNote], array_size[nextNote], DAC_ALIGN_12B_R);
 800149a:	4a67      	ldr	r2, [pc, #412]	@ (8001638 <Move+0x2e0>)
 800149c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80014a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014a4:	4965      	ldr	r1, [pc, #404]	@ (800163c <Move+0x2e4>)
 80014a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80014aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014ae:	2100      	movs	r1, #0
 80014b0:	9100      	str	r1, [sp, #0]
 80014b2:	2100      	movs	r1, #0
 80014b4:	485f      	ldr	r0, [pc, #380]	@ (8001634 <Move+0x2dc>)
 80014b6:	f001 fc47 	bl	8002d48 <HAL_DAC_Start_DMA>

   	     // Add a delay for the note duration
   	     HAL_Delay(duration);
 80014ba:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 80014be:	f001 fb1b 	bl	8002af8 <HAL_Delay>
        for(int i = 0; i< victoryLength; i++){
 80014c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80014c6:	3301      	adds	r3, #1
 80014c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80014cc:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80014d0:	4b5b      	ldr	r3, [pc, #364]	@ (8001640 <Move+0x2e8>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d3ce      	bcc.n	8001476 <Move+0x11e>
        }

        HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80014d8:	2100      	movs	r1, #0
 80014da:	4856      	ldr	r0, [pc, #344]	@ (8001634 <Move+0x2dc>)
 80014dc:	f001 fd00 	bl	8002ee0 <HAL_DAC_Stop_DMA>
        gameover = 1;
 80014e0:	4b58      	ldr	r3, [pc, #352]	@ (8001644 <Move+0x2ec>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	601a      	str	r2, [r3, #0]
    if (playerRow == treasureRow && playerCol == treasureCol) {
 80014e6:	e0f3      	b.n	80016d0 <Move+0x378>
   	     // Increment the index to play the next note

        // maybe reset here?
    }
    else {
    	if (playerRow > treasureRow && playerCol > treasureCol) {
 80014e8:	4b49      	ldr	r3, [pc, #292]	@ (8001610 <Move+0x2b8>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	4b4b      	ldr	r3, [pc, #300]	@ (800161c <Move+0x2c4>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	dd20      	ble.n	8001536 <Move+0x1de>
 80014f4:	4b48      	ldr	r3, [pc, #288]	@ (8001618 <Move+0x2c0>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b49      	ldr	r3, [pc, #292]	@ (8001620 <Move+0x2c8>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	dd1a      	ble.n	8001536 <Move+0x1de>
    		const char winMessage[] = "The treasure further up, maybe left?\r\n";
 8001500:	4b51      	ldr	r3, [pc, #324]	@ (8001648 <Move+0x2f0>)
 8001502:	463c      	mov	r4, r7
 8001504:	461d      	mov	r5, r3
 8001506:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001508:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800150a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800150c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800150e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001512:	6020      	str	r0, [r4, #0]
 8001514:	3404      	adds	r4, #4
 8001516:	8021      	strh	r1, [r4, #0]
 8001518:	3402      	adds	r4, #2
 800151a:	0c0b      	lsrs	r3, r1, #16
 800151c:	7023      	strb	r3, [r4, #0]
    		HAL_UART_Transmit(&huart1, (uint8_t *)winMessage, strlen(winMessage), HAL_MAX_DELAY);
 800151e:	4639      	mov	r1, r7
 8001520:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001524:	2226      	movs	r2, #38	@ 0x26
 8001526:	4840      	ldr	r0, [pc, #256]	@ (8001628 <Move+0x2d0>)
 8001528:	f005 fd6a 	bl	8007000 <HAL_UART_Transmit>
    		HAL_Delay(1000);
 800152c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001530:	f001 fae2 	bl	8002af8 <HAL_Delay>
    	if (playerRow > treasureRow && playerCol > treasureCol) {
 8001534:	e0cc      	b.n	80016d0 <Move+0x378>
    	}
    	else if(playerRow > treasureRow && playerCol < treasureCol) {
 8001536:	4b36      	ldr	r3, [pc, #216]	@ (8001610 <Move+0x2b8>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	4b38      	ldr	r3, [pc, #224]	@ (800161c <Move+0x2c4>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	429a      	cmp	r2, r3
 8001540:	dd1c      	ble.n	800157c <Move+0x224>
 8001542:	4b35      	ldr	r3, [pc, #212]	@ (8001618 <Move+0x2c0>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	4b36      	ldr	r3, [pc, #216]	@ (8001620 <Move+0x2c8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	da16      	bge.n	800157c <Move+0x224>
    		const char winMessage[] = "You should go right up:))\r\n";
 800154e:	4b3f      	ldr	r3, [pc, #252]	@ (800164c <Move+0x2f4>)
 8001550:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 8001554:	461d      	mov	r5, r3
 8001556:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001558:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800155a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800155e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    		HAL_UART_Transmit(&huart1, (uint8_t *)winMessage, strlen(winMessage), HAL_MAX_DELAY);
 8001562:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8001566:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800156a:	221b      	movs	r2, #27
 800156c:	482e      	ldr	r0, [pc, #184]	@ (8001628 <Move+0x2d0>)
 800156e:	f005 fd47 	bl	8007000 <HAL_UART_Transmit>
    		HAL_Delay(1000);
 8001572:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001576:	f001 fabf 	bl	8002af8 <HAL_Delay>
    	else if(playerRow > treasureRow && playerCol < treasureCol) {
 800157a:	e0a9      	b.n	80016d0 <Move+0x378>
    	}
    	else if(playerRow < treasureRow && playerCol > treasureCol) {
 800157c:	4b24      	ldr	r3, [pc, #144]	@ (8001610 <Move+0x2b8>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b26      	ldr	r3, [pc, #152]	@ (800161c <Move+0x2c4>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	429a      	cmp	r2, r3
 8001586:	da1c      	bge.n	80015c2 <Move+0x26a>
 8001588:	4b23      	ldr	r3, [pc, #140]	@ (8001618 <Move+0x2c0>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b24      	ldr	r3, [pc, #144]	@ (8001620 <Move+0x2c8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	429a      	cmp	r2, r3
 8001592:	dd16      	ble.n	80015c2 <Move+0x26a>
    		const char winMessage[] = "going up is not ~right~\r\n";
 8001594:	4b2e      	ldr	r3, [pc, #184]	@ (8001650 <Move+0x2f8>)
 8001596:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 800159a:	461d      	mov	r5, r3
 800159c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800159e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015a4:	c403      	stmia	r4!, {r0, r1}
 80015a6:	8022      	strh	r2, [r4, #0]
    		HAL_UART_Transmit(&huart1, (uint8_t *)winMessage, strlen(winMessage), HAL_MAX_DELAY);
 80015a8:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 80015ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015b0:	2219      	movs	r2, #25
 80015b2:	481d      	ldr	r0, [pc, #116]	@ (8001628 <Move+0x2d0>)
 80015b4:	f005 fd24 	bl	8007000 <HAL_UART_Transmit>
    		HAL_Delay(1000);
 80015b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015bc:	f001 fa9c 	bl	8002af8 <HAL_Delay>
    	else if(playerRow < treasureRow && playerCol > treasureCol) {
 80015c0:	e086      	b.n	80016d0 <Move+0x378>
    	}
    	else if(playerRow < treasureRow && playerCol < treasureCol) {
 80015c2:	4b13      	ldr	r3, [pc, #76]	@ (8001610 <Move+0x2b8>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	4b15      	ldr	r3, [pc, #84]	@ (800161c <Move+0x2c4>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	da44      	bge.n	8001658 <Move+0x300>
 80015ce:	4b12      	ldr	r3, [pc, #72]	@ (8001618 <Move+0x2c0>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	4b13      	ldr	r3, [pc, #76]	@ (8001620 <Move+0x2c8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	da3e      	bge.n	8001658 <Move+0x300>
    		const char winMessage[] = "further down, right?\r\n";
 80015da:	4b1e      	ldr	r3, [pc, #120]	@ (8001654 <Move+0x2fc>)
 80015dc:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 80015e0:	461d      	mov	r5, r3
 80015e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80015ea:	6020      	str	r0, [r4, #0]
 80015ec:	3404      	adds	r4, #4
 80015ee:	8021      	strh	r1, [r4, #0]
 80015f0:	3402      	adds	r4, #2
 80015f2:	0c0b      	lsrs	r3, r1, #16
 80015f4:	7023      	strb	r3, [r4, #0]
    		HAL_UART_Transmit(&huart1, (uint8_t *)winMessage, strlen(winMessage), HAL_MAX_DELAY);
 80015f6:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 80015fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015fe:	2216      	movs	r2, #22
 8001600:	4809      	ldr	r0, [pc, #36]	@ (8001628 <Move+0x2d0>)
 8001602:	f005 fcfd 	bl	8007000 <HAL_UART_Transmit>
    		HAL_Delay(1000);
 8001606:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800160a:	f001 fa75 	bl	8002af8 <HAL_Delay>
    	else if(playerRow < treasureRow && playerCol < treasureCol) {
 800160e:	e05f      	b.n	80016d0 <Move+0x378>
 8001610:	2000070c 	.word	0x2000070c
 8001614:	2000044c 	.word	0x2000044c
 8001618:	20000710 	.word	0x20000710
 800161c:	20000704 	.word	0x20000704
 8001620:	20000708 	.word	0x20000708
 8001624:	0800ac08 	.word	0x0800ac08
 8001628:	200003b8 	.word	0x200003b8
 800162c:	20000010 	.word	0x20000010
 8001630:	2000002c 	.word	0x2000002c
 8001634:	200002a4 	.word	0x200002a4
 8001638:	200006f4 	.word	0x200006f4
 800163c:	20000000 	.word	0x20000000
 8001640:	20000048 	.word	0x20000048
 8001644:	20000450 	.word	0x20000450
 8001648:	0800ac24 	.word	0x0800ac24
 800164c:	0800ac4c 	.word	0x0800ac4c
 8001650:	0800ac68 	.word	0x0800ac68
 8001654:	0800ac84 	.word	0x0800ac84
    	}
    	else if(playerRow == treasureRow) {
 8001658:	4b1f      	ldr	r3, [pc, #124]	@ (80016d8 <Move+0x380>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4b1f      	ldr	r3, [pc, #124]	@ (80016dc <Move+0x384>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	429a      	cmp	r2, r3
 8001662:	d116      	bne.n	8001692 <Move+0x33a>
    		const char winMessage[] = "you're at the right level!\r\n";
 8001664:	4b1e      	ldr	r3, [pc, #120]	@ (80016e0 <Move+0x388>)
 8001666:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800166a:	461d      	mov	r5, r3
 800166c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800166e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001670:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001674:	c407      	stmia	r4!, {r0, r1, r2}
 8001676:	7023      	strb	r3, [r4, #0]
    		HAL_UART_Transmit(&huart1, (uint8_t *)winMessage, strlen(winMessage), HAL_MAX_DELAY);
 8001678:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800167c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001680:	221c      	movs	r2, #28
 8001682:	4818      	ldr	r0, [pc, #96]	@ (80016e4 <Move+0x38c>)
 8001684:	f005 fcbc 	bl	8007000 <HAL_UART_Transmit>
    		HAL_Delay(1000);
 8001688:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800168c:	f001 fa34 	bl	8002af8 <HAL_Delay>
    		const char winMessage[] = "you should keep climbing up, or maybe down? you decide.\r\n";
    		HAL_UART_Transmit(&huart1, (uint8_t *)winMessage, strlen(winMessage), HAL_MAX_DELAY);
    		HAL_Delay(1000);
    	}
    }
}
 8001690:	e01e      	b.n	80016d0 <Move+0x378>
    	else if(playerCol == treasureCol) {
 8001692:	4b15      	ldr	r3, [pc, #84]	@ (80016e8 <Move+0x390>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	4b15      	ldr	r3, [pc, #84]	@ (80016ec <Move+0x394>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	d118      	bne.n	80016d0 <Move+0x378>
    		const char winMessage[] = "you should keep climbing up, or maybe down? you decide.\r\n";
 800169e:	4b14      	ldr	r3, [pc, #80]	@ (80016f0 <Move+0x398>)
 80016a0:	463c      	mov	r4, r7
 80016a2:	461d      	mov	r5, r3
 80016a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016b4:	c403      	stmia	r4!, {r0, r1}
 80016b6:	8022      	strh	r2, [r4, #0]
    		HAL_UART_Transmit(&huart1, (uint8_t *)winMessage, strlen(winMessage), HAL_MAX_DELAY);
 80016b8:	4639      	mov	r1, r7
 80016ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016be:	2239      	movs	r2, #57	@ 0x39
 80016c0:	4808      	ldr	r0, [pc, #32]	@ (80016e4 <Move+0x38c>)
 80016c2:	f005 fc9d 	bl	8007000 <HAL_UART_Transmit>
    		HAL_Delay(1000);
 80016c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016ca:	f001 fa15 	bl	8002af8 <HAL_Delay>
}
 80016ce:	e7ff      	b.n	80016d0 <Move+0x378>
 80016d0:	bf00      	nop
 80016d2:	37d8      	adds	r7, #216	@ 0xd8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bdb0      	pop	{r4, r5, r7, pc}
 80016d8:	2000070c 	.word	0x2000070c
 80016dc:	20000704 	.word	0x20000704
 80016e0:	0800ac9c 	.word	0x0800ac9c
 80016e4:	200003b8 	.word	0x200003b8
 80016e8:	20000710 	.word	0x20000710
 80016ec:	20000708 	.word	0x20000708
 80016f0:	0800acbc 	.word	0x0800acbc

080016f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016fa:	f001 f9c5 	bl	8002a88 <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_GYRO_Init();
 80016fe:	f000 fbe7 	bl	8001ed0 <BSP_GYRO_Init>
  BSP_ACCELERO_Init();
 8001702:	f000 fb8f 	bl	8001e24 <BSP_ACCELERO_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001706:	f000 f863 	bl	80017d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800170a:	f000 f9ff 	bl	8001b0c <MX_GPIO_Init>
  MX_DMA_Init();
 800170e:	f000 f9d3 	bl	8001ab8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001712:	f000 f985 	bl	8001a20 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001716:	f000 f92f 	bl	8001978 <MX_TIM2_Init>
  MX_DAC1_Init();
 800171a:	f000 f8ab 	bl	8001874 <MX_DAC1_Init>
  MX_I2C1_Init();
 800171e:	f000 f8eb 	bl	80018f8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  notes[0] = C6;
 8001722:	4b22      	ldr	r3, [pc, #136]	@ (80017ac <main+0xb8>)
 8001724:	4a22      	ldr	r2, [pc, #136]	@ (80017b0 <main+0xbc>)
 8001726:	601a      	str	r2, [r3, #0]
   notes[1] = D6;
 8001728:	4b20      	ldr	r3, [pc, #128]	@ (80017ac <main+0xb8>)
 800172a:	4a22      	ldr	r2, [pc, #136]	@ (80017b4 <main+0xc0>)
 800172c:	605a      	str	r2, [r3, #4]
   notes[2] = E6;
 800172e:	4b1f      	ldr	r3, [pc, #124]	@ (80017ac <main+0xb8>)
 8001730:	4a21      	ldr	r2, [pc, #132]	@ (80017b8 <main+0xc4>)
 8001732:	609a      	str	r2, [r3, #8]
   notes[3] = G6;
 8001734:	4b1d      	ldr	r3, [pc, #116]	@ (80017ac <main+0xb8>)
 8001736:	4a21      	ldr	r2, [pc, #132]	@ (80017bc <main+0xc8>)
 8001738:	60da      	str	r2, [r3, #12]

 for (int i = 0; i<4; i++) {
 800173a:	2300      	movs	r3, #0
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	e00f      	b.n	8001760 <main+0x6c>
  generateArray(notes[i], PRECISION, array_size[i]);
 8001740:	4a1a      	ldr	r2, [pc, #104]	@ (80017ac <main+0xb8>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001748:	4a1d      	ldr	r2, [pc, #116]	@ (80017c0 <main+0xcc>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001750:	461a      	mov	r2, r3
 8001752:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001756:	f7ff fbb7 	bl	8000ec8 <generateArray>
 for (int i = 0; i<4; i++) {
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3301      	adds	r3, #1
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b03      	cmp	r3, #3
 8001764:	ddec      	ble.n	8001740 <main+0x4c>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  PrintInitialGrid();
 8001766:	f7ff fc95 	bl	8001094 <PrintInitialGrid>
  const char newline[] = "\r\n";
 800176a:	4a16      	ldr	r2, [pc, #88]	@ (80017c4 <main+0xd0>)
 800176c:	463b      	mov	r3, r7
 800176e:	6812      	ldr	r2, [r2, #0]
 8001770:	4611      	mov	r1, r2
 8001772:	8019      	strh	r1, [r3, #0]
 8001774:	3302      	adds	r3, #2
 8001776:	0c12      	lsrs	r2, r2, #16
 8001778:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, (uint8_t *)newline, strlen(newline), HAL_MAX_DELAY);
 800177a:	4639      	mov	r1, r7
 800177c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001780:	2202      	movs	r2, #2
 8001782:	4811      	ldr	r0, [pc, #68]	@ (80017c8 <main+0xd4>)
 8001784:	f005 fc3c 	bl	8007000 <HAL_UART_Transmit>
  PrintTreasureGrid();
 8001788:	f7ff fce0 	bl	800114c <PrintTreasureGrid>
  while (!gameover)
 800178c:	e005      	b.n	800179a <main+0xa6>
  {
	  Move();
 800178e:	f7ff fde3 	bl	8001358 <Move>
	  HAL_Delay(1500);
 8001792:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001796:	f001 f9af 	bl	8002af8 <HAL_Delay>
  while (!gameover)
 800179a:	4b0c      	ldr	r3, [pc, #48]	@ (80017cc <main+0xd8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f5      	beq.n	800178e <main+0x9a>
 80017a2:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	200006f4 	.word	0x200006f4
 80017b0:	20000454 	.word	0x20000454
 80017b4:	200004fc 	.word	0x200004fc
 80017b8:	200005a4 	.word	0x200005a4
 80017bc:	2000064c 	.word	0x2000064c
 80017c0:	20000000 	.word	0x20000000
 80017c4:	0800abc4 	.word	0x0800abc4
 80017c8:	200003b8 	.word	0x200003b8
 80017cc:	20000450 	.word	0x20000450

080017d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b096      	sub	sp, #88	@ 0x58
 80017d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017d6:	f107 0314 	add.w	r3, r7, #20
 80017da:	2244      	movs	r2, #68	@ 0x44
 80017dc:	2100      	movs	r1, #0
 80017de:	4618      	mov	r0, r3
 80017e0:	f007 f8cd 	bl	800897e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e4:	463b      	mov	r3, r7
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
 80017f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80017f2:	2000      	movs	r0, #0
 80017f4:	f003 f9e0 	bl	8004bb8 <HAL_PWREx_ControlVoltageScaling>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80017fe:	f000 f9bb 	bl	8001b78 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001802:	2310      	movs	r3, #16
 8001804:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001806:	2301      	movs	r3, #1
 8001808:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800180e:	2360      	movs	r3, #96	@ 0x60
 8001810:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001812:	2302      	movs	r3, #2
 8001814:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001816:	2301      	movs	r3, #1
 8001818:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800181a:	2301      	movs	r3, #1
 800181c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800181e:	233c      	movs	r3, #60	@ 0x3c
 8001820:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001822:	2302      	movs	r3, #2
 8001824:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001826:	2302      	movs	r3, #2
 8001828:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800182a:	2302      	movs	r3, #2
 800182c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	4618      	mov	r0, r3
 8001834:	f003 fa64 	bl	8004d00 <HAL_RCC_OscConfig>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800183e:	f000 f99b 	bl	8001b78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001842:	230f      	movs	r3, #15
 8001844:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001846:	2303      	movs	r3, #3
 8001848:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800184a:	2300      	movs	r3, #0
 800184c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001856:	463b      	mov	r3, r7
 8001858:	2105      	movs	r1, #5
 800185a:	4618      	mov	r0, r3
 800185c:	f003 fe6a 	bl	8005534 <HAL_RCC_ClockConfig>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001866:	f000 f987 	bl	8001b78 <Error_Handler>
  }
}
 800186a:	bf00      	nop
 800186c:	3758      	adds	r7, #88	@ 0x58
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08a      	sub	sp, #40	@ 0x28
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800187a:	463b      	mov	r3, r7
 800187c:	2228      	movs	r2, #40	@ 0x28
 800187e:	2100      	movs	r1, #0
 8001880:	4618      	mov	r0, r3
 8001882:	f007 f87c 	bl	800897e <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001886:	4b1a      	ldr	r3, [pc, #104]	@ (80018f0 <MX_DAC1_Init+0x7c>)
 8001888:	4a1a      	ldr	r2, [pc, #104]	@ (80018f4 <MX_DAC1_Init+0x80>)
 800188a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800188c:	4818      	ldr	r0, [pc, #96]	@ (80018f0 <MX_DAC1_Init+0x7c>)
 800188e:	f001 fa39 	bl	8002d04 <HAL_DAC_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001898:	f000 f96e 	bl	8001b78 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800189c:	2300      	movs	r3, #0
 800189e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80018a0:	230a      	movs	r3, #10
 80018a2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80018a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018a8:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80018b6:	463b      	mov	r3, r7
 80018b8:	2200      	movs	r2, #0
 80018ba:	4619      	mov	r1, r3
 80018bc:	480c      	ldr	r0, [pc, #48]	@ (80018f0 <MX_DAC1_Init+0x7c>)
 80018be:	f001 fbd7 	bl	8003070 <HAL_DAC_ConfigChannel>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 80018c8:	f000 f956 	bl	8001b78 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80018d0:	463b      	mov	r3, r7
 80018d2:	2210      	movs	r2, #16
 80018d4:	4619      	mov	r1, r3
 80018d6:	4806      	ldr	r0, [pc, #24]	@ (80018f0 <MX_DAC1_Init+0x7c>)
 80018d8:	f001 fbca 	bl	8003070 <HAL_DAC_ConfigChannel>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_DAC1_Init+0x72>
  {
    Error_Handler();
 80018e2:	f000 f949 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80018e6:	bf00      	nop
 80018e8:	3728      	adds	r7, #40	@ 0x28
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	200002a4 	.word	0x200002a4
 80018f4:	40007400 	.word	0x40007400

080018f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018fc:	4b1b      	ldr	r3, [pc, #108]	@ (800196c <MX_I2C1_Init+0x74>)
 80018fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001970 <MX_I2C1_Init+0x78>)
 8001900:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A175AB;
 8001902:	4b1a      	ldr	r3, [pc, #104]	@ (800196c <MX_I2C1_Init+0x74>)
 8001904:	4a1b      	ldr	r2, [pc, #108]	@ (8001974 <MX_I2C1_Init+0x7c>)
 8001906:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001908:	4b18      	ldr	r3, [pc, #96]	@ (800196c <MX_I2C1_Init+0x74>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800190e:	4b17      	ldr	r3, [pc, #92]	@ (800196c <MX_I2C1_Init+0x74>)
 8001910:	2201      	movs	r2, #1
 8001912:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001914:	4b15      	ldr	r3, [pc, #84]	@ (800196c <MX_I2C1_Init+0x74>)
 8001916:	2200      	movs	r2, #0
 8001918:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800191a:	4b14      	ldr	r3, [pc, #80]	@ (800196c <MX_I2C1_Init+0x74>)
 800191c:	2200      	movs	r2, #0
 800191e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001920:	4b12      	ldr	r3, [pc, #72]	@ (800196c <MX_I2C1_Init+0x74>)
 8001922:	2200      	movs	r2, #0
 8001924:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001926:	4b11      	ldr	r3, [pc, #68]	@ (800196c <MX_I2C1_Init+0x74>)
 8001928:	2200      	movs	r2, #0
 800192a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800192c:	4b0f      	ldr	r3, [pc, #60]	@ (800196c <MX_I2C1_Init+0x74>)
 800192e:	2200      	movs	r2, #0
 8001930:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001932:	480e      	ldr	r0, [pc, #56]	@ (800196c <MX_I2C1_Init+0x74>)
 8001934:	f002 face 	bl	8003ed4 <HAL_I2C_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800193e:	f000 f91b 	bl	8001b78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001942:	2100      	movs	r1, #0
 8001944:	4809      	ldr	r0, [pc, #36]	@ (800196c <MX_I2C1_Init+0x74>)
 8001946:	f003 f87f 	bl	8004a48 <HAL_I2CEx_ConfigAnalogFilter>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001950:	f000 f912 	bl	8001b78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001954:	2100      	movs	r1, #0
 8001956:	4805      	ldr	r0, [pc, #20]	@ (800196c <MX_I2C1_Init+0x74>)
 8001958:	f003 f8c1 	bl	8004ade <HAL_I2CEx_ConfigDigitalFilter>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001962:	f000 f909 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000318 	.word	0x20000318
 8001970:	40005400 	.word	0x40005400
 8001974:	30a175ab 	.word	0x30a175ab

08001978 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b088      	sub	sp, #32
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800197e:	f107 0310 	add.w	r3, r7, #16
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	609a      	str	r2, [r3, #8]
 800198a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800198c:	1d3b      	adds	r3, r7, #4
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001996:	4b21      	ldr	r3, [pc, #132]	@ (8001a1c <MX_TIM2_Init+0xa4>)
 8001998:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800199c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800199e:	4b1f      	ldr	r3, [pc, #124]	@ (8001a1c <MX_TIM2_Init+0xa4>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a1c <MX_TIM2_Init+0xa4>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2721;
 80019aa:	4b1c      	ldr	r3, [pc, #112]	@ (8001a1c <MX_TIM2_Init+0xa4>)
 80019ac:	f640 22a1 	movw	r2, #2721	@ 0xaa1
 80019b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a1c <MX_TIM2_Init+0xa4>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b8:	4b18      	ldr	r3, [pc, #96]	@ (8001a1c <MX_TIM2_Init+0xa4>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019be:	4817      	ldr	r0, [pc, #92]	@ (8001a1c <MX_TIM2_Init+0xa4>)
 80019c0:	f004 fdc0 	bl	8006544 <HAL_TIM_Base_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80019ca:	f000 f8d5 	bl	8001b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019d4:	f107 0310 	add.w	r3, r7, #16
 80019d8:	4619      	mov	r1, r3
 80019da:	4810      	ldr	r0, [pc, #64]	@ (8001a1c <MX_TIM2_Init+0xa4>)
 80019dc:	f004 ffe9 	bl	80069b2 <HAL_TIM_ConfigClockSource>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80019e6:	f000 f8c7 	bl	8001b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019ea:	2320      	movs	r3, #32
 80019ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019f2:	1d3b      	adds	r3, r7, #4
 80019f4:	4619      	mov	r1, r3
 80019f6:	4809      	ldr	r0, [pc, #36]	@ (8001a1c <MX_TIM2_Init+0xa4>)
 80019f8:	f005 fa0c 	bl	8006e14 <HAL_TIMEx_MasterConfigSynchronization>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001a02:	f000 f8b9 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8001a06:	4805      	ldr	r0, [pc, #20]	@ (8001a1c <MX_TIM2_Init+0xa4>)
 8001a08:	f004 fe5c 	bl	80066c4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim2);
 8001a0c:	4803      	ldr	r0, [pc, #12]	@ (8001a1c <MX_TIM2_Init+0xa4>)
 8001a0e:	f004 fdf1 	bl	80065f4 <HAL_TIM_Base_Start>

  /* USER CODE END TIM2_Init 2 */

}
 8001a12:	bf00      	nop
 8001a14:	3720      	adds	r7, #32
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	2000036c 	.word	0x2000036c

08001a20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a24:	4b22      	ldr	r3, [pc, #136]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a26:	4a23      	ldr	r2, [pc, #140]	@ (8001ab4 <MX_USART1_UART_Init+0x94>)
 8001a28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a2a:	4b21      	ldr	r3, [pc, #132]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a32:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a38:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a44:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a46:	220c      	movs	r2, #12
 8001a48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a4a:	4b19      	ldr	r3, [pc, #100]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a50:	4b17      	ldr	r3, [pc, #92]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a56:	4b16      	ldr	r3, [pc, #88]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a5c:	4b14      	ldr	r3, [pc, #80]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a62:	4b13      	ldr	r3, [pc, #76]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a68:	4811      	ldr	r0, [pc, #68]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a6a:	f005 fa79 	bl	8006f60 <HAL_UART_Init>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a74:	f000 f880 	bl	8001b78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a78:	2100      	movs	r1, #0
 8001a7a:	480d      	ldr	r0, [pc, #52]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a7c:	f006 f8a2 	bl	8007bc4 <HAL_UARTEx_SetTxFifoThreshold>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001a86:	f000 f877 	bl	8001b78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4808      	ldr	r0, [pc, #32]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a8e:	f006 f8d7 	bl	8007c40 <HAL_UARTEx_SetRxFifoThreshold>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001a98:	f000 f86e 	bl	8001b78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001a9c:	4804      	ldr	r0, [pc, #16]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a9e:	f006 f858 	bl	8007b52 <HAL_UARTEx_DisableFifoMode>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001aa8:	f000 f866 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	200003b8 	.word	0x200003b8
 8001ab4:	40013800 	.word	0x40013800

08001ab8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001abe:	4b12      	ldr	r3, [pc, #72]	@ (8001b08 <MX_DMA_Init+0x50>)
 8001ac0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ac2:	4a11      	ldr	r2, [pc, #68]	@ (8001b08 <MX_DMA_Init+0x50>)
 8001ac4:	f043 0304 	orr.w	r3, r3, #4
 8001ac8:	6493      	str	r3, [r2, #72]	@ 0x48
 8001aca:	4b0f      	ldr	r3, [pc, #60]	@ (8001b08 <MX_DMA_Init+0x50>)
 8001acc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ace:	f003 0304 	and.w	r3, r3, #4
 8001ad2:	607b      	str	r3, [r7, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8001b08 <MX_DMA_Init+0x50>)
 8001ad8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ada:	4a0b      	ldr	r2, [pc, #44]	@ (8001b08 <MX_DMA_Init+0x50>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6493      	str	r3, [r2, #72]	@ 0x48
 8001ae2:	4b09      	ldr	r3, [pc, #36]	@ (8001b08 <MX_DMA_Init+0x50>)
 8001ae4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	603b      	str	r3, [r7, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2100      	movs	r1, #0
 8001af2:	200b      	movs	r0, #11
 8001af4:	f001 f8dc 	bl	8002cb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001af8:	200b      	movs	r0, #11
 8001afa:	f001 f8f5 	bl	8002ce8 <HAL_NVIC_EnableIRQ>

}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40021000 	.word	0x40021000

08001b0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b12:	4b0f      	ldr	r3, [pc, #60]	@ (8001b50 <MX_GPIO_Init+0x44>)
 8001b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b16:	4a0e      	ldr	r2, [pc, #56]	@ (8001b50 <MX_GPIO_Init+0x44>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b50 <MX_GPIO_Init+0x44>)
 8001b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2a:	4b09      	ldr	r3, [pc, #36]	@ (8001b50 <MX_GPIO_Init+0x44>)
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2e:	4a08      	ldr	r2, [pc, #32]	@ (8001b50 <MX_GPIO_Init+0x44>)
 8001b30:	f043 0302 	orr.w	r3, r3, #2
 8001b34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b36:	4b06      	ldr	r3, [pc, #24]	@ (8001b50 <MX_GPIO_Init+0x44>)
 8001b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	603b      	str	r3, [r7, #0]
 8001b40:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40021000 	.word	0x40021000

08001b54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a04      	ldr	r2, [pc, #16]	@ (8001b74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d101      	bne.n	8001b6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b66:	f000 ffa7 	bl	8002ab8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40001000 	.word	0x40001000

08001b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b7c:	b672      	cpsid	i
}
 8001b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b80:	bf00      	nop
 8001b82:	e7fd      	b.n	8001b80 <Error_Handler+0x8>

08001b84 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08a      	sub	sp, #40	@ 0x28
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001b8c:	4b27      	ldr	r3, [pc, #156]	@ (8001c2c <I2Cx_MspInit+0xa8>)
 8001b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b90:	4a26      	ldr	r2, [pc, #152]	@ (8001c2c <I2Cx_MspInit+0xa8>)
 8001b92:	f043 0302 	orr.w	r3, r3, #2
 8001b96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b98:	4b24      	ldr	r3, [pc, #144]	@ (8001c2c <I2Cx_MspInit+0xa8>)
 8001b9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001ba4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001ba8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001baa:	2312      	movs	r3, #18
 8001bac:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001bba:	f107 0314 	add.w	r3, r7, #20
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	481b      	ldr	r0, [pc, #108]	@ (8001c30 <I2Cx_MspInit+0xac>)
 8001bc2:	f001 ff03 	bl	80039cc <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001bc6:	f107 0314 	add.w	r3, r7, #20
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4818      	ldr	r0, [pc, #96]	@ (8001c30 <I2Cx_MspInit+0xac>)
 8001bce:	f001 fefd 	bl	80039cc <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001bd2:	4b16      	ldr	r3, [pc, #88]	@ (8001c2c <I2Cx_MspInit+0xa8>)
 8001bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd6:	4a15      	ldr	r2, [pc, #84]	@ (8001c2c <I2Cx_MspInit+0xa8>)
 8001bd8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001bdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bde:	4b13      	ldr	r3, [pc, #76]	@ (8001c2c <I2Cx_MspInit+0xa8>)
 8001be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001bea:	4b10      	ldr	r3, [pc, #64]	@ (8001c2c <I2Cx_MspInit+0xa8>)
 8001bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bee:	4a0f      	ldr	r2, [pc, #60]	@ (8001c2c <I2Cx_MspInit+0xa8>)
 8001bf0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001bf4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8001c2c <I2Cx_MspInit+0xa8>)
 8001bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bfa:	4a0c      	ldr	r2, [pc, #48]	@ (8001c2c <I2Cx_MspInit+0xa8>)
 8001bfc:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001c00:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001c02:	2200      	movs	r2, #0
 8001c04:	210f      	movs	r1, #15
 8001c06:	2021      	movs	r0, #33	@ 0x21
 8001c08:	f001 f852 	bl	8002cb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001c0c:	2021      	movs	r0, #33	@ 0x21
 8001c0e:	f001 f86b 	bl	8002ce8 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001c12:	2200      	movs	r2, #0
 8001c14:	210f      	movs	r1, #15
 8001c16:	2022      	movs	r0, #34	@ 0x22
 8001c18:	f001 f84a 	bl	8002cb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001c1c:	2022      	movs	r0, #34	@ 0x22
 8001c1e:	f001 f863 	bl	8002ce8 <HAL_NVIC_EnableIRQ>
}
 8001c22:	bf00      	nop
 8001c24:	3728      	adds	r7, #40	@ 0x28
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	48000400 	.word	0x48000400

08001c34 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a12      	ldr	r2, [pc, #72]	@ (8001c88 <I2Cx_Init+0x54>)
 8001c40:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a11      	ldr	r2, [pc, #68]	@ (8001c8c <I2Cx_Init+0x58>)
 8001c46:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2201      	movs	r2, #1
 8001c52:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff ff89 	bl	8001b84 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f002 f92e 	bl	8003ed4 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001c78:	2100      	movs	r1, #0
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f002 fee4 	bl	8004a48 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001c80:	bf00      	nop
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40005800 	.word	0x40005800
 8001c8c:	00702681 	.word	0x00702681

08001c90 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08a      	sub	sp, #40	@ 0x28
 8001c94:	af04      	add	r7, sp, #16
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	4608      	mov	r0, r1
 8001c9a:	4611      	mov	r1, r2
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	72fb      	strb	r3, [r7, #11]
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	813b      	strh	r3, [r7, #8]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001cae:	7afb      	ldrb	r3, [r7, #11]
 8001cb0:	b299      	uxth	r1, r3
 8001cb2:	88f8      	ldrh	r0, [r7, #6]
 8001cb4:	893a      	ldrh	r2, [r7, #8]
 8001cb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cba:	9302      	str	r3, [sp, #8]
 8001cbc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001cbe:	9301      	str	r3, [sp, #4]
 8001cc0:	6a3b      	ldr	r3, [r7, #32]
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f002 fae2 	bl	8004290 <HAL_I2C_Mem_Read>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001cd0:	7dfb      	ldrb	r3, [r7, #23]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d004      	beq.n	8001ce0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001cd6:	7afb      	ldrb	r3, [r7, #11]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f000 f832 	bl	8001d44 <I2Cx_Error>
  }
  return status;
 8001ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b08a      	sub	sp, #40	@ 0x28
 8001cee:	af04      	add	r7, sp, #16
 8001cf0:	60f8      	str	r0, [r7, #12]
 8001cf2:	4608      	mov	r0, r1
 8001cf4:	4611      	mov	r1, r2
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	72fb      	strb	r3, [r7, #11]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	813b      	strh	r3, [r7, #8]
 8001d00:	4613      	mov	r3, r2
 8001d02:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001d08:	7afb      	ldrb	r3, [r7, #11]
 8001d0a:	b299      	uxth	r1, r3
 8001d0c:	88f8      	ldrh	r0, [r7, #6]
 8001d0e:	893a      	ldrh	r2, [r7, #8]
 8001d10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d14:	9302      	str	r3, [sp, #8]
 8001d16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d18:	9301      	str	r3, [sp, #4]
 8001d1a:	6a3b      	ldr	r3, [r7, #32]
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	4603      	mov	r3, r0
 8001d20:	68f8      	ldr	r0, [r7, #12]
 8001d22:	f002 f9a1 	bl	8004068 <HAL_I2C_Mem_Write>
 8001d26:	4603      	mov	r3, r0
 8001d28:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001d2a:	7dfb      	ldrb	r3, [r7, #23]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d004      	beq.n	8001d3a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001d30:	7afb      	ldrb	r3, [r7, #11]
 8001d32:	4619      	mov	r1, r3
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	f000 f805 	bl	8001d44 <I2Cx_Error>
  }
  return status;
 8001d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f002 f95a 	bl	800400a <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7ff ff6c 	bl	8001c34 <I2Cx_Init>
}
 8001d5c:	bf00      	nop
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001d68:	4802      	ldr	r0, [pc, #8]	@ (8001d74 <SENSOR_IO_Init+0x10>)
 8001d6a:	f7ff ff63 	bl	8001c34 <I2Cx_Init>
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	2000071c 	.word	0x2000071c

08001d78 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af02      	add	r7, sp, #8
 8001d7e:	4603      	mov	r3, r0
 8001d80:	71fb      	strb	r3, [r7, #7]
 8001d82:	460b      	mov	r3, r1
 8001d84:	71bb      	strb	r3, [r7, #6]
 8001d86:	4613      	mov	r3, r2
 8001d88:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001d8a:	79bb      	ldrb	r3, [r7, #6]
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	79f9      	ldrb	r1, [r7, #7]
 8001d90:	2301      	movs	r3, #1
 8001d92:	9301      	str	r3, [sp, #4]
 8001d94:	1d7b      	adds	r3, r7, #5
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	2301      	movs	r3, #1
 8001d9a:	4803      	ldr	r0, [pc, #12]	@ (8001da8 <SENSOR_IO_Write+0x30>)
 8001d9c:	f7ff ffa5 	bl	8001cea <I2Cx_WriteMultiple>
}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	2000071c 	.word	0x2000071c

08001dac <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af02      	add	r7, sp, #8
 8001db2:	4603      	mov	r3, r0
 8001db4:	460a      	mov	r2, r1
 8001db6:	71fb      	strb	r3, [r7, #7]
 8001db8:	4613      	mov	r3, r2
 8001dba:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001dc0:	79bb      	ldrb	r3, [r7, #6]
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	79f9      	ldrb	r1, [r7, #7]
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	9301      	str	r3, [sp, #4]
 8001dca:	f107 030f 	add.w	r3, r7, #15
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	4804      	ldr	r0, [pc, #16]	@ (8001de4 <SENSOR_IO_Read+0x38>)
 8001dd4:	f7ff ff5c 	bl	8001c90 <I2Cx_ReadMultiple>

  return read_value;
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	2000071c 	.word	0x2000071c

08001de8 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af02      	add	r7, sp, #8
 8001dee:	603a      	str	r2, [r7, #0]
 8001df0:	461a      	mov	r2, r3
 8001df2:	4603      	mov	r3, r0
 8001df4:	71fb      	strb	r3, [r7, #7]
 8001df6:	460b      	mov	r3, r1
 8001df8:	71bb      	strb	r3, [r7, #6]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001dfe:	79bb      	ldrb	r3, [r7, #6]
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	79f9      	ldrb	r1, [r7, #7]
 8001e04:	88bb      	ldrh	r3, [r7, #4]
 8001e06:	9301      	str	r3, [sp, #4]
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	4804      	ldr	r0, [pc, #16]	@ (8001e20 <SENSOR_IO_ReadMultiple+0x38>)
 8001e10:	f7ff ff3e 	bl	8001c90 <I2Cx_ReadMultiple>
 8001e14:	4603      	mov	r3, r0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	2000071c 	.word	0x2000071c

08001e24 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001e32:	4b19      	ldr	r3, [pc, #100]	@ (8001e98 <BSP_ACCELERO_Init+0x74>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	4798      	blx	r3
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b6a      	cmp	r3, #106	@ 0x6a
 8001e3c:	d002      	beq.n	8001e44 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	73fb      	strb	r3, [r7, #15]
 8001e42:	e024      	b.n	8001e8e <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001e44:	4b15      	ldr	r3, [pc, #84]	@ (8001e9c <BSP_ACCELERO_Init+0x78>)
 8001e46:	4a14      	ldr	r2, [pc, #80]	@ (8001e98 <BSP_ACCELERO_Init+0x74>)
 8001e48:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8001e4a:	2330      	movs	r3, #48	@ 0x30
 8001e4c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8001e52:	2300      	movs	r3, #0
 8001e54:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001e56:	2340      	movs	r3, #64	@ 0x40
 8001e58:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8001e62:	797a      	ldrb	r2, [r7, #5]
 8001e64:	7abb      	ldrb	r3, [r7, #10]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001e6c:	7a3b      	ldrb	r3, [r7, #8]
 8001e6e:	f043 0304 	orr.w	r3, r3, #4
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	021b      	lsls	r3, r3, #8
 8001e76:	b21a      	sxth	r2, r3
 8001e78:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	b21b      	sxth	r3, r3
 8001e80:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001e82:	4b06      	ldr	r3, [pc, #24]	@ (8001e9c <BSP_ACCELERO_Init+0x78>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	89ba      	ldrh	r2, [r7, #12]
 8001e8a:	4610      	mov	r0, r2
 8001e8c:	4798      	blx	r3
  }  

  return ret;
 8001e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20000050 	.word	0x20000050
 8001e9c:	20000770 	.word	0x20000770

08001ea0 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8001ea8:	4b08      	ldr	r3, [pc, #32]	@ (8001ecc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d009      	beq.n	8001ec4 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001eb0:	4b06      	ldr	r3, [pc, #24]	@ (8001ecc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d004      	beq.n	8001ec4 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8001eba:	4b04      	ldr	r3, [pc, #16]	@ (8001ecc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	4798      	blx	r3
    }
  }
}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20000770 	.word	0x20000770

08001ed0 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001eda:	2300      	movs	r3, #0
 8001edc:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001ede:	4b1b      	ldr	r3, [pc, #108]	@ (8001f4c <BSP_GYRO_Init+0x7c>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	4798      	blx	r3
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b6a      	cmp	r3, #106	@ 0x6a
 8001ee8:	d002      	beq.n	8001ef0 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	73fb      	strb	r3, [r7, #15]
 8001eee:	e028      	b.n	8001f42 <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8001ef0:	4b17      	ldr	r3, [pc, #92]	@ (8001f50 <BSP_GYRO_Init+0x80>)
 8001ef2:	4a16      	ldr	r2, [pc, #88]	@ (8001f4c <BSP_GYRO_Init+0x7c>)
 8001ef4:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8001efa:	2330      	movs	r3, #48	@ 0x30
 8001efc:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001efe:	2300      	movs	r3, #0
 8001f00:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001f06:	2340      	movs	r3, #64	@ 0x40
 8001f08:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 8001f0e:	230c      	movs	r3, #12
 8001f10:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8001f12:	7aba      	ldrb	r2, [r7, #10]
 8001f14:	797b      	ldrb	r3, [r7, #5]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001f1c:	7a3b      	ldrb	r3, [r7, #8]
 8001f1e:	f043 0304 	orr.w	r3, r3, #4
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	021b      	lsls	r3, r3, #8
 8001f26:	b21a      	sxth	r2, r3
 8001f28:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	b21b      	sxth	r3, r3
 8001f30:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8001f32:	4b07      	ldr	r3, [pc, #28]	@ (8001f50 <BSP_GYRO_Init+0x80>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	89ba      	ldrh	r2, [r7, #12]
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	4798      	blx	r3
    
    ret = GYRO_OK;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20000084 	.word	0x20000084
 8001f50:	20000774 	.word	0x20000774

08001f54 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8001f5c:	4b08      	ldr	r3, [pc, #32]	@ (8001f80 <BSP_GYRO_GetXYZ+0x2c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d009      	beq.n	8001f78 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8001f64:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <BSP_GYRO_GetXYZ+0x2c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d004      	beq.n	8001f78 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 8001f6e:	4b04      	ldr	r3, [pc, #16]	@ (8001f80 <BSP_GYRO_GetXYZ+0x2c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	4798      	blx	r3
    }
  }
}
 8001f78:	bf00      	nop
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20000774 	.word	0x20000774

08001f84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001fc8 <HAL_MspInit+0x44>)
 8001f8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f8e:	4a0e      	ldr	r2, [pc, #56]	@ (8001fc8 <HAL_MspInit+0x44>)
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f96:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc8 <HAL_MspInit+0x44>)
 8001f98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	607b      	str	r3, [r7, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fa2:	4b09      	ldr	r3, [pc, #36]	@ (8001fc8 <HAL_MspInit+0x44>)
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa6:	4a08      	ldr	r2, [pc, #32]	@ (8001fc8 <HAL_MspInit+0x44>)
 8001fa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fac:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fae:	4b06      	ldr	r3, [pc, #24]	@ (8001fc8 <HAL_MspInit+0x44>)
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fb6:	603b      	str	r3, [r7, #0]
 8001fb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	40021000 	.word	0x40021000

08001fcc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08a      	sub	sp, #40	@ 0x28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a2f      	ldr	r2, [pc, #188]	@ (80020a8 <HAL_DAC_MspInit+0xdc>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d157      	bne.n	800209e <HAL_DAC_MspInit+0xd2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001fee:	4b2f      	ldr	r3, [pc, #188]	@ (80020ac <HAL_DAC_MspInit+0xe0>)
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff2:	4a2e      	ldr	r2, [pc, #184]	@ (80020ac <HAL_DAC_MspInit+0xe0>)
 8001ff4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001ff8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ffa:	4b2c      	ldr	r3, [pc, #176]	@ (80020ac <HAL_DAC_MspInit+0xe0>)
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ffe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002006:	4b29      	ldr	r3, [pc, #164]	@ (80020ac <HAL_DAC_MspInit+0xe0>)
 8002008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800200a:	4a28      	ldr	r2, [pc, #160]	@ (80020ac <HAL_DAC_MspInit+0xe0>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002012:	4b26      	ldr	r3, [pc, #152]	@ (80020ac <HAL_DAC_MspInit+0xe0>)
 8002014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800201e:	2330      	movs	r3, #48	@ 0x30
 8002020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002022:	2303      	movs	r3, #3
 8002024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202a:	f107 0314 	add.w	r3, r7, #20
 800202e:	4619      	mov	r1, r3
 8002030:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002034:	f001 fcca 	bl	80039cc <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8002038:	4b1d      	ldr	r3, [pc, #116]	@ (80020b0 <HAL_DAC_MspInit+0xe4>)
 800203a:	4a1e      	ldr	r2, [pc, #120]	@ (80020b4 <HAL_DAC_MspInit+0xe8>)
 800203c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 800203e:	4b1c      	ldr	r3, [pc, #112]	@ (80020b0 <HAL_DAC_MspInit+0xe4>)
 8002040:	2206      	movs	r2, #6
 8002042:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002044:	4b1a      	ldr	r3, [pc, #104]	@ (80020b0 <HAL_DAC_MspInit+0xe4>)
 8002046:	2210      	movs	r2, #16
 8002048:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800204a:	4b19      	ldr	r3, [pc, #100]	@ (80020b0 <HAL_DAC_MspInit+0xe4>)
 800204c:	2200      	movs	r2, #0
 800204e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002050:	4b17      	ldr	r3, [pc, #92]	@ (80020b0 <HAL_DAC_MspInit+0xe4>)
 8002052:	2280      	movs	r2, #128	@ 0x80
 8002054:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002056:	4b16      	ldr	r3, [pc, #88]	@ (80020b0 <HAL_DAC_MspInit+0xe4>)
 8002058:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800205c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800205e:	4b14      	ldr	r3, [pc, #80]	@ (80020b0 <HAL_DAC_MspInit+0xe4>)
 8002060:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002064:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002066:	4b12      	ldr	r3, [pc, #72]	@ (80020b0 <HAL_DAC_MspInit+0xe4>)
 8002068:	2220      	movs	r2, #32
 800206a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800206c:	4b10      	ldr	r3, [pc, #64]	@ (80020b0 <HAL_DAC_MspInit+0xe4>)
 800206e:	2200      	movs	r2, #0
 8002070:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002072:	480f      	ldr	r0, [pc, #60]	@ (80020b0 <HAL_DAC_MspInit+0xe4>)
 8002074:	f001 f9dc 	bl	8003430 <HAL_DMA_Init>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800207e:	f7ff fd7b 	bl	8001b78 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a0a      	ldr	r2, [pc, #40]	@ (80020b0 <HAL_DAC_MspInit+0xe4>)
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	4a09      	ldr	r2, [pc, #36]	@ (80020b0 <HAL_DAC_MspInit+0xe4>)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800208e:	2200      	movs	r2, #0
 8002090:	210f      	movs	r1, #15
 8002092:	2036      	movs	r0, #54	@ 0x36
 8002094:	f000 fe0c 	bl	8002cb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002098:	2036      	movs	r0, #54	@ 0x36
 800209a:	f000 fe25 	bl	8002ce8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 800209e:	bf00      	nop
 80020a0:	3728      	adds	r7, #40	@ 0x28
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40007400 	.word	0x40007400
 80020ac:	40021000 	.word	0x40021000
 80020b0:	200002b8 	.word	0x200002b8
 80020b4:	40020008 	.word	0x40020008

080020b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b0ae      	sub	sp, #184	@ 0xb8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	60da      	str	r2, [r3, #12]
 80020ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020d0:	f107 0310 	add.w	r3, r7, #16
 80020d4:	2294      	movs	r2, #148	@ 0x94
 80020d6:	2100      	movs	r1, #0
 80020d8:	4618      	mov	r0, r3
 80020da:	f006 fc50 	bl	800897e <memset>
  if(hi2c->Instance==I2C1)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a21      	ldr	r2, [pc, #132]	@ (8002168 <HAL_I2C_MspInit+0xb0>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d13b      	bne.n	8002160 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80020e8:	2340      	movs	r3, #64	@ 0x40
 80020ea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80020ec:	2300      	movs	r3, #0
 80020ee:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020f0:	f107 0310 	add.w	r3, r7, #16
 80020f4:	4618      	mov	r0, r3
 80020f6:	f003 fd0d 	bl	8005b14 <HAL_RCCEx_PeriphCLKConfig>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002100:	f7ff fd3a 	bl	8001b78 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002104:	4b19      	ldr	r3, [pc, #100]	@ (800216c <HAL_I2C_MspInit+0xb4>)
 8002106:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002108:	4a18      	ldr	r2, [pc, #96]	@ (800216c <HAL_I2C_MspInit+0xb4>)
 800210a:	f043 0302 	orr.w	r3, r3, #2
 800210e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002110:	4b16      	ldr	r3, [pc, #88]	@ (800216c <HAL_I2C_MspInit+0xb4>)
 8002112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800211c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002120:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002124:	2312      	movs	r3, #18
 8002126:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002130:	2303      	movs	r3, #3
 8002132:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002136:	2304      	movs	r3, #4
 8002138:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800213c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002140:	4619      	mov	r1, r3
 8002142:	480b      	ldr	r0, [pc, #44]	@ (8002170 <HAL_I2C_MspInit+0xb8>)
 8002144:	f001 fc42 	bl	80039cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002148:	4b08      	ldr	r3, [pc, #32]	@ (800216c <HAL_I2C_MspInit+0xb4>)
 800214a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214c:	4a07      	ldr	r2, [pc, #28]	@ (800216c <HAL_I2C_MspInit+0xb4>)
 800214e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002152:	6593      	str	r3, [r2, #88]	@ 0x58
 8002154:	4b05      	ldr	r3, [pc, #20]	@ (800216c <HAL_I2C_MspInit+0xb4>)
 8002156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002158:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002160:	bf00      	nop
 8002162:	37b8      	adds	r7, #184	@ 0xb8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40005400 	.word	0x40005400
 800216c:	40021000 	.word	0x40021000
 8002170:	48000400 	.word	0x48000400

08002174 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a0b      	ldr	r2, [pc, #44]	@ (80021b0 <HAL_I2C_MspDeInit+0x3c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d10f      	bne.n	80021a6 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002186:	4b0b      	ldr	r3, [pc, #44]	@ (80021b4 <HAL_I2C_MspDeInit+0x40>)
 8002188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800218a:	4a0a      	ldr	r2, [pc, #40]	@ (80021b4 <HAL_I2C_MspDeInit+0x40>)
 800218c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002190:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8002192:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002196:	4808      	ldr	r0, [pc, #32]	@ (80021b8 <HAL_I2C_MspDeInit+0x44>)
 8002198:	f001 fdaa 	bl	8003cf0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 800219c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80021a0:	4805      	ldr	r0, [pc, #20]	@ (80021b8 <HAL_I2C_MspDeInit+0x44>)
 80021a2:	f001 fda5 	bl	8003cf0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40005400 	.word	0x40005400
 80021b4:	40021000 	.word	0x40021000
 80021b8:	48000400 	.word	0x48000400

080021bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021cc:	d10b      	bne.n	80021e6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021ce:	4b09      	ldr	r3, [pc, #36]	@ (80021f4 <HAL_TIM_Base_MspInit+0x38>)
 80021d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d2:	4a08      	ldr	r2, [pc, #32]	@ (80021f4 <HAL_TIM_Base_MspInit+0x38>)
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80021da:	4b06      	ldr	r3, [pc, #24]	@ (80021f4 <HAL_TIM_Base_MspInit+0x38>)
 80021dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80021e6:	bf00      	nop
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40021000 	.word	0x40021000

080021f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b0ae      	sub	sp, #184	@ 0xb8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002200:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
 800220e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002210:	f107 0310 	add.w	r3, r7, #16
 8002214:	2294      	movs	r2, #148	@ 0x94
 8002216:	2100      	movs	r1, #0
 8002218:	4618      	mov	r0, r3
 800221a:	f006 fbb0 	bl	800897e <memset>
  if(huart->Instance==USART1)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a21      	ldr	r2, [pc, #132]	@ (80022a8 <HAL_UART_MspInit+0xb0>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d13a      	bne.n	800229e <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002228:	2301      	movs	r3, #1
 800222a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800222c:	2300      	movs	r3, #0
 800222e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002230:	f107 0310 	add.w	r3, r7, #16
 8002234:	4618      	mov	r0, r3
 8002236:	f003 fc6d 	bl	8005b14 <HAL_RCCEx_PeriphCLKConfig>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002240:	f7ff fc9a 	bl	8001b78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002244:	4b19      	ldr	r3, [pc, #100]	@ (80022ac <HAL_UART_MspInit+0xb4>)
 8002246:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002248:	4a18      	ldr	r2, [pc, #96]	@ (80022ac <HAL_UART_MspInit+0xb4>)
 800224a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800224e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002250:	4b16      	ldr	r3, [pc, #88]	@ (80022ac <HAL_UART_MspInit+0xb4>)
 8002252:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002254:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800225c:	4b13      	ldr	r3, [pc, #76]	@ (80022ac <HAL_UART_MspInit+0xb4>)
 800225e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002260:	4a12      	ldr	r2, [pc, #72]	@ (80022ac <HAL_UART_MspInit+0xb4>)
 8002262:	f043 0302 	orr.w	r3, r3, #2
 8002266:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002268:	4b10      	ldr	r3, [pc, #64]	@ (80022ac <HAL_UART_MspInit+0xb4>)
 800226a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002274:	23c0      	movs	r3, #192	@ 0xc0
 8002276:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227a:	2302      	movs	r3, #2
 800227c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002286:	2303      	movs	r3, #3
 8002288:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800228c:	2307      	movs	r3, #7
 800228e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002292:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002296:	4619      	mov	r1, r3
 8002298:	4805      	ldr	r0, [pc, #20]	@ (80022b0 <HAL_UART_MspInit+0xb8>)
 800229a:	f001 fb97 	bl	80039cc <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800229e:	bf00      	nop
 80022a0:	37b8      	adds	r7, #184	@ 0xb8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40013800 	.word	0x40013800
 80022ac:	40021000 	.word	0x40021000
 80022b0:	48000400 	.word	0x48000400

080022b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08e      	sub	sp, #56	@ 0x38
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80022c2:	4b34      	ldr	r3, [pc, #208]	@ (8002394 <HAL_InitTick+0xe0>)
 80022c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c6:	4a33      	ldr	r2, [pc, #204]	@ (8002394 <HAL_InitTick+0xe0>)
 80022c8:	f043 0310 	orr.w	r3, r3, #16
 80022cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80022ce:	4b31      	ldr	r3, [pc, #196]	@ (8002394 <HAL_InitTick+0xe0>)
 80022d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d2:	f003 0310 	and.w	r3, r3, #16
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022da:	f107 0210 	add.w	r2, r7, #16
 80022de:	f107 0314 	add.w	r3, r7, #20
 80022e2:	4611      	mov	r1, r2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f003 fb23 	bl	8005930 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80022ea:	6a3b      	ldr	r3, [r7, #32]
 80022ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80022ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d103      	bne.n	80022fc <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80022f4:	f003 faf0 	bl	80058d8 <HAL_RCC_GetPCLK1Freq>
 80022f8:	6378      	str	r0, [r7, #52]	@ 0x34
 80022fa:	e004      	b.n	8002306 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80022fc:	f003 faec 	bl	80058d8 <HAL_RCC_GetPCLK1Freq>
 8002300:	4603      	mov	r3, r0
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002308:	4a23      	ldr	r2, [pc, #140]	@ (8002398 <HAL_InitTick+0xe4>)
 800230a:	fba2 2303 	umull	r2, r3, r2, r3
 800230e:	0c9b      	lsrs	r3, r3, #18
 8002310:	3b01      	subs	r3, #1
 8002312:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002314:	4b21      	ldr	r3, [pc, #132]	@ (800239c <HAL_InitTick+0xe8>)
 8002316:	4a22      	ldr	r2, [pc, #136]	@ (80023a0 <HAL_InitTick+0xec>)
 8002318:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800231a:	4b20      	ldr	r3, [pc, #128]	@ (800239c <HAL_InitTick+0xe8>)
 800231c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002320:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002322:	4a1e      	ldr	r2, [pc, #120]	@ (800239c <HAL_InitTick+0xe8>)
 8002324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002326:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002328:	4b1c      	ldr	r3, [pc, #112]	@ (800239c <HAL_InitTick+0xe8>)
 800232a:	2200      	movs	r2, #0
 800232c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800232e:	4b1b      	ldr	r3, [pc, #108]	@ (800239c <HAL_InitTick+0xe8>)
 8002330:	2200      	movs	r2, #0
 8002332:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002334:	4b19      	ldr	r3, [pc, #100]	@ (800239c <HAL_InitTick+0xe8>)
 8002336:	2200      	movs	r2, #0
 8002338:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800233a:	4818      	ldr	r0, [pc, #96]	@ (800239c <HAL_InitTick+0xe8>)
 800233c:	f004 f902 	bl	8006544 <HAL_TIM_Base_Init>
 8002340:	4603      	mov	r3, r0
 8002342:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002346:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800234a:	2b00      	cmp	r3, #0
 800234c:	d11b      	bne.n	8002386 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800234e:	4813      	ldr	r0, [pc, #76]	@ (800239c <HAL_InitTick+0xe8>)
 8002350:	f004 f9b8 	bl	80066c4 <HAL_TIM_Base_Start_IT>
 8002354:	4603      	mov	r3, r0
 8002356:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800235a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800235e:	2b00      	cmp	r3, #0
 8002360:	d111      	bne.n	8002386 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002362:	2036      	movs	r0, #54	@ 0x36
 8002364:	f000 fcc0 	bl	8002ce8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b0f      	cmp	r3, #15
 800236c:	d808      	bhi.n	8002380 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800236e:	2200      	movs	r2, #0
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	2036      	movs	r0, #54	@ 0x36
 8002374:	f000 fc9c 	bl	8002cb0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002378:	4a0a      	ldr	r2, [pc, #40]	@ (80023a4 <HAL_InitTick+0xf0>)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	e002      	b.n	8002386 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002386:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800238a:	4618      	mov	r0, r3
 800238c:	3738      	adds	r7, #56	@ 0x38
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40021000 	.word	0x40021000
 8002398:	431bde83 	.word	0x431bde83
 800239c:	20000778 	.word	0x20000778
 80023a0:	40001000 	.word	0x40001000
 80023a4:	200000b8 	.word	0x200000b8

080023a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023ac:	bf00      	nop
 80023ae:	e7fd      	b.n	80023ac <NMI_Handler+0x4>

080023b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023b4:	bf00      	nop
 80023b6:	e7fd      	b.n	80023b4 <HardFault_Handler+0x4>

080023b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023bc:	bf00      	nop
 80023be:	e7fd      	b.n	80023bc <MemManage_Handler+0x4>

080023c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023c4:	bf00      	nop
 80023c6:	e7fd      	b.n	80023c4 <BusFault_Handler+0x4>

080023c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023cc:	bf00      	nop
 80023ce:	e7fd      	b.n	80023cc <UsageFault_Handler+0x4>

080023d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023d4:	bf00      	nop
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023de:	b480      	push	{r7}
 80023e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023fa:	b480      	push	{r7}
 80023fc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800240c:	4802      	ldr	r0, [pc, #8]	@ (8002418 <DMA1_Channel1_IRQHandler+0x10>)
 800240e:	f001 f98e 	bl	800372e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	200002b8 	.word	0x200002b8

0800241c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002420:	4803      	ldr	r0, [pc, #12]	@ (8002430 <TIM6_DAC_IRQHandler+0x14>)
 8002422:	f004 f9bf 	bl	80067a4 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8002426:	4803      	ldr	r0, [pc, #12]	@ (8002434 <TIM6_DAC_IRQHandler+0x18>)
 8002428:	f000 fd9f 	bl	8002f6a <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800242c:	bf00      	nop
 800242e:	bd80      	pop	{r7, pc}
 8002430:	20000778 	.word	0x20000778
 8002434:	200002a4 	.word	0x200002a4

08002438 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  return 1;
 800243c:	2301      	movs	r3, #1
}
 800243e:	4618      	mov	r0, r3
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <_kill>:

int _kill(int pid, int sig)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002452:	f006 faa1 	bl	8008998 <__errno>
 8002456:	4603      	mov	r3, r0
 8002458:	2216      	movs	r2, #22
 800245a:	601a      	str	r2, [r3, #0]
  return -1;
 800245c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002460:	4618      	mov	r0, r3
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <_exit>:

void _exit (int status)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002470:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff ffe7 	bl	8002448 <_kill>
  while (1) {}    /* Make sure we hang here */
 800247a:	bf00      	nop
 800247c:	e7fd      	b.n	800247a <_exit+0x12>

0800247e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b086      	sub	sp, #24
 8002482:	af00      	add	r7, sp, #0
 8002484:	60f8      	str	r0, [r7, #12]
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	e00a      	b.n	80024a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002490:	f3af 8000 	nop.w
 8002494:	4601      	mov	r1, r0
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	1c5a      	adds	r2, r3, #1
 800249a:	60ba      	str	r2, [r7, #8]
 800249c:	b2ca      	uxtb	r2, r1
 800249e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	3301      	adds	r3, #1
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	dbf0      	blt.n	8002490 <_read+0x12>
  }

  return len;
 80024ae:	687b      	ldr	r3, [r7, #4]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]
 80024c8:	e009      	b.n	80024de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	60ba      	str	r2, [r7, #8]
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	3301      	adds	r3, #1
 80024dc:	617b      	str	r3, [r7, #20]
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	dbf1      	blt.n	80024ca <_write+0x12>
  }
  return len;
 80024e6:	687b      	ldr	r3, [r7, #4]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <_close>:

int _close(int file)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002518:	605a      	str	r2, [r3, #4]
  return 0;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <_isatty>:

int _isatty(int file)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002530:	2301      	movs	r3, #1
}
 8002532:	4618      	mov	r0, r3
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800253e:	b480      	push	{r7}
 8002540:	b085      	sub	sp, #20
 8002542:	af00      	add	r7, sp, #0
 8002544:	60f8      	str	r0, [r7, #12]
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002560:	4a14      	ldr	r2, [pc, #80]	@ (80025b4 <_sbrk+0x5c>)
 8002562:	4b15      	ldr	r3, [pc, #84]	@ (80025b8 <_sbrk+0x60>)
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800256c:	4b13      	ldr	r3, [pc, #76]	@ (80025bc <_sbrk+0x64>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d102      	bne.n	800257a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002574:	4b11      	ldr	r3, [pc, #68]	@ (80025bc <_sbrk+0x64>)
 8002576:	4a12      	ldr	r2, [pc, #72]	@ (80025c0 <_sbrk+0x68>)
 8002578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800257a:	4b10      	ldr	r3, [pc, #64]	@ (80025bc <_sbrk+0x64>)
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4413      	add	r3, r2
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	429a      	cmp	r2, r3
 8002586:	d207      	bcs.n	8002598 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002588:	f006 fa06 	bl	8008998 <__errno>
 800258c:	4603      	mov	r3, r0
 800258e:	220c      	movs	r2, #12
 8002590:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002592:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002596:	e009      	b.n	80025ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002598:	4b08      	ldr	r3, [pc, #32]	@ (80025bc <_sbrk+0x64>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800259e:	4b07      	ldr	r3, [pc, #28]	@ (80025bc <_sbrk+0x64>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4413      	add	r3, r2
 80025a6:	4a05      	ldr	r2, [pc, #20]	@ (80025bc <_sbrk+0x64>)
 80025a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025aa:	68fb      	ldr	r3, [r7, #12]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	200a0000 	.word	0x200a0000
 80025b8:	00000400 	.word	0x00000400
 80025bc:	200007c4 	.word	0x200007c4
 80025c0:	20000918 	.word	0x20000918

080025c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80025c8:	4b06      	ldr	r3, [pc, #24]	@ (80025e4 <SystemInit+0x20>)
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ce:	4a05      	ldr	r2, [pc, #20]	@ (80025e4 <SystemInit+0x20>)
 80025d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80025d8:	bf00      	nop
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	e000ed00 	.word	0xe000ed00

080025e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80025e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002620 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025ec:	f7ff ffea 	bl	80025c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025f0:	480c      	ldr	r0, [pc, #48]	@ (8002624 <LoopForever+0x6>)
  ldr r1, =_edata
 80025f2:	490d      	ldr	r1, [pc, #52]	@ (8002628 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025f4:	4a0d      	ldr	r2, [pc, #52]	@ (800262c <LoopForever+0xe>)
  movs r3, #0
 80025f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025f8:	e002      	b.n	8002600 <LoopCopyDataInit>

080025fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025fe:	3304      	adds	r3, #4

08002600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002604:	d3f9      	bcc.n	80025fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002606:	4a0a      	ldr	r2, [pc, #40]	@ (8002630 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002608:	4c0a      	ldr	r4, [pc, #40]	@ (8002634 <LoopForever+0x16>)
  movs r3, #0
 800260a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800260c:	e001      	b.n	8002612 <LoopFillZerobss>

0800260e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800260e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002610:	3204      	adds	r2, #4

08002612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002614:	d3fb      	bcc.n	800260e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002616:	f006 f9c5 	bl	80089a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800261a:	f7ff f86b 	bl	80016f4 <main>

0800261e <LoopForever>:

LoopForever:
    b LoopForever
 800261e:	e7fe      	b.n	800261e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002620:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002628:	20000288 	.word	0x20000288
  ldr r2, =_sidata
 800262c:	0800b944 	.word	0x0800b944
  ldr r2, =_sbss
 8002630:	20000288 	.word	0x20000288
  ldr r4, =_ebss
 8002634:	20000918 	.word	0x20000918

08002638 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002638:	e7fe      	b.n	8002638 <ADC1_IRQHandler>

0800263a <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 800263a:	b580      	push	{r7, lr}
 800263c:	b084      	sub	sp, #16
 800263e:	af00      	add	r7, sp, #0
 8002640:	4603      	mov	r3, r0
 8002642:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002644:	2300      	movs	r3, #0
 8002646:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002648:	2110      	movs	r1, #16
 800264a:	20d4      	movs	r0, #212	@ 0xd4
 800264c:	f7ff fbae 	bl	8001dac <SENSOR_IO_Read>
 8002650:	4603      	mov	r3, r0
 8002652:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002654:	88fb      	ldrh	r3, [r7, #6]
 8002656:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8002658:	7bbb      	ldrb	r3, [r7, #14]
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8002660:	7bba      	ldrb	r2, [r7, #14]
 8002662:	7bfb      	ldrb	r3, [r7, #15]
 8002664:	4313      	orrs	r3, r2
 8002666:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8002668:	7bbb      	ldrb	r3, [r7, #14]
 800266a:	461a      	mov	r2, r3
 800266c:	2110      	movs	r1, #16
 800266e:	20d4      	movs	r0, #212	@ 0xd4
 8002670:	f7ff fb82 	bl	8001d78 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002674:	2112      	movs	r1, #18
 8002676:	20d4      	movs	r0, #212	@ 0xd4
 8002678:	f7ff fb98 	bl	8001dac <SENSOR_IO_Read>
 800267c:	4603      	mov	r3, r0
 800267e:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002680:	88fb      	ldrh	r3, [r7, #6]
 8002682:	0a1b      	lsrs	r3, r3, #8
 8002684:	b29b      	uxth	r3, r3
 8002686:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8002688:	7bbb      	ldrb	r3, [r7, #14]
 800268a:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 800268e:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8002690:	7bba      	ldrb	r2, [r7, #14]
 8002692:	7bfb      	ldrb	r3, [r7, #15]
 8002694:	4313      	orrs	r3, r2
 8002696:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002698:	7bbb      	ldrb	r3, [r7, #14]
 800269a:	461a      	mov	r2, r3
 800269c:	2112      	movs	r1, #18
 800269e:	20d4      	movs	r0, #212	@ 0xd4
 80026a0:	f7ff fb6a 	bl	8001d78 <SENSOR_IO_Write>
}
 80026a4:	bf00      	nop
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80026b2:	2300      	movs	r3, #0
 80026b4:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80026b6:	2110      	movs	r1, #16
 80026b8:	20d4      	movs	r0, #212	@ 0xd4
 80026ba:	f7ff fb77 	bl	8001dac <SENSOR_IO_Read>
 80026be:	4603      	mov	r3, r0
 80026c0:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80026c2:	79fb      	ldrb	r3, [r7, #7]
 80026c4:	f003 030f 	and.w	r3, r3, #15
 80026c8:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 80026ca:	79fb      	ldrb	r3, [r7, #7]
 80026cc:	461a      	mov	r2, r3
 80026ce:	2110      	movs	r1, #16
 80026d0:	20d4      	movs	r0, #212	@ 0xd4
 80026d2:	f7ff fb51 	bl	8001d78 <SENSOR_IO_Write>
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80026de:	b580      	push	{r7, lr}
 80026e0:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80026e2:	f7ff fb3f 	bl	8001d64 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80026e6:	210f      	movs	r1, #15
 80026e8:	20d4      	movs	r0, #212	@ 0xd4
 80026ea:	f7ff fb5f 	bl	8001dac <SENSOR_IO_Read>
 80026ee:	4603      	mov	r3, r0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80026fe:	2300      	movs	r3, #0
 8002700:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8002702:	2115      	movs	r1, #21
 8002704:	20d4      	movs	r0, #212	@ 0xd4
 8002706:	f7ff fb51 	bl	8001dac <SENSOR_IO_Read>
 800270a:	4603      	mov	r3, r0
 800270c:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 800270e:	7bfb      	ldrb	r3, [r7, #15]
 8002710:	f023 0310 	bic.w	r3, r3, #16
 8002714:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002716:	88fb      	ldrh	r3, [r7, #6]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 800271c:	7bfb      	ldrb	r3, [r7, #15]
 800271e:	f043 0310 	orr.w	r3, r3, #16
 8002722:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8002724:	7bfb      	ldrb	r3, [r7, #15]
 8002726:	461a      	mov	r2, r3
 8002728:	2115      	movs	r1, #21
 800272a:	20d4      	movs	r0, #212	@ 0xd4
 800272c:	f7ff fb24 	bl	8001d78 <SENSOR_IO_Write>
}
 8002730:	bf00      	nop
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b088      	sub	sp, #32
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8002740:	2300      	movs	r3, #0
 8002742:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002744:	2300      	movs	r3, #0
 8002746:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002748:	f04f 0300 	mov.w	r3, #0
 800274c:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800274e:	2110      	movs	r1, #16
 8002750:	20d4      	movs	r0, #212	@ 0xd4
 8002752:	f7ff fb2b 	bl	8001dac <SENSOR_IO_Read>
 8002756:	4603      	mov	r3, r0
 8002758:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800275a:	f107 0208 	add.w	r2, r7, #8
 800275e:	2306      	movs	r3, #6
 8002760:	2128      	movs	r1, #40	@ 0x28
 8002762:	20d4      	movs	r0, #212	@ 0xd4
 8002764:	f7ff fb40 	bl	8001de8 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002768:	2300      	movs	r3, #0
 800276a:	77fb      	strb	r3, [r7, #31]
 800276c:	e01a      	b.n	80027a4 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800276e:	7ffb      	ldrb	r3, [r7, #31]
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	3301      	adds	r3, #1
 8002774:	3320      	adds	r3, #32
 8002776:	443b      	add	r3, r7
 8002778:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800277c:	021b      	lsls	r3, r3, #8
 800277e:	b29b      	uxth	r3, r3
 8002780:	7ffa      	ldrb	r2, [r7, #31]
 8002782:	0052      	lsls	r2, r2, #1
 8002784:	3220      	adds	r2, #32
 8002786:	443a      	add	r2, r7
 8002788:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 800278c:	4413      	add	r3, r2
 800278e:	b29a      	uxth	r2, r3
 8002790:	7ffb      	ldrb	r3, [r7, #31]
 8002792:	b212      	sxth	r2, r2
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	3320      	adds	r3, #32
 8002798:	443b      	add	r3, r7
 800279a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800279e:	7ffb      	ldrb	r3, [r7, #31]
 80027a0:	3301      	adds	r3, #1
 80027a2:	77fb      	strb	r3, [r7, #31]
 80027a4:	7ffb      	ldrb	r3, [r7, #31]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d9e1      	bls.n	800276e <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 80027aa:	7dfb      	ldrb	r3, [r7, #23]
 80027ac:	f003 030c 	and.w	r3, r3, #12
 80027b0:	2b0c      	cmp	r3, #12
 80027b2:	d829      	bhi.n	8002808 <LSM6DSL_AccReadXYZ+0xd0>
 80027b4:	a201      	add	r2, pc, #4	@ (adr r2, 80027bc <LSM6DSL_AccReadXYZ+0x84>)
 80027b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ba:	bf00      	nop
 80027bc:	080027f1 	.word	0x080027f1
 80027c0:	08002809 	.word	0x08002809
 80027c4:	08002809 	.word	0x08002809
 80027c8:	08002809 	.word	0x08002809
 80027cc:	08002803 	.word	0x08002803
 80027d0:	08002809 	.word	0x08002809
 80027d4:	08002809 	.word	0x08002809
 80027d8:	08002809 	.word	0x08002809
 80027dc:	080027f7 	.word	0x080027f7
 80027e0:	08002809 	.word	0x08002809
 80027e4:	08002809 	.word	0x08002809
 80027e8:	08002809 	.word	0x08002809
 80027ec:	080027fd 	.word	0x080027fd
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80027f0:	4b18      	ldr	r3, [pc, #96]	@ (8002854 <LSM6DSL_AccReadXYZ+0x11c>)
 80027f2:	61bb      	str	r3, [r7, #24]
    break;
 80027f4:	e008      	b.n	8002808 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80027f6:	4b18      	ldr	r3, [pc, #96]	@ (8002858 <LSM6DSL_AccReadXYZ+0x120>)
 80027f8:	61bb      	str	r3, [r7, #24]
    break;
 80027fa:	e005      	b.n	8002808 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80027fc:	4b17      	ldr	r3, [pc, #92]	@ (800285c <LSM6DSL_AccReadXYZ+0x124>)
 80027fe:	61bb      	str	r3, [r7, #24]
    break;
 8002800:	e002      	b.n	8002808 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8002802:	4b17      	ldr	r3, [pc, #92]	@ (8002860 <LSM6DSL_AccReadXYZ+0x128>)
 8002804:	61bb      	str	r3, [r7, #24]
    break;    
 8002806:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002808:	2300      	movs	r3, #0
 800280a:	77fb      	strb	r3, [r7, #31]
 800280c:	e01a      	b.n	8002844 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800280e:	7ffb      	ldrb	r3, [r7, #31]
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	3320      	adds	r3, #32
 8002814:	443b      	add	r3, r7
 8002816:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800281a:	ee07 3a90 	vmov	s15, r3
 800281e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002822:	edd7 7a06 	vldr	s15, [r7, #24]
 8002826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800282a:	7ffb      	ldrb	r3, [r7, #31]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	4413      	add	r3, r2
 8002832:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002836:	ee17 2a90 	vmov	r2, s15
 800283a:	b212      	sxth	r2, r2
 800283c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800283e:	7ffb      	ldrb	r3, [r7, #31]
 8002840:	3301      	adds	r3, #1
 8002842:	77fb      	strb	r3, [r7, #31]
 8002844:	7ffb      	ldrb	r3, [r7, #31]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d9e1      	bls.n	800280e <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 800284a:	bf00      	nop
 800284c:	bf00      	nop
 800284e:	3720      	adds	r7, #32
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	3d79db23 	.word	0x3d79db23
 8002858:	3df9db23 	.word	0x3df9db23
 800285c:	3e79db23 	.word	0x3e79db23
 8002860:	3ef9db23 	.word	0x3ef9db23

08002864 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800286e:	2300      	movs	r3, #0
 8002870:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002872:	2111      	movs	r1, #17
 8002874:	20d4      	movs	r0, #212	@ 0xd4
 8002876:	f7ff fa99 	bl	8001dac <SENSOR_IO_Read>
 800287a:	4603      	mov	r3, r0
 800287c:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800287e:	88fb      	ldrh	r3, [r7, #6]
 8002880:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8002882:	7bbb      	ldrb	r3, [r7, #14]
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800288a:	7bba      	ldrb	r2, [r7, #14]
 800288c:	7bfb      	ldrb	r3, [r7, #15]
 800288e:	4313      	orrs	r3, r2
 8002890:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8002892:	7bbb      	ldrb	r3, [r7, #14]
 8002894:	461a      	mov	r2, r3
 8002896:	2111      	movs	r1, #17
 8002898:	20d4      	movs	r0, #212	@ 0xd4
 800289a:	f7ff fa6d 	bl	8001d78 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800289e:	2112      	movs	r1, #18
 80028a0:	20d4      	movs	r0, #212	@ 0xd4
 80028a2:	f7ff fa83 	bl	8001dac <SENSOR_IO_Read>
 80028a6:	4603      	mov	r3, r0
 80028a8:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80028aa:	88fb      	ldrh	r3, [r7, #6]
 80028ac:	0a1b      	lsrs	r3, r3, #8
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80028b2:	7bbb      	ldrb	r3, [r7, #14]
 80028b4:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 80028b8:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80028ba:	7bba      	ldrb	r2, [r7, #14]
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
 80028be:	4313      	orrs	r3, r2
 80028c0:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80028c2:	7bbb      	ldrb	r3, [r7, #14]
 80028c4:	461a      	mov	r2, r3
 80028c6:	2112      	movs	r1, #18
 80028c8:	20d4      	movs	r0, #212	@ 0xd4
 80028ca:	f7ff fa55 	bl	8001d78 <SENSOR_IO_Write>
}
 80028ce:	bf00      	nop
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b082      	sub	sp, #8
 80028da:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80028dc:	2300      	movs	r3, #0
 80028de:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80028e0:	2111      	movs	r1, #17
 80028e2:	20d4      	movs	r0, #212	@ 0xd4
 80028e4:	f7ff fa62 	bl	8001dac <SENSOR_IO_Read>
 80028e8:	4603      	mov	r3, r0
 80028ea:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 80028f4:	79fb      	ldrb	r3, [r7, #7]
 80028f6:	461a      	mov	r2, r3
 80028f8:	2111      	movs	r1, #17
 80028fa:	20d4      	movs	r0, #212	@ 0xd4
 80028fc:	f7ff fa3c 	bl	8001d78 <SENSOR_IO_Write>
}
 8002900:	bf00      	nop
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 800290c:	f7ff fa2a 	bl	8001d64 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8002910:	210f      	movs	r1, #15
 8002912:	20d4      	movs	r0, #212	@ 0xd4
 8002914:	f7ff fa4a 	bl	8001dac <SENSOR_IO_Read>
 8002918:	4603      	mov	r3, r0
}
 800291a:	4618      	mov	r0, r3
 800291c:	bd80      	pop	{r7, pc}

0800291e <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 800291e:	b580      	push	{r7, lr}
 8002920:	b084      	sub	sp, #16
 8002922:	af00      	add	r7, sp, #0
 8002924:	4603      	mov	r3, r0
 8002926:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002928:	2300      	movs	r3, #0
 800292a:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 800292c:	2116      	movs	r1, #22
 800292e:	20d4      	movs	r0, #212	@ 0xd4
 8002930:	f7ff fa3c 	bl	8001dac <SENSOR_IO_Read>
 8002934:	4603      	mov	r3, r0
 8002936:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8002938:	7bfb      	ldrb	r3, [r7, #15]
 800293a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800293e:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002940:	88fb      	ldrh	r3, [r7, #6]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8002946:	7bfb      	ldrb	r3, [r7, #15]
 8002948:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800294c:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 800294e:	7bfb      	ldrb	r3, [r7, #15]
 8002950:	461a      	mov	r2, r3
 8002952:	2116      	movs	r1, #22
 8002954:	20d4      	movs	r0, #212	@ 0xd4
 8002956:	f7ff fa0f 	bl	8001d78 <SENSOR_IO_Write>
}
 800295a:	bf00      	nop
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
	...

08002964 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b088      	sub	sp, #32
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 800296c:	2300      	movs	r3, #0
 800296e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002974:	f04f 0300 	mov.w	r3, #0
 8002978:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800297a:	2111      	movs	r1, #17
 800297c:	20d4      	movs	r0, #212	@ 0xd4
 800297e:	f7ff fa15 	bl	8001dac <SENSOR_IO_Read>
 8002982:	4603      	mov	r3, r0
 8002984:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8002986:	f107 0208 	add.w	r2, r7, #8
 800298a:	2306      	movs	r3, #6
 800298c:	2122      	movs	r1, #34	@ 0x22
 800298e:	20d4      	movs	r0, #212	@ 0xd4
 8002990:	f7ff fa2a 	bl	8001de8 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002994:	2300      	movs	r3, #0
 8002996:	77fb      	strb	r3, [r7, #31]
 8002998:	e01a      	b.n	80029d0 <LSM6DSL_GyroReadXYZAngRate+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800299a:	7ffb      	ldrb	r3, [r7, #31]
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	3301      	adds	r3, #1
 80029a0:	3320      	adds	r3, #32
 80029a2:	443b      	add	r3, r7
 80029a4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80029a8:	021b      	lsls	r3, r3, #8
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	7ffa      	ldrb	r2, [r7, #31]
 80029ae:	0052      	lsls	r2, r2, #1
 80029b0:	3220      	adds	r2, #32
 80029b2:	443a      	add	r2, r7
 80029b4:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80029b8:	4413      	add	r3, r2
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	7ffb      	ldrb	r3, [r7, #31]
 80029be:	b212      	sxth	r2, r2
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	3320      	adds	r3, #32
 80029c4:	443b      	add	r3, r7
 80029c6:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80029ca:	7ffb      	ldrb	r3, [r7, #31]
 80029cc:	3301      	adds	r3, #1
 80029ce:	77fb      	strb	r3, [r7, #31]
 80029d0:	7ffb      	ldrb	r3, [r7, #31]
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d9e1      	bls.n	800299a <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 80029d6:	7dfb      	ldrb	r3, [r7, #23]
 80029d8:	f003 030c 	and.w	r3, r3, #12
 80029dc:	2b0c      	cmp	r3, #12
 80029de:	d829      	bhi.n	8002a34 <LSM6DSL_GyroReadXYZAngRate+0xd0>
 80029e0:	a201      	add	r2, pc, #4	@ (adr r2, 80029e8 <LSM6DSL_GyroReadXYZAngRate+0x84>)
 80029e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e6:	bf00      	nop
 80029e8:	08002a1d 	.word	0x08002a1d
 80029ec:	08002a35 	.word	0x08002a35
 80029f0:	08002a35 	.word	0x08002a35
 80029f4:	08002a35 	.word	0x08002a35
 80029f8:	08002a23 	.word	0x08002a23
 80029fc:	08002a35 	.word	0x08002a35
 8002a00:	08002a35 	.word	0x08002a35
 8002a04:	08002a35 	.word	0x08002a35
 8002a08:	08002a29 	.word	0x08002a29
 8002a0c:	08002a35 	.word	0x08002a35
 8002a10:	08002a35 	.word	0x08002a35
 8002a14:	08002a35 	.word	0x08002a35
 8002a18:	08002a2f 	.word	0x08002a2f
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8002a1c:	4b16      	ldr	r3, [pc, #88]	@ (8002a78 <LSM6DSL_GyroReadXYZAngRate+0x114>)
 8002a1e:	61bb      	str	r3, [r7, #24]
    break;
 8002a20:	e008      	b.n	8002a34 <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8002a22:	4b16      	ldr	r3, [pc, #88]	@ (8002a7c <LSM6DSL_GyroReadXYZAngRate+0x118>)
 8002a24:	61bb      	str	r3, [r7, #24]
    break;
 8002a26:	e005      	b.n	8002a34 <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8002a28:	4b15      	ldr	r3, [pc, #84]	@ (8002a80 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8002a2a:	61bb      	str	r3, [r7, #24]
    break;
 8002a2c:	e002      	b.n	8002a34 <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8002a2e:	4b15      	ldr	r3, [pc, #84]	@ (8002a84 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8002a30:	61bb      	str	r3, [r7, #24]
    break;    
 8002a32:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002a34:	2300      	movs	r3, #0
 8002a36:	77fb      	strb	r3, [r7, #31]
 8002a38:	e016      	b.n	8002a68 <LSM6DSL_GyroReadXYZAngRate+0x104>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8002a3a:	7ffb      	ldrb	r3, [r7, #31]
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	3320      	adds	r3, #32
 8002a40:	443b      	add	r3, r7
 8002a42:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002a46:	ee07 3a90 	vmov	s15, r3
 8002a4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a4e:	7ffb      	ldrb	r3, [r7, #31]
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	4413      	add	r3, r2
 8002a56:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a5e:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8002a62:	7ffb      	ldrb	r3, [r7, #31]
 8002a64:	3301      	adds	r3, #1
 8002a66:	77fb      	strb	r3, [r7, #31]
 8002a68:	7ffb      	ldrb	r3, [r7, #31]
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d9e5      	bls.n	8002a3a <LSM6DSL_GyroReadXYZAngRate+0xd6>
  }
}
 8002a6e:	bf00      	nop
 8002a70:	bf00      	nop
 8002a72:	3720      	adds	r7, #32
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	410c0000 	.word	0x410c0000
 8002a7c:	418c0000 	.word	0x418c0000
 8002a80:	420c0000 	.word	0x420c0000
 8002a84:	428c0000 	.word	0x428c0000

08002a88 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a92:	2003      	movs	r0, #3
 8002a94:	f000 f901 	bl	8002c9a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a98:	200f      	movs	r0, #15
 8002a9a:	f7ff fc0b 	bl	80022b4 <HAL_InitTick>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d002      	beq.n	8002aaa <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	71fb      	strb	r3, [r7, #7]
 8002aa8:	e001      	b.n	8002aae <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002aaa:	f7ff fa6b 	bl	8001f84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002aae:	79fb      	ldrb	r3, [r7, #7]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002abc:	4b06      	ldr	r3, [pc, #24]	@ (8002ad8 <HAL_IncTick+0x20>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4b06      	ldr	r3, [pc, #24]	@ (8002adc <HAL_IncTick+0x24>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	4a04      	ldr	r2, [pc, #16]	@ (8002adc <HAL_IncTick+0x24>)
 8002aca:	6013      	str	r3, [r2, #0]
}
 8002acc:	bf00      	nop
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	200000bc 	.word	0x200000bc
 8002adc:	200007c8 	.word	0x200007c8

08002ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ae4:	4b03      	ldr	r3, [pc, #12]	@ (8002af4 <HAL_GetTick+0x14>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	200007c8 	.word	0x200007c8

08002af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b00:	f7ff ffee 	bl	8002ae0 <HAL_GetTick>
 8002b04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b10:	d005      	beq.n	8002b1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002b12:	4b0a      	ldr	r3, [pc, #40]	@ (8002b3c <HAL_Delay+0x44>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	461a      	mov	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b1e:	bf00      	nop
 8002b20:	f7ff ffde 	bl	8002ae0 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d8f7      	bhi.n	8002b20 <HAL_Delay+0x28>
  {
  }
}
 8002b30:	bf00      	nop
 8002b32:	bf00      	nop
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	200000bc 	.word	0x200000bc

08002b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b50:	4b0c      	ldr	r3, [pc, #48]	@ (8002b84 <__NVIC_SetPriorityGrouping+0x44>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b72:	4a04      	ldr	r2, [pc, #16]	@ (8002b84 <__NVIC_SetPriorityGrouping+0x44>)
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	60d3      	str	r3, [r2, #12]
}
 8002b78:	bf00      	nop
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	e000ed00 	.word	0xe000ed00

08002b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b8c:	4b04      	ldr	r3, [pc, #16]	@ (8002ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	0a1b      	lsrs	r3, r3, #8
 8002b92:	f003 0307 	and.w	r3, r3, #7
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	e000ed00 	.word	0xe000ed00

08002ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	db0b      	blt.n	8002bce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bb6:	79fb      	ldrb	r3, [r7, #7]
 8002bb8:	f003 021f 	and.w	r2, r3, #31
 8002bbc:	4907      	ldr	r1, [pc, #28]	@ (8002bdc <__NVIC_EnableIRQ+0x38>)
 8002bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc2:	095b      	lsrs	r3, r3, #5
 8002bc4:	2001      	movs	r0, #1
 8002bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8002bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	e000e100 	.word	0xe000e100

08002be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	6039      	str	r1, [r7, #0]
 8002bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	db0a      	blt.n	8002c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	490c      	ldr	r1, [pc, #48]	@ (8002c2c <__NVIC_SetPriority+0x4c>)
 8002bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfe:	0112      	lsls	r2, r2, #4
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	440b      	add	r3, r1
 8002c04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c08:	e00a      	b.n	8002c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	4908      	ldr	r1, [pc, #32]	@ (8002c30 <__NVIC_SetPriority+0x50>)
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	3b04      	subs	r3, #4
 8002c18:	0112      	lsls	r2, r2, #4
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	761a      	strb	r2, [r3, #24]
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	e000e100 	.word	0xe000e100
 8002c30:	e000ed00 	.word	0xe000ed00

08002c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b089      	sub	sp, #36	@ 0x24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f1c3 0307 	rsb	r3, r3, #7
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	bf28      	it	cs
 8002c52:	2304      	movcs	r3, #4
 8002c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	3304      	adds	r3, #4
 8002c5a:	2b06      	cmp	r3, #6
 8002c5c:	d902      	bls.n	8002c64 <NVIC_EncodePriority+0x30>
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	3b03      	subs	r3, #3
 8002c62:	e000      	b.n	8002c66 <NVIC_EncodePriority+0x32>
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	43da      	mvns	r2, r3
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	401a      	ands	r2, r3
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c7c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	fa01 f303 	lsl.w	r3, r1, r3
 8002c86:	43d9      	mvns	r1, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c8c:	4313      	orrs	r3, r2
         );
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3724      	adds	r7, #36	@ 0x24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7ff ff4c 	bl	8002b40 <__NVIC_SetPriorityGrouping>
}
 8002ca8:	bf00      	nop
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
 8002cbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cc2:	f7ff ff61 	bl	8002b88 <__NVIC_GetPriorityGrouping>
 8002cc6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	68b9      	ldr	r1, [r7, #8]
 8002ccc:	6978      	ldr	r0, [r7, #20]
 8002cce:	f7ff ffb1 	bl	8002c34 <NVIC_EncodePriority>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cd8:	4611      	mov	r1, r2
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff ff80 	bl	8002be0 <__NVIC_SetPriority>
}
 8002ce0:	bf00      	nop
 8002ce2:	3718      	adds	r7, #24
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff ff54 	bl	8002ba4 <__NVIC_EnableIRQ>
}
 8002cfc:	bf00      	nop
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e014      	b.n	8002d40 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	791b      	ldrb	r3, [r3, #4]
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d105      	bne.n	8002d2c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7ff f950 	bl	8001fcc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2202      	movs	r2, #2
 8002d30:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
 8002d54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	795b      	ldrb	r3, [r3, #5]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d101      	bne.n	8002d66 <HAL_DAC_Start_DMA+0x1e>
 8002d62:	2302      	movs	r3, #2
 8002d64:	e0ab      	b.n	8002ebe <HAL_DAC_Start_DMA+0x176>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d12f      	bne.n	8002dd8 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	4a52      	ldr	r2, [pc, #328]	@ (8002ec8 <HAL_DAC_Start_DMA+0x180>)
 8002d7e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	4a51      	ldr	r2, [pc, #324]	@ (8002ecc <HAL_DAC_Start_DMA+0x184>)
 8002d86:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	4a50      	ldr	r2, [pc, #320]	@ (8002ed0 <HAL_DAC_Start_DMA+0x188>)
 8002d8e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002d9e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	2b08      	cmp	r3, #8
 8002da4:	d013      	beq.n	8002dce <HAL_DAC_Start_DMA+0x86>
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	d845      	bhi.n	8002e38 <HAL_DAC_Start_DMA+0xf0>
 8002dac:	6a3b      	ldr	r3, [r7, #32]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_DAC_Start_DMA+0x72>
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	2b04      	cmp	r3, #4
 8002db6:	d005      	beq.n	8002dc4 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002db8:	e03e      	b.n	8002e38 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	3308      	adds	r3, #8
 8002dc0:	613b      	str	r3, [r7, #16]
        break;
 8002dc2:	e03c      	b.n	8002e3e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	330c      	adds	r3, #12
 8002dca:	613b      	str	r3, [r7, #16]
        break;
 8002dcc:	e037      	b.n	8002e3e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	3310      	adds	r3, #16
 8002dd4:	613b      	str	r3, [r7, #16]
        break;
 8002dd6:	e032      	b.n	8002e3e <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	4a3d      	ldr	r2, [pc, #244]	@ (8002ed4 <HAL_DAC_Start_DMA+0x18c>)
 8002dde:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	4a3c      	ldr	r2, [pc, #240]	@ (8002ed8 <HAL_DAC_Start_DMA+0x190>)
 8002de6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	4a3b      	ldr	r2, [pc, #236]	@ (8002edc <HAL_DAC_Start_DMA+0x194>)
 8002dee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002dfe:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002e00:	6a3b      	ldr	r3, [r7, #32]
 8002e02:	2b08      	cmp	r3, #8
 8002e04:	d013      	beq.n	8002e2e <HAL_DAC_Start_DMA+0xe6>
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d817      	bhi.n	8002e3c <HAL_DAC_Start_DMA+0xf4>
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <HAL_DAC_Start_DMA+0xd2>
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d005      	beq.n	8002e24 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002e18:	e010      	b.n	8002e3c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	3314      	adds	r3, #20
 8002e20:	613b      	str	r3, [r7, #16]
        break;
 8002e22:	e00c      	b.n	8002e3e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	3318      	adds	r3, #24
 8002e2a:	613b      	str	r3, [r7, #16]
        break;
 8002e2c:	e007      	b.n	8002e3e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	331c      	adds	r3, #28
 8002e34:	613b      	str	r3, [r7, #16]
        break;
 8002e36:	e002      	b.n	8002e3e <HAL_DAC_Start_DMA+0xf6>
        break;
 8002e38:	bf00      	nop
 8002e3a:	e000      	b.n	8002e3e <HAL_DAC_Start_DMA+0xf6>
        break;
 8002e3c:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d111      	bne.n	8002e68 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e52:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6898      	ldr	r0, [r3, #8]
 8002e58:	6879      	ldr	r1, [r7, #4]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	f000 fb8f 	bl	8003580 <HAL_DMA_Start_IT>
 8002e62:	4603      	mov	r3, r0
 8002e64:	75fb      	strb	r3, [r7, #23]
 8002e66:	e010      	b.n	8002e8a <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002e76:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	68d8      	ldr	r0, [r3, #12]
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	f000 fb7d 	bl	8003580 <HAL_DMA_Start_IT>
 8002e86:	4603      	mov	r3, r0
 8002e88:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002e90:	7dfb      	ldrb	r3, [r7, #23]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10c      	bne.n	8002eb0 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6819      	ldr	r1, [r3, #0]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f003 0310 	and.w	r3, r3, #16
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	409a      	lsls	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	e005      	b.n	8002ebc <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	f043 0204 	orr.w	r2, r3, #4
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	08003309 	.word	0x08003309
 8002ecc:	0800332b 	.word	0x0800332b
 8002ed0:	08003347 	.word	0x08003347
 8002ed4:	080033c5 	.word	0x080033c5
 8002ed8:	080033e7 	.word	0x080033e7
 8002edc:	08003403 	.word	0x08003403

08002ee0 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6819      	ldr	r1, [r3, #0]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	f003 0310 	and.w	r3, r3, #16
 8002ef6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43da      	mvns	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	400a      	ands	r2, r1
 8002f06:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6819      	ldr	r1, [r3, #0]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	f003 0310 	and.w	r3, r3, #16
 8002f14:	2201      	movs	r2, #1
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	43da      	mvns	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	400a      	ands	r2, r1
 8002f22:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10d      	bne.n	8002f46 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 fba1 	bl	8003676 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	e00c      	b.n	8002f60 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 fb93 	bl	8003676 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8002f5e:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f80:	d120      	bne.n	8002fc4 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f90:	d118      	bne.n	8002fc4 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2204      	movs	r2, #4
 8002f96:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	f043 0201 	orr.w	r2, r3, #1
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002fac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002fbc:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f84b 	bl	800305a <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002fce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fd2:	d120      	bne.n	8003016 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fda:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002fde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fe2:	d118      	bne.n	8003016 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2204      	movs	r2, #4
 8002fe8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	f043 0202 	orr.w	r2, r3, #2
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002ffe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800300e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 f9cd 	bl	80033b0 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8003016:	bf00      	nop
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
	...

08003070 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b088      	sub	sp, #32
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800307c:	2300      	movs	r3, #0
 800307e:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	795b      	ldrb	r3, [r3, #5]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d101      	bne.n	800308c <HAL_DAC_ConfigChannel+0x1c>
 8003088:	2302      	movs	r3, #2
 800308a:	e137      	b.n	80032fc <HAL_DAC_ConfigChannel+0x28c>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2201      	movs	r2, #1
 8003090:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2202      	movs	r2, #2
 8003096:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b04      	cmp	r3, #4
 800309e:	f040 8081 	bne.w	80031a4 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80030a2:	f7ff fd1d 	bl	8002ae0 <HAL_GetTick>
 80030a6:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d140      	bne.n	8003130 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80030ae:	e018      	b.n	80030e2 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80030b0:	f7ff fd16 	bl	8002ae0 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d911      	bls.n	80030e2 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00a      	beq.n	80030e2 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	f043 0208 	orr.w	r2, r3, #8
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2203      	movs	r2, #3
 80030dc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e10c      	b.n	80032fc <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1df      	bne.n	80030b0 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 80030f0:	2001      	movs	r0, #1
 80030f2:	f7ff fd01 	bl	8002af8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	69d2      	ldr	r2, [r2, #28]
 80030fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8003100:	e023      	b.n	800314a <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003102:	f7ff fced 	bl	8002ae0 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b01      	cmp	r3, #1
 800310e:	d90f      	bls.n	8003130 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003116:	2b00      	cmp	r3, #0
 8003118:	da0a      	bge.n	8003130 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f043 0208 	orr.w	r2, r3, #8
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2203      	movs	r2, #3
 800312a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e0e5      	b.n	80032fc <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003136:	2b00      	cmp	r3, #0
 8003138:	dbe3      	blt.n	8003102 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 800313a:	2001      	movs	r0, #1
 800313c:	f7ff fcdc 	bl	8002af8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68ba      	ldr	r2, [r7, #8]
 8003146:	69d2      	ldr	r2, [r2, #28]
 8003148:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f003 0310 	and.w	r3, r3, #16
 8003156:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800315a:	fa01 f303 	lsl.w	r3, r1, r3
 800315e:	43db      	mvns	r3, r3
 8003160:	ea02 0103 	and.w	r1, r2, r3
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	6a1a      	ldr	r2, [r3, #32]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f003 0310 	and.w	r3, r3, #16
 800316e:	409a      	lsls	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f003 0310 	and.w	r3, r3, #16
 8003184:	21ff      	movs	r1, #255	@ 0xff
 8003186:	fa01 f303 	lsl.w	r3, r1, r3
 800318a:	43db      	mvns	r3, r3
 800318c:	ea02 0103 	and.w	r1, r2, r3
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f003 0310 	and.w	r3, r3, #16
 800319a:	409a      	lsls	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d11d      	bne.n	80031e8 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031b2:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f003 0310 	and.w	r3, r3, #16
 80031ba:	221f      	movs	r2, #31
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	43db      	mvns	r3, r3
 80031c2:	69fa      	ldr	r2, [r7, #28]
 80031c4:	4013      	ands	r3, r2
 80031c6:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f003 0310 	and.w	r3, r3, #16
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	69fa      	ldr	r2, [r7, #28]
 80031dc:	4313      	orrs	r3, r2
 80031de:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	69fa      	ldr	r2, [r7, #28]
 80031e6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ee:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f003 0310 	and.w	r3, r3, #16
 80031f6:	2207      	movs	r2, #7
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	43db      	mvns	r3, r3
 80031fe:	69fa      	ldr	r2, [r7, #28]
 8003200:	4013      	ands	r3, r2
 8003202:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	431a      	orrs	r2, r3
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	4313      	orrs	r3, r2
 8003214:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f003 0310 	and.w	r3, r3, #16
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	69fa      	ldr	r2, [r7, #28]
 8003224:	4313      	orrs	r3, r2
 8003226:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	69fa      	ldr	r2, [r7, #28]
 800322e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6819      	ldr	r1, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f003 0310 	and.w	r3, r3, #16
 800323c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	43da      	mvns	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	400a      	ands	r2, r1
 800324c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f003 0310 	and.w	r3, r3, #16
 800325c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	43db      	mvns	r3, r3
 8003266:	69fa      	ldr	r2, [r7, #28]
 8003268:	4013      	ands	r3, r2
 800326a:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f003 0310 	and.w	r3, r3, #16
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	69fa      	ldr	r2, [r7, #28]
 8003280:	4313      	orrs	r3, r2
 8003282:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800328c:	d104      	bne.n	8003298 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003294:	61fb      	str	r3, [r7, #28]
 8003296:	e018      	b.n	80032ca <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d104      	bne.n	80032aa <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80032a6:	61fb      	str	r3, [r7, #28]
 80032a8:	e00f      	b.n	80032ca <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 80032aa:	f002 fb09 	bl	80058c0 <HAL_RCC_GetHCLKFreq>
 80032ae:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	4a14      	ldr	r2, [pc, #80]	@ (8003304 <HAL_DAC_ConfigChannel+0x294>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d904      	bls.n	80032c2 <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032be:	61fb      	str	r3, [r7, #28]
 80032c0:	e003      	b.n	80032ca <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80032c8:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	69fa      	ldr	r2, [r7, #28]
 80032d0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6819      	ldr	r1, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f003 0310 	and.w	r3, r3, #16
 80032de:	22c0      	movs	r2, #192	@ 0xc0
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	43da      	mvns	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	400a      	ands	r2, r1
 80032ec:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2201      	movs	r2, #1
 80032f2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3720      	adds	r7, #32
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	04c4b400 	.word	0x04c4b400

08003308 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003314:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f7ff fe81 	bl	800301e <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2201      	movs	r2, #1
 8003320:	711a      	strb	r2, [r3, #4]
}
 8003322:	bf00      	nop
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b084      	sub	sp, #16
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003336:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f7ff fe7a 	bl	8003032 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800333e:	bf00      	nop
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b084      	sub	sp, #16
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003352:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	f043 0204 	orr.w	r2, r3, #4
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f7ff fe70 	bl	8003046 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2201      	movs	r2, #1
 800336a:	711a      	strb	r2, [r3, #4]
}
 800336c:	bf00      	nop
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f7ff ffce 	bl	8003374 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2201      	movs	r2, #1
 80033dc:	711a      	strb	r2, [r3, #4]
}
 80033de:	bf00      	nop
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b084      	sub	sp, #16
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f7ff ffc7 	bl	8003388 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80033fa:	bf00      	nop
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b084      	sub	sp, #16
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800340e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	f043 0204 	orr.w	r2, r3, #4
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f7ff ffbd 	bl	800339c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2201      	movs	r2, #1
 8003426:	711a      	strb	r2, [r3, #4]
}
 8003428:	bf00      	nop
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e08d      	b.n	800355e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	461a      	mov	r2, r3
 8003448:	4b47      	ldr	r3, [pc, #284]	@ (8003568 <HAL_DMA_Init+0x138>)
 800344a:	429a      	cmp	r2, r3
 800344c:	d80f      	bhi.n	800346e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	461a      	mov	r2, r3
 8003454:	4b45      	ldr	r3, [pc, #276]	@ (800356c <HAL_DMA_Init+0x13c>)
 8003456:	4413      	add	r3, r2
 8003458:	4a45      	ldr	r2, [pc, #276]	@ (8003570 <HAL_DMA_Init+0x140>)
 800345a:	fba2 2303 	umull	r2, r3, r2, r3
 800345e:	091b      	lsrs	r3, r3, #4
 8003460:	009a      	lsls	r2, r3, #2
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a42      	ldr	r2, [pc, #264]	@ (8003574 <HAL_DMA_Init+0x144>)
 800346a:	641a      	str	r2, [r3, #64]	@ 0x40
 800346c:	e00e      	b.n	800348c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	461a      	mov	r2, r3
 8003474:	4b40      	ldr	r3, [pc, #256]	@ (8003578 <HAL_DMA_Init+0x148>)
 8003476:	4413      	add	r3, r2
 8003478:	4a3d      	ldr	r2, [pc, #244]	@ (8003570 <HAL_DMA_Init+0x140>)
 800347a:	fba2 2303 	umull	r2, r3, r2, r3
 800347e:	091b      	lsrs	r3, r3, #4
 8003480:	009a      	lsls	r2, r3, #2
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a3c      	ldr	r2, [pc, #240]	@ (800357c <HAL_DMA_Init+0x14c>)
 800348a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80034a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80034b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 fa12 	bl	8003908 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034ec:	d102      	bne.n	80034f4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034fc:	b2d2      	uxtb	r2, r2
 80034fe:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003508:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d010      	beq.n	8003534 <HAL_DMA_Init+0x104>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b04      	cmp	r3, #4
 8003518:	d80c      	bhi.n	8003534 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 fa32 	bl	8003984 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003530:	605a      	str	r2, [r3, #4]
 8003532:	e008      	b.n	8003546 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40020407 	.word	0x40020407
 800356c:	bffdfff8 	.word	0xbffdfff8
 8003570:	cccccccd 	.word	0xcccccccd
 8003574:	40020000 	.word	0x40020000
 8003578:	bffdfbf8 	.word	0xbffdfbf8
 800357c:	40020400 	.word	0x40020400

08003580 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
 800358c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800358e:	2300      	movs	r3, #0
 8003590:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003598:	2b01      	cmp	r3, #1
 800359a:	d101      	bne.n	80035a0 <HAL_DMA_Start_IT+0x20>
 800359c:	2302      	movs	r3, #2
 800359e:	e066      	b.n	800366e <HAL_DMA_Start_IT+0xee>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d155      	bne.n	8003660 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0201 	bic.w	r2, r2, #1
 80035d0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	68b9      	ldr	r1, [r7, #8]
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 f957 	bl	800388c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d008      	beq.n	80035f8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f042 020e 	orr.w	r2, r2, #14
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	e00f      	b.n	8003618 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0204 	bic.w	r2, r2, #4
 8003606:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 020a 	orr.w	r2, r2, #10
 8003616:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d007      	beq.n	8003636 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003630:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003634:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800363a:	2b00      	cmp	r3, #0
 800363c:	d007      	beq.n	800364e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003648:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800364c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f042 0201 	orr.w	r2, r2, #1
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	e005      	b.n	800366c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003668:	2302      	movs	r3, #2
 800366a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800366c:	7dfb      	ldrb	r3, [r7, #23]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003676:	b480      	push	{r7}
 8003678:	b085      	sub	sp, #20
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d008      	beq.n	80036a0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2204      	movs	r2, #4
 8003692:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e040      	b.n	8003722 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 020e 	bic.w	r2, r2, #14
 80036ae:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036be:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0201 	bic.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d4:	f003 021c 	and.w	r2, r3, #28
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036dc:	2101      	movs	r1, #1
 80036de:	fa01 f202 	lsl.w	r2, r1, r2
 80036e2:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80036ec:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00c      	beq.n	8003710 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003700:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003704:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800370e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003720:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003722:	4618      	mov	r0, r3
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b084      	sub	sp, #16
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374a:	f003 031c 	and.w	r3, r3, #28
 800374e:	2204      	movs	r2, #4
 8003750:	409a      	lsls	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	4013      	ands	r3, r2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d026      	beq.n	80037a8 <HAL_DMA_IRQHandler+0x7a>
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b00      	cmp	r3, #0
 8003762:	d021      	beq.n	80037a8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0320 	and.w	r3, r3, #32
 800376e:	2b00      	cmp	r3, #0
 8003770:	d107      	bne.n	8003782 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 0204 	bic.w	r2, r2, #4
 8003780:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003786:	f003 021c 	and.w	r2, r3, #28
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378e:	2104      	movs	r1, #4
 8003790:	fa01 f202 	lsl.w	r2, r1, r2
 8003794:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379a:	2b00      	cmp	r3, #0
 800379c:	d071      	beq.n	8003882 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80037a6:	e06c      	b.n	8003882 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ac:	f003 031c 	and.w	r3, r3, #28
 80037b0:	2202      	movs	r2, #2
 80037b2:	409a      	lsls	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4013      	ands	r3, r2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d02e      	beq.n	800381a <HAL_DMA_IRQHandler+0xec>
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d029      	beq.n	800381a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0320 	and.w	r3, r3, #32
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10b      	bne.n	80037ec <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 020a 	bic.w	r2, r2, #10
 80037e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f0:	f003 021c 	and.w	r2, r3, #28
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f8:	2102      	movs	r1, #2
 80037fa:	fa01 f202 	lsl.w	r2, r1, r2
 80037fe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800380c:	2b00      	cmp	r3, #0
 800380e:	d038      	beq.n	8003882 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003818:	e033      	b.n	8003882 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800381e:	f003 031c 	and.w	r3, r3, #28
 8003822:	2208      	movs	r2, #8
 8003824:	409a      	lsls	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4013      	ands	r3, r2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d02a      	beq.n	8003884 <HAL_DMA_IRQHandler+0x156>
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	f003 0308 	and.w	r3, r3, #8
 8003834:	2b00      	cmp	r3, #0
 8003836:	d025      	beq.n	8003884 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 020e 	bic.w	r2, r2, #14
 8003846:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800384c:	f003 021c 	and.w	r2, r3, #28
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003854:	2101      	movs	r1, #1
 8003856:	fa01 f202 	lsl.w	r2, r1, r2
 800385a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003876:	2b00      	cmp	r3, #0
 8003878:	d004      	beq.n	8003884 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003882:	bf00      	nop
 8003884:	bf00      	nop
}
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
 8003898:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80038a2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d004      	beq.n	80038b6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80038b4:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ba:	f003 021c 	and.w	r2, r3, #28
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c2:	2101      	movs	r1, #1
 80038c4:	fa01 f202 	lsl.w	r2, r1, r2
 80038c8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	2b10      	cmp	r3, #16
 80038d8:	d108      	bne.n	80038ec <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80038ea:	e007      	b.n	80038fc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	60da      	str	r2, [r3, #12]
}
 80038fc:	bf00      	nop
 80038fe:	3714      	adds	r7, #20
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	461a      	mov	r2, r3
 8003916:	4b17      	ldr	r3, [pc, #92]	@ (8003974 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003918:	429a      	cmp	r2, r3
 800391a:	d80a      	bhi.n	8003932 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003920:	089b      	lsrs	r3, r3, #2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003928:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6493      	str	r3, [r2, #72]	@ 0x48
 8003930:	e007      	b.n	8003942 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003936:	089b      	lsrs	r3, r3, #2
 8003938:	009a      	lsls	r2, r3, #2
 800393a:	4b0f      	ldr	r3, [pc, #60]	@ (8003978 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800393c:	4413      	add	r3, r2
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	b2db      	uxtb	r3, r3
 8003948:	3b08      	subs	r3, #8
 800394a:	4a0c      	ldr	r2, [pc, #48]	@ (800397c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800394c:	fba2 2303 	umull	r2, r3, r2, r3
 8003950:	091b      	lsrs	r3, r3, #4
 8003952:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a0a      	ldr	r2, [pc, #40]	@ (8003980 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003958:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f003 031f 	and.w	r3, r3, #31
 8003960:	2201      	movs	r2, #1
 8003962:	409a      	lsls	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003968:	bf00      	nop
 800396a:	3714      	adds	r7, #20
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	40020407 	.word	0x40020407
 8003978:	4002081c 	.word	0x4002081c
 800397c:	cccccccd 	.word	0xcccccccd
 8003980:	40020880 	.word	0x40020880

08003984 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	b2db      	uxtb	r3, r3
 8003992:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	4b0b      	ldr	r3, [pc, #44]	@ (80039c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003998:	4413      	add	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	461a      	mov	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a08      	ldr	r2, [pc, #32]	@ (80039c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80039a6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	3b01      	subs	r3, #1
 80039ac:	f003 0303 	and.w	r3, r3, #3
 80039b0:	2201      	movs	r2, #1
 80039b2:	409a      	lsls	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80039b8:	bf00      	nop
 80039ba:	3714      	adds	r7, #20
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	1000823f 	.word	0x1000823f
 80039c8:	40020940 	.word	0x40020940

080039cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039d6:	2300      	movs	r3, #0
 80039d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039da:	e166      	b.n	8003caa <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	2101      	movs	r1, #1
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	fa01 f303 	lsl.w	r3, r1, r3
 80039e8:	4013      	ands	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 8158 	beq.w	8003ca4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f003 0303 	and.w	r3, r3, #3
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d005      	beq.n	8003a0c <HAL_GPIO_Init+0x40>
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f003 0303 	and.w	r3, r3, #3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d130      	bne.n	8003a6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	2203      	movs	r2, #3
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	4013      	ands	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	68da      	ldr	r2, [r3, #12]
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a42:	2201      	movs	r2, #1
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	091b      	lsrs	r3, r3, #4
 8003a58:	f003 0201 	and.w	r2, r3, #1
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	2b03      	cmp	r3, #3
 8003a78:	d017      	beq.n	8003aaa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	2203      	movs	r2, #3
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	689a      	ldr	r2, [r3, #8]
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d123      	bne.n	8003afe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	08da      	lsrs	r2, r3, #3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	3208      	adds	r2, #8
 8003abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	220f      	movs	r2, #15
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	43db      	mvns	r3, r3
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	691a      	ldr	r2, [r3, #16]
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	08da      	lsrs	r2, r3, #3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3208      	adds	r2, #8
 8003af8:	6939      	ldr	r1, [r7, #16]
 8003afa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	2203      	movs	r2, #3
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	43db      	mvns	r3, r3
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	4013      	ands	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f003 0203 	and.w	r2, r3, #3
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 80b2 	beq.w	8003ca4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b40:	4b61      	ldr	r3, [pc, #388]	@ (8003cc8 <HAL_GPIO_Init+0x2fc>)
 8003b42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b44:	4a60      	ldr	r2, [pc, #384]	@ (8003cc8 <HAL_GPIO_Init+0x2fc>)
 8003b46:	f043 0301 	orr.w	r3, r3, #1
 8003b4a:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b4c:	4b5e      	ldr	r3, [pc, #376]	@ (8003cc8 <HAL_GPIO_Init+0x2fc>)
 8003b4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	60bb      	str	r3, [r7, #8]
 8003b56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b58:	4a5c      	ldr	r2, [pc, #368]	@ (8003ccc <HAL_GPIO_Init+0x300>)
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	089b      	lsrs	r3, r3, #2
 8003b5e:	3302      	adds	r3, #2
 8003b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f003 0303 	and.w	r3, r3, #3
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	220f      	movs	r2, #15
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	43db      	mvns	r3, r3
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003b82:	d02b      	beq.n	8003bdc <HAL_GPIO_Init+0x210>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a52      	ldr	r2, [pc, #328]	@ (8003cd0 <HAL_GPIO_Init+0x304>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d025      	beq.n	8003bd8 <HAL_GPIO_Init+0x20c>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a51      	ldr	r2, [pc, #324]	@ (8003cd4 <HAL_GPIO_Init+0x308>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d01f      	beq.n	8003bd4 <HAL_GPIO_Init+0x208>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a50      	ldr	r2, [pc, #320]	@ (8003cd8 <HAL_GPIO_Init+0x30c>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d019      	beq.n	8003bd0 <HAL_GPIO_Init+0x204>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a4f      	ldr	r2, [pc, #316]	@ (8003cdc <HAL_GPIO_Init+0x310>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d013      	beq.n	8003bcc <HAL_GPIO_Init+0x200>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a4e      	ldr	r2, [pc, #312]	@ (8003ce0 <HAL_GPIO_Init+0x314>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d00d      	beq.n	8003bc8 <HAL_GPIO_Init+0x1fc>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a4d      	ldr	r2, [pc, #308]	@ (8003ce4 <HAL_GPIO_Init+0x318>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d007      	beq.n	8003bc4 <HAL_GPIO_Init+0x1f8>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a4c      	ldr	r2, [pc, #304]	@ (8003ce8 <HAL_GPIO_Init+0x31c>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d101      	bne.n	8003bc0 <HAL_GPIO_Init+0x1f4>
 8003bbc:	2307      	movs	r3, #7
 8003bbe:	e00e      	b.n	8003bde <HAL_GPIO_Init+0x212>
 8003bc0:	2308      	movs	r3, #8
 8003bc2:	e00c      	b.n	8003bde <HAL_GPIO_Init+0x212>
 8003bc4:	2306      	movs	r3, #6
 8003bc6:	e00a      	b.n	8003bde <HAL_GPIO_Init+0x212>
 8003bc8:	2305      	movs	r3, #5
 8003bca:	e008      	b.n	8003bde <HAL_GPIO_Init+0x212>
 8003bcc:	2304      	movs	r3, #4
 8003bce:	e006      	b.n	8003bde <HAL_GPIO_Init+0x212>
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e004      	b.n	8003bde <HAL_GPIO_Init+0x212>
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	e002      	b.n	8003bde <HAL_GPIO_Init+0x212>
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e000      	b.n	8003bde <HAL_GPIO_Init+0x212>
 8003bdc:	2300      	movs	r3, #0
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	f002 0203 	and.w	r2, r2, #3
 8003be4:	0092      	lsls	r2, r2, #2
 8003be6:	4093      	lsls	r3, r2
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003bee:	4937      	ldr	r1, [pc, #220]	@ (8003ccc <HAL_GPIO_Init+0x300>)
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	089b      	lsrs	r3, r3, #2
 8003bf4:	3302      	adds	r3, #2
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bfc:	4b3b      	ldr	r3, [pc, #236]	@ (8003cec <HAL_GPIO_Init+0x320>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	43db      	mvns	r3, r3
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c20:	4a32      	ldr	r2, [pc, #200]	@ (8003cec <HAL_GPIO_Init+0x320>)
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c26:	4b31      	ldr	r3, [pc, #196]	@ (8003cec <HAL_GPIO_Init+0x320>)
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	4013      	ands	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c4a:	4a28      	ldr	r2, [pc, #160]	@ (8003cec <HAL_GPIO_Init+0x320>)
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c50:	4b26      	ldr	r3, [pc, #152]	@ (8003cec <HAL_GPIO_Init+0x320>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	43db      	mvns	r3, r3
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d003      	beq.n	8003c74 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c74:	4a1d      	ldr	r2, [pc, #116]	@ (8003cec <HAL_GPIO_Init+0x320>)
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003c7a:	4b1c      	ldr	r3, [pc, #112]	@ (8003cec <HAL_GPIO_Init+0x320>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	43db      	mvns	r3, r3
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	4013      	ands	r3, r2
 8003c88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c9e:	4a13      	ldr	r2, [pc, #76]	@ (8003cec <HAL_GPIO_Init+0x320>)
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f47f ae91 	bne.w	80039dc <HAL_GPIO_Init+0x10>
  }
}
 8003cba:	bf00      	nop
 8003cbc:	bf00      	nop
 8003cbe:	371c      	adds	r7, #28
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	40010000 	.word	0x40010000
 8003cd0:	48000400 	.word	0x48000400
 8003cd4:	48000800 	.word	0x48000800
 8003cd8:	48000c00 	.word	0x48000c00
 8003cdc:	48001000 	.word	0x48001000
 8003ce0:	48001400 	.word	0x48001400
 8003ce4:	48001800 	.word	0x48001800
 8003ce8:	48001c00 	.word	0x48001c00
 8003cec:	40010400 	.word	0x40010400

08003cf0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b087      	sub	sp, #28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003cfe:	e0c9      	b.n	8003e94 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003d00:	2201      	movs	r2, #1
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f000 80bc 	beq.w	8003e8e <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003d16:	4a66      	ldr	r2, [pc, #408]	@ (8003eb0 <HAL_GPIO_DeInit+0x1c0>)
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	089b      	lsrs	r3, r3, #2
 8003d1c:	3302      	adds	r3, #2
 8003d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d22:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f003 0303 	and.w	r3, r3, #3
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	220f      	movs	r2, #15
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	4013      	ands	r3, r2
 8003d36:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003d3e:	d02b      	beq.n	8003d98 <HAL_GPIO_DeInit+0xa8>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a5c      	ldr	r2, [pc, #368]	@ (8003eb4 <HAL_GPIO_DeInit+0x1c4>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d025      	beq.n	8003d94 <HAL_GPIO_DeInit+0xa4>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a5b      	ldr	r2, [pc, #364]	@ (8003eb8 <HAL_GPIO_DeInit+0x1c8>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d01f      	beq.n	8003d90 <HAL_GPIO_DeInit+0xa0>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a5a      	ldr	r2, [pc, #360]	@ (8003ebc <HAL_GPIO_DeInit+0x1cc>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d019      	beq.n	8003d8c <HAL_GPIO_DeInit+0x9c>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a59      	ldr	r2, [pc, #356]	@ (8003ec0 <HAL_GPIO_DeInit+0x1d0>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d013      	beq.n	8003d88 <HAL_GPIO_DeInit+0x98>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a58      	ldr	r2, [pc, #352]	@ (8003ec4 <HAL_GPIO_DeInit+0x1d4>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d00d      	beq.n	8003d84 <HAL_GPIO_DeInit+0x94>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a57      	ldr	r2, [pc, #348]	@ (8003ec8 <HAL_GPIO_DeInit+0x1d8>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d007      	beq.n	8003d80 <HAL_GPIO_DeInit+0x90>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a56      	ldr	r2, [pc, #344]	@ (8003ecc <HAL_GPIO_DeInit+0x1dc>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d101      	bne.n	8003d7c <HAL_GPIO_DeInit+0x8c>
 8003d78:	2307      	movs	r3, #7
 8003d7a:	e00e      	b.n	8003d9a <HAL_GPIO_DeInit+0xaa>
 8003d7c:	2308      	movs	r3, #8
 8003d7e:	e00c      	b.n	8003d9a <HAL_GPIO_DeInit+0xaa>
 8003d80:	2306      	movs	r3, #6
 8003d82:	e00a      	b.n	8003d9a <HAL_GPIO_DeInit+0xaa>
 8003d84:	2305      	movs	r3, #5
 8003d86:	e008      	b.n	8003d9a <HAL_GPIO_DeInit+0xaa>
 8003d88:	2304      	movs	r3, #4
 8003d8a:	e006      	b.n	8003d9a <HAL_GPIO_DeInit+0xaa>
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e004      	b.n	8003d9a <HAL_GPIO_DeInit+0xaa>
 8003d90:	2302      	movs	r3, #2
 8003d92:	e002      	b.n	8003d9a <HAL_GPIO_DeInit+0xaa>
 8003d94:	2301      	movs	r3, #1
 8003d96:	e000      	b.n	8003d9a <HAL_GPIO_DeInit+0xaa>
 8003d98:	2300      	movs	r3, #0
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	f002 0203 	and.w	r2, r2, #3
 8003da0:	0092      	lsls	r2, r2, #2
 8003da2:	4093      	lsls	r3, r2
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d132      	bne.n	8003e10 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003daa:	4b49      	ldr	r3, [pc, #292]	@ (8003ed0 <HAL_GPIO_DeInit+0x1e0>)
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	43db      	mvns	r3, r3
 8003db2:	4947      	ldr	r1, [pc, #284]	@ (8003ed0 <HAL_GPIO_DeInit+0x1e0>)
 8003db4:	4013      	ands	r3, r2
 8003db6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003db8:	4b45      	ldr	r3, [pc, #276]	@ (8003ed0 <HAL_GPIO_DeInit+0x1e0>)
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	43db      	mvns	r3, r3
 8003dc0:	4943      	ldr	r1, [pc, #268]	@ (8003ed0 <HAL_GPIO_DeInit+0x1e0>)
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003dc6:	4b42      	ldr	r3, [pc, #264]	@ (8003ed0 <HAL_GPIO_DeInit+0x1e0>)
 8003dc8:	68da      	ldr	r2, [r3, #12]
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	43db      	mvns	r3, r3
 8003dce:	4940      	ldr	r1, [pc, #256]	@ (8003ed0 <HAL_GPIO_DeInit+0x1e0>)
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003dd4:	4b3e      	ldr	r3, [pc, #248]	@ (8003ed0 <HAL_GPIO_DeInit+0x1e0>)
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	43db      	mvns	r3, r3
 8003ddc:	493c      	ldr	r1, [pc, #240]	@ (8003ed0 <HAL_GPIO_DeInit+0x1e0>)
 8003dde:	4013      	ands	r3, r2
 8003de0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f003 0303 	and.w	r3, r3, #3
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	220f      	movs	r2, #15
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003df2:	4a2f      	ldr	r2, [pc, #188]	@ (8003eb0 <HAL_GPIO_DeInit+0x1c0>)
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	089b      	lsrs	r3, r3, #2
 8003df8:	3302      	adds	r3, #2
 8003dfa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	43da      	mvns	r2, r3
 8003e02:	482b      	ldr	r0, [pc, #172]	@ (8003eb0 <HAL_GPIO_DeInit+0x1c0>)
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	089b      	lsrs	r3, r3, #2
 8003e08:	400a      	ands	r2, r1
 8003e0a:	3302      	adds	r3, #2
 8003e0c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	2103      	movs	r1, #3
 8003e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	08da      	lsrs	r2, r3, #3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3208      	adds	r2, #8
 8003e2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f003 0307 	and.w	r3, r3, #7
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	220f      	movs	r2, #15
 8003e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3e:	43db      	mvns	r3, r3
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	08d2      	lsrs	r2, r2, #3
 8003e44:	4019      	ands	r1, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	3208      	adds	r2, #8
 8003e4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689a      	ldr	r2, [r3, #8]
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	2103      	movs	r1, #3
 8003e58:	fa01 f303 	lsl.w	r3, r1, r3
 8003e5c:	43db      	mvns	r3, r3
 8003e5e:	401a      	ands	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	2101      	movs	r1, #1
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e70:	43db      	mvns	r3, r3
 8003e72:	401a      	ands	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	2103      	movs	r1, #3
 8003e82:	fa01 f303 	lsl.w	r3, r1, r3
 8003e86:	43db      	mvns	r3, r3
 8003e88:	401a      	ands	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	3301      	adds	r3, #1
 8003e92:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	fa22 f303 	lsr.w	r3, r2, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f47f af2f 	bne.w	8003d00 <HAL_GPIO_DeInit+0x10>
  }
}
 8003ea2:	bf00      	nop
 8003ea4:	bf00      	nop
 8003ea6:	371c      	adds	r7, #28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	40010000 	.word	0x40010000
 8003eb4:	48000400 	.word	0x48000400
 8003eb8:	48000800 	.word	0x48000800
 8003ebc:	48000c00 	.word	0x48000c00
 8003ec0:	48001000 	.word	0x48001000
 8003ec4:	48001400 	.word	0x48001400
 8003ec8:	48001800 	.word	0x48001800
 8003ecc:	48001c00 	.word	0x48001c00
 8003ed0:	40010400 	.word	0x40010400

08003ed4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e08d      	b.n	8004002 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d106      	bne.n	8003f00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7fe f8dc 	bl	80020b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2224      	movs	r2, #36	@ 0x24
 8003f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0201 	bic.w	r2, r2, #1
 8003f16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d107      	bne.n	8003f4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689a      	ldr	r2, [r3, #8]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f4a:	609a      	str	r2, [r3, #8]
 8003f4c:	e006      	b.n	8003f5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689a      	ldr	r2, [r3, #8]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003f5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d108      	bne.n	8003f76 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f72:	605a      	str	r2, [r3, #4]
 8003f74:	e007      	b.n	8003f86 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f84:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	6812      	ldr	r2, [r2, #0]
 8003f90:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003f94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f98:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68da      	ldr	r2, [r3, #12]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fa8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691a      	ldr	r2, [r3, #16]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	69d9      	ldr	r1, [r3, #28]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a1a      	ldr	r2, [r3, #32]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f042 0201 	orr.w	r2, r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2220      	movs	r2, #32
 8003fee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b082      	sub	sp, #8
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e021      	b.n	8004060 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2224      	movs	r2, #36	@ 0x24
 8004020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0201 	bic.w	r2, r2, #1
 8004032:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f7fe f89d 	bl	8002174 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3708      	adds	r7, #8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b088      	sub	sp, #32
 800406c:	af02      	add	r7, sp, #8
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	4608      	mov	r0, r1
 8004072:	4611      	mov	r1, r2
 8004074:	461a      	mov	r2, r3
 8004076:	4603      	mov	r3, r0
 8004078:	817b      	strh	r3, [r7, #10]
 800407a:	460b      	mov	r3, r1
 800407c:	813b      	strh	r3, [r7, #8]
 800407e:	4613      	mov	r3, r2
 8004080:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b20      	cmp	r3, #32
 800408c:	f040 80f9 	bne.w	8004282 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004090:	6a3b      	ldr	r3, [r7, #32]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d002      	beq.n	800409c <HAL_I2C_Mem_Write+0x34>
 8004096:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004098:	2b00      	cmp	r3, #0
 800409a:	d105      	bne.n	80040a8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040a2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e0ed      	b.n	8004284 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d101      	bne.n	80040b6 <HAL_I2C_Mem_Write+0x4e>
 80040b2:	2302      	movs	r3, #2
 80040b4:	e0e6      	b.n	8004284 <HAL_I2C_Mem_Write+0x21c>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040be:	f7fe fd0f 	bl	8002ae0 <HAL_GetTick>
 80040c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	2319      	movs	r3, #25
 80040ca:	2201      	movs	r2, #1
 80040cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 fac3 	bl	800465c <I2C_WaitOnFlagUntilTimeout>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e0d1      	b.n	8004284 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2221      	movs	r2, #33	@ 0x21
 80040e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2240      	movs	r2, #64	@ 0x40
 80040ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a3a      	ldr	r2, [r7, #32]
 80040fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004100:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004108:	88f8      	ldrh	r0, [r7, #6]
 800410a:	893a      	ldrh	r2, [r7, #8]
 800410c:	8979      	ldrh	r1, [r7, #10]
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	9301      	str	r3, [sp, #4]
 8004112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	4603      	mov	r3, r0
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f000 f9d3 	bl	80044c4 <I2C_RequestMemoryWrite>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d005      	beq.n	8004130 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e0a9      	b.n	8004284 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004134:	b29b      	uxth	r3, r3
 8004136:	2bff      	cmp	r3, #255	@ 0xff
 8004138:	d90e      	bls.n	8004158 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	22ff      	movs	r2, #255	@ 0xff
 800413e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004144:	b2da      	uxtb	r2, r3
 8004146:	8979      	ldrh	r1, [r7, #10]
 8004148:	2300      	movs	r3, #0
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 fc47 	bl	80049e4 <I2C_TransferConfig>
 8004156:	e00f      	b.n	8004178 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800415c:	b29a      	uxth	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004166:	b2da      	uxtb	r2, r3
 8004168:	8979      	ldrh	r1, [r7, #10]
 800416a:	2300      	movs	r3, #0
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f000 fc36 	bl	80049e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 fac6 	bl	800470e <I2C_WaitOnTXISFlagUntilTimeout>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d001      	beq.n	800418c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e07b      	b.n	8004284 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004190:	781a      	ldrb	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419c:	1c5a      	adds	r2, r3, #1
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	3b01      	subs	r3, #1
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b4:	3b01      	subs	r3, #1
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d034      	beq.n	8004230 <HAL_I2C_Mem_Write+0x1c8>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d130      	bne.n	8004230 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d4:	2200      	movs	r2, #0
 80041d6:	2180      	movs	r1, #128	@ 0x80
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 fa3f 	bl	800465c <I2C_WaitOnFlagUntilTimeout>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e04d      	b.n	8004284 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	2bff      	cmp	r3, #255	@ 0xff
 80041f0:	d90e      	bls.n	8004210 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	22ff      	movs	r2, #255	@ 0xff
 80041f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	8979      	ldrh	r1, [r7, #10]
 8004200:	2300      	movs	r3, #0
 8004202:	9300      	str	r3, [sp, #0]
 8004204:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 fbeb 	bl	80049e4 <I2C_TransferConfig>
 800420e:	e00f      	b.n	8004230 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004214:	b29a      	uxth	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800421e:	b2da      	uxtb	r2, r3
 8004220:	8979      	ldrh	r1, [r7, #10]
 8004222:	2300      	movs	r3, #0
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 fbda 	bl	80049e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004234:	b29b      	uxth	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d19e      	bne.n	8004178 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 faac 	bl	800479c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e01a      	b.n	8004284 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2220      	movs	r2, #32
 8004254:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	6859      	ldr	r1, [r3, #4]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	4b0a      	ldr	r3, [pc, #40]	@ (800428c <HAL_I2C_Mem_Write+0x224>)
 8004262:	400b      	ands	r3, r1
 8004264:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2220      	movs	r2, #32
 800426a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	e000      	b.n	8004284 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004282:	2302      	movs	r3, #2
  }
}
 8004284:	4618      	mov	r0, r3
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	fe00e800 	.word	0xfe00e800

08004290 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b088      	sub	sp, #32
 8004294:	af02      	add	r7, sp, #8
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	4608      	mov	r0, r1
 800429a:	4611      	mov	r1, r2
 800429c:	461a      	mov	r2, r3
 800429e:	4603      	mov	r3, r0
 80042a0:	817b      	strh	r3, [r7, #10]
 80042a2:	460b      	mov	r3, r1
 80042a4:	813b      	strh	r3, [r7, #8]
 80042a6:	4613      	mov	r3, r2
 80042a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b20      	cmp	r3, #32
 80042b4:	f040 80fd 	bne.w	80044b2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <HAL_I2C_Mem_Read+0x34>
 80042be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d105      	bne.n	80042d0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042ca:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e0f1      	b.n	80044b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d101      	bne.n	80042de <HAL_I2C_Mem_Read+0x4e>
 80042da:	2302      	movs	r3, #2
 80042dc:	e0ea      	b.n	80044b4 <HAL_I2C_Mem_Read+0x224>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042e6:	f7fe fbfb 	bl	8002ae0 <HAL_GetTick>
 80042ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	2319      	movs	r3, #25
 80042f2:	2201      	movs	r2, #1
 80042f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 f9af 	bl	800465c <I2C_WaitOnFlagUntilTimeout>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e0d5      	b.n	80044b4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2222      	movs	r2, #34	@ 0x22
 800430c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2240      	movs	r2, #64	@ 0x40
 8004314:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6a3a      	ldr	r2, [r7, #32]
 8004322:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004328:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004330:	88f8      	ldrh	r0, [r7, #6]
 8004332:	893a      	ldrh	r2, [r7, #8]
 8004334:	8979      	ldrh	r1, [r7, #10]
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	9301      	str	r3, [sp, #4]
 800433a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800433c:	9300      	str	r3, [sp, #0]
 800433e:	4603      	mov	r3, r0
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 f913 	bl	800456c <I2C_RequestMemoryRead>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d005      	beq.n	8004358 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e0ad      	b.n	80044b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800435c:	b29b      	uxth	r3, r3
 800435e:	2bff      	cmp	r3, #255	@ 0xff
 8004360:	d90e      	bls.n	8004380 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2201      	movs	r2, #1
 8004366:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800436c:	b2da      	uxtb	r2, r3
 800436e:	8979      	ldrh	r1, [r7, #10]
 8004370:	4b52      	ldr	r3, [pc, #328]	@ (80044bc <HAL_I2C_Mem_Read+0x22c>)
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f000 fb33 	bl	80049e4 <I2C_TransferConfig>
 800437e:	e00f      	b.n	80043a0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004384:	b29a      	uxth	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800438e:	b2da      	uxtb	r2, r3
 8004390:	8979      	ldrh	r1, [r7, #10]
 8004392:	4b4a      	ldr	r3, [pc, #296]	@ (80044bc <HAL_I2C_Mem_Read+0x22c>)
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 fb22 	bl	80049e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a6:	2200      	movs	r2, #0
 80043a8:	2104      	movs	r1, #4
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f000 f956 	bl	800465c <I2C_WaitOnFlagUntilTimeout>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e07c      	b.n	80044b4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c4:	b2d2      	uxtb	r2, r2
 80043c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043cc:	1c5a      	adds	r2, r3, #1
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043d6:	3b01      	subs	r3, #1
 80043d8:	b29a      	uxth	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d034      	beq.n	8004460 <HAL_I2C_Mem_Read+0x1d0>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d130      	bne.n	8004460 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004404:	2200      	movs	r2, #0
 8004406:	2180      	movs	r1, #128	@ 0x80
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 f927 	bl	800465c <I2C_WaitOnFlagUntilTimeout>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e04d      	b.n	80044b4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800441c:	b29b      	uxth	r3, r3
 800441e:	2bff      	cmp	r3, #255	@ 0xff
 8004420:	d90e      	bls.n	8004440 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2201      	movs	r2, #1
 8004426:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800442c:	b2da      	uxtb	r2, r3
 800442e:	8979      	ldrh	r1, [r7, #10]
 8004430:	2300      	movs	r3, #0
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f000 fad3 	bl	80049e4 <I2C_TransferConfig>
 800443e:	e00f      	b.n	8004460 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004444:	b29a      	uxth	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800444e:	b2da      	uxtb	r2, r3
 8004450:	8979      	ldrh	r1, [r7, #10]
 8004452:	2300      	movs	r3, #0
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f000 fac2 	bl	80049e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004464:	b29b      	uxth	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d19a      	bne.n	80043a0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f000 f994 	bl	800479c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e01a      	b.n	80044b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2220      	movs	r2, #32
 8004484:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6859      	ldr	r1, [r3, #4]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	4b0b      	ldr	r3, [pc, #44]	@ (80044c0 <HAL_I2C_Mem_Read+0x230>)
 8004492:	400b      	ands	r3, r1
 8004494:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2220      	movs	r2, #32
 800449a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80044ae:	2300      	movs	r3, #0
 80044b0:	e000      	b.n	80044b4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80044b2:	2302      	movs	r3, #2
  }
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3718      	adds	r7, #24
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	80002400 	.word	0x80002400
 80044c0:	fe00e800 	.word	0xfe00e800

080044c4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af02      	add	r7, sp, #8
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	4608      	mov	r0, r1
 80044ce:	4611      	mov	r1, r2
 80044d0:	461a      	mov	r2, r3
 80044d2:	4603      	mov	r3, r0
 80044d4:	817b      	strh	r3, [r7, #10]
 80044d6:	460b      	mov	r3, r1
 80044d8:	813b      	strh	r3, [r7, #8]
 80044da:	4613      	mov	r3, r2
 80044dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80044de:	88fb      	ldrh	r3, [r7, #6]
 80044e0:	b2da      	uxtb	r2, r3
 80044e2:	8979      	ldrh	r1, [r7, #10]
 80044e4:	4b20      	ldr	r3, [pc, #128]	@ (8004568 <I2C_RequestMemoryWrite+0xa4>)
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 fa79 	bl	80049e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044f2:	69fa      	ldr	r2, [r7, #28]
 80044f4:	69b9      	ldr	r1, [r7, #24]
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f000 f909 	bl	800470e <I2C_WaitOnTXISFlagUntilTimeout>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e02c      	b.n	8004560 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004506:	88fb      	ldrh	r3, [r7, #6]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d105      	bne.n	8004518 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800450c:	893b      	ldrh	r3, [r7, #8]
 800450e:	b2da      	uxtb	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	629a      	str	r2, [r3, #40]	@ 0x28
 8004516:	e015      	b.n	8004544 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004518:	893b      	ldrh	r3, [r7, #8]
 800451a:	0a1b      	lsrs	r3, r3, #8
 800451c:	b29b      	uxth	r3, r3
 800451e:	b2da      	uxtb	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004526:	69fa      	ldr	r2, [r7, #28]
 8004528:	69b9      	ldr	r1, [r7, #24]
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 f8ef 	bl	800470e <I2C_WaitOnTXISFlagUntilTimeout>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e012      	b.n	8004560 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800453a:	893b      	ldrh	r3, [r7, #8]
 800453c:	b2da      	uxtb	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	2200      	movs	r2, #0
 800454c:	2180      	movs	r1, #128	@ 0x80
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 f884 	bl	800465c <I2C_WaitOnFlagUntilTimeout>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e000      	b.n	8004560 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	80002000 	.word	0x80002000

0800456c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af02      	add	r7, sp, #8
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	4608      	mov	r0, r1
 8004576:	4611      	mov	r1, r2
 8004578:	461a      	mov	r2, r3
 800457a:	4603      	mov	r3, r0
 800457c:	817b      	strh	r3, [r7, #10]
 800457e:	460b      	mov	r3, r1
 8004580:	813b      	strh	r3, [r7, #8]
 8004582:	4613      	mov	r3, r2
 8004584:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004586:	88fb      	ldrh	r3, [r7, #6]
 8004588:	b2da      	uxtb	r2, r3
 800458a:	8979      	ldrh	r1, [r7, #10]
 800458c:	4b20      	ldr	r3, [pc, #128]	@ (8004610 <I2C_RequestMemoryRead+0xa4>)
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	2300      	movs	r3, #0
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 fa26 	bl	80049e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004598:	69fa      	ldr	r2, [r7, #28]
 800459a:	69b9      	ldr	r1, [r7, #24]
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 f8b6 	bl	800470e <I2C_WaitOnTXISFlagUntilTimeout>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e02c      	b.n	8004606 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045ac:	88fb      	ldrh	r3, [r7, #6]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d105      	bne.n	80045be <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045b2:	893b      	ldrh	r3, [r7, #8]
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80045bc:	e015      	b.n	80045ea <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80045be:	893b      	ldrh	r3, [r7, #8]
 80045c0:	0a1b      	lsrs	r3, r3, #8
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	b2da      	uxtb	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045cc:	69fa      	ldr	r2, [r7, #28]
 80045ce:	69b9      	ldr	r1, [r7, #24]
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 f89c 	bl	800470e <I2C_WaitOnTXISFlagUntilTimeout>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e012      	b.n	8004606 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045e0:	893b      	ldrh	r3, [r7, #8]
 80045e2:	b2da      	uxtb	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	2200      	movs	r2, #0
 80045f2:	2140      	movs	r1, #64	@ 0x40
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 f831 	bl	800465c <I2C_WaitOnFlagUntilTimeout>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e000      	b.n	8004606 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	80002000 	.word	0x80002000

08004614 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b02      	cmp	r3, #2
 8004628:	d103      	bne.n	8004632 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2200      	movs	r2, #0
 8004630:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b01      	cmp	r3, #1
 800463e:	d007      	beq.n	8004650 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	699a      	ldr	r2, [r3, #24]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0201 	orr.w	r2, r2, #1
 800464e:	619a      	str	r2, [r3, #24]
  }
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	603b      	str	r3, [r7, #0]
 8004668:	4613      	mov	r3, r2
 800466a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800466c:	e03b      	b.n	80046e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	6839      	ldr	r1, [r7, #0]
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 f8d6 	bl	8004824 <I2C_IsErrorOccurred>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e041      	b.n	8004706 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004688:	d02d      	beq.n	80046e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800468a:	f7fe fa29 	bl	8002ae0 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	429a      	cmp	r2, r3
 8004698:	d302      	bcc.n	80046a0 <I2C_WaitOnFlagUntilTimeout+0x44>
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d122      	bne.n	80046e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	699a      	ldr	r2, [r3, #24]
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	4013      	ands	r3, r2
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	bf0c      	ite	eq
 80046b0:	2301      	moveq	r3, #1
 80046b2:	2300      	movne	r3, #0
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	461a      	mov	r2, r3
 80046b8:	79fb      	ldrb	r3, [r7, #7]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d113      	bne.n	80046e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046c2:	f043 0220 	orr.w	r2, r3, #32
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2220      	movs	r2, #32
 80046ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e00f      	b.n	8004706 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	699a      	ldr	r2, [r3, #24]
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	4013      	ands	r3, r2
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	bf0c      	ite	eq
 80046f6:	2301      	moveq	r3, #1
 80046f8:	2300      	movne	r3, #0
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	461a      	mov	r2, r3
 80046fe:	79fb      	ldrb	r3, [r7, #7]
 8004700:	429a      	cmp	r2, r3
 8004702:	d0b4      	beq.n	800466e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b084      	sub	sp, #16
 8004712:	af00      	add	r7, sp, #0
 8004714:	60f8      	str	r0, [r7, #12]
 8004716:	60b9      	str	r1, [r7, #8]
 8004718:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800471a:	e033      	b.n	8004784 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	68b9      	ldr	r1, [r7, #8]
 8004720:	68f8      	ldr	r0, [r7, #12]
 8004722:	f000 f87f 	bl	8004824 <I2C_IsErrorOccurred>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e031      	b.n	8004794 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004736:	d025      	beq.n	8004784 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004738:	f7fe f9d2 	bl	8002ae0 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	429a      	cmp	r2, r3
 8004746:	d302      	bcc.n	800474e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d11a      	bne.n	8004784 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b02      	cmp	r3, #2
 800475a:	d013      	beq.n	8004784 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004760:	f043 0220 	orr.w	r2, r3, #32
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2220      	movs	r2, #32
 800476c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e007      	b.n	8004794 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b02      	cmp	r3, #2
 8004790:	d1c4      	bne.n	800471c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047a8:	e02f      	b.n	800480a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	68b9      	ldr	r1, [r7, #8]
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 f838 	bl	8004824 <I2C_IsErrorOccurred>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e02d      	b.n	800481a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047be:	f7fe f98f 	bl	8002ae0 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d302      	bcc.n	80047d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d11a      	bne.n	800480a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	f003 0320 	and.w	r3, r3, #32
 80047de:	2b20      	cmp	r3, #32
 80047e0:	d013      	beq.n	800480a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047e6:	f043 0220 	orr.w	r2, r3, #32
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2220      	movs	r2, #32
 80047f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e007      	b.n	800481a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	f003 0320 	and.w	r3, r3, #32
 8004814:	2b20      	cmp	r3, #32
 8004816:	d1c8      	bne.n	80047aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
	...

08004824 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b08a      	sub	sp, #40	@ 0x28
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004830:	2300      	movs	r3, #0
 8004832:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800483e:	2300      	movs	r3, #0
 8004840:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	f003 0310 	and.w	r3, r3, #16
 800484c:	2b00      	cmp	r3, #0
 800484e:	d068      	beq.n	8004922 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2210      	movs	r2, #16
 8004856:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004858:	e049      	b.n	80048ee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004860:	d045      	beq.n	80048ee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004862:	f7fe f93d 	bl	8002ae0 <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	429a      	cmp	r2, r3
 8004870:	d302      	bcc.n	8004878 <I2C_IsErrorOccurred+0x54>
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d13a      	bne.n	80048ee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004882:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800488a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004896:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800489a:	d121      	bne.n	80048e0 <I2C_IsErrorOccurred+0xbc>
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048a2:	d01d      	beq.n	80048e0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80048a4:	7cfb      	ldrb	r3, [r7, #19]
 80048a6:	2b20      	cmp	r3, #32
 80048a8:	d01a      	beq.n	80048e0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048b8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80048ba:	f7fe f911 	bl	8002ae0 <HAL_GetTick>
 80048be:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048c0:	e00e      	b.n	80048e0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80048c2:	f7fe f90d 	bl	8002ae0 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	2b19      	cmp	r3, #25
 80048ce:	d907      	bls.n	80048e0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	f043 0320 	orr.w	r3, r3, #32
 80048d6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80048de:	e006      	b.n	80048ee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	f003 0320 	and.w	r3, r3, #32
 80048ea:	2b20      	cmp	r3, #32
 80048ec:	d1e9      	bne.n	80048c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	f003 0320 	and.w	r3, r3, #32
 80048f8:	2b20      	cmp	r3, #32
 80048fa:	d003      	beq.n	8004904 <I2C_IsErrorOccurred+0xe0>
 80048fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004900:	2b00      	cmp	r3, #0
 8004902:	d0aa      	beq.n	800485a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004904:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004908:	2b00      	cmp	r3, #0
 800490a:	d103      	bne.n	8004914 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2220      	movs	r2, #32
 8004912:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004914:	6a3b      	ldr	r3, [r7, #32]
 8004916:	f043 0304 	orr.w	r3, r3, #4
 800491a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00b      	beq.n	800494c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004934:	6a3b      	ldr	r3, [r7, #32]
 8004936:	f043 0301 	orr.w	r3, r3, #1
 800493a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004944:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00b      	beq.n	800496e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004956:	6a3b      	ldr	r3, [r7, #32]
 8004958:	f043 0308 	orr.w	r3, r3, #8
 800495c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004966:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00b      	beq.n	8004990 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004978:	6a3b      	ldr	r3, [r7, #32]
 800497a:	f043 0302 	orr.w	r3, r3, #2
 800497e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004988:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004990:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004994:	2b00      	cmp	r3, #0
 8004996:	d01c      	beq.n	80049d2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f7ff fe3b 	bl	8004614 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6859      	ldr	r1, [r3, #4]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	4b0d      	ldr	r3, [pc, #52]	@ (80049e0 <I2C_IsErrorOccurred+0x1bc>)
 80049aa:	400b      	ands	r3, r1
 80049ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049b2:	6a3b      	ldr	r3, [r7, #32]
 80049b4:	431a      	orrs	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2220      	movs	r2, #32
 80049be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80049d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3728      	adds	r7, #40	@ 0x28
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	fe00e800 	.word	0xfe00e800

080049e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	607b      	str	r3, [r7, #4]
 80049ee:	460b      	mov	r3, r1
 80049f0:	817b      	strh	r3, [r7, #10]
 80049f2:	4613      	mov	r3, r2
 80049f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049f6:	897b      	ldrh	r3, [r7, #10]
 80049f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80049fc:	7a7b      	ldrb	r3, [r7, #9]
 80049fe:	041b      	lsls	r3, r3, #16
 8004a00:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a04:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a0a:	6a3b      	ldr	r3, [r7, #32]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a12:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	6a3b      	ldr	r3, [r7, #32]
 8004a1c:	0d5b      	lsrs	r3, r3, #21
 8004a1e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004a22:	4b08      	ldr	r3, [pc, #32]	@ (8004a44 <I2C_TransferConfig+0x60>)
 8004a24:	430b      	orrs	r3, r1
 8004a26:	43db      	mvns	r3, r3
 8004a28:	ea02 0103 	and.w	r1, r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004a36:	bf00      	nop
 8004a38:	371c      	adds	r7, #28
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	03ff63ff 	.word	0x03ff63ff

08004a48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b20      	cmp	r3, #32
 8004a5c:	d138      	bne.n	8004ad0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d101      	bne.n	8004a6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a68:	2302      	movs	r3, #2
 8004a6a:	e032      	b.n	8004ad2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2224      	movs	r2, #36	@ 0x24
 8004a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f022 0201 	bic.w	r2, r2, #1
 8004a8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004a9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6819      	ldr	r1, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0201 	orr.w	r2, r2, #1
 8004aba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2220      	movs	r2, #32
 8004ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004acc:	2300      	movs	r3, #0
 8004ace:	e000      	b.n	8004ad2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ad0:	2302      	movs	r3, #2
  }
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b085      	sub	sp, #20
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
 8004ae6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2b20      	cmp	r3, #32
 8004af2:	d139      	bne.n	8004b68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d101      	bne.n	8004b02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004afe:	2302      	movs	r3, #2
 8004b00:	e033      	b.n	8004b6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2224      	movs	r2, #36	@ 0x24
 8004b0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 0201 	bic.w	r2, r2, #1
 8004b20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004b30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	021b      	lsls	r3, r3, #8
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f042 0201 	orr.w	r2, r2, #1
 8004b52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2220      	movs	r2, #32
 8004b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b64:	2300      	movs	r3, #0
 8004b66:	e000      	b.n	8004b6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b68:	2302      	movs	r3, #2
  }
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3714      	adds	r7, #20
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
	...

08004b78 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8004bb4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004b84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b88:	d102      	bne.n	8004b90 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004b8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b8e:	e00b      	b.n	8004ba8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004b90:	4b08      	ldr	r3, [pc, #32]	@ (8004bb4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b9e:	d102      	bne.n	8004ba6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004ba0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ba4:	e000      	b.n	8004ba8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004ba6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	40007000 	.word	0x40007000

08004bb8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d141      	bne.n	8004c4a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004bc6:	4b4b      	ldr	r3, [pc, #300]	@ (8004cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004bce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bd2:	d131      	bne.n	8004c38 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bd4:	4b47      	ldr	r3, [pc, #284]	@ (8004cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bda:	4a46      	ldr	r2, [pc, #280]	@ (8004cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004be0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004be4:	4b43      	ldr	r3, [pc, #268]	@ (8004cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004bec:	4a41      	ldr	r2, [pc, #260]	@ (8004cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004bf2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004bf4:	4b40      	ldr	r3, [pc, #256]	@ (8004cf8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2232      	movs	r2, #50	@ 0x32
 8004bfa:	fb02 f303 	mul.w	r3, r2, r3
 8004bfe:	4a3f      	ldr	r2, [pc, #252]	@ (8004cfc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c00:	fba2 2303 	umull	r2, r3, r2, r3
 8004c04:	0c9b      	lsrs	r3, r3, #18
 8004c06:	3301      	adds	r3, #1
 8004c08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c0a:	e002      	b.n	8004c12 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c12:	4b38      	ldr	r3, [pc, #224]	@ (8004cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c1e:	d102      	bne.n	8004c26 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1f2      	bne.n	8004c0c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c26:	4b33      	ldr	r3, [pc, #204]	@ (8004cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c32:	d158      	bne.n	8004ce6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e057      	b.n	8004ce8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c38:	4b2e      	ldr	r3, [pc, #184]	@ (8004cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c3e:	4a2d      	ldr	r2, [pc, #180]	@ (8004cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004c48:	e04d      	b.n	8004ce6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c50:	d141      	bne.n	8004cd6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c52:	4b28      	ldr	r3, [pc, #160]	@ (8004cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004c5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c5e:	d131      	bne.n	8004cc4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c60:	4b24      	ldr	r3, [pc, #144]	@ (8004cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c66:	4a23      	ldr	r2, [pc, #140]	@ (8004cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c6c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c70:	4b20      	ldr	r3, [pc, #128]	@ (8004cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c78:	4a1e      	ldr	r2, [pc, #120]	@ (8004cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004c80:	4b1d      	ldr	r3, [pc, #116]	@ (8004cf8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2232      	movs	r2, #50	@ 0x32
 8004c86:	fb02 f303 	mul.w	r3, r2, r3
 8004c8a:	4a1c      	ldr	r2, [pc, #112]	@ (8004cfc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c90:	0c9b      	lsrs	r3, r3, #18
 8004c92:	3301      	adds	r3, #1
 8004c94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c96:	e002      	b.n	8004c9e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c9e:	4b15      	ldr	r3, [pc, #84]	@ (8004cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ca6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004caa:	d102      	bne.n	8004cb2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1f2      	bne.n	8004c98 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004cb2:	4b10      	ldr	r3, [pc, #64]	@ (8004cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cbe:	d112      	bne.n	8004ce6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e011      	b.n	8004ce8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8004cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cca:	4a0a      	ldr	r2, [pc, #40]	@ (8004cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ccc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cd0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004cd4:	e007      	b.n	8004ce6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004cd6:	4b07      	ldr	r3, [pc, #28]	@ (8004cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004cde:	4a05      	ldr	r2, [pc, #20]	@ (8004cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ce0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ce4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3714      	adds	r7, #20
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	40007000 	.word	0x40007000
 8004cf8:	2000004c 	.word	0x2000004c
 8004cfc:	431bde83 	.word	0x431bde83

08004d00 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b088      	sub	sp, #32
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d102      	bne.n	8004d14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	f000 bc08 	b.w	8005524 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d14:	4b96      	ldr	r3, [pc, #600]	@ (8004f70 <HAL_RCC_OscConfig+0x270>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f003 030c 	and.w	r3, r3, #12
 8004d1c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d1e:	4b94      	ldr	r3, [pc, #592]	@ (8004f70 <HAL_RCC_OscConfig+0x270>)
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	f003 0303 	and.w	r3, r3, #3
 8004d26:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0310 	and.w	r3, r3, #16
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 80e4 	beq.w	8004efe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d007      	beq.n	8004d4c <HAL_RCC_OscConfig+0x4c>
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	2b0c      	cmp	r3, #12
 8004d40:	f040 808b 	bne.w	8004e5a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	f040 8087 	bne.w	8004e5a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d4c:	4b88      	ldr	r3, [pc, #544]	@ (8004f70 <HAL_RCC_OscConfig+0x270>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d005      	beq.n	8004d64 <HAL_RCC_OscConfig+0x64>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e3df      	b.n	8005524 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a1a      	ldr	r2, [r3, #32]
 8004d68:	4b81      	ldr	r3, [pc, #516]	@ (8004f70 <HAL_RCC_OscConfig+0x270>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0308 	and.w	r3, r3, #8
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d004      	beq.n	8004d7e <HAL_RCC_OscConfig+0x7e>
 8004d74:	4b7e      	ldr	r3, [pc, #504]	@ (8004f70 <HAL_RCC_OscConfig+0x270>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d7c:	e005      	b.n	8004d8a <HAL_RCC_OscConfig+0x8a>
 8004d7e:	4b7c      	ldr	r3, [pc, #496]	@ (8004f70 <HAL_RCC_OscConfig+0x270>)
 8004d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d84:	091b      	lsrs	r3, r3, #4
 8004d86:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d223      	bcs.n	8004dd6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 fdfe 	bl	8005994 <RCC_SetFlashLatencyFromMSIRange>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d001      	beq.n	8004da2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e3c0      	b.n	8005524 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004da2:	4b73      	ldr	r3, [pc, #460]	@ (8004f70 <HAL_RCC_OscConfig+0x270>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a72      	ldr	r2, [pc, #456]	@ (8004f70 <HAL_RCC_OscConfig+0x270>)
 8004da8:	f043 0308 	orr.w	r3, r3, #8
 8004dac:	6013      	str	r3, [r2, #0]
 8004dae:	4b70      	ldr	r3, [pc, #448]	@ (8004f70 <HAL_RCC_OscConfig+0x270>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	496d      	ldr	r1, [pc, #436]	@ (8004f70 <HAL_RCC_OscConfig+0x270>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004dc0:	4b6b      	ldr	r3, [pc, #428]	@ (8004f70 <HAL_RCC_OscConfig+0x270>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	69db      	ldr	r3, [r3, #28]
 8004dcc:	021b      	lsls	r3, r3, #8
 8004dce:	4968      	ldr	r1, [pc, #416]	@ (8004f70 <HAL_RCC_OscConfig+0x270>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	604b      	str	r3, [r1, #4]
 8004dd4:	e025      	b.n	8004e22 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004dd6:	4b66      	ldr	r3, [pc, #408]	@ (8004f70 <HAL_RCC_OscConfig+0x270>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a65      	ldr	r2, [pc, #404]	@ (8004f70 <HAL_RCC_OscConfig+0x270>)
 8004ddc:	f043 0308 	orr.w	r3, r3, #8
 8004de0:	6013      	str	r3, [r2, #0]
 8004de2:	4b63      	ldr	r3, [pc, #396]	@ (8004f70 <HAL_RCC_OscConfig+0x270>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	4960      	ldr	r1, [pc, #384]	@ (8004f70 <HAL_RCC_OscConfig+0x270>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004df4:	4b5e      	ldr	r3, [pc, #376]	@ (8004f70 <HAL_RCC_OscConfig+0x270>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	69db      	ldr	r3, [r3, #28]
 8004e00:	021b      	lsls	r3, r3, #8
 8004e02:	495b      	ldr	r1, [pc, #364]	@ (8004f70 <HAL_RCC_OscConfig+0x270>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d109      	bne.n	8004e22 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 fdbe 	bl	8005994 <RCC_SetFlashLatencyFromMSIRange>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e380      	b.n	8005524 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e22:	f000 fcc1 	bl	80057a8 <HAL_RCC_GetSysClockFreq>
 8004e26:	4602      	mov	r2, r0
 8004e28:	4b51      	ldr	r3, [pc, #324]	@ (8004f70 <HAL_RCC_OscConfig+0x270>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	091b      	lsrs	r3, r3, #4
 8004e2e:	f003 030f 	and.w	r3, r3, #15
 8004e32:	4950      	ldr	r1, [pc, #320]	@ (8004f74 <HAL_RCC_OscConfig+0x274>)
 8004e34:	5ccb      	ldrb	r3, [r1, r3]
 8004e36:	f003 031f 	and.w	r3, r3, #31
 8004e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e3e:	4a4e      	ldr	r2, [pc, #312]	@ (8004f78 <HAL_RCC_OscConfig+0x278>)
 8004e40:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004e42:	4b4e      	ldr	r3, [pc, #312]	@ (8004f7c <HAL_RCC_OscConfig+0x27c>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7fd fa34 	bl	80022b4 <HAL_InitTick>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004e50:	7bfb      	ldrb	r3, [r7, #15]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d052      	beq.n	8004efc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004e56:	7bfb      	ldrb	r3, [r7, #15]
 8004e58:	e364      	b.n	8005524 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d032      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004e62:	4b43      	ldr	r3, [pc, #268]	@ (8004f70 <HAL_RCC_OscConfig+0x270>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a42      	ldr	r2, [pc, #264]	@ (8004f70 <HAL_RCC_OscConfig+0x270>)
 8004e68:	f043 0301 	orr.w	r3, r3, #1
 8004e6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004e6e:	f7fd fe37 	bl	8002ae0 <HAL_GetTick>
 8004e72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e74:	e008      	b.n	8004e88 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e76:	f7fd fe33 	bl	8002ae0 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d901      	bls.n	8004e88 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e34d      	b.n	8005524 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e88:	4b39      	ldr	r3, [pc, #228]	@ (8004f70 <HAL_RCC_OscConfig+0x270>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d0f0      	beq.n	8004e76 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e94:	4b36      	ldr	r3, [pc, #216]	@ (8004f70 <HAL_RCC_OscConfig+0x270>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a35      	ldr	r2, [pc, #212]	@ (8004f70 <HAL_RCC_OscConfig+0x270>)
 8004e9a:	f043 0308 	orr.w	r3, r3, #8
 8004e9e:	6013      	str	r3, [r2, #0]
 8004ea0:	4b33      	ldr	r3, [pc, #204]	@ (8004f70 <HAL_RCC_OscConfig+0x270>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	4930      	ldr	r1, [pc, #192]	@ (8004f70 <HAL_RCC_OscConfig+0x270>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004eb2:	4b2f      	ldr	r3, [pc, #188]	@ (8004f70 <HAL_RCC_OscConfig+0x270>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	021b      	lsls	r3, r3, #8
 8004ec0:	492b      	ldr	r1, [pc, #172]	@ (8004f70 <HAL_RCC_OscConfig+0x270>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	604b      	str	r3, [r1, #4]
 8004ec6:	e01a      	b.n	8004efe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004ec8:	4b29      	ldr	r3, [pc, #164]	@ (8004f70 <HAL_RCC_OscConfig+0x270>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a28      	ldr	r2, [pc, #160]	@ (8004f70 <HAL_RCC_OscConfig+0x270>)
 8004ece:	f023 0301 	bic.w	r3, r3, #1
 8004ed2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ed4:	f7fd fe04 	bl	8002ae0 <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004edc:	f7fd fe00 	bl	8002ae0 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e31a      	b.n	8005524 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004eee:	4b20      	ldr	r3, [pc, #128]	@ (8004f70 <HAL_RCC_OscConfig+0x270>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1f0      	bne.n	8004edc <HAL_RCC_OscConfig+0x1dc>
 8004efa:	e000      	b.n	8004efe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004efc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d073      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	d005      	beq.n	8004f1c <HAL_RCC_OscConfig+0x21c>
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	2b0c      	cmp	r3, #12
 8004f14:	d10e      	bne.n	8004f34 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	2b03      	cmp	r3, #3
 8004f1a:	d10b      	bne.n	8004f34 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f1c:	4b14      	ldr	r3, [pc, #80]	@ (8004f70 <HAL_RCC_OscConfig+0x270>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d063      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x2f0>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d15f      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e2f7      	b.n	8005524 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f3c:	d106      	bne.n	8004f4c <HAL_RCC_OscConfig+0x24c>
 8004f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8004f70 <HAL_RCC_OscConfig+0x270>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a0b      	ldr	r2, [pc, #44]	@ (8004f70 <HAL_RCC_OscConfig+0x270>)
 8004f44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f48:	6013      	str	r3, [r2, #0]
 8004f4a:	e025      	b.n	8004f98 <HAL_RCC_OscConfig+0x298>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f54:	d114      	bne.n	8004f80 <HAL_RCC_OscConfig+0x280>
 8004f56:	4b06      	ldr	r3, [pc, #24]	@ (8004f70 <HAL_RCC_OscConfig+0x270>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a05      	ldr	r2, [pc, #20]	@ (8004f70 <HAL_RCC_OscConfig+0x270>)
 8004f5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f60:	6013      	str	r3, [r2, #0]
 8004f62:	4b03      	ldr	r3, [pc, #12]	@ (8004f70 <HAL_RCC_OscConfig+0x270>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a02      	ldr	r2, [pc, #8]	@ (8004f70 <HAL_RCC_OscConfig+0x270>)
 8004f68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f6c:	6013      	str	r3, [r2, #0]
 8004f6e:	e013      	b.n	8004f98 <HAL_RCC_OscConfig+0x298>
 8004f70:	40021000 	.word	0x40021000
 8004f74:	0800acf8 	.word	0x0800acf8
 8004f78:	2000004c 	.word	0x2000004c
 8004f7c:	200000b8 	.word	0x200000b8
 8004f80:	4ba0      	ldr	r3, [pc, #640]	@ (8005204 <HAL_RCC_OscConfig+0x504>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a9f      	ldr	r2, [pc, #636]	@ (8005204 <HAL_RCC_OscConfig+0x504>)
 8004f86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f8a:	6013      	str	r3, [r2, #0]
 8004f8c:	4b9d      	ldr	r3, [pc, #628]	@ (8005204 <HAL_RCC_OscConfig+0x504>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a9c      	ldr	r2, [pc, #624]	@ (8005204 <HAL_RCC_OscConfig+0x504>)
 8004f92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d013      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa0:	f7fd fd9e 	bl	8002ae0 <HAL_GetTick>
 8004fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fa6:	e008      	b.n	8004fba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fa8:	f7fd fd9a 	bl	8002ae0 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b64      	cmp	r3, #100	@ 0x64
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e2b4      	b.n	8005524 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fba:	4b92      	ldr	r3, [pc, #584]	@ (8005204 <HAL_RCC_OscConfig+0x504>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d0f0      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x2a8>
 8004fc6:	e014      	b.n	8004ff2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc8:	f7fd fd8a 	bl	8002ae0 <HAL_GetTick>
 8004fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fd0:	f7fd fd86 	bl	8002ae0 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b64      	cmp	r3, #100	@ 0x64
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e2a0      	b.n	8005524 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fe2:	4b88      	ldr	r3, [pc, #544]	@ (8005204 <HAL_RCC_OscConfig+0x504>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1f0      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x2d0>
 8004fee:	e000      	b.n	8004ff2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d060      	beq.n	80050c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	2b04      	cmp	r3, #4
 8005002:	d005      	beq.n	8005010 <HAL_RCC_OscConfig+0x310>
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	2b0c      	cmp	r3, #12
 8005008:	d119      	bne.n	800503e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	2b02      	cmp	r3, #2
 800500e:	d116      	bne.n	800503e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005010:	4b7c      	ldr	r3, [pc, #496]	@ (8005204 <HAL_RCC_OscConfig+0x504>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005018:	2b00      	cmp	r3, #0
 800501a:	d005      	beq.n	8005028 <HAL_RCC_OscConfig+0x328>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e27d      	b.n	8005524 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005028:	4b76      	ldr	r3, [pc, #472]	@ (8005204 <HAL_RCC_OscConfig+0x504>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	061b      	lsls	r3, r3, #24
 8005036:	4973      	ldr	r1, [pc, #460]	@ (8005204 <HAL_RCC_OscConfig+0x504>)
 8005038:	4313      	orrs	r3, r2
 800503a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800503c:	e040      	b.n	80050c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d023      	beq.n	800508e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005046:	4b6f      	ldr	r3, [pc, #444]	@ (8005204 <HAL_RCC_OscConfig+0x504>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a6e      	ldr	r2, [pc, #440]	@ (8005204 <HAL_RCC_OscConfig+0x504>)
 800504c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005050:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005052:	f7fd fd45 	bl	8002ae0 <HAL_GetTick>
 8005056:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005058:	e008      	b.n	800506c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800505a:	f7fd fd41 	bl	8002ae0 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d901      	bls.n	800506c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e25b      	b.n	8005524 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800506c:	4b65      	ldr	r3, [pc, #404]	@ (8005204 <HAL_RCC_OscConfig+0x504>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005074:	2b00      	cmp	r3, #0
 8005076:	d0f0      	beq.n	800505a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005078:	4b62      	ldr	r3, [pc, #392]	@ (8005204 <HAL_RCC_OscConfig+0x504>)
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	061b      	lsls	r3, r3, #24
 8005086:	495f      	ldr	r1, [pc, #380]	@ (8005204 <HAL_RCC_OscConfig+0x504>)
 8005088:	4313      	orrs	r3, r2
 800508a:	604b      	str	r3, [r1, #4]
 800508c:	e018      	b.n	80050c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800508e:	4b5d      	ldr	r3, [pc, #372]	@ (8005204 <HAL_RCC_OscConfig+0x504>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a5c      	ldr	r2, [pc, #368]	@ (8005204 <HAL_RCC_OscConfig+0x504>)
 8005094:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800509a:	f7fd fd21 	bl	8002ae0 <HAL_GetTick>
 800509e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050a0:	e008      	b.n	80050b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050a2:	f7fd fd1d 	bl	8002ae0 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d901      	bls.n	80050b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e237      	b.n	8005524 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050b4:	4b53      	ldr	r3, [pc, #332]	@ (8005204 <HAL_RCC_OscConfig+0x504>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1f0      	bne.n	80050a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0308 	and.w	r3, r3, #8
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d03c      	beq.n	8005146 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d01c      	beq.n	800510e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050d4:	4b4b      	ldr	r3, [pc, #300]	@ (8005204 <HAL_RCC_OscConfig+0x504>)
 80050d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050da:	4a4a      	ldr	r2, [pc, #296]	@ (8005204 <HAL_RCC_OscConfig+0x504>)
 80050dc:	f043 0301 	orr.w	r3, r3, #1
 80050e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e4:	f7fd fcfc 	bl	8002ae0 <HAL_GetTick>
 80050e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050ec:	f7fd fcf8 	bl	8002ae0 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e212      	b.n	8005524 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050fe:	4b41      	ldr	r3, [pc, #260]	@ (8005204 <HAL_RCC_OscConfig+0x504>)
 8005100:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005104:	f003 0302 	and.w	r3, r3, #2
 8005108:	2b00      	cmp	r3, #0
 800510a:	d0ef      	beq.n	80050ec <HAL_RCC_OscConfig+0x3ec>
 800510c:	e01b      	b.n	8005146 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800510e:	4b3d      	ldr	r3, [pc, #244]	@ (8005204 <HAL_RCC_OscConfig+0x504>)
 8005110:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005114:	4a3b      	ldr	r2, [pc, #236]	@ (8005204 <HAL_RCC_OscConfig+0x504>)
 8005116:	f023 0301 	bic.w	r3, r3, #1
 800511a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800511e:	f7fd fcdf 	bl	8002ae0 <HAL_GetTick>
 8005122:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005124:	e008      	b.n	8005138 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005126:	f7fd fcdb 	bl	8002ae0 <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	2b02      	cmp	r3, #2
 8005132:	d901      	bls.n	8005138 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e1f5      	b.n	8005524 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005138:	4b32      	ldr	r3, [pc, #200]	@ (8005204 <HAL_RCC_OscConfig+0x504>)
 800513a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1ef      	bne.n	8005126 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0304 	and.w	r3, r3, #4
 800514e:	2b00      	cmp	r3, #0
 8005150:	f000 80a6 	beq.w	80052a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005154:	2300      	movs	r3, #0
 8005156:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005158:	4b2a      	ldr	r3, [pc, #168]	@ (8005204 <HAL_RCC_OscConfig+0x504>)
 800515a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800515c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10d      	bne.n	8005180 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005164:	4b27      	ldr	r3, [pc, #156]	@ (8005204 <HAL_RCC_OscConfig+0x504>)
 8005166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005168:	4a26      	ldr	r2, [pc, #152]	@ (8005204 <HAL_RCC_OscConfig+0x504>)
 800516a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800516e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005170:	4b24      	ldr	r3, [pc, #144]	@ (8005204 <HAL_RCC_OscConfig+0x504>)
 8005172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005174:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005178:	60bb      	str	r3, [r7, #8]
 800517a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800517c:	2301      	movs	r3, #1
 800517e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005180:	4b21      	ldr	r3, [pc, #132]	@ (8005208 <HAL_RCC_OscConfig+0x508>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005188:	2b00      	cmp	r3, #0
 800518a:	d118      	bne.n	80051be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800518c:	4b1e      	ldr	r3, [pc, #120]	@ (8005208 <HAL_RCC_OscConfig+0x508>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a1d      	ldr	r2, [pc, #116]	@ (8005208 <HAL_RCC_OscConfig+0x508>)
 8005192:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005196:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005198:	f7fd fca2 	bl	8002ae0 <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051a0:	f7fd fc9e 	bl	8002ae0 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e1b8      	b.n	8005524 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051b2:	4b15      	ldr	r3, [pc, #84]	@ (8005208 <HAL_RCC_OscConfig+0x508>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d0f0      	beq.n	80051a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d108      	bne.n	80051d8 <HAL_RCC_OscConfig+0x4d8>
 80051c6:	4b0f      	ldr	r3, [pc, #60]	@ (8005204 <HAL_RCC_OscConfig+0x504>)
 80051c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051cc:	4a0d      	ldr	r2, [pc, #52]	@ (8005204 <HAL_RCC_OscConfig+0x504>)
 80051ce:	f043 0301 	orr.w	r3, r3, #1
 80051d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80051d6:	e029      	b.n	800522c <HAL_RCC_OscConfig+0x52c>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	2b05      	cmp	r3, #5
 80051de:	d115      	bne.n	800520c <HAL_RCC_OscConfig+0x50c>
 80051e0:	4b08      	ldr	r3, [pc, #32]	@ (8005204 <HAL_RCC_OscConfig+0x504>)
 80051e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051e6:	4a07      	ldr	r2, [pc, #28]	@ (8005204 <HAL_RCC_OscConfig+0x504>)
 80051e8:	f043 0304 	orr.w	r3, r3, #4
 80051ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80051f0:	4b04      	ldr	r3, [pc, #16]	@ (8005204 <HAL_RCC_OscConfig+0x504>)
 80051f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051f6:	4a03      	ldr	r2, [pc, #12]	@ (8005204 <HAL_RCC_OscConfig+0x504>)
 80051f8:	f043 0301 	orr.w	r3, r3, #1
 80051fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005200:	e014      	b.n	800522c <HAL_RCC_OscConfig+0x52c>
 8005202:	bf00      	nop
 8005204:	40021000 	.word	0x40021000
 8005208:	40007000 	.word	0x40007000
 800520c:	4b9d      	ldr	r3, [pc, #628]	@ (8005484 <HAL_RCC_OscConfig+0x784>)
 800520e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005212:	4a9c      	ldr	r2, [pc, #624]	@ (8005484 <HAL_RCC_OscConfig+0x784>)
 8005214:	f023 0301 	bic.w	r3, r3, #1
 8005218:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800521c:	4b99      	ldr	r3, [pc, #612]	@ (8005484 <HAL_RCC_OscConfig+0x784>)
 800521e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005222:	4a98      	ldr	r2, [pc, #608]	@ (8005484 <HAL_RCC_OscConfig+0x784>)
 8005224:	f023 0304 	bic.w	r3, r3, #4
 8005228:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d016      	beq.n	8005262 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005234:	f7fd fc54 	bl	8002ae0 <HAL_GetTick>
 8005238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800523a:	e00a      	b.n	8005252 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800523c:	f7fd fc50 	bl	8002ae0 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800524a:	4293      	cmp	r3, r2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e168      	b.n	8005524 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005252:	4b8c      	ldr	r3, [pc, #560]	@ (8005484 <HAL_RCC_OscConfig+0x784>)
 8005254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005258:	f003 0302 	and.w	r3, r3, #2
 800525c:	2b00      	cmp	r3, #0
 800525e:	d0ed      	beq.n	800523c <HAL_RCC_OscConfig+0x53c>
 8005260:	e015      	b.n	800528e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005262:	f7fd fc3d 	bl	8002ae0 <HAL_GetTick>
 8005266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005268:	e00a      	b.n	8005280 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800526a:	f7fd fc39 	bl	8002ae0 <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005278:	4293      	cmp	r3, r2
 800527a:	d901      	bls.n	8005280 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e151      	b.n	8005524 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005280:	4b80      	ldr	r3, [pc, #512]	@ (8005484 <HAL_RCC_OscConfig+0x784>)
 8005282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1ed      	bne.n	800526a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800528e:	7ffb      	ldrb	r3, [r7, #31]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d105      	bne.n	80052a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005294:	4b7b      	ldr	r3, [pc, #492]	@ (8005484 <HAL_RCC_OscConfig+0x784>)
 8005296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005298:	4a7a      	ldr	r2, [pc, #488]	@ (8005484 <HAL_RCC_OscConfig+0x784>)
 800529a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800529e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0320 	and.w	r3, r3, #32
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d03c      	beq.n	8005326 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d01c      	beq.n	80052ee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80052b4:	4b73      	ldr	r3, [pc, #460]	@ (8005484 <HAL_RCC_OscConfig+0x784>)
 80052b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052ba:	4a72      	ldr	r2, [pc, #456]	@ (8005484 <HAL_RCC_OscConfig+0x784>)
 80052bc:	f043 0301 	orr.w	r3, r3, #1
 80052c0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c4:	f7fd fc0c 	bl	8002ae0 <HAL_GetTick>
 80052c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80052ca:	e008      	b.n	80052de <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052cc:	f7fd fc08 	bl	8002ae0 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e122      	b.n	8005524 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80052de:	4b69      	ldr	r3, [pc, #420]	@ (8005484 <HAL_RCC_OscConfig+0x784>)
 80052e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d0ef      	beq.n	80052cc <HAL_RCC_OscConfig+0x5cc>
 80052ec:	e01b      	b.n	8005326 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80052ee:	4b65      	ldr	r3, [pc, #404]	@ (8005484 <HAL_RCC_OscConfig+0x784>)
 80052f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052f4:	4a63      	ldr	r2, [pc, #396]	@ (8005484 <HAL_RCC_OscConfig+0x784>)
 80052f6:	f023 0301 	bic.w	r3, r3, #1
 80052fa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052fe:	f7fd fbef 	bl	8002ae0 <HAL_GetTick>
 8005302:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005304:	e008      	b.n	8005318 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005306:	f7fd fbeb 	bl	8002ae0 <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	2b02      	cmp	r3, #2
 8005312:	d901      	bls.n	8005318 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e105      	b.n	8005524 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005318:	4b5a      	ldr	r3, [pc, #360]	@ (8005484 <HAL_RCC_OscConfig+0x784>)
 800531a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1ef      	bne.n	8005306 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800532a:	2b00      	cmp	r3, #0
 800532c:	f000 80f9 	beq.w	8005522 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005334:	2b02      	cmp	r3, #2
 8005336:	f040 80cf 	bne.w	80054d8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800533a:	4b52      	ldr	r3, [pc, #328]	@ (8005484 <HAL_RCC_OscConfig+0x784>)
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f003 0203 	and.w	r2, r3, #3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800534a:	429a      	cmp	r2, r3
 800534c:	d12c      	bne.n	80053a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005358:	3b01      	subs	r3, #1
 800535a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800535c:	429a      	cmp	r2, r3
 800535e:	d123      	bne.n	80053a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800536a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800536c:	429a      	cmp	r2, r3
 800536e:	d11b      	bne.n	80053a8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800537a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800537c:	429a      	cmp	r2, r3
 800537e:	d113      	bne.n	80053a8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800538a:	085b      	lsrs	r3, r3, #1
 800538c:	3b01      	subs	r3, #1
 800538e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005390:	429a      	cmp	r2, r3
 8005392:	d109      	bne.n	80053a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800539e:	085b      	lsrs	r3, r3, #1
 80053a0:	3b01      	subs	r3, #1
 80053a2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d071      	beq.n	800548c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	2b0c      	cmp	r3, #12
 80053ac:	d068      	beq.n	8005480 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80053ae:	4b35      	ldr	r3, [pc, #212]	@ (8005484 <HAL_RCC_OscConfig+0x784>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d105      	bne.n	80053c6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80053ba:	4b32      	ldr	r3, [pc, #200]	@ (8005484 <HAL_RCC_OscConfig+0x784>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d001      	beq.n	80053ca <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e0ac      	b.n	8005524 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80053ca:	4b2e      	ldr	r3, [pc, #184]	@ (8005484 <HAL_RCC_OscConfig+0x784>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a2d      	ldr	r2, [pc, #180]	@ (8005484 <HAL_RCC_OscConfig+0x784>)
 80053d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053d4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80053d6:	f7fd fb83 	bl	8002ae0 <HAL_GetTick>
 80053da:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053dc:	e008      	b.n	80053f0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053de:	f7fd fb7f 	bl	8002ae0 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d901      	bls.n	80053f0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e099      	b.n	8005524 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053f0:	4b24      	ldr	r3, [pc, #144]	@ (8005484 <HAL_RCC_OscConfig+0x784>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1f0      	bne.n	80053de <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053fc:	4b21      	ldr	r3, [pc, #132]	@ (8005484 <HAL_RCC_OscConfig+0x784>)
 80053fe:	68da      	ldr	r2, [r3, #12]
 8005400:	4b21      	ldr	r3, [pc, #132]	@ (8005488 <HAL_RCC_OscConfig+0x788>)
 8005402:	4013      	ands	r3, r2
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800540c:	3a01      	subs	r2, #1
 800540e:	0112      	lsls	r2, r2, #4
 8005410:	4311      	orrs	r1, r2
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005416:	0212      	lsls	r2, r2, #8
 8005418:	4311      	orrs	r1, r2
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800541e:	0852      	lsrs	r2, r2, #1
 8005420:	3a01      	subs	r2, #1
 8005422:	0552      	lsls	r2, r2, #21
 8005424:	4311      	orrs	r1, r2
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800542a:	0852      	lsrs	r2, r2, #1
 800542c:	3a01      	subs	r2, #1
 800542e:	0652      	lsls	r2, r2, #25
 8005430:	4311      	orrs	r1, r2
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005436:	06d2      	lsls	r2, r2, #27
 8005438:	430a      	orrs	r2, r1
 800543a:	4912      	ldr	r1, [pc, #72]	@ (8005484 <HAL_RCC_OscConfig+0x784>)
 800543c:	4313      	orrs	r3, r2
 800543e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005440:	4b10      	ldr	r3, [pc, #64]	@ (8005484 <HAL_RCC_OscConfig+0x784>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a0f      	ldr	r2, [pc, #60]	@ (8005484 <HAL_RCC_OscConfig+0x784>)
 8005446:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800544a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800544c:	4b0d      	ldr	r3, [pc, #52]	@ (8005484 <HAL_RCC_OscConfig+0x784>)
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	4a0c      	ldr	r2, [pc, #48]	@ (8005484 <HAL_RCC_OscConfig+0x784>)
 8005452:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005456:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005458:	f7fd fb42 	bl	8002ae0 <HAL_GetTick>
 800545c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800545e:	e008      	b.n	8005472 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005460:	f7fd fb3e 	bl	8002ae0 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b02      	cmp	r3, #2
 800546c:	d901      	bls.n	8005472 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e058      	b.n	8005524 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005472:	4b04      	ldr	r3, [pc, #16]	@ (8005484 <HAL_RCC_OscConfig+0x784>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d0f0      	beq.n	8005460 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800547e:	e050      	b.n	8005522 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e04f      	b.n	8005524 <HAL_RCC_OscConfig+0x824>
 8005484:	40021000 	.word	0x40021000
 8005488:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800548c:	4b27      	ldr	r3, [pc, #156]	@ (800552c <HAL_RCC_OscConfig+0x82c>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d144      	bne.n	8005522 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005498:	4b24      	ldr	r3, [pc, #144]	@ (800552c <HAL_RCC_OscConfig+0x82c>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a23      	ldr	r2, [pc, #140]	@ (800552c <HAL_RCC_OscConfig+0x82c>)
 800549e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80054a4:	4b21      	ldr	r3, [pc, #132]	@ (800552c <HAL_RCC_OscConfig+0x82c>)
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	4a20      	ldr	r2, [pc, #128]	@ (800552c <HAL_RCC_OscConfig+0x82c>)
 80054aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80054b0:	f7fd fb16 	bl	8002ae0 <HAL_GetTick>
 80054b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054b6:	e008      	b.n	80054ca <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054b8:	f7fd fb12 	bl	8002ae0 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d901      	bls.n	80054ca <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e02c      	b.n	8005524 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054ca:	4b18      	ldr	r3, [pc, #96]	@ (800552c <HAL_RCC_OscConfig+0x82c>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d0f0      	beq.n	80054b8 <HAL_RCC_OscConfig+0x7b8>
 80054d6:	e024      	b.n	8005522 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	2b0c      	cmp	r3, #12
 80054dc:	d01f      	beq.n	800551e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054de:	4b13      	ldr	r3, [pc, #76]	@ (800552c <HAL_RCC_OscConfig+0x82c>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a12      	ldr	r2, [pc, #72]	@ (800552c <HAL_RCC_OscConfig+0x82c>)
 80054e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ea:	f7fd faf9 	bl	8002ae0 <HAL_GetTick>
 80054ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054f0:	e008      	b.n	8005504 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054f2:	f7fd faf5 	bl	8002ae0 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d901      	bls.n	8005504 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e00f      	b.n	8005524 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005504:	4b09      	ldr	r3, [pc, #36]	@ (800552c <HAL_RCC_OscConfig+0x82c>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1f0      	bne.n	80054f2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005510:	4b06      	ldr	r3, [pc, #24]	@ (800552c <HAL_RCC_OscConfig+0x82c>)
 8005512:	68da      	ldr	r2, [r3, #12]
 8005514:	4905      	ldr	r1, [pc, #20]	@ (800552c <HAL_RCC_OscConfig+0x82c>)
 8005516:	4b06      	ldr	r3, [pc, #24]	@ (8005530 <HAL_RCC_OscConfig+0x830>)
 8005518:	4013      	ands	r3, r2
 800551a:	60cb      	str	r3, [r1, #12]
 800551c:	e001      	b.n	8005522 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e000      	b.n	8005524 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3720      	adds	r7, #32
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	40021000 	.word	0x40021000
 8005530:	feeefffc 	.word	0xfeeefffc

08005534 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800553e:	2300      	movs	r3, #0
 8005540:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d101      	bne.n	800554c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e11d      	b.n	8005788 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800554c:	4b90      	ldr	r3, [pc, #576]	@ (8005790 <HAL_RCC_ClockConfig+0x25c>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 030f 	and.w	r3, r3, #15
 8005554:	683a      	ldr	r2, [r7, #0]
 8005556:	429a      	cmp	r2, r3
 8005558:	d910      	bls.n	800557c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800555a:	4b8d      	ldr	r3, [pc, #564]	@ (8005790 <HAL_RCC_ClockConfig+0x25c>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f023 020f 	bic.w	r2, r3, #15
 8005562:	498b      	ldr	r1, [pc, #556]	@ (8005790 <HAL_RCC_ClockConfig+0x25c>)
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	4313      	orrs	r3, r2
 8005568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800556a:	4b89      	ldr	r3, [pc, #548]	@ (8005790 <HAL_RCC_ClockConfig+0x25c>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 030f 	and.w	r3, r3, #15
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	429a      	cmp	r2, r3
 8005576:	d001      	beq.n	800557c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e105      	b.n	8005788 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0302 	and.w	r3, r3, #2
 8005584:	2b00      	cmp	r3, #0
 8005586:	d010      	beq.n	80055aa <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689a      	ldr	r2, [r3, #8]
 800558c:	4b81      	ldr	r3, [pc, #516]	@ (8005794 <HAL_RCC_ClockConfig+0x260>)
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005594:	429a      	cmp	r2, r3
 8005596:	d908      	bls.n	80055aa <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005598:	4b7e      	ldr	r3, [pc, #504]	@ (8005794 <HAL_RCC_ClockConfig+0x260>)
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	497b      	ldr	r1, [pc, #492]	@ (8005794 <HAL_RCC_ClockConfig+0x260>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d079      	beq.n	80056aa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	2b03      	cmp	r3, #3
 80055bc:	d11e      	bne.n	80055fc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055be:	4b75      	ldr	r3, [pc, #468]	@ (8005794 <HAL_RCC_ClockConfig+0x260>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e0dc      	b.n	8005788 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80055ce:	f000 fa3b 	bl	8005a48 <RCC_GetSysClockFreqFromPLLSource>
 80055d2:	4603      	mov	r3, r0
 80055d4:	4a70      	ldr	r2, [pc, #448]	@ (8005798 <HAL_RCC_ClockConfig+0x264>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d946      	bls.n	8005668 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80055da:	4b6e      	ldr	r3, [pc, #440]	@ (8005794 <HAL_RCC_ClockConfig+0x260>)
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d140      	bne.n	8005668 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80055e6:	4b6b      	ldr	r3, [pc, #428]	@ (8005794 <HAL_RCC_ClockConfig+0x260>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055ee:	4a69      	ldr	r2, [pc, #420]	@ (8005794 <HAL_RCC_ClockConfig+0x260>)
 80055f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80055f6:	2380      	movs	r3, #128	@ 0x80
 80055f8:	617b      	str	r3, [r7, #20]
 80055fa:	e035      	b.n	8005668 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	2b02      	cmp	r3, #2
 8005602:	d107      	bne.n	8005614 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005604:	4b63      	ldr	r3, [pc, #396]	@ (8005794 <HAL_RCC_ClockConfig+0x260>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d115      	bne.n	800563c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e0b9      	b.n	8005788 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d107      	bne.n	800562c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800561c:	4b5d      	ldr	r3, [pc, #372]	@ (8005794 <HAL_RCC_ClockConfig+0x260>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0302 	and.w	r3, r3, #2
 8005624:	2b00      	cmp	r3, #0
 8005626:	d109      	bne.n	800563c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e0ad      	b.n	8005788 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800562c:	4b59      	ldr	r3, [pc, #356]	@ (8005794 <HAL_RCC_ClockConfig+0x260>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005634:	2b00      	cmp	r3, #0
 8005636:	d101      	bne.n	800563c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e0a5      	b.n	8005788 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800563c:	f000 f8b4 	bl	80057a8 <HAL_RCC_GetSysClockFreq>
 8005640:	4603      	mov	r3, r0
 8005642:	4a55      	ldr	r2, [pc, #340]	@ (8005798 <HAL_RCC_ClockConfig+0x264>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d90f      	bls.n	8005668 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005648:	4b52      	ldr	r3, [pc, #328]	@ (8005794 <HAL_RCC_ClockConfig+0x260>)
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d109      	bne.n	8005668 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005654:	4b4f      	ldr	r3, [pc, #316]	@ (8005794 <HAL_RCC_ClockConfig+0x260>)
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800565c:	4a4d      	ldr	r2, [pc, #308]	@ (8005794 <HAL_RCC_ClockConfig+0x260>)
 800565e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005662:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005664:	2380      	movs	r3, #128	@ 0x80
 8005666:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005668:	4b4a      	ldr	r3, [pc, #296]	@ (8005794 <HAL_RCC_ClockConfig+0x260>)
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f023 0203 	bic.w	r2, r3, #3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	4947      	ldr	r1, [pc, #284]	@ (8005794 <HAL_RCC_ClockConfig+0x260>)
 8005676:	4313      	orrs	r3, r2
 8005678:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800567a:	f7fd fa31 	bl	8002ae0 <HAL_GetTick>
 800567e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005680:	e00a      	b.n	8005698 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005682:	f7fd fa2d 	bl	8002ae0 <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005690:	4293      	cmp	r3, r2
 8005692:	d901      	bls.n	8005698 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e077      	b.n	8005788 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005698:	4b3e      	ldr	r3, [pc, #248]	@ (8005794 <HAL_RCC_ClockConfig+0x260>)
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f003 020c 	and.w	r2, r3, #12
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d1eb      	bne.n	8005682 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	2b80      	cmp	r3, #128	@ 0x80
 80056ae:	d105      	bne.n	80056bc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80056b0:	4b38      	ldr	r3, [pc, #224]	@ (8005794 <HAL_RCC_ClockConfig+0x260>)
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	4a37      	ldr	r2, [pc, #220]	@ (8005794 <HAL_RCC_ClockConfig+0x260>)
 80056b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056ba:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0302 	and.w	r3, r3, #2
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d010      	beq.n	80056ea <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	689a      	ldr	r2, [r3, #8]
 80056cc:	4b31      	ldr	r3, [pc, #196]	@ (8005794 <HAL_RCC_ClockConfig+0x260>)
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d208      	bcs.n	80056ea <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056d8:	4b2e      	ldr	r3, [pc, #184]	@ (8005794 <HAL_RCC_ClockConfig+0x260>)
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	492b      	ldr	r1, [pc, #172]	@ (8005794 <HAL_RCC_ClockConfig+0x260>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056ea:	4b29      	ldr	r3, [pc, #164]	@ (8005790 <HAL_RCC_ClockConfig+0x25c>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 030f 	and.w	r3, r3, #15
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d210      	bcs.n	800571a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056f8:	4b25      	ldr	r3, [pc, #148]	@ (8005790 <HAL_RCC_ClockConfig+0x25c>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f023 020f 	bic.w	r2, r3, #15
 8005700:	4923      	ldr	r1, [pc, #140]	@ (8005790 <HAL_RCC_ClockConfig+0x25c>)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	4313      	orrs	r3, r2
 8005706:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005708:	4b21      	ldr	r3, [pc, #132]	@ (8005790 <HAL_RCC_ClockConfig+0x25c>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 030f 	and.w	r3, r3, #15
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	429a      	cmp	r2, r3
 8005714:	d001      	beq.n	800571a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e036      	b.n	8005788 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0304 	and.w	r3, r3, #4
 8005722:	2b00      	cmp	r3, #0
 8005724:	d008      	beq.n	8005738 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005726:	4b1b      	ldr	r3, [pc, #108]	@ (8005794 <HAL_RCC_ClockConfig+0x260>)
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	4918      	ldr	r1, [pc, #96]	@ (8005794 <HAL_RCC_ClockConfig+0x260>)
 8005734:	4313      	orrs	r3, r2
 8005736:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0308 	and.w	r3, r3, #8
 8005740:	2b00      	cmp	r3, #0
 8005742:	d009      	beq.n	8005758 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005744:	4b13      	ldr	r3, [pc, #76]	@ (8005794 <HAL_RCC_ClockConfig+0x260>)
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	00db      	lsls	r3, r3, #3
 8005752:	4910      	ldr	r1, [pc, #64]	@ (8005794 <HAL_RCC_ClockConfig+0x260>)
 8005754:	4313      	orrs	r3, r2
 8005756:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005758:	f000 f826 	bl	80057a8 <HAL_RCC_GetSysClockFreq>
 800575c:	4602      	mov	r2, r0
 800575e:	4b0d      	ldr	r3, [pc, #52]	@ (8005794 <HAL_RCC_ClockConfig+0x260>)
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	091b      	lsrs	r3, r3, #4
 8005764:	f003 030f 	and.w	r3, r3, #15
 8005768:	490c      	ldr	r1, [pc, #48]	@ (800579c <HAL_RCC_ClockConfig+0x268>)
 800576a:	5ccb      	ldrb	r3, [r1, r3]
 800576c:	f003 031f 	and.w	r3, r3, #31
 8005770:	fa22 f303 	lsr.w	r3, r2, r3
 8005774:	4a0a      	ldr	r2, [pc, #40]	@ (80057a0 <HAL_RCC_ClockConfig+0x26c>)
 8005776:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005778:	4b0a      	ldr	r3, [pc, #40]	@ (80057a4 <HAL_RCC_ClockConfig+0x270>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4618      	mov	r0, r3
 800577e:	f7fc fd99 	bl	80022b4 <HAL_InitTick>
 8005782:	4603      	mov	r3, r0
 8005784:	73fb      	strb	r3, [r7, #15]

  return status;
 8005786:	7bfb      	ldrb	r3, [r7, #15]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3718      	adds	r7, #24
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	40022000 	.word	0x40022000
 8005794:	40021000 	.word	0x40021000
 8005798:	04c4b400 	.word	0x04c4b400
 800579c:	0800acf8 	.word	0x0800acf8
 80057a0:	2000004c 	.word	0x2000004c
 80057a4:	200000b8 	.word	0x200000b8

080057a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b089      	sub	sp, #36	@ 0x24
 80057ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80057ae:	2300      	movs	r3, #0
 80057b0:	61fb      	str	r3, [r7, #28]
 80057b2:	2300      	movs	r3, #0
 80057b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057b6:	4b3e      	ldr	r3, [pc, #248]	@ (80058b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f003 030c 	and.w	r3, r3, #12
 80057be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057c0:	4b3b      	ldr	r3, [pc, #236]	@ (80058b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	f003 0303 	and.w	r3, r3, #3
 80057c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d005      	beq.n	80057dc <HAL_RCC_GetSysClockFreq+0x34>
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	2b0c      	cmp	r3, #12
 80057d4:	d121      	bne.n	800581a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d11e      	bne.n	800581a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80057dc:	4b34      	ldr	r3, [pc, #208]	@ (80058b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0308 	and.w	r3, r3, #8
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d107      	bne.n	80057f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80057e8:	4b31      	ldr	r3, [pc, #196]	@ (80058b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80057ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057ee:	0a1b      	lsrs	r3, r3, #8
 80057f0:	f003 030f 	and.w	r3, r3, #15
 80057f4:	61fb      	str	r3, [r7, #28]
 80057f6:	e005      	b.n	8005804 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80057f8:	4b2d      	ldr	r3, [pc, #180]	@ (80058b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	091b      	lsrs	r3, r3, #4
 80057fe:	f003 030f 	and.w	r3, r3, #15
 8005802:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005804:	4a2b      	ldr	r2, [pc, #172]	@ (80058b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800580c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d10d      	bne.n	8005830 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005818:	e00a      	b.n	8005830 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	2b04      	cmp	r3, #4
 800581e:	d102      	bne.n	8005826 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005820:	4b25      	ldr	r3, [pc, #148]	@ (80058b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005822:	61bb      	str	r3, [r7, #24]
 8005824:	e004      	b.n	8005830 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	2b08      	cmp	r3, #8
 800582a:	d101      	bne.n	8005830 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800582c:	4b23      	ldr	r3, [pc, #140]	@ (80058bc <HAL_RCC_GetSysClockFreq+0x114>)
 800582e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	2b0c      	cmp	r3, #12
 8005834:	d134      	bne.n	80058a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005836:	4b1e      	ldr	r3, [pc, #120]	@ (80058b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	f003 0303 	and.w	r3, r3, #3
 800583e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	2b02      	cmp	r3, #2
 8005844:	d003      	beq.n	800584e <HAL_RCC_GetSysClockFreq+0xa6>
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	2b03      	cmp	r3, #3
 800584a:	d003      	beq.n	8005854 <HAL_RCC_GetSysClockFreq+0xac>
 800584c:	e005      	b.n	800585a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800584e:	4b1a      	ldr	r3, [pc, #104]	@ (80058b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005850:	617b      	str	r3, [r7, #20]
      break;
 8005852:	e005      	b.n	8005860 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005854:	4b19      	ldr	r3, [pc, #100]	@ (80058bc <HAL_RCC_GetSysClockFreq+0x114>)
 8005856:	617b      	str	r3, [r7, #20]
      break;
 8005858:	e002      	b.n	8005860 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	617b      	str	r3, [r7, #20]
      break;
 800585e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005860:	4b13      	ldr	r3, [pc, #76]	@ (80058b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	091b      	lsrs	r3, r3, #4
 8005866:	f003 030f 	and.w	r3, r3, #15
 800586a:	3301      	adds	r3, #1
 800586c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800586e:	4b10      	ldr	r3, [pc, #64]	@ (80058b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	0a1b      	lsrs	r3, r3, #8
 8005874:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	fb03 f202 	mul.w	r2, r3, r2
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	fbb2 f3f3 	udiv	r3, r2, r3
 8005884:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005886:	4b0a      	ldr	r3, [pc, #40]	@ (80058b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	0e5b      	lsrs	r3, r3, #25
 800588c:	f003 0303 	and.w	r3, r3, #3
 8005890:	3301      	adds	r3, #1
 8005892:	005b      	lsls	r3, r3, #1
 8005894:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	fbb2 f3f3 	udiv	r3, r2, r3
 800589e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80058a0:	69bb      	ldr	r3, [r7, #24]
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3724      	adds	r7, #36	@ 0x24
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	40021000 	.word	0x40021000
 80058b4:	0800ad10 	.word	0x0800ad10
 80058b8:	00f42400 	.word	0x00f42400
 80058bc:	007a1200 	.word	0x007a1200

080058c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058c0:	b480      	push	{r7}
 80058c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058c4:	4b03      	ldr	r3, [pc, #12]	@ (80058d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80058c6:	681b      	ldr	r3, [r3, #0]
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	2000004c 	.word	0x2000004c

080058d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80058dc:	f7ff fff0 	bl	80058c0 <HAL_RCC_GetHCLKFreq>
 80058e0:	4602      	mov	r2, r0
 80058e2:	4b06      	ldr	r3, [pc, #24]	@ (80058fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	0a1b      	lsrs	r3, r3, #8
 80058e8:	f003 0307 	and.w	r3, r3, #7
 80058ec:	4904      	ldr	r1, [pc, #16]	@ (8005900 <HAL_RCC_GetPCLK1Freq+0x28>)
 80058ee:	5ccb      	ldrb	r3, [r1, r3]
 80058f0:	f003 031f 	and.w	r3, r3, #31
 80058f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	40021000 	.word	0x40021000
 8005900:	0800ad08 	.word	0x0800ad08

08005904 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005908:	f7ff ffda 	bl	80058c0 <HAL_RCC_GetHCLKFreq>
 800590c:	4602      	mov	r2, r0
 800590e:	4b06      	ldr	r3, [pc, #24]	@ (8005928 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	0adb      	lsrs	r3, r3, #11
 8005914:	f003 0307 	and.w	r3, r3, #7
 8005918:	4904      	ldr	r1, [pc, #16]	@ (800592c <HAL_RCC_GetPCLK2Freq+0x28>)
 800591a:	5ccb      	ldrb	r3, [r1, r3]
 800591c:	f003 031f 	and.w	r3, r3, #31
 8005920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005924:	4618      	mov	r0, r3
 8005926:	bd80      	pop	{r7, pc}
 8005928:	40021000 	.word	0x40021000
 800592c:	0800ad08 	.word	0x0800ad08

08005930 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	220f      	movs	r2, #15
 800593e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005940:	4b12      	ldr	r3, [pc, #72]	@ (800598c <HAL_RCC_GetClockConfig+0x5c>)
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f003 0203 	and.w	r2, r3, #3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800594c:	4b0f      	ldr	r3, [pc, #60]	@ (800598c <HAL_RCC_GetClockConfig+0x5c>)
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005958:	4b0c      	ldr	r3, [pc, #48]	@ (800598c <HAL_RCC_GetClockConfig+0x5c>)
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005964:	4b09      	ldr	r3, [pc, #36]	@ (800598c <HAL_RCC_GetClockConfig+0x5c>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	08db      	lsrs	r3, r3, #3
 800596a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005972:	4b07      	ldr	r3, [pc, #28]	@ (8005990 <HAL_RCC_GetClockConfig+0x60>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 020f 	and.w	r2, r3, #15
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	601a      	str	r2, [r3, #0]
}
 800597e:	bf00      	nop
 8005980:	370c      	adds	r7, #12
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	40021000 	.word	0x40021000
 8005990:	40022000 	.word	0x40022000

08005994 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b086      	sub	sp, #24
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800599c:	2300      	movs	r3, #0
 800599e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80059a0:	4b27      	ldr	r3, [pc, #156]	@ (8005a40 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80059a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d003      	beq.n	80059b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80059ac:	f7ff f8e4 	bl	8004b78 <HAL_PWREx_GetVoltageRange>
 80059b0:	6178      	str	r0, [r7, #20]
 80059b2:	e014      	b.n	80059de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80059b4:	4b22      	ldr	r3, [pc, #136]	@ (8005a40 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80059b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059b8:	4a21      	ldr	r2, [pc, #132]	@ (8005a40 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80059ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059be:	6593      	str	r3, [r2, #88]	@ 0x58
 80059c0:	4b1f      	ldr	r3, [pc, #124]	@ (8005a40 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80059c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059c8:	60fb      	str	r3, [r7, #12]
 80059ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80059cc:	f7ff f8d4 	bl	8004b78 <HAL_PWREx_GetVoltageRange>
 80059d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80059d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005a40 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80059d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059d6:	4a1a      	ldr	r2, [pc, #104]	@ (8005a40 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80059d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059dc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059e4:	d10b      	bne.n	80059fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2b80      	cmp	r3, #128	@ 0x80
 80059ea:	d913      	bls.n	8005a14 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2ba0      	cmp	r3, #160	@ 0xa0
 80059f0:	d902      	bls.n	80059f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80059f2:	2302      	movs	r3, #2
 80059f4:	613b      	str	r3, [r7, #16]
 80059f6:	e00d      	b.n	8005a14 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80059f8:	2301      	movs	r3, #1
 80059fa:	613b      	str	r3, [r7, #16]
 80059fc:	e00a      	b.n	8005a14 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a02:	d902      	bls.n	8005a0a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005a04:	2302      	movs	r3, #2
 8005a06:	613b      	str	r3, [r7, #16]
 8005a08:	e004      	b.n	8005a14 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2b70      	cmp	r3, #112	@ 0x70
 8005a0e:	d101      	bne.n	8005a14 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a10:	2301      	movs	r3, #1
 8005a12:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005a14:	4b0b      	ldr	r3, [pc, #44]	@ (8005a44 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f023 020f 	bic.w	r2, r3, #15
 8005a1c:	4909      	ldr	r1, [pc, #36]	@ (8005a44 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005a24:	4b07      	ldr	r3, [pc, #28]	@ (8005a44 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 030f 	and.w	r3, r3, #15
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d001      	beq.n	8005a36 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e000      	b.n	8005a38 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3718      	adds	r7, #24
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	40021000 	.word	0x40021000
 8005a44:	40022000 	.word	0x40022000

08005a48 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b087      	sub	sp, #28
 8005a4c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a4e:	4b2d      	ldr	r3, [pc, #180]	@ (8005b04 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	f003 0303 	and.w	r3, r3, #3
 8005a56:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2b03      	cmp	r3, #3
 8005a5c:	d00b      	beq.n	8005a76 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2b03      	cmp	r3, #3
 8005a62:	d825      	bhi.n	8005ab0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d008      	beq.n	8005a7c <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d11f      	bne.n	8005ab0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005a70:	4b25      	ldr	r3, [pc, #148]	@ (8005b08 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005a72:	613b      	str	r3, [r7, #16]
    break;
 8005a74:	e01f      	b.n	8005ab6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005a76:	4b25      	ldr	r3, [pc, #148]	@ (8005b0c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005a78:	613b      	str	r3, [r7, #16]
    break;
 8005a7a:	e01c      	b.n	8005ab6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005a7c:	4b21      	ldr	r3, [pc, #132]	@ (8005b04 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0308 	and.w	r3, r3, #8
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d107      	bne.n	8005a98 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005a88:	4b1e      	ldr	r3, [pc, #120]	@ (8005b04 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a8e:	0a1b      	lsrs	r3, r3, #8
 8005a90:	f003 030f 	and.w	r3, r3, #15
 8005a94:	617b      	str	r3, [r7, #20]
 8005a96:	e005      	b.n	8005aa4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005a98:	4b1a      	ldr	r3, [pc, #104]	@ (8005b04 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	091b      	lsrs	r3, r3, #4
 8005a9e:	f003 030f 	and.w	r3, r3, #15
 8005aa2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005aa4:	4a1a      	ldr	r2, [pc, #104]	@ (8005b10 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aac:	613b      	str	r3, [r7, #16]
    break;
 8005aae:	e002      	b.n	8005ab6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	613b      	str	r3, [r7, #16]
    break;
 8005ab4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ab6:	4b13      	ldr	r3, [pc, #76]	@ (8005b04 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	091b      	lsrs	r3, r3, #4
 8005abc:	f003 030f 	and.w	r3, r3, #15
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8005b04 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	0a1b      	lsrs	r3, r3, #8
 8005aca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	fb03 f202 	mul.w	r2, r3, r2
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ada:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005adc:	4b09      	ldr	r3, [pc, #36]	@ (8005b04 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	0e5b      	lsrs	r3, r3, #25
 8005ae2:	f003 0303 	and.w	r3, r3, #3
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	005b      	lsls	r3, r3, #1
 8005aea:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005af6:	683b      	ldr	r3, [r7, #0]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	371c      	adds	r7, #28
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr
 8005b04:	40021000 	.word	0x40021000
 8005b08:	00f42400 	.word	0x00f42400
 8005b0c:	007a1200 	.word	0x007a1200
 8005b10:	0800ad10 	.word	0x0800ad10

08005b14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b086      	sub	sp, #24
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b20:	2300      	movs	r3, #0
 8005b22:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d040      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b34:	2b80      	cmp	r3, #128	@ 0x80
 8005b36:	d02a      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005b38:	2b80      	cmp	r3, #128	@ 0x80
 8005b3a:	d825      	bhi.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005b3c:	2b60      	cmp	r3, #96	@ 0x60
 8005b3e:	d026      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005b40:	2b60      	cmp	r3, #96	@ 0x60
 8005b42:	d821      	bhi.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005b44:	2b40      	cmp	r3, #64	@ 0x40
 8005b46:	d006      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005b48:	2b40      	cmp	r3, #64	@ 0x40
 8005b4a:	d81d      	bhi.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d009      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005b50:	2b20      	cmp	r3, #32
 8005b52:	d010      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005b54:	e018      	b.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005b56:	4b89      	ldr	r3, [pc, #548]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	4a88      	ldr	r2, [pc, #544]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b60:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b62:	e015      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	3304      	adds	r3, #4
 8005b68:	2100      	movs	r1, #0
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 fb02 	bl	8006174 <RCCEx_PLLSAI1_Config>
 8005b70:	4603      	mov	r3, r0
 8005b72:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b74:	e00c      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	3320      	adds	r3, #32
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f000 fbed 	bl	800635c <RCCEx_PLLSAI2_Config>
 8005b82:	4603      	mov	r3, r0
 8005b84:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b86:	e003      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	74fb      	strb	r3, [r7, #19]
      break;
 8005b8c:	e000      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005b8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b90:	7cfb      	ldrb	r3, [r7, #19]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10b      	bne.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b96:	4b79      	ldr	r3, [pc, #484]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b9c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ba4:	4975      	ldr	r1, [pc, #468]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005bac:	e001      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bae:	7cfb      	ldrb	r3, [r7, #19]
 8005bb0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d047      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bc6:	d030      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005bc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bcc:	d82a      	bhi.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005bce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bd2:	d02a      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005bd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bd8:	d824      	bhi.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005bda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bde:	d008      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005be0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005be4:	d81e      	bhi.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00a      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005bea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bee:	d010      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005bf0:	e018      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005bf2:	4b62      	ldr	r3, [pc, #392]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	4a61      	ldr	r2, [pc, #388]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bfc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005bfe:	e015      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	3304      	adds	r3, #4
 8005c04:	2100      	movs	r1, #0
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 fab4 	bl	8006174 <RCCEx_PLLSAI1_Config>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005c10:	e00c      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	3320      	adds	r3, #32
 8005c16:	2100      	movs	r1, #0
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f000 fb9f 	bl	800635c <RCCEx_PLLSAI2_Config>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005c22:	e003      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	74fb      	strb	r3, [r7, #19]
      break;
 8005c28:	e000      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005c2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c2c:	7cfb      	ldrb	r3, [r7, #19]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10b      	bne.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005c32:	4b52      	ldr	r3, [pc, #328]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c34:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c40:	494e      	ldr	r1, [pc, #312]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005c48:	e001      	b.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c4a:	7cfb      	ldrb	r3, [r7, #19]
 8005c4c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f000 809f 	beq.w	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005c60:	4b46      	ldr	r3, [pc, #280]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d101      	bne.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e000      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005c70:	2300      	movs	r3, #0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00d      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c76:	4b41      	ldr	r3, [pc, #260]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c7a:	4a40      	ldr	r2, [pc, #256]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c80:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c82:	4b3e      	ldr	r3, [pc, #248]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c8a:	60bb      	str	r3, [r7, #8]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c92:	4b3b      	ldr	r3, [pc, #236]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a3a      	ldr	r2, [pc, #232]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005c98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c9e:	f7fc ff1f 	bl	8002ae0 <HAL_GetTick>
 8005ca2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ca4:	e009      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ca6:	f7fc ff1b 	bl	8002ae0 <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d902      	bls.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	74fb      	strb	r3, [r7, #19]
        break;
 8005cb8:	e005      	b.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005cba:	4b31      	ldr	r3, [pc, #196]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d0ef      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005cc6:	7cfb      	ldrb	r3, [r7, #19]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d15b      	bne.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ccc:	4b2b      	ldr	r3, [pc, #172]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cd6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d01f      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d019      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005cea:	4b24      	ldr	r3, [pc, #144]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cf4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005cf6:	4b21      	ldr	r3, [pc, #132]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cfc:	4a1f      	ldr	r2, [pc, #124]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d06:	4b1d      	ldr	r3, [pc, #116]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d0c:	4a1b      	ldr	r2, [pc, #108]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005d16:	4a19      	ldr	r2, [pc, #100]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	f003 0301 	and.w	r3, r3, #1
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d016      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d28:	f7fc feda 	bl	8002ae0 <HAL_GetTick>
 8005d2c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d2e:	e00b      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d30:	f7fc fed6 	bl	8002ae0 <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d902      	bls.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	74fb      	strb	r3, [r7, #19]
            break;
 8005d46:	e006      	b.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d48:	4b0c      	ldr	r3, [pc, #48]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d4e:	f003 0302 	and.w	r3, r3, #2
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d0ec      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005d56:	7cfb      	ldrb	r3, [r7, #19]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d10c      	bne.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d5c:	4b07      	ldr	r3, [pc, #28]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d62:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d6c:	4903      	ldr	r1, [pc, #12]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005d74:	e008      	b.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d76:	7cfb      	ldrb	r3, [r7, #19]
 8005d78:	74bb      	strb	r3, [r7, #18]
 8005d7a:	e005      	b.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005d7c:	40021000 	.word	0x40021000
 8005d80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d84:	7cfb      	ldrb	r3, [r7, #19]
 8005d86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d88:	7c7b      	ldrb	r3, [r7, #17]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d105      	bne.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d8e:	4ba0      	ldr	r3, [pc, #640]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d92:	4a9f      	ldr	r2, [pc, #636]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d98:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0301 	and.w	r3, r3, #1
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00a      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005da6:	4b9a      	ldr	r3, [pc, #616]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dac:	f023 0203 	bic.w	r2, r3, #3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005db4:	4996      	ldr	r1, [pc, #600]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005db6:	4313      	orrs	r3, r2
 8005db8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0302 	and.w	r3, r3, #2
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00a      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005dc8:	4b91      	ldr	r3, [pc, #580]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dce:	f023 020c 	bic.w	r2, r3, #12
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd6:	498e      	ldr	r1, [pc, #568]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0304 	and.w	r3, r3, #4
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00a      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005dea:	4b89      	ldr	r3, [pc, #548]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005df0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005df8:	4985      	ldr	r1, [pc, #532]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0308 	and.w	r3, r3, #8
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00a      	beq.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005e0c:	4b80      	ldr	r3, [pc, #512]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e12:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e1a:	497d      	ldr	r1, [pc, #500]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0310 	and.w	r3, r3, #16
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00a      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005e2e:	4b78      	ldr	r3, [pc, #480]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e3c:	4974      	ldr	r1, [pc, #464]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0320 	and.w	r3, r3, #32
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00a      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e50:	4b6f      	ldr	r3, [pc, #444]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e56:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e5e:	496c      	ldr	r1, [pc, #432]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e60:	4313      	orrs	r3, r2
 8005e62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00a      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e72:	4b67      	ldr	r3, [pc, #412]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e78:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e80:	4963      	ldr	r1, [pc, #396]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00a      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e94:	4b5e      	ldr	r3, [pc, #376]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ea2:	495b      	ldr	r1, [pc, #364]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00a      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005eb6:	4b56      	ldr	r3, [pc, #344]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ebc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ec4:	4952      	ldr	r1, [pc, #328]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00a      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ed8:	4b4d      	ldr	r3, [pc, #308]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ede:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ee6:	494a      	ldr	r1, [pc, #296]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00a      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005efa:	4b45      	ldr	r3, [pc, #276]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f00:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f08:	4941      	ldr	r1, [pc, #260]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00a      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f1c:	4b3c      	ldr	r3, [pc, #240]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f22:	f023 0203 	bic.w	r2, r3, #3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f2a:	4939      	ldr	r1, [pc, #228]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d028      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f3e:	4b34      	ldr	r3, [pc, #208]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f44:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f4c:	4930      	ldr	r1, [pc, #192]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f5c:	d106      	bne.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f5e:	4b2c      	ldr	r3, [pc, #176]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	4a2b      	ldr	r2, [pc, #172]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f64:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f68:	60d3      	str	r3, [r2, #12]
 8005f6a:	e011      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f74:	d10c      	bne.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	3304      	adds	r3, #4
 8005f7a:	2101      	movs	r1, #1
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f000 f8f9 	bl	8006174 <RCCEx_PLLSAI1_Config>
 8005f82:	4603      	mov	r3, r0
 8005f84:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005f86:	7cfb      	ldrb	r3, [r7, #19]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005f8c:	7cfb      	ldrb	r3, [r7, #19]
 8005f8e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d04d      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005fa0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fa4:	d108      	bne.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fa8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005fac:	4a18      	ldr	r2, [pc, #96]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005fb2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005fb6:	e012      	b.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005fb8:	4b15      	ldr	r3, [pc, #84]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005fbe:	4a14      	ldr	r2, [pc, #80]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fc0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fc4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005fc8:	4b11      	ldr	r3, [pc, #68]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005fd6:	490e      	ldr	r1, [pc, #56]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005fe2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005fe6:	d106      	bne.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fe8:	4b09      	ldr	r3, [pc, #36]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	4a08      	ldr	r2, [pc, #32]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ff2:	60d3      	str	r3, [r2, #12]
 8005ff4:	e020      	b.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ffa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ffe:	d109      	bne.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006000:	4b03      	ldr	r3, [pc, #12]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	4a02      	ldr	r2, [pc, #8]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006006:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800600a:	60d3      	str	r3, [r2, #12]
 800600c:	e014      	b.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800600e:	bf00      	nop
 8006010:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006018:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800601c:	d10c      	bne.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	3304      	adds	r3, #4
 8006022:	2101      	movs	r1, #1
 8006024:	4618      	mov	r0, r3
 8006026:	f000 f8a5 	bl	8006174 <RCCEx_PLLSAI1_Config>
 800602a:	4603      	mov	r3, r0
 800602c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800602e:	7cfb      	ldrb	r3, [r7, #19]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d001      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006034:	7cfb      	ldrb	r3, [r7, #19]
 8006036:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d028      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006044:	4b4a      	ldr	r3, [pc, #296]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800604a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006052:	4947      	ldr	r1, [pc, #284]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006054:	4313      	orrs	r3, r2
 8006056:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800605e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006062:	d106      	bne.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006064:	4b42      	ldr	r3, [pc, #264]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	4a41      	ldr	r2, [pc, #260]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800606a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800606e:	60d3      	str	r3, [r2, #12]
 8006070:	e011      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006076:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800607a:	d10c      	bne.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	3304      	adds	r3, #4
 8006080:	2101      	movs	r1, #1
 8006082:	4618      	mov	r0, r3
 8006084:	f000 f876 	bl	8006174 <RCCEx_PLLSAI1_Config>
 8006088:	4603      	mov	r3, r0
 800608a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800608c:	7cfb      	ldrb	r3, [r7, #19]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d001      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006092:	7cfb      	ldrb	r3, [r7, #19]
 8006094:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d01e      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80060a2:	4b33      	ldr	r3, [pc, #204]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060a8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060b2:	492f      	ldr	r1, [pc, #188]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060b4:	4313      	orrs	r3, r2
 80060b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060c4:	d10c      	bne.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	3304      	adds	r3, #4
 80060ca:	2102      	movs	r1, #2
 80060cc:	4618      	mov	r0, r3
 80060ce:	f000 f851 	bl	8006174 <RCCEx_PLLSAI1_Config>
 80060d2:	4603      	mov	r3, r0
 80060d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80060d6:	7cfb      	ldrb	r3, [r7, #19]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d001      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80060dc:	7cfb      	ldrb	r3, [r7, #19]
 80060de:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00b      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80060ec:	4b20      	ldr	r3, [pc, #128]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80060f2:	f023 0204 	bic.w	r2, r3, #4
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060fc:	491c      	ldr	r1, [pc, #112]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060fe:	4313      	orrs	r3, r2
 8006100:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00b      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006110:	4b17      	ldr	r3, [pc, #92]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006112:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006116:	f023 0218 	bic.w	r2, r3, #24
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006120:	4913      	ldr	r1, [pc, #76]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006122:	4313      	orrs	r3, r2
 8006124:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d017      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006134:	4b0e      	ldr	r3, [pc, #56]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006136:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800613a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006144:	490a      	ldr	r1, [pc, #40]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006146:	4313      	orrs	r3, r2
 8006148:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006152:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006156:	d105      	bne.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006158:	4b05      	ldr	r3, [pc, #20]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	4a04      	ldr	r2, [pc, #16]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800615e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006162:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006164:	7cbb      	ldrb	r3, [r7, #18]
}
 8006166:	4618      	mov	r0, r3
 8006168:	3718      	adds	r7, #24
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	40021000 	.word	0x40021000

08006174 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800617e:	2300      	movs	r3, #0
 8006180:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006182:	4b72      	ldr	r3, [pc, #456]	@ (800634c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	f003 0303 	and.w	r3, r3, #3
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00e      	beq.n	80061ac <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800618e:	4b6f      	ldr	r3, [pc, #444]	@ (800634c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	f003 0203 	and.w	r2, r3, #3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	429a      	cmp	r2, r3
 800619c:	d103      	bne.n	80061a6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
       ||
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d142      	bne.n	800622c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	73fb      	strb	r3, [r7, #15]
 80061aa:	e03f      	b.n	800622c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2b03      	cmp	r3, #3
 80061b2:	d018      	beq.n	80061e6 <RCCEx_PLLSAI1_Config+0x72>
 80061b4:	2b03      	cmp	r3, #3
 80061b6:	d825      	bhi.n	8006204 <RCCEx_PLLSAI1_Config+0x90>
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d002      	beq.n	80061c2 <RCCEx_PLLSAI1_Config+0x4e>
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d009      	beq.n	80061d4 <RCCEx_PLLSAI1_Config+0x60>
 80061c0:	e020      	b.n	8006204 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80061c2:	4b62      	ldr	r3, [pc, #392]	@ (800634c <RCCEx_PLLSAI1_Config+0x1d8>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0302 	and.w	r3, r3, #2
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d11d      	bne.n	800620a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061d2:	e01a      	b.n	800620a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80061d4:	4b5d      	ldr	r3, [pc, #372]	@ (800634c <RCCEx_PLLSAI1_Config+0x1d8>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d116      	bne.n	800620e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061e4:	e013      	b.n	800620e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80061e6:	4b59      	ldr	r3, [pc, #356]	@ (800634c <RCCEx_PLLSAI1_Config+0x1d8>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10f      	bne.n	8006212 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80061f2:	4b56      	ldr	r3, [pc, #344]	@ (800634c <RCCEx_PLLSAI1_Config+0x1d8>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d109      	bne.n	8006212 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006202:	e006      	b.n	8006212 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	73fb      	strb	r3, [r7, #15]
      break;
 8006208:	e004      	b.n	8006214 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800620a:	bf00      	nop
 800620c:	e002      	b.n	8006214 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800620e:	bf00      	nop
 8006210:	e000      	b.n	8006214 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006212:	bf00      	nop
    }

    if(status == HAL_OK)
 8006214:	7bfb      	ldrb	r3, [r7, #15]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d108      	bne.n	800622c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800621a:	4b4c      	ldr	r3, [pc, #304]	@ (800634c <RCCEx_PLLSAI1_Config+0x1d8>)
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	f023 0203 	bic.w	r2, r3, #3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4949      	ldr	r1, [pc, #292]	@ (800634c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006228:	4313      	orrs	r3, r2
 800622a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800622c:	7bfb      	ldrb	r3, [r7, #15]
 800622e:	2b00      	cmp	r3, #0
 8006230:	f040 8086 	bne.w	8006340 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006234:	4b45      	ldr	r3, [pc, #276]	@ (800634c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a44      	ldr	r2, [pc, #272]	@ (800634c <RCCEx_PLLSAI1_Config+0x1d8>)
 800623a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800623e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006240:	f7fc fc4e 	bl	8002ae0 <HAL_GetTick>
 8006244:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006246:	e009      	b.n	800625c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006248:	f7fc fc4a 	bl	8002ae0 <HAL_GetTick>
 800624c:	4602      	mov	r2, r0
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	2b02      	cmp	r3, #2
 8006254:	d902      	bls.n	800625c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	73fb      	strb	r3, [r7, #15]
        break;
 800625a:	e005      	b.n	8006268 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800625c:	4b3b      	ldr	r3, [pc, #236]	@ (800634c <RCCEx_PLLSAI1_Config+0x1d8>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1ef      	bne.n	8006248 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006268:	7bfb      	ldrb	r3, [r7, #15]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d168      	bne.n	8006340 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d113      	bne.n	800629c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006274:	4b35      	ldr	r3, [pc, #212]	@ (800634c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006276:	691a      	ldr	r2, [r3, #16]
 8006278:	4b35      	ldr	r3, [pc, #212]	@ (8006350 <RCCEx_PLLSAI1_Config+0x1dc>)
 800627a:	4013      	ands	r3, r2
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	6892      	ldr	r2, [r2, #8]
 8006280:	0211      	lsls	r1, r2, #8
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	68d2      	ldr	r2, [r2, #12]
 8006286:	06d2      	lsls	r2, r2, #27
 8006288:	4311      	orrs	r1, r2
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	6852      	ldr	r2, [r2, #4]
 800628e:	3a01      	subs	r2, #1
 8006290:	0112      	lsls	r2, r2, #4
 8006292:	430a      	orrs	r2, r1
 8006294:	492d      	ldr	r1, [pc, #180]	@ (800634c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006296:	4313      	orrs	r3, r2
 8006298:	610b      	str	r3, [r1, #16]
 800629a:	e02d      	b.n	80062f8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d115      	bne.n	80062ce <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80062a2:	4b2a      	ldr	r3, [pc, #168]	@ (800634c <RCCEx_PLLSAI1_Config+0x1d8>)
 80062a4:	691a      	ldr	r2, [r3, #16]
 80062a6:	4b2b      	ldr	r3, [pc, #172]	@ (8006354 <RCCEx_PLLSAI1_Config+0x1e0>)
 80062a8:	4013      	ands	r3, r2
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	6892      	ldr	r2, [r2, #8]
 80062ae:	0211      	lsls	r1, r2, #8
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	6912      	ldr	r2, [r2, #16]
 80062b4:	0852      	lsrs	r2, r2, #1
 80062b6:	3a01      	subs	r2, #1
 80062b8:	0552      	lsls	r2, r2, #21
 80062ba:	4311      	orrs	r1, r2
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	6852      	ldr	r2, [r2, #4]
 80062c0:	3a01      	subs	r2, #1
 80062c2:	0112      	lsls	r2, r2, #4
 80062c4:	430a      	orrs	r2, r1
 80062c6:	4921      	ldr	r1, [pc, #132]	@ (800634c <RCCEx_PLLSAI1_Config+0x1d8>)
 80062c8:	4313      	orrs	r3, r2
 80062ca:	610b      	str	r3, [r1, #16]
 80062cc:	e014      	b.n	80062f8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80062ce:	4b1f      	ldr	r3, [pc, #124]	@ (800634c <RCCEx_PLLSAI1_Config+0x1d8>)
 80062d0:	691a      	ldr	r2, [r3, #16]
 80062d2:	4b21      	ldr	r3, [pc, #132]	@ (8006358 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062d4:	4013      	ands	r3, r2
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	6892      	ldr	r2, [r2, #8]
 80062da:	0211      	lsls	r1, r2, #8
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	6952      	ldr	r2, [r2, #20]
 80062e0:	0852      	lsrs	r2, r2, #1
 80062e2:	3a01      	subs	r2, #1
 80062e4:	0652      	lsls	r2, r2, #25
 80062e6:	4311      	orrs	r1, r2
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	6852      	ldr	r2, [r2, #4]
 80062ec:	3a01      	subs	r2, #1
 80062ee:	0112      	lsls	r2, r2, #4
 80062f0:	430a      	orrs	r2, r1
 80062f2:	4916      	ldr	r1, [pc, #88]	@ (800634c <RCCEx_PLLSAI1_Config+0x1d8>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80062f8:	4b14      	ldr	r3, [pc, #80]	@ (800634c <RCCEx_PLLSAI1_Config+0x1d8>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a13      	ldr	r2, [pc, #76]	@ (800634c <RCCEx_PLLSAI1_Config+0x1d8>)
 80062fe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006302:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006304:	f7fc fbec 	bl	8002ae0 <HAL_GetTick>
 8006308:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800630a:	e009      	b.n	8006320 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800630c:	f7fc fbe8 	bl	8002ae0 <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	2b02      	cmp	r3, #2
 8006318:	d902      	bls.n	8006320 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	73fb      	strb	r3, [r7, #15]
          break;
 800631e:	e005      	b.n	800632c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006320:	4b0a      	ldr	r3, [pc, #40]	@ (800634c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d0ef      	beq.n	800630c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800632c:	7bfb      	ldrb	r3, [r7, #15]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d106      	bne.n	8006340 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006332:	4b06      	ldr	r3, [pc, #24]	@ (800634c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006334:	691a      	ldr	r2, [r3, #16]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	4904      	ldr	r1, [pc, #16]	@ (800634c <RCCEx_PLLSAI1_Config+0x1d8>)
 800633c:	4313      	orrs	r3, r2
 800633e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006340:	7bfb      	ldrb	r3, [r7, #15]
}
 8006342:	4618      	mov	r0, r3
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	40021000 	.word	0x40021000
 8006350:	07ff800f 	.word	0x07ff800f
 8006354:	ff9f800f 	.word	0xff9f800f
 8006358:	f9ff800f 	.word	0xf9ff800f

0800635c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006366:	2300      	movs	r3, #0
 8006368:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800636a:	4b72      	ldr	r3, [pc, #456]	@ (8006534 <RCCEx_PLLSAI2_Config+0x1d8>)
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	f003 0303 	and.w	r3, r3, #3
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00e      	beq.n	8006394 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006376:	4b6f      	ldr	r3, [pc, #444]	@ (8006534 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	f003 0203 	and.w	r2, r3, #3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	429a      	cmp	r2, r3
 8006384:	d103      	bne.n	800638e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
       ||
 800638a:	2b00      	cmp	r3, #0
 800638c:	d142      	bne.n	8006414 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	73fb      	strb	r3, [r7, #15]
 8006392:	e03f      	b.n	8006414 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2b03      	cmp	r3, #3
 800639a:	d018      	beq.n	80063ce <RCCEx_PLLSAI2_Config+0x72>
 800639c:	2b03      	cmp	r3, #3
 800639e:	d825      	bhi.n	80063ec <RCCEx_PLLSAI2_Config+0x90>
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d002      	beq.n	80063aa <RCCEx_PLLSAI2_Config+0x4e>
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d009      	beq.n	80063bc <RCCEx_PLLSAI2_Config+0x60>
 80063a8:	e020      	b.n	80063ec <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80063aa:	4b62      	ldr	r3, [pc, #392]	@ (8006534 <RCCEx_PLLSAI2_Config+0x1d8>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0302 	and.w	r3, r3, #2
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d11d      	bne.n	80063f2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063ba:	e01a      	b.n	80063f2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80063bc:	4b5d      	ldr	r3, [pc, #372]	@ (8006534 <RCCEx_PLLSAI2_Config+0x1d8>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d116      	bne.n	80063f6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063cc:	e013      	b.n	80063f6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80063ce:	4b59      	ldr	r3, [pc, #356]	@ (8006534 <RCCEx_PLLSAI2_Config+0x1d8>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10f      	bne.n	80063fa <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80063da:	4b56      	ldr	r3, [pc, #344]	@ (8006534 <RCCEx_PLLSAI2_Config+0x1d8>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d109      	bne.n	80063fa <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80063ea:	e006      	b.n	80063fa <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	73fb      	strb	r3, [r7, #15]
      break;
 80063f0:	e004      	b.n	80063fc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80063f2:	bf00      	nop
 80063f4:	e002      	b.n	80063fc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80063f6:	bf00      	nop
 80063f8:	e000      	b.n	80063fc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80063fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80063fc:	7bfb      	ldrb	r3, [r7, #15]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d108      	bne.n	8006414 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006402:	4b4c      	ldr	r3, [pc, #304]	@ (8006534 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	f023 0203 	bic.w	r2, r3, #3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4949      	ldr	r1, [pc, #292]	@ (8006534 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006410:	4313      	orrs	r3, r2
 8006412:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006414:	7bfb      	ldrb	r3, [r7, #15]
 8006416:	2b00      	cmp	r3, #0
 8006418:	f040 8086 	bne.w	8006528 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800641c:	4b45      	ldr	r3, [pc, #276]	@ (8006534 <RCCEx_PLLSAI2_Config+0x1d8>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a44      	ldr	r2, [pc, #272]	@ (8006534 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006422:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006426:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006428:	f7fc fb5a 	bl	8002ae0 <HAL_GetTick>
 800642c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800642e:	e009      	b.n	8006444 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006430:	f7fc fb56 	bl	8002ae0 <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	2b02      	cmp	r3, #2
 800643c:	d902      	bls.n	8006444 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	73fb      	strb	r3, [r7, #15]
        break;
 8006442:	e005      	b.n	8006450 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006444:	4b3b      	ldr	r3, [pc, #236]	@ (8006534 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1ef      	bne.n	8006430 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006450:	7bfb      	ldrb	r3, [r7, #15]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d168      	bne.n	8006528 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d113      	bne.n	8006484 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800645c:	4b35      	ldr	r3, [pc, #212]	@ (8006534 <RCCEx_PLLSAI2_Config+0x1d8>)
 800645e:	695a      	ldr	r2, [r3, #20]
 8006460:	4b35      	ldr	r3, [pc, #212]	@ (8006538 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006462:	4013      	ands	r3, r2
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	6892      	ldr	r2, [r2, #8]
 8006468:	0211      	lsls	r1, r2, #8
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	68d2      	ldr	r2, [r2, #12]
 800646e:	06d2      	lsls	r2, r2, #27
 8006470:	4311      	orrs	r1, r2
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	6852      	ldr	r2, [r2, #4]
 8006476:	3a01      	subs	r2, #1
 8006478:	0112      	lsls	r2, r2, #4
 800647a:	430a      	orrs	r2, r1
 800647c:	492d      	ldr	r1, [pc, #180]	@ (8006534 <RCCEx_PLLSAI2_Config+0x1d8>)
 800647e:	4313      	orrs	r3, r2
 8006480:	614b      	str	r3, [r1, #20]
 8006482:	e02d      	b.n	80064e0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d115      	bne.n	80064b6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800648a:	4b2a      	ldr	r3, [pc, #168]	@ (8006534 <RCCEx_PLLSAI2_Config+0x1d8>)
 800648c:	695a      	ldr	r2, [r3, #20]
 800648e:	4b2b      	ldr	r3, [pc, #172]	@ (800653c <RCCEx_PLLSAI2_Config+0x1e0>)
 8006490:	4013      	ands	r3, r2
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	6892      	ldr	r2, [r2, #8]
 8006496:	0211      	lsls	r1, r2, #8
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	6912      	ldr	r2, [r2, #16]
 800649c:	0852      	lsrs	r2, r2, #1
 800649e:	3a01      	subs	r2, #1
 80064a0:	0552      	lsls	r2, r2, #21
 80064a2:	4311      	orrs	r1, r2
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	6852      	ldr	r2, [r2, #4]
 80064a8:	3a01      	subs	r2, #1
 80064aa:	0112      	lsls	r2, r2, #4
 80064ac:	430a      	orrs	r2, r1
 80064ae:	4921      	ldr	r1, [pc, #132]	@ (8006534 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064b0:	4313      	orrs	r3, r2
 80064b2:	614b      	str	r3, [r1, #20]
 80064b4:	e014      	b.n	80064e0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80064b6:	4b1f      	ldr	r3, [pc, #124]	@ (8006534 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064b8:	695a      	ldr	r2, [r3, #20]
 80064ba:	4b21      	ldr	r3, [pc, #132]	@ (8006540 <RCCEx_PLLSAI2_Config+0x1e4>)
 80064bc:	4013      	ands	r3, r2
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	6892      	ldr	r2, [r2, #8]
 80064c2:	0211      	lsls	r1, r2, #8
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	6952      	ldr	r2, [r2, #20]
 80064c8:	0852      	lsrs	r2, r2, #1
 80064ca:	3a01      	subs	r2, #1
 80064cc:	0652      	lsls	r2, r2, #25
 80064ce:	4311      	orrs	r1, r2
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	6852      	ldr	r2, [r2, #4]
 80064d4:	3a01      	subs	r2, #1
 80064d6:	0112      	lsls	r2, r2, #4
 80064d8:	430a      	orrs	r2, r1
 80064da:	4916      	ldr	r1, [pc, #88]	@ (8006534 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064dc:	4313      	orrs	r3, r2
 80064de:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80064e0:	4b14      	ldr	r3, [pc, #80]	@ (8006534 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a13      	ldr	r2, [pc, #76]	@ (8006534 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064ec:	f7fc faf8 	bl	8002ae0 <HAL_GetTick>
 80064f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80064f2:	e009      	b.n	8006508 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80064f4:	f7fc faf4 	bl	8002ae0 <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d902      	bls.n	8006508 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	73fb      	strb	r3, [r7, #15]
          break;
 8006506:	e005      	b.n	8006514 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006508:	4b0a      	ldr	r3, [pc, #40]	@ (8006534 <RCCEx_PLLSAI2_Config+0x1d8>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d0ef      	beq.n	80064f4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006514:	7bfb      	ldrb	r3, [r7, #15]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d106      	bne.n	8006528 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800651a:	4b06      	ldr	r3, [pc, #24]	@ (8006534 <RCCEx_PLLSAI2_Config+0x1d8>)
 800651c:	695a      	ldr	r2, [r3, #20]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	4904      	ldr	r1, [pc, #16]	@ (8006534 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006524:	4313      	orrs	r3, r2
 8006526:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006528:	7bfb      	ldrb	r3, [r7, #15]
}
 800652a:	4618      	mov	r0, r3
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	40021000 	.word	0x40021000
 8006538:	07ff800f 	.word	0x07ff800f
 800653c:	ff9f800f 	.word	0xff9f800f
 8006540:	f9ff800f 	.word	0xf9ff800f

08006544 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d101      	bne.n	8006556 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e049      	b.n	80065ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800655c:	b2db      	uxtb	r3, r3
 800655e:	2b00      	cmp	r3, #0
 8006560:	d106      	bne.n	8006570 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f7fb fe26 	bl	80021bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2202      	movs	r2, #2
 8006574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	3304      	adds	r3, #4
 8006580:	4619      	mov	r1, r3
 8006582:	4610      	mov	r0, r2
 8006584:	f000 fb06 	bl	8006b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3708      	adds	r7, #8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
	...

080065f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006602:	b2db      	uxtb	r3, r3
 8006604:	2b01      	cmp	r3, #1
 8006606:	d001      	beq.n	800660c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e047      	b.n	800669c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2202      	movs	r2, #2
 8006610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a23      	ldr	r2, [pc, #140]	@ (80066a8 <HAL_TIM_Base_Start+0xb4>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d01d      	beq.n	800665a <HAL_TIM_Base_Start+0x66>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006626:	d018      	beq.n	800665a <HAL_TIM_Base_Start+0x66>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a1f      	ldr	r2, [pc, #124]	@ (80066ac <HAL_TIM_Base_Start+0xb8>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d013      	beq.n	800665a <HAL_TIM_Base_Start+0x66>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a1e      	ldr	r2, [pc, #120]	@ (80066b0 <HAL_TIM_Base_Start+0xbc>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d00e      	beq.n	800665a <HAL_TIM_Base_Start+0x66>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a1c      	ldr	r2, [pc, #112]	@ (80066b4 <HAL_TIM_Base_Start+0xc0>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d009      	beq.n	800665a <HAL_TIM_Base_Start+0x66>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a1b      	ldr	r2, [pc, #108]	@ (80066b8 <HAL_TIM_Base_Start+0xc4>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d004      	beq.n	800665a <HAL_TIM_Base_Start+0x66>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a19      	ldr	r2, [pc, #100]	@ (80066bc <HAL_TIM_Base_Start+0xc8>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d115      	bne.n	8006686 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	689a      	ldr	r2, [r3, #8]
 8006660:	4b17      	ldr	r3, [pc, #92]	@ (80066c0 <HAL_TIM_Base_Start+0xcc>)
 8006662:	4013      	ands	r3, r2
 8006664:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2b06      	cmp	r3, #6
 800666a:	d015      	beq.n	8006698 <HAL_TIM_Base_Start+0xa4>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006672:	d011      	beq.n	8006698 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f042 0201 	orr.w	r2, r2, #1
 8006682:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006684:	e008      	b.n	8006698 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f042 0201 	orr.w	r2, r2, #1
 8006694:	601a      	str	r2, [r3, #0]
 8006696:	e000      	b.n	800669a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006698:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3714      	adds	r7, #20
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr
 80066a8:	40012c00 	.word	0x40012c00
 80066ac:	40000400 	.word	0x40000400
 80066b0:	40000800 	.word	0x40000800
 80066b4:	40000c00 	.word	0x40000c00
 80066b8:	40013400 	.word	0x40013400
 80066bc:	40014000 	.word	0x40014000
 80066c0:	00010007 	.word	0x00010007

080066c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d001      	beq.n	80066dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e04f      	b.n	800677c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2202      	movs	r2, #2
 80066e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68da      	ldr	r2, [r3, #12]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f042 0201 	orr.w	r2, r2, #1
 80066f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a23      	ldr	r2, [pc, #140]	@ (8006788 <HAL_TIM_Base_Start_IT+0xc4>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d01d      	beq.n	800673a <HAL_TIM_Base_Start_IT+0x76>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006706:	d018      	beq.n	800673a <HAL_TIM_Base_Start_IT+0x76>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a1f      	ldr	r2, [pc, #124]	@ (800678c <HAL_TIM_Base_Start_IT+0xc8>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d013      	beq.n	800673a <HAL_TIM_Base_Start_IT+0x76>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a1e      	ldr	r2, [pc, #120]	@ (8006790 <HAL_TIM_Base_Start_IT+0xcc>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d00e      	beq.n	800673a <HAL_TIM_Base_Start_IT+0x76>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a1c      	ldr	r2, [pc, #112]	@ (8006794 <HAL_TIM_Base_Start_IT+0xd0>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d009      	beq.n	800673a <HAL_TIM_Base_Start_IT+0x76>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a1b      	ldr	r2, [pc, #108]	@ (8006798 <HAL_TIM_Base_Start_IT+0xd4>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d004      	beq.n	800673a <HAL_TIM_Base_Start_IT+0x76>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a19      	ldr	r2, [pc, #100]	@ (800679c <HAL_TIM_Base_Start_IT+0xd8>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d115      	bne.n	8006766 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	689a      	ldr	r2, [r3, #8]
 8006740:	4b17      	ldr	r3, [pc, #92]	@ (80067a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006742:	4013      	ands	r3, r2
 8006744:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2b06      	cmp	r3, #6
 800674a:	d015      	beq.n	8006778 <HAL_TIM_Base_Start_IT+0xb4>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006752:	d011      	beq.n	8006778 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f042 0201 	orr.w	r2, r2, #1
 8006762:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006764:	e008      	b.n	8006778 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f042 0201 	orr.w	r2, r2, #1
 8006774:	601a      	str	r2, [r3, #0]
 8006776:	e000      	b.n	800677a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006778:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr
 8006788:	40012c00 	.word	0x40012c00
 800678c:	40000400 	.word	0x40000400
 8006790:	40000800 	.word	0x40000800
 8006794:	40000c00 	.word	0x40000c00
 8006798:	40013400 	.word	0x40013400
 800679c:	40014000 	.word	0x40014000
 80067a0:	00010007 	.word	0x00010007

080067a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	f003 0302 	and.w	r3, r3, #2
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d020      	beq.n	8006808 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f003 0302 	and.w	r3, r3, #2
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d01b      	beq.n	8006808 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f06f 0202 	mvn.w	r2, #2
 80067d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2201      	movs	r2, #1
 80067de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	699b      	ldr	r3, [r3, #24]
 80067e6:	f003 0303 	and.w	r3, r3, #3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d003      	beq.n	80067f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 f9b2 	bl	8006b58 <HAL_TIM_IC_CaptureCallback>
 80067f4:	e005      	b.n	8006802 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 f9a4 	bl	8006b44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 f9b5 	bl	8006b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	f003 0304 	and.w	r3, r3, #4
 800680e:	2b00      	cmp	r3, #0
 8006810:	d020      	beq.n	8006854 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f003 0304 	and.w	r3, r3, #4
 8006818:	2b00      	cmp	r3, #0
 800681a:	d01b      	beq.n	8006854 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f06f 0204 	mvn.w	r2, #4
 8006824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2202      	movs	r2, #2
 800682a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006836:	2b00      	cmp	r3, #0
 8006838:	d003      	beq.n	8006842 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 f98c 	bl	8006b58 <HAL_TIM_IC_CaptureCallback>
 8006840:	e005      	b.n	800684e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 f97e 	bl	8006b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 f98f 	bl	8006b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	f003 0308 	and.w	r3, r3, #8
 800685a:	2b00      	cmp	r3, #0
 800685c:	d020      	beq.n	80068a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f003 0308 	and.w	r3, r3, #8
 8006864:	2b00      	cmp	r3, #0
 8006866:	d01b      	beq.n	80068a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f06f 0208 	mvn.w	r2, #8
 8006870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2204      	movs	r2, #4
 8006876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	69db      	ldr	r3, [r3, #28]
 800687e:	f003 0303 	and.w	r3, r3, #3
 8006882:	2b00      	cmp	r3, #0
 8006884:	d003      	beq.n	800688e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 f966 	bl	8006b58 <HAL_TIM_IC_CaptureCallback>
 800688c:	e005      	b.n	800689a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 f958 	bl	8006b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 f969 	bl	8006b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	f003 0310 	and.w	r3, r3, #16
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d020      	beq.n	80068ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f003 0310 	and.w	r3, r3, #16
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d01b      	beq.n	80068ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f06f 0210 	mvn.w	r2, #16
 80068bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2208      	movs	r2, #8
 80068c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	69db      	ldr	r3, [r3, #28]
 80068ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d003      	beq.n	80068da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f940 	bl	8006b58 <HAL_TIM_IC_CaptureCallback>
 80068d8:	e005      	b.n	80068e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 f932 	bl	8006b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 f943 	bl	8006b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00c      	beq.n	8006910 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f003 0301 	and.w	r3, r3, #1
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d007      	beq.n	8006910 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f06f 0201 	mvn.w	r2, #1
 8006908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7fb f922 	bl	8001b54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006916:	2b00      	cmp	r3, #0
 8006918:	d104      	bne.n	8006924 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00c      	beq.n	800693e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800692a:	2b00      	cmp	r3, #0
 800692c:	d007      	beq.n	800693e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fafd 	bl	8006f38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00c      	beq.n	8006962 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800694e:	2b00      	cmp	r3, #0
 8006950:	d007      	beq.n	8006962 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800695a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 faf5 	bl	8006f4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00c      	beq.n	8006986 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006972:	2b00      	cmp	r3, #0
 8006974:	d007      	beq.n	8006986 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800697e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 f8fd 	bl	8006b80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	f003 0320 	and.w	r3, r3, #32
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00c      	beq.n	80069aa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f003 0320 	and.w	r3, r3, #32
 8006996:	2b00      	cmp	r3, #0
 8006998:	d007      	beq.n	80069aa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f06f 0220 	mvn.w	r2, #32
 80069a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 fabd 	bl	8006f24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069aa:	bf00      	nop
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b084      	sub	sp, #16
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
 80069ba:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069bc:	2300      	movs	r3, #0
 80069be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d101      	bne.n	80069ce <HAL_TIM_ConfigClockSource+0x1c>
 80069ca:	2302      	movs	r3, #2
 80069cc:	e0b6      	b.n	8006b3c <HAL_TIM_ConfigClockSource+0x18a>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2201      	movs	r2, #1
 80069d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2202      	movs	r2, #2
 80069da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069ec:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80069f0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80069f8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68ba      	ldr	r2, [r7, #8]
 8006a00:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a0a:	d03e      	beq.n	8006a8a <HAL_TIM_ConfigClockSource+0xd8>
 8006a0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a10:	f200 8087 	bhi.w	8006b22 <HAL_TIM_ConfigClockSource+0x170>
 8006a14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a18:	f000 8086 	beq.w	8006b28 <HAL_TIM_ConfigClockSource+0x176>
 8006a1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a20:	d87f      	bhi.n	8006b22 <HAL_TIM_ConfigClockSource+0x170>
 8006a22:	2b70      	cmp	r3, #112	@ 0x70
 8006a24:	d01a      	beq.n	8006a5c <HAL_TIM_ConfigClockSource+0xaa>
 8006a26:	2b70      	cmp	r3, #112	@ 0x70
 8006a28:	d87b      	bhi.n	8006b22 <HAL_TIM_ConfigClockSource+0x170>
 8006a2a:	2b60      	cmp	r3, #96	@ 0x60
 8006a2c:	d050      	beq.n	8006ad0 <HAL_TIM_ConfigClockSource+0x11e>
 8006a2e:	2b60      	cmp	r3, #96	@ 0x60
 8006a30:	d877      	bhi.n	8006b22 <HAL_TIM_ConfigClockSource+0x170>
 8006a32:	2b50      	cmp	r3, #80	@ 0x50
 8006a34:	d03c      	beq.n	8006ab0 <HAL_TIM_ConfigClockSource+0xfe>
 8006a36:	2b50      	cmp	r3, #80	@ 0x50
 8006a38:	d873      	bhi.n	8006b22 <HAL_TIM_ConfigClockSource+0x170>
 8006a3a:	2b40      	cmp	r3, #64	@ 0x40
 8006a3c:	d058      	beq.n	8006af0 <HAL_TIM_ConfigClockSource+0x13e>
 8006a3e:	2b40      	cmp	r3, #64	@ 0x40
 8006a40:	d86f      	bhi.n	8006b22 <HAL_TIM_ConfigClockSource+0x170>
 8006a42:	2b30      	cmp	r3, #48	@ 0x30
 8006a44:	d064      	beq.n	8006b10 <HAL_TIM_ConfigClockSource+0x15e>
 8006a46:	2b30      	cmp	r3, #48	@ 0x30
 8006a48:	d86b      	bhi.n	8006b22 <HAL_TIM_ConfigClockSource+0x170>
 8006a4a:	2b20      	cmp	r3, #32
 8006a4c:	d060      	beq.n	8006b10 <HAL_TIM_ConfigClockSource+0x15e>
 8006a4e:	2b20      	cmp	r3, #32
 8006a50:	d867      	bhi.n	8006b22 <HAL_TIM_ConfigClockSource+0x170>
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d05c      	beq.n	8006b10 <HAL_TIM_ConfigClockSource+0x15e>
 8006a56:	2b10      	cmp	r3, #16
 8006a58:	d05a      	beq.n	8006b10 <HAL_TIM_ConfigClockSource+0x15e>
 8006a5a:	e062      	b.n	8006b22 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a6c:	f000 f9b2 	bl	8006dd4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006a7e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	609a      	str	r2, [r3, #8]
      break;
 8006a88:	e04f      	b.n	8006b2a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a9a:	f000 f99b 	bl	8006dd4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	689a      	ldr	r2, [r3, #8]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006aac:	609a      	str	r2, [r3, #8]
      break;
 8006aae:	e03c      	b.n	8006b2a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006abc:	461a      	mov	r2, r3
 8006abe:	f000 f90f 	bl	8006ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2150      	movs	r1, #80	@ 0x50
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f000 f968 	bl	8006d9e <TIM_ITRx_SetConfig>
      break;
 8006ace:	e02c      	b.n	8006b2a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006adc:	461a      	mov	r2, r3
 8006ade:	f000 f92e 	bl	8006d3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2160      	movs	r1, #96	@ 0x60
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f000 f958 	bl	8006d9e <TIM_ITRx_SetConfig>
      break;
 8006aee:	e01c      	b.n	8006b2a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006afc:	461a      	mov	r2, r3
 8006afe:	f000 f8ef 	bl	8006ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2140      	movs	r1, #64	@ 0x40
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f000 f948 	bl	8006d9e <TIM_ITRx_SetConfig>
      break;
 8006b0e:	e00c      	b.n	8006b2a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4619      	mov	r1, r3
 8006b1a:	4610      	mov	r0, r2
 8006b1c:	f000 f93f 	bl	8006d9e <TIM_ITRx_SetConfig>
      break;
 8006b20:	e003      	b.n	8006b2a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	73fb      	strb	r3, [r7, #15]
      break;
 8006b26:	e000      	b.n	8006b2a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006b28:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3710      	adds	r7, #16
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b88:	bf00      	nop
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a46      	ldr	r2, [pc, #280]	@ (8006cc0 <TIM_Base_SetConfig+0x12c>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d013      	beq.n	8006bd4 <TIM_Base_SetConfig+0x40>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bb2:	d00f      	beq.n	8006bd4 <TIM_Base_SetConfig+0x40>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a43      	ldr	r2, [pc, #268]	@ (8006cc4 <TIM_Base_SetConfig+0x130>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d00b      	beq.n	8006bd4 <TIM_Base_SetConfig+0x40>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a42      	ldr	r2, [pc, #264]	@ (8006cc8 <TIM_Base_SetConfig+0x134>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d007      	beq.n	8006bd4 <TIM_Base_SetConfig+0x40>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a41      	ldr	r2, [pc, #260]	@ (8006ccc <TIM_Base_SetConfig+0x138>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d003      	beq.n	8006bd4 <TIM_Base_SetConfig+0x40>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a40      	ldr	r2, [pc, #256]	@ (8006cd0 <TIM_Base_SetConfig+0x13c>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d108      	bne.n	8006be6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a35      	ldr	r2, [pc, #212]	@ (8006cc0 <TIM_Base_SetConfig+0x12c>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d01f      	beq.n	8006c2e <TIM_Base_SetConfig+0x9a>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bf4:	d01b      	beq.n	8006c2e <TIM_Base_SetConfig+0x9a>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a32      	ldr	r2, [pc, #200]	@ (8006cc4 <TIM_Base_SetConfig+0x130>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d017      	beq.n	8006c2e <TIM_Base_SetConfig+0x9a>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a31      	ldr	r2, [pc, #196]	@ (8006cc8 <TIM_Base_SetConfig+0x134>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d013      	beq.n	8006c2e <TIM_Base_SetConfig+0x9a>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a30      	ldr	r2, [pc, #192]	@ (8006ccc <TIM_Base_SetConfig+0x138>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d00f      	beq.n	8006c2e <TIM_Base_SetConfig+0x9a>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a2f      	ldr	r2, [pc, #188]	@ (8006cd0 <TIM_Base_SetConfig+0x13c>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d00b      	beq.n	8006c2e <TIM_Base_SetConfig+0x9a>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a2e      	ldr	r2, [pc, #184]	@ (8006cd4 <TIM_Base_SetConfig+0x140>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d007      	beq.n	8006c2e <TIM_Base_SetConfig+0x9a>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a2d      	ldr	r2, [pc, #180]	@ (8006cd8 <TIM_Base_SetConfig+0x144>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d003      	beq.n	8006c2e <TIM_Base_SetConfig+0x9a>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a2c      	ldr	r2, [pc, #176]	@ (8006cdc <TIM_Base_SetConfig+0x148>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d108      	bne.n	8006c40 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	689a      	ldr	r2, [r3, #8]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a16      	ldr	r2, [pc, #88]	@ (8006cc0 <TIM_Base_SetConfig+0x12c>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d00f      	beq.n	8006c8c <TIM_Base_SetConfig+0xf8>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a18      	ldr	r2, [pc, #96]	@ (8006cd0 <TIM_Base_SetConfig+0x13c>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d00b      	beq.n	8006c8c <TIM_Base_SetConfig+0xf8>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a17      	ldr	r2, [pc, #92]	@ (8006cd4 <TIM_Base_SetConfig+0x140>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d007      	beq.n	8006c8c <TIM_Base_SetConfig+0xf8>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a16      	ldr	r2, [pc, #88]	@ (8006cd8 <TIM_Base_SetConfig+0x144>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d003      	beq.n	8006c8c <TIM_Base_SetConfig+0xf8>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a15      	ldr	r2, [pc, #84]	@ (8006cdc <TIM_Base_SetConfig+0x148>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d103      	bne.n	8006c94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	691a      	ldr	r2, [r3, #16]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	f003 0301 	and.w	r3, r3, #1
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d105      	bne.n	8006cb2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	f023 0201 	bic.w	r2, r3, #1
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	611a      	str	r2, [r3, #16]
  }
}
 8006cb2:	bf00      	nop
 8006cb4:	3714      	adds	r7, #20
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	40012c00 	.word	0x40012c00
 8006cc4:	40000400 	.word	0x40000400
 8006cc8:	40000800 	.word	0x40000800
 8006ccc:	40000c00 	.word	0x40000c00
 8006cd0:	40013400 	.word	0x40013400
 8006cd4:	40014000 	.word	0x40014000
 8006cd8:	40014400 	.word	0x40014400
 8006cdc:	40014800 	.word	0x40014800

08006ce0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b087      	sub	sp, #28
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6a1b      	ldr	r3, [r3, #32]
 8006cf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	f023 0201 	bic.w	r2, r3, #1
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	011b      	lsls	r3, r3, #4
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	f023 030a 	bic.w	r3, r3, #10
 8006d1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d1e:	697a      	ldr	r2, [r7, #20]
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	693a      	ldr	r2, [r7, #16]
 8006d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	697a      	ldr	r2, [r7, #20]
 8006d30:	621a      	str	r2, [r3, #32]
}
 8006d32:	bf00      	nop
 8006d34:	371c      	adds	r7, #28
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b087      	sub	sp, #28
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	60f8      	str	r0, [r7, #12]
 8006d46:	60b9      	str	r1, [r7, #8]
 8006d48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6a1b      	ldr	r3, [r3, #32]
 8006d4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6a1b      	ldr	r3, [r3, #32]
 8006d54:	f023 0210 	bic.w	r2, r3, #16
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	031b      	lsls	r3, r3, #12
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006d7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	011b      	lsls	r3, r3, #4
 8006d80:	697a      	ldr	r2, [r7, #20]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	693a      	ldr	r2, [r7, #16]
 8006d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	621a      	str	r2, [r3, #32]
}
 8006d92:	bf00      	nop
 8006d94:	371c      	adds	r7, #28
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr

08006d9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b085      	sub	sp, #20
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
 8006da6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006db4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	f043 0307 	orr.w	r3, r3, #7
 8006dc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	609a      	str	r2, [r3, #8]
}
 8006dc8:	bf00      	nop
 8006dca:	3714      	adds	r7, #20
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b087      	sub	sp, #28
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]
 8006de0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006dee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	021a      	lsls	r2, r3, #8
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	431a      	orrs	r2, r3
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	697a      	ldr	r2, [r7, #20]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	697a      	ldr	r2, [r7, #20]
 8006e06:	609a      	str	r2, [r3, #8]
}
 8006e08:	bf00      	nop
 8006e0a:	371c      	adds	r7, #28
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d101      	bne.n	8006e2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e28:	2302      	movs	r3, #2
 8006e2a:	e068      	b.n	8006efe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2202      	movs	r2, #2
 8006e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a2e      	ldr	r2, [pc, #184]	@ (8006f0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d004      	beq.n	8006e60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a2d      	ldr	r2, [pc, #180]	@ (8006f10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d108      	bne.n	8006e72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006e66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a1e      	ldr	r2, [pc, #120]	@ (8006f0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d01d      	beq.n	8006ed2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e9e:	d018      	beq.n	8006ed2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a1b      	ldr	r2, [pc, #108]	@ (8006f14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d013      	beq.n	8006ed2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a1a      	ldr	r2, [pc, #104]	@ (8006f18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d00e      	beq.n	8006ed2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a18      	ldr	r2, [pc, #96]	@ (8006f1c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d009      	beq.n	8006ed2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a13      	ldr	r2, [pc, #76]	@ (8006f10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d004      	beq.n	8006ed2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a14      	ldr	r2, [pc, #80]	@ (8006f20 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d10c      	bne.n	8006eec <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ed8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	68ba      	ldr	r2, [r7, #8]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68ba      	ldr	r2, [r7, #8]
 8006eea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3714      	adds	r7, #20
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	40012c00 	.word	0x40012c00
 8006f10:	40013400 	.word	0x40013400
 8006f14:	40000400 	.word	0x40000400
 8006f18:	40000800 	.word	0x40000800
 8006f1c:	40000c00 	.word	0x40000c00
 8006f20:	40014000 	.word	0x40014000

08006f24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f40:	bf00      	nop
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d101      	bne.n	8006f72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e042      	b.n	8006ff8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d106      	bne.n	8006f8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f7fb f937 	bl	80021f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2224      	movs	r2, #36	@ 0x24
 8006f8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f022 0201 	bic.w	r2, r2, #1
 8006fa0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d002      	beq.n	8006fb0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 fbb2 	bl	8007714 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 f8b3 	bl	800711c <UART_SetConfig>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d101      	bne.n	8006fc0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e01b      	b.n	8006ff8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	685a      	ldr	r2, [r3, #4]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006fce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	689a      	ldr	r2, [r3, #8]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006fde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f042 0201 	orr.w	r2, r2, #1
 8006fee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 fc31 	bl	8007858 <UART_CheckIdleState>
 8006ff6:	4603      	mov	r3, r0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3708      	adds	r7, #8
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b08a      	sub	sp, #40	@ 0x28
 8007004:	af02      	add	r7, sp, #8
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	603b      	str	r3, [r7, #0]
 800700c:	4613      	mov	r3, r2
 800700e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007016:	2b20      	cmp	r3, #32
 8007018:	d17b      	bne.n	8007112 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d002      	beq.n	8007026 <HAL_UART_Transmit+0x26>
 8007020:	88fb      	ldrh	r3, [r7, #6]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d101      	bne.n	800702a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e074      	b.n	8007114 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2221      	movs	r2, #33	@ 0x21
 8007036:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800703a:	f7fb fd51 	bl	8002ae0 <HAL_GetTick>
 800703e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	88fa      	ldrh	r2, [r7, #6]
 8007044:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	88fa      	ldrh	r2, [r7, #6]
 800704c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007058:	d108      	bne.n	800706c <HAL_UART_Transmit+0x6c>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d104      	bne.n	800706c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007062:	2300      	movs	r3, #0
 8007064:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	61bb      	str	r3, [r7, #24]
 800706a:	e003      	b.n	8007074 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007070:	2300      	movs	r3, #0
 8007072:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007074:	e030      	b.n	80070d8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	9300      	str	r3, [sp, #0]
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	2200      	movs	r2, #0
 800707e:	2180      	movs	r1, #128	@ 0x80
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f000 fc93 	bl	80079ac <UART_WaitOnFlagUntilTimeout>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d005      	beq.n	8007098 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2220      	movs	r2, #32
 8007090:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	e03d      	b.n	8007114 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d10b      	bne.n	80070b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	881a      	ldrh	r2, [r3, #0]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070aa:	b292      	uxth	r2, r2
 80070ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	3302      	adds	r3, #2
 80070b2:	61bb      	str	r3, [r7, #24]
 80070b4:	e007      	b.n	80070c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	781a      	ldrb	r2, [r3, #0]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	3301      	adds	r3, #1
 80070c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	3b01      	subs	r3, #1
 80070d0:	b29a      	uxth	r2, r3
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80070de:	b29b      	uxth	r3, r3
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1c8      	bne.n	8007076 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	9300      	str	r3, [sp, #0]
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	2200      	movs	r2, #0
 80070ec:	2140      	movs	r1, #64	@ 0x40
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f000 fc5c 	bl	80079ac <UART_WaitOnFlagUntilTimeout>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d005      	beq.n	8007106 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2220      	movs	r2, #32
 80070fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e006      	b.n	8007114 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2220      	movs	r2, #32
 800710a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800710e:	2300      	movs	r3, #0
 8007110:	e000      	b.n	8007114 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007112:	2302      	movs	r3, #2
  }
}
 8007114:	4618      	mov	r0, r3
 8007116:	3720      	adds	r7, #32
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800711c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007120:	b08c      	sub	sp, #48	@ 0x30
 8007122:	af00      	add	r7, sp, #0
 8007124:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007126:	2300      	movs	r3, #0
 8007128:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	689a      	ldr	r2, [r3, #8]
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	431a      	orrs	r2, r3
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	695b      	ldr	r3, [r3, #20]
 800713a:	431a      	orrs	r2, r3
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	69db      	ldr	r3, [r3, #28]
 8007140:	4313      	orrs	r3, r2
 8007142:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	4baa      	ldr	r3, [pc, #680]	@ (80073f4 <UART_SetConfig+0x2d8>)
 800714c:	4013      	ands	r3, r2
 800714e:	697a      	ldr	r2, [r7, #20]
 8007150:	6812      	ldr	r2, [r2, #0]
 8007152:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007154:	430b      	orrs	r3, r1
 8007156:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	68da      	ldr	r2, [r3, #12]
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	430a      	orrs	r2, r1
 800716c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	699b      	ldr	r3, [r3, #24]
 8007172:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a9f      	ldr	r2, [pc, #636]	@ (80073f8 <UART_SetConfig+0x2dc>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d004      	beq.n	8007188 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	6a1b      	ldr	r3, [r3, #32]
 8007182:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007184:	4313      	orrs	r3, r2
 8007186:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007192:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007196:	697a      	ldr	r2, [r7, #20]
 8007198:	6812      	ldr	r2, [r2, #0]
 800719a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800719c:	430b      	orrs	r3, r1
 800719e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a6:	f023 010f 	bic.w	r1, r3, #15
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	430a      	orrs	r2, r1
 80071b4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a90      	ldr	r2, [pc, #576]	@ (80073fc <UART_SetConfig+0x2e0>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d125      	bne.n	800720c <UART_SetConfig+0xf0>
 80071c0:	4b8f      	ldr	r3, [pc, #572]	@ (8007400 <UART_SetConfig+0x2e4>)
 80071c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071c6:	f003 0303 	and.w	r3, r3, #3
 80071ca:	2b03      	cmp	r3, #3
 80071cc:	d81a      	bhi.n	8007204 <UART_SetConfig+0xe8>
 80071ce:	a201      	add	r2, pc, #4	@ (adr r2, 80071d4 <UART_SetConfig+0xb8>)
 80071d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d4:	080071e5 	.word	0x080071e5
 80071d8:	080071f5 	.word	0x080071f5
 80071dc:	080071ed 	.word	0x080071ed
 80071e0:	080071fd 	.word	0x080071fd
 80071e4:	2301      	movs	r3, #1
 80071e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071ea:	e116      	b.n	800741a <UART_SetConfig+0x2fe>
 80071ec:	2302      	movs	r3, #2
 80071ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071f2:	e112      	b.n	800741a <UART_SetConfig+0x2fe>
 80071f4:	2304      	movs	r3, #4
 80071f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071fa:	e10e      	b.n	800741a <UART_SetConfig+0x2fe>
 80071fc:	2308      	movs	r3, #8
 80071fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007202:	e10a      	b.n	800741a <UART_SetConfig+0x2fe>
 8007204:	2310      	movs	r3, #16
 8007206:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800720a:	e106      	b.n	800741a <UART_SetConfig+0x2fe>
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a7c      	ldr	r2, [pc, #496]	@ (8007404 <UART_SetConfig+0x2e8>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d138      	bne.n	8007288 <UART_SetConfig+0x16c>
 8007216:	4b7a      	ldr	r3, [pc, #488]	@ (8007400 <UART_SetConfig+0x2e4>)
 8007218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800721c:	f003 030c 	and.w	r3, r3, #12
 8007220:	2b0c      	cmp	r3, #12
 8007222:	d82d      	bhi.n	8007280 <UART_SetConfig+0x164>
 8007224:	a201      	add	r2, pc, #4	@ (adr r2, 800722c <UART_SetConfig+0x110>)
 8007226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800722a:	bf00      	nop
 800722c:	08007261 	.word	0x08007261
 8007230:	08007281 	.word	0x08007281
 8007234:	08007281 	.word	0x08007281
 8007238:	08007281 	.word	0x08007281
 800723c:	08007271 	.word	0x08007271
 8007240:	08007281 	.word	0x08007281
 8007244:	08007281 	.word	0x08007281
 8007248:	08007281 	.word	0x08007281
 800724c:	08007269 	.word	0x08007269
 8007250:	08007281 	.word	0x08007281
 8007254:	08007281 	.word	0x08007281
 8007258:	08007281 	.word	0x08007281
 800725c:	08007279 	.word	0x08007279
 8007260:	2300      	movs	r3, #0
 8007262:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007266:	e0d8      	b.n	800741a <UART_SetConfig+0x2fe>
 8007268:	2302      	movs	r3, #2
 800726a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800726e:	e0d4      	b.n	800741a <UART_SetConfig+0x2fe>
 8007270:	2304      	movs	r3, #4
 8007272:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007276:	e0d0      	b.n	800741a <UART_SetConfig+0x2fe>
 8007278:	2308      	movs	r3, #8
 800727a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800727e:	e0cc      	b.n	800741a <UART_SetConfig+0x2fe>
 8007280:	2310      	movs	r3, #16
 8007282:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007286:	e0c8      	b.n	800741a <UART_SetConfig+0x2fe>
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a5e      	ldr	r2, [pc, #376]	@ (8007408 <UART_SetConfig+0x2ec>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d125      	bne.n	80072de <UART_SetConfig+0x1c2>
 8007292:	4b5b      	ldr	r3, [pc, #364]	@ (8007400 <UART_SetConfig+0x2e4>)
 8007294:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007298:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800729c:	2b30      	cmp	r3, #48	@ 0x30
 800729e:	d016      	beq.n	80072ce <UART_SetConfig+0x1b2>
 80072a0:	2b30      	cmp	r3, #48	@ 0x30
 80072a2:	d818      	bhi.n	80072d6 <UART_SetConfig+0x1ba>
 80072a4:	2b20      	cmp	r3, #32
 80072a6:	d00a      	beq.n	80072be <UART_SetConfig+0x1a2>
 80072a8:	2b20      	cmp	r3, #32
 80072aa:	d814      	bhi.n	80072d6 <UART_SetConfig+0x1ba>
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d002      	beq.n	80072b6 <UART_SetConfig+0x19a>
 80072b0:	2b10      	cmp	r3, #16
 80072b2:	d008      	beq.n	80072c6 <UART_SetConfig+0x1aa>
 80072b4:	e00f      	b.n	80072d6 <UART_SetConfig+0x1ba>
 80072b6:	2300      	movs	r3, #0
 80072b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072bc:	e0ad      	b.n	800741a <UART_SetConfig+0x2fe>
 80072be:	2302      	movs	r3, #2
 80072c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072c4:	e0a9      	b.n	800741a <UART_SetConfig+0x2fe>
 80072c6:	2304      	movs	r3, #4
 80072c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072cc:	e0a5      	b.n	800741a <UART_SetConfig+0x2fe>
 80072ce:	2308      	movs	r3, #8
 80072d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072d4:	e0a1      	b.n	800741a <UART_SetConfig+0x2fe>
 80072d6:	2310      	movs	r3, #16
 80072d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072dc:	e09d      	b.n	800741a <UART_SetConfig+0x2fe>
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a4a      	ldr	r2, [pc, #296]	@ (800740c <UART_SetConfig+0x2f0>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d125      	bne.n	8007334 <UART_SetConfig+0x218>
 80072e8:	4b45      	ldr	r3, [pc, #276]	@ (8007400 <UART_SetConfig+0x2e4>)
 80072ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072ee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80072f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80072f4:	d016      	beq.n	8007324 <UART_SetConfig+0x208>
 80072f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80072f8:	d818      	bhi.n	800732c <UART_SetConfig+0x210>
 80072fa:	2b80      	cmp	r3, #128	@ 0x80
 80072fc:	d00a      	beq.n	8007314 <UART_SetConfig+0x1f8>
 80072fe:	2b80      	cmp	r3, #128	@ 0x80
 8007300:	d814      	bhi.n	800732c <UART_SetConfig+0x210>
 8007302:	2b00      	cmp	r3, #0
 8007304:	d002      	beq.n	800730c <UART_SetConfig+0x1f0>
 8007306:	2b40      	cmp	r3, #64	@ 0x40
 8007308:	d008      	beq.n	800731c <UART_SetConfig+0x200>
 800730a:	e00f      	b.n	800732c <UART_SetConfig+0x210>
 800730c:	2300      	movs	r3, #0
 800730e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007312:	e082      	b.n	800741a <UART_SetConfig+0x2fe>
 8007314:	2302      	movs	r3, #2
 8007316:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800731a:	e07e      	b.n	800741a <UART_SetConfig+0x2fe>
 800731c:	2304      	movs	r3, #4
 800731e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007322:	e07a      	b.n	800741a <UART_SetConfig+0x2fe>
 8007324:	2308      	movs	r3, #8
 8007326:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800732a:	e076      	b.n	800741a <UART_SetConfig+0x2fe>
 800732c:	2310      	movs	r3, #16
 800732e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007332:	e072      	b.n	800741a <UART_SetConfig+0x2fe>
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a35      	ldr	r2, [pc, #212]	@ (8007410 <UART_SetConfig+0x2f4>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d12a      	bne.n	8007394 <UART_SetConfig+0x278>
 800733e:	4b30      	ldr	r3, [pc, #192]	@ (8007400 <UART_SetConfig+0x2e4>)
 8007340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007344:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007348:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800734c:	d01a      	beq.n	8007384 <UART_SetConfig+0x268>
 800734e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007352:	d81b      	bhi.n	800738c <UART_SetConfig+0x270>
 8007354:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007358:	d00c      	beq.n	8007374 <UART_SetConfig+0x258>
 800735a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800735e:	d815      	bhi.n	800738c <UART_SetConfig+0x270>
 8007360:	2b00      	cmp	r3, #0
 8007362:	d003      	beq.n	800736c <UART_SetConfig+0x250>
 8007364:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007368:	d008      	beq.n	800737c <UART_SetConfig+0x260>
 800736a:	e00f      	b.n	800738c <UART_SetConfig+0x270>
 800736c:	2300      	movs	r3, #0
 800736e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007372:	e052      	b.n	800741a <UART_SetConfig+0x2fe>
 8007374:	2302      	movs	r3, #2
 8007376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800737a:	e04e      	b.n	800741a <UART_SetConfig+0x2fe>
 800737c:	2304      	movs	r3, #4
 800737e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007382:	e04a      	b.n	800741a <UART_SetConfig+0x2fe>
 8007384:	2308      	movs	r3, #8
 8007386:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800738a:	e046      	b.n	800741a <UART_SetConfig+0x2fe>
 800738c:	2310      	movs	r3, #16
 800738e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007392:	e042      	b.n	800741a <UART_SetConfig+0x2fe>
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a17      	ldr	r2, [pc, #92]	@ (80073f8 <UART_SetConfig+0x2dc>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d13a      	bne.n	8007414 <UART_SetConfig+0x2f8>
 800739e:	4b18      	ldr	r3, [pc, #96]	@ (8007400 <UART_SetConfig+0x2e4>)
 80073a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073a4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80073a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80073ac:	d01a      	beq.n	80073e4 <UART_SetConfig+0x2c8>
 80073ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80073b2:	d81b      	bhi.n	80073ec <UART_SetConfig+0x2d0>
 80073b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073b8:	d00c      	beq.n	80073d4 <UART_SetConfig+0x2b8>
 80073ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073be:	d815      	bhi.n	80073ec <UART_SetConfig+0x2d0>
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d003      	beq.n	80073cc <UART_SetConfig+0x2b0>
 80073c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073c8:	d008      	beq.n	80073dc <UART_SetConfig+0x2c0>
 80073ca:	e00f      	b.n	80073ec <UART_SetConfig+0x2d0>
 80073cc:	2300      	movs	r3, #0
 80073ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073d2:	e022      	b.n	800741a <UART_SetConfig+0x2fe>
 80073d4:	2302      	movs	r3, #2
 80073d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073da:	e01e      	b.n	800741a <UART_SetConfig+0x2fe>
 80073dc:	2304      	movs	r3, #4
 80073de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073e2:	e01a      	b.n	800741a <UART_SetConfig+0x2fe>
 80073e4:	2308      	movs	r3, #8
 80073e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073ea:	e016      	b.n	800741a <UART_SetConfig+0x2fe>
 80073ec:	2310      	movs	r3, #16
 80073ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073f2:	e012      	b.n	800741a <UART_SetConfig+0x2fe>
 80073f4:	cfff69f3 	.word	0xcfff69f3
 80073f8:	40008000 	.word	0x40008000
 80073fc:	40013800 	.word	0x40013800
 8007400:	40021000 	.word	0x40021000
 8007404:	40004400 	.word	0x40004400
 8007408:	40004800 	.word	0x40004800
 800740c:	40004c00 	.word	0x40004c00
 8007410:	40005000 	.word	0x40005000
 8007414:	2310      	movs	r3, #16
 8007416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4aae      	ldr	r2, [pc, #696]	@ (80076d8 <UART_SetConfig+0x5bc>)
 8007420:	4293      	cmp	r3, r2
 8007422:	f040 8097 	bne.w	8007554 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007426:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800742a:	2b08      	cmp	r3, #8
 800742c:	d823      	bhi.n	8007476 <UART_SetConfig+0x35a>
 800742e:	a201      	add	r2, pc, #4	@ (adr r2, 8007434 <UART_SetConfig+0x318>)
 8007430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007434:	08007459 	.word	0x08007459
 8007438:	08007477 	.word	0x08007477
 800743c:	08007461 	.word	0x08007461
 8007440:	08007477 	.word	0x08007477
 8007444:	08007467 	.word	0x08007467
 8007448:	08007477 	.word	0x08007477
 800744c:	08007477 	.word	0x08007477
 8007450:	08007477 	.word	0x08007477
 8007454:	0800746f 	.word	0x0800746f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007458:	f7fe fa3e 	bl	80058d8 <HAL_RCC_GetPCLK1Freq>
 800745c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800745e:	e010      	b.n	8007482 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007460:	4b9e      	ldr	r3, [pc, #632]	@ (80076dc <UART_SetConfig+0x5c0>)
 8007462:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007464:	e00d      	b.n	8007482 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007466:	f7fe f99f 	bl	80057a8 <HAL_RCC_GetSysClockFreq>
 800746a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800746c:	e009      	b.n	8007482 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800746e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007472:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007474:	e005      	b.n	8007482 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007476:	2300      	movs	r3, #0
 8007478:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007480:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007484:	2b00      	cmp	r3, #0
 8007486:	f000 8130 	beq.w	80076ea <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800748e:	4a94      	ldr	r2, [pc, #592]	@ (80076e0 <UART_SetConfig+0x5c4>)
 8007490:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007494:	461a      	mov	r2, r3
 8007496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007498:	fbb3 f3f2 	udiv	r3, r3, r2
 800749c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	685a      	ldr	r2, [r3, #4]
 80074a2:	4613      	mov	r3, r2
 80074a4:	005b      	lsls	r3, r3, #1
 80074a6:	4413      	add	r3, r2
 80074a8:	69ba      	ldr	r2, [r7, #24]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d305      	bcc.n	80074ba <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074b4:	69ba      	ldr	r2, [r7, #24]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d903      	bls.n	80074c2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80074c0:	e113      	b.n	80076ea <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c4:	2200      	movs	r2, #0
 80074c6:	60bb      	str	r3, [r7, #8]
 80074c8:	60fa      	str	r2, [r7, #12]
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ce:	4a84      	ldr	r2, [pc, #528]	@ (80076e0 <UART_SetConfig+0x5c4>)
 80074d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	2200      	movs	r2, #0
 80074d8:	603b      	str	r3, [r7, #0]
 80074da:	607a      	str	r2, [r7, #4]
 80074dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80074e4:	f7f9 fb78 	bl	8000bd8 <__aeabi_uldivmod>
 80074e8:	4602      	mov	r2, r0
 80074ea:	460b      	mov	r3, r1
 80074ec:	4610      	mov	r0, r2
 80074ee:	4619      	mov	r1, r3
 80074f0:	f04f 0200 	mov.w	r2, #0
 80074f4:	f04f 0300 	mov.w	r3, #0
 80074f8:	020b      	lsls	r3, r1, #8
 80074fa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80074fe:	0202      	lsls	r2, r0, #8
 8007500:	6979      	ldr	r1, [r7, #20]
 8007502:	6849      	ldr	r1, [r1, #4]
 8007504:	0849      	lsrs	r1, r1, #1
 8007506:	2000      	movs	r0, #0
 8007508:	460c      	mov	r4, r1
 800750a:	4605      	mov	r5, r0
 800750c:	eb12 0804 	adds.w	r8, r2, r4
 8007510:	eb43 0905 	adc.w	r9, r3, r5
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	469a      	mov	sl, r3
 800751c:	4693      	mov	fp, r2
 800751e:	4652      	mov	r2, sl
 8007520:	465b      	mov	r3, fp
 8007522:	4640      	mov	r0, r8
 8007524:	4649      	mov	r1, r9
 8007526:	f7f9 fb57 	bl	8000bd8 <__aeabi_uldivmod>
 800752a:	4602      	mov	r2, r0
 800752c:	460b      	mov	r3, r1
 800752e:	4613      	mov	r3, r2
 8007530:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007532:	6a3b      	ldr	r3, [r7, #32]
 8007534:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007538:	d308      	bcc.n	800754c <UART_SetConfig+0x430>
 800753a:	6a3b      	ldr	r3, [r7, #32]
 800753c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007540:	d204      	bcs.n	800754c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	6a3a      	ldr	r2, [r7, #32]
 8007548:	60da      	str	r2, [r3, #12]
 800754a:	e0ce      	b.n	80076ea <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007552:	e0ca      	b.n	80076ea <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	69db      	ldr	r3, [r3, #28]
 8007558:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800755c:	d166      	bne.n	800762c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800755e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007562:	2b08      	cmp	r3, #8
 8007564:	d827      	bhi.n	80075b6 <UART_SetConfig+0x49a>
 8007566:	a201      	add	r2, pc, #4	@ (adr r2, 800756c <UART_SetConfig+0x450>)
 8007568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756c:	08007591 	.word	0x08007591
 8007570:	08007599 	.word	0x08007599
 8007574:	080075a1 	.word	0x080075a1
 8007578:	080075b7 	.word	0x080075b7
 800757c:	080075a7 	.word	0x080075a7
 8007580:	080075b7 	.word	0x080075b7
 8007584:	080075b7 	.word	0x080075b7
 8007588:	080075b7 	.word	0x080075b7
 800758c:	080075af 	.word	0x080075af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007590:	f7fe f9a2 	bl	80058d8 <HAL_RCC_GetPCLK1Freq>
 8007594:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007596:	e014      	b.n	80075c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007598:	f7fe f9b4 	bl	8005904 <HAL_RCC_GetPCLK2Freq>
 800759c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800759e:	e010      	b.n	80075c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075a0:	4b4e      	ldr	r3, [pc, #312]	@ (80076dc <UART_SetConfig+0x5c0>)
 80075a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80075a4:	e00d      	b.n	80075c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075a6:	f7fe f8ff 	bl	80057a8 <HAL_RCC_GetSysClockFreq>
 80075aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80075ac:	e009      	b.n	80075c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80075b4:	e005      	b.n	80075c2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80075b6:	2300      	movs	r3, #0
 80075b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80075c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f000 8090 	beq.w	80076ea <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ce:	4a44      	ldr	r2, [pc, #272]	@ (80076e0 <UART_SetConfig+0x5c4>)
 80075d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075d4:	461a      	mov	r2, r3
 80075d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80075dc:	005a      	lsls	r2, r3, #1
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	085b      	lsrs	r3, r3, #1
 80075e4:	441a      	add	r2, r3
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ee:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075f0:	6a3b      	ldr	r3, [r7, #32]
 80075f2:	2b0f      	cmp	r3, #15
 80075f4:	d916      	bls.n	8007624 <UART_SetConfig+0x508>
 80075f6:	6a3b      	ldr	r3, [r7, #32]
 80075f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075fc:	d212      	bcs.n	8007624 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80075fe:	6a3b      	ldr	r3, [r7, #32]
 8007600:	b29b      	uxth	r3, r3
 8007602:	f023 030f 	bic.w	r3, r3, #15
 8007606:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007608:	6a3b      	ldr	r3, [r7, #32]
 800760a:	085b      	lsrs	r3, r3, #1
 800760c:	b29b      	uxth	r3, r3
 800760e:	f003 0307 	and.w	r3, r3, #7
 8007612:	b29a      	uxth	r2, r3
 8007614:	8bfb      	ldrh	r3, [r7, #30]
 8007616:	4313      	orrs	r3, r2
 8007618:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	8bfa      	ldrh	r2, [r7, #30]
 8007620:	60da      	str	r2, [r3, #12]
 8007622:	e062      	b.n	80076ea <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800762a:	e05e      	b.n	80076ea <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800762c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007630:	2b08      	cmp	r3, #8
 8007632:	d828      	bhi.n	8007686 <UART_SetConfig+0x56a>
 8007634:	a201      	add	r2, pc, #4	@ (adr r2, 800763c <UART_SetConfig+0x520>)
 8007636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763a:	bf00      	nop
 800763c:	08007661 	.word	0x08007661
 8007640:	08007669 	.word	0x08007669
 8007644:	08007671 	.word	0x08007671
 8007648:	08007687 	.word	0x08007687
 800764c:	08007677 	.word	0x08007677
 8007650:	08007687 	.word	0x08007687
 8007654:	08007687 	.word	0x08007687
 8007658:	08007687 	.word	0x08007687
 800765c:	0800767f 	.word	0x0800767f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007660:	f7fe f93a 	bl	80058d8 <HAL_RCC_GetPCLK1Freq>
 8007664:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007666:	e014      	b.n	8007692 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007668:	f7fe f94c 	bl	8005904 <HAL_RCC_GetPCLK2Freq>
 800766c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800766e:	e010      	b.n	8007692 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007670:	4b1a      	ldr	r3, [pc, #104]	@ (80076dc <UART_SetConfig+0x5c0>)
 8007672:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007674:	e00d      	b.n	8007692 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007676:	f7fe f897 	bl	80057a8 <HAL_RCC_GetSysClockFreq>
 800767a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800767c:	e009      	b.n	8007692 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800767e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007682:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007684:	e005      	b.n	8007692 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007686:	2300      	movs	r3, #0
 8007688:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007690:	bf00      	nop
    }

    if (pclk != 0U)
 8007692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007694:	2b00      	cmp	r3, #0
 8007696:	d028      	beq.n	80076ea <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800769c:	4a10      	ldr	r2, [pc, #64]	@ (80076e0 <UART_SetConfig+0x5c4>)
 800769e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076a2:	461a      	mov	r2, r3
 80076a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	085b      	lsrs	r3, r3, #1
 80076b0:	441a      	add	r2, r3
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ba:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076bc:	6a3b      	ldr	r3, [r7, #32]
 80076be:	2b0f      	cmp	r3, #15
 80076c0:	d910      	bls.n	80076e4 <UART_SetConfig+0x5c8>
 80076c2:	6a3b      	ldr	r3, [r7, #32]
 80076c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076c8:	d20c      	bcs.n	80076e4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80076ca:	6a3b      	ldr	r3, [r7, #32]
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	60da      	str	r2, [r3, #12]
 80076d4:	e009      	b.n	80076ea <UART_SetConfig+0x5ce>
 80076d6:	bf00      	nop
 80076d8:	40008000 	.word	0x40008000
 80076dc:	00f42400 	.word	0x00f42400
 80076e0:	0800ad40 	.word	0x0800ad40
      }
      else
      {
        ret = HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	2201      	movs	r2, #1
 80076ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	2201      	movs	r2, #1
 80076f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	2200      	movs	r2, #0
 80076fe:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	2200      	movs	r2, #0
 8007704:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007706:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800770a:	4618      	mov	r0, r3
 800770c:	3730      	adds	r7, #48	@ 0x30
 800770e:	46bd      	mov	sp, r7
 8007710:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007714 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007720:	f003 0308 	and.w	r3, r3, #8
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00a      	beq.n	800773e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	430a      	orrs	r2, r1
 800773c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007742:	f003 0301 	and.w	r3, r3, #1
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00a      	beq.n	8007760 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	430a      	orrs	r2, r1
 800775e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007764:	f003 0302 	and.w	r3, r3, #2
 8007768:	2b00      	cmp	r3, #0
 800776a:	d00a      	beq.n	8007782 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	430a      	orrs	r2, r1
 8007780:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007786:	f003 0304 	and.w	r3, r3, #4
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00a      	beq.n	80077a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	430a      	orrs	r2, r1
 80077a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077a8:	f003 0310 	and.w	r3, r3, #16
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00a      	beq.n	80077c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	430a      	orrs	r2, r1
 80077c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ca:	f003 0320 	and.w	r3, r3, #32
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00a      	beq.n	80077e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	430a      	orrs	r2, r1
 80077e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d01a      	beq.n	800782a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	430a      	orrs	r2, r1
 8007808:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800780e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007812:	d10a      	bne.n	800782a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	430a      	orrs	r2, r1
 8007828:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800782e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00a      	beq.n	800784c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	430a      	orrs	r2, r1
 800784a:	605a      	str	r2, [r3, #4]
  }
}
 800784c:	bf00      	nop
 800784e:	370c      	adds	r7, #12
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b098      	sub	sp, #96	@ 0x60
 800785c:	af02      	add	r7, sp, #8
 800785e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007868:	f7fb f93a 	bl	8002ae0 <HAL_GetTick>
 800786c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 0308 	and.w	r3, r3, #8
 8007878:	2b08      	cmp	r3, #8
 800787a:	d12f      	bne.n	80078dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800787c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007880:	9300      	str	r3, [sp, #0]
 8007882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007884:	2200      	movs	r2, #0
 8007886:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f88e 	bl	80079ac <UART_WaitOnFlagUntilTimeout>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d022      	beq.n	80078dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800789e:	e853 3f00 	ldrex	r3, [r3]
 80078a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80078a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	461a      	mov	r2, r3
 80078b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80078b6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80078ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078bc:	e841 2300 	strex	r3, r2, [r1]
 80078c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80078c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d1e6      	bne.n	8007896 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2220      	movs	r2, #32
 80078cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078d8:	2303      	movs	r3, #3
 80078da:	e063      	b.n	80079a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 0304 	and.w	r3, r3, #4
 80078e6:	2b04      	cmp	r3, #4
 80078e8:	d149      	bne.n	800797e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078ea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80078ee:	9300      	str	r3, [sp, #0]
 80078f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078f2:	2200      	movs	r2, #0
 80078f4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 f857 	bl	80079ac <UART_WaitOnFlagUntilTimeout>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d03c      	beq.n	800797e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800790c:	e853 3f00 	ldrex	r3, [r3]
 8007910:	623b      	str	r3, [r7, #32]
   return(result);
 8007912:	6a3b      	ldr	r3, [r7, #32]
 8007914:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007918:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	461a      	mov	r2, r3
 8007920:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007922:	633b      	str	r3, [r7, #48]	@ 0x30
 8007924:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007926:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007928:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800792a:	e841 2300 	strex	r3, r2, [r1]
 800792e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1e6      	bne.n	8007904 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	3308      	adds	r3, #8
 800793c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	e853 3f00 	ldrex	r3, [r3]
 8007944:	60fb      	str	r3, [r7, #12]
   return(result);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f023 0301 	bic.w	r3, r3, #1
 800794c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	3308      	adds	r3, #8
 8007954:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007956:	61fa      	str	r2, [r7, #28]
 8007958:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795a:	69b9      	ldr	r1, [r7, #24]
 800795c:	69fa      	ldr	r2, [r7, #28]
 800795e:	e841 2300 	strex	r3, r2, [r1]
 8007962:	617b      	str	r3, [r7, #20]
   return(result);
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1e5      	bne.n	8007936 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2220      	movs	r2, #32
 800796e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800797a:	2303      	movs	r3, #3
 800797c:	e012      	b.n	80079a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2220      	movs	r2, #32
 8007982:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2220      	movs	r2, #32
 800798a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3758      	adds	r7, #88	@ 0x58
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	603b      	str	r3, [r7, #0]
 80079b8:	4613      	mov	r3, r2
 80079ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079bc:	e04f      	b.n	8007a5e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80079c4:	d04b      	beq.n	8007a5e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079c6:	f7fb f88b 	bl	8002ae0 <HAL_GetTick>
 80079ca:	4602      	mov	r2, r0
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	1ad3      	subs	r3, r2, r3
 80079d0:	69ba      	ldr	r2, [r7, #24]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d302      	bcc.n	80079dc <UART_WaitOnFlagUntilTimeout+0x30>
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d101      	bne.n	80079e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80079dc:	2303      	movs	r3, #3
 80079de:	e04e      	b.n	8007a7e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f003 0304 	and.w	r3, r3, #4
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d037      	beq.n	8007a5e <UART_WaitOnFlagUntilTimeout+0xb2>
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	2b80      	cmp	r3, #128	@ 0x80
 80079f2:	d034      	beq.n	8007a5e <UART_WaitOnFlagUntilTimeout+0xb2>
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	2b40      	cmp	r3, #64	@ 0x40
 80079f8:	d031      	beq.n	8007a5e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	69db      	ldr	r3, [r3, #28]
 8007a00:	f003 0308 	and.w	r3, r3, #8
 8007a04:	2b08      	cmp	r3, #8
 8007a06:	d110      	bne.n	8007a2a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2208      	movs	r2, #8
 8007a0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f000 f838 	bl	8007a86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2208      	movs	r2, #8
 8007a1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e029      	b.n	8007a7e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	69db      	ldr	r3, [r3, #28]
 8007a30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a38:	d111      	bne.n	8007a5e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007a42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f000 f81e 	bl	8007a86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2220      	movs	r2, #32
 8007a4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007a5a:	2303      	movs	r3, #3
 8007a5c:	e00f      	b.n	8007a7e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	69da      	ldr	r2, [r3, #28]
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	4013      	ands	r3, r2
 8007a68:	68ba      	ldr	r2, [r7, #8]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	bf0c      	ite	eq
 8007a6e:	2301      	moveq	r3, #1
 8007a70:	2300      	movne	r3, #0
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	461a      	mov	r2, r3
 8007a76:	79fb      	ldrb	r3, [r7, #7]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d0a0      	beq.n	80079be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a7c:	2300      	movs	r3, #0
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3710      	adds	r7, #16
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}

08007a86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a86:	b480      	push	{r7}
 8007a88:	b095      	sub	sp, #84	@ 0x54
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a96:	e853 3f00 	ldrex	r3, [r3]
 8007a9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007aa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007aac:	643b      	str	r3, [r7, #64]	@ 0x40
 8007aae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ab2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ab4:	e841 2300 	strex	r3, r2, [r1]
 8007ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d1e6      	bne.n	8007a8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	3308      	adds	r3, #8
 8007ac6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac8:	6a3b      	ldr	r3, [r7, #32]
 8007aca:	e853 3f00 	ldrex	r3, [r3]
 8007ace:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ad6:	f023 0301 	bic.w	r3, r3, #1
 8007ada:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	3308      	adds	r3, #8
 8007ae2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ae4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007aea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007aec:	e841 2300 	strex	r3, r2, [r1]
 8007af0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d1e3      	bne.n	8007ac0 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d118      	bne.n	8007b32 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	e853 3f00 	ldrex	r3, [r3]
 8007b0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	f023 0310 	bic.w	r3, r3, #16
 8007b14:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b1e:	61bb      	str	r3, [r7, #24]
 8007b20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b22:	6979      	ldr	r1, [r7, #20]
 8007b24:	69ba      	ldr	r2, [r7, #24]
 8007b26:	e841 2300 	strex	r3, r2, [r1]
 8007b2a:	613b      	str	r3, [r7, #16]
   return(result);
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d1e6      	bne.n	8007b00 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2220      	movs	r2, #32
 8007b36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007b46:	bf00      	nop
 8007b48:	3754      	adds	r7, #84	@ 0x54
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr

08007b52 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007b52:	b480      	push	{r7}
 8007b54:	b085      	sub	sp, #20
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d101      	bne.n	8007b68 <HAL_UARTEx_DisableFifoMode+0x16>
 8007b64:	2302      	movs	r3, #2
 8007b66:	e027      	b.n	8007bb8 <HAL_UARTEx_DisableFifoMode+0x66>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2224      	movs	r2, #36	@ 0x24
 8007b74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f022 0201 	bic.w	r2, r2, #1
 8007b8e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007b96:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2220      	movs	r2, #32
 8007baa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3714      	adds	r7, #20
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d101      	bne.n	8007bdc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007bd8:	2302      	movs	r3, #2
 8007bda:	e02d      	b.n	8007c38 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2224      	movs	r2, #36	@ 0x24
 8007be8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f022 0201 	bic.w	r2, r2, #1
 8007c02:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	683a      	ldr	r2, [r7, #0]
 8007c14:	430a      	orrs	r2, r1
 8007c16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f84f 	bl	8007cbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2220      	movs	r2, #32
 8007c2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c36:	2300      	movs	r3, #0
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3710      	adds	r7, #16
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d101      	bne.n	8007c58 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007c54:	2302      	movs	r3, #2
 8007c56:	e02d      	b.n	8007cb4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2224      	movs	r2, #36	@ 0x24
 8007c64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f022 0201 	bic.w	r2, r2, #1
 8007c7e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	683a      	ldr	r2, [r7, #0]
 8007c90:	430a      	orrs	r2, r1
 8007c92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 f811 	bl	8007cbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2220      	movs	r2, #32
 8007ca6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b085      	sub	sp, #20
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d108      	bne.n	8007cde <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007cdc:	e031      	b.n	8007d42 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007cde:	2308      	movs	r3, #8
 8007ce0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007ce2:	2308      	movs	r3, #8
 8007ce4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	0e5b      	lsrs	r3, r3, #25
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	f003 0307 	and.w	r3, r3, #7
 8007cf4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	0f5b      	lsrs	r3, r3, #29
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	f003 0307 	and.w	r3, r3, #7
 8007d04:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d06:	7bbb      	ldrb	r3, [r7, #14]
 8007d08:	7b3a      	ldrb	r2, [r7, #12]
 8007d0a:	4911      	ldr	r1, [pc, #68]	@ (8007d50 <UARTEx_SetNbDataToProcess+0x94>)
 8007d0c:	5c8a      	ldrb	r2, [r1, r2]
 8007d0e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007d12:	7b3a      	ldrb	r2, [r7, #12]
 8007d14:	490f      	ldr	r1, [pc, #60]	@ (8007d54 <UARTEx_SetNbDataToProcess+0x98>)
 8007d16:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d18:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d1c:	b29a      	uxth	r2, r3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d24:	7bfb      	ldrb	r3, [r7, #15]
 8007d26:	7b7a      	ldrb	r2, [r7, #13]
 8007d28:	4909      	ldr	r1, [pc, #36]	@ (8007d50 <UARTEx_SetNbDataToProcess+0x94>)
 8007d2a:	5c8a      	ldrb	r2, [r1, r2]
 8007d2c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007d30:	7b7a      	ldrb	r2, [r7, #13]
 8007d32:	4908      	ldr	r1, [pc, #32]	@ (8007d54 <UARTEx_SetNbDataToProcess+0x98>)
 8007d34:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d36:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007d42:	bf00      	nop
 8007d44:	3714      	adds	r7, #20
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	0800ad58 	.word	0x0800ad58
 8007d54:	0800ad60 	.word	0x0800ad60

08007d58 <arm_sin_f32>:
 8007d58:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8007dd8 <arm_sin_f32+0x80>
 8007d5c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007d60:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d68:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007d6c:	d504      	bpl.n	8007d78 <arm_sin_f32+0x20>
 8007d6e:	ee17 3a90 	vmov	r3, s15
 8007d72:	3b01      	subs	r3, #1
 8007d74:	ee07 3a90 	vmov	s15, r3
 8007d78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d7c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8007ddc <arm_sin_f32+0x84>
 8007d80:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007d84:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007d88:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8007d8c:	ee17 3a90 	vmov	r3, s15
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d96:	d21a      	bcs.n	8007dce <arm_sin_f32+0x76>
 8007d98:	ee07 3a90 	vmov	s15, r3
 8007d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007da0:	1c59      	adds	r1, r3, #1
 8007da2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007da6:	4a0e      	ldr	r2, [pc, #56]	@ (8007de0 <arm_sin_f32+0x88>)
 8007da8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8007dac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007db0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8007db4:	ed93 7a00 	vldr	s14, [r3]
 8007db8:	edd2 6a00 	vldr	s13, [r2]
 8007dbc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007dc0:	ee20 0a26 	vmul.f32	s0, s0, s13
 8007dc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007dc8:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007dcc:	4770      	bx	lr
 8007dce:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007dd2:	2101      	movs	r1, #1
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	e7e6      	b.n	8007da6 <arm_sin_f32+0x4e>
 8007dd8:	3e22f983 	.word	0x3e22f983
 8007ddc:	44000000 	.word	0x44000000
 8007de0:	0800ad68 	.word	0x0800ad68

08007de4 <__cvt>:
 8007de4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007de8:	ec57 6b10 	vmov	r6, r7, d0
 8007dec:	2f00      	cmp	r7, #0
 8007dee:	460c      	mov	r4, r1
 8007df0:	4619      	mov	r1, r3
 8007df2:	463b      	mov	r3, r7
 8007df4:	bfbb      	ittet	lt
 8007df6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007dfa:	461f      	movlt	r7, r3
 8007dfc:	2300      	movge	r3, #0
 8007dfe:	232d      	movlt	r3, #45	@ 0x2d
 8007e00:	700b      	strb	r3, [r1, #0]
 8007e02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e04:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007e08:	4691      	mov	r9, r2
 8007e0a:	f023 0820 	bic.w	r8, r3, #32
 8007e0e:	bfbc      	itt	lt
 8007e10:	4632      	movlt	r2, r6
 8007e12:	4616      	movlt	r6, r2
 8007e14:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007e18:	d005      	beq.n	8007e26 <__cvt+0x42>
 8007e1a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007e1e:	d100      	bne.n	8007e22 <__cvt+0x3e>
 8007e20:	3401      	adds	r4, #1
 8007e22:	2102      	movs	r1, #2
 8007e24:	e000      	b.n	8007e28 <__cvt+0x44>
 8007e26:	2103      	movs	r1, #3
 8007e28:	ab03      	add	r3, sp, #12
 8007e2a:	9301      	str	r3, [sp, #4]
 8007e2c:	ab02      	add	r3, sp, #8
 8007e2e:	9300      	str	r3, [sp, #0]
 8007e30:	ec47 6b10 	vmov	d0, r6, r7
 8007e34:	4653      	mov	r3, sl
 8007e36:	4622      	mov	r2, r4
 8007e38:	f000 fe82 	bl	8008b40 <_dtoa_r>
 8007e3c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007e40:	4605      	mov	r5, r0
 8007e42:	d119      	bne.n	8007e78 <__cvt+0x94>
 8007e44:	f019 0f01 	tst.w	r9, #1
 8007e48:	d00e      	beq.n	8007e68 <__cvt+0x84>
 8007e4a:	eb00 0904 	add.w	r9, r0, r4
 8007e4e:	2200      	movs	r2, #0
 8007e50:	2300      	movs	r3, #0
 8007e52:	4630      	mov	r0, r6
 8007e54:	4639      	mov	r1, r7
 8007e56:	f7f8 fe4f 	bl	8000af8 <__aeabi_dcmpeq>
 8007e5a:	b108      	cbz	r0, 8007e60 <__cvt+0x7c>
 8007e5c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007e60:	2230      	movs	r2, #48	@ 0x30
 8007e62:	9b03      	ldr	r3, [sp, #12]
 8007e64:	454b      	cmp	r3, r9
 8007e66:	d31e      	bcc.n	8007ea6 <__cvt+0xc2>
 8007e68:	9b03      	ldr	r3, [sp, #12]
 8007e6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e6c:	1b5b      	subs	r3, r3, r5
 8007e6e:	4628      	mov	r0, r5
 8007e70:	6013      	str	r3, [r2, #0]
 8007e72:	b004      	add	sp, #16
 8007e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e78:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007e7c:	eb00 0904 	add.w	r9, r0, r4
 8007e80:	d1e5      	bne.n	8007e4e <__cvt+0x6a>
 8007e82:	7803      	ldrb	r3, [r0, #0]
 8007e84:	2b30      	cmp	r3, #48	@ 0x30
 8007e86:	d10a      	bne.n	8007e9e <__cvt+0xba>
 8007e88:	2200      	movs	r2, #0
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	4630      	mov	r0, r6
 8007e8e:	4639      	mov	r1, r7
 8007e90:	f7f8 fe32 	bl	8000af8 <__aeabi_dcmpeq>
 8007e94:	b918      	cbnz	r0, 8007e9e <__cvt+0xba>
 8007e96:	f1c4 0401 	rsb	r4, r4, #1
 8007e9a:	f8ca 4000 	str.w	r4, [sl]
 8007e9e:	f8da 3000 	ldr.w	r3, [sl]
 8007ea2:	4499      	add	r9, r3
 8007ea4:	e7d3      	b.n	8007e4e <__cvt+0x6a>
 8007ea6:	1c59      	adds	r1, r3, #1
 8007ea8:	9103      	str	r1, [sp, #12]
 8007eaa:	701a      	strb	r2, [r3, #0]
 8007eac:	e7d9      	b.n	8007e62 <__cvt+0x7e>

08007eae <__exponent>:
 8007eae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007eb0:	2900      	cmp	r1, #0
 8007eb2:	bfba      	itte	lt
 8007eb4:	4249      	neglt	r1, r1
 8007eb6:	232d      	movlt	r3, #45	@ 0x2d
 8007eb8:	232b      	movge	r3, #43	@ 0x2b
 8007eba:	2909      	cmp	r1, #9
 8007ebc:	7002      	strb	r2, [r0, #0]
 8007ebe:	7043      	strb	r3, [r0, #1]
 8007ec0:	dd29      	ble.n	8007f16 <__exponent+0x68>
 8007ec2:	f10d 0307 	add.w	r3, sp, #7
 8007ec6:	461d      	mov	r5, r3
 8007ec8:	270a      	movs	r7, #10
 8007eca:	461a      	mov	r2, r3
 8007ecc:	fbb1 f6f7 	udiv	r6, r1, r7
 8007ed0:	fb07 1416 	mls	r4, r7, r6, r1
 8007ed4:	3430      	adds	r4, #48	@ 0x30
 8007ed6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007eda:	460c      	mov	r4, r1
 8007edc:	2c63      	cmp	r4, #99	@ 0x63
 8007ede:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007ee2:	4631      	mov	r1, r6
 8007ee4:	dcf1      	bgt.n	8007eca <__exponent+0x1c>
 8007ee6:	3130      	adds	r1, #48	@ 0x30
 8007ee8:	1e94      	subs	r4, r2, #2
 8007eea:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007eee:	1c41      	adds	r1, r0, #1
 8007ef0:	4623      	mov	r3, r4
 8007ef2:	42ab      	cmp	r3, r5
 8007ef4:	d30a      	bcc.n	8007f0c <__exponent+0x5e>
 8007ef6:	f10d 0309 	add.w	r3, sp, #9
 8007efa:	1a9b      	subs	r3, r3, r2
 8007efc:	42ac      	cmp	r4, r5
 8007efe:	bf88      	it	hi
 8007f00:	2300      	movhi	r3, #0
 8007f02:	3302      	adds	r3, #2
 8007f04:	4403      	add	r3, r0
 8007f06:	1a18      	subs	r0, r3, r0
 8007f08:	b003      	add	sp, #12
 8007f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f0c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007f10:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007f14:	e7ed      	b.n	8007ef2 <__exponent+0x44>
 8007f16:	2330      	movs	r3, #48	@ 0x30
 8007f18:	3130      	adds	r1, #48	@ 0x30
 8007f1a:	7083      	strb	r3, [r0, #2]
 8007f1c:	70c1      	strb	r1, [r0, #3]
 8007f1e:	1d03      	adds	r3, r0, #4
 8007f20:	e7f1      	b.n	8007f06 <__exponent+0x58>
	...

08007f24 <_printf_float>:
 8007f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f28:	b08d      	sub	sp, #52	@ 0x34
 8007f2a:	460c      	mov	r4, r1
 8007f2c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007f30:	4616      	mov	r6, r2
 8007f32:	461f      	mov	r7, r3
 8007f34:	4605      	mov	r5, r0
 8007f36:	f000 fd2b 	bl	8008990 <_localeconv_r>
 8007f3a:	6803      	ldr	r3, [r0, #0]
 8007f3c:	9304      	str	r3, [sp, #16]
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7f8 f9ae 	bl	80002a0 <strlen>
 8007f44:	2300      	movs	r3, #0
 8007f46:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f48:	f8d8 3000 	ldr.w	r3, [r8]
 8007f4c:	9005      	str	r0, [sp, #20]
 8007f4e:	3307      	adds	r3, #7
 8007f50:	f023 0307 	bic.w	r3, r3, #7
 8007f54:	f103 0208 	add.w	r2, r3, #8
 8007f58:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007f5c:	f8d4 b000 	ldr.w	fp, [r4]
 8007f60:	f8c8 2000 	str.w	r2, [r8]
 8007f64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f68:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007f6c:	9307      	str	r3, [sp, #28]
 8007f6e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007f72:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007f76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f7a:	4b9c      	ldr	r3, [pc, #624]	@ (80081ec <_printf_float+0x2c8>)
 8007f7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f80:	f7f8 fdec 	bl	8000b5c <__aeabi_dcmpun>
 8007f84:	bb70      	cbnz	r0, 8007fe4 <_printf_float+0xc0>
 8007f86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f8a:	4b98      	ldr	r3, [pc, #608]	@ (80081ec <_printf_float+0x2c8>)
 8007f8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f90:	f7f8 fdc6 	bl	8000b20 <__aeabi_dcmple>
 8007f94:	bb30      	cbnz	r0, 8007fe4 <_printf_float+0xc0>
 8007f96:	2200      	movs	r2, #0
 8007f98:	2300      	movs	r3, #0
 8007f9a:	4640      	mov	r0, r8
 8007f9c:	4649      	mov	r1, r9
 8007f9e:	f7f8 fdb5 	bl	8000b0c <__aeabi_dcmplt>
 8007fa2:	b110      	cbz	r0, 8007faa <_printf_float+0x86>
 8007fa4:	232d      	movs	r3, #45	@ 0x2d
 8007fa6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007faa:	4a91      	ldr	r2, [pc, #580]	@ (80081f0 <_printf_float+0x2cc>)
 8007fac:	4b91      	ldr	r3, [pc, #580]	@ (80081f4 <_printf_float+0x2d0>)
 8007fae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007fb2:	bf94      	ite	ls
 8007fb4:	4690      	movls	r8, r2
 8007fb6:	4698      	movhi	r8, r3
 8007fb8:	2303      	movs	r3, #3
 8007fba:	6123      	str	r3, [r4, #16]
 8007fbc:	f02b 0304 	bic.w	r3, fp, #4
 8007fc0:	6023      	str	r3, [r4, #0]
 8007fc2:	f04f 0900 	mov.w	r9, #0
 8007fc6:	9700      	str	r7, [sp, #0]
 8007fc8:	4633      	mov	r3, r6
 8007fca:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007fcc:	4621      	mov	r1, r4
 8007fce:	4628      	mov	r0, r5
 8007fd0:	f000 f9d2 	bl	8008378 <_printf_common>
 8007fd4:	3001      	adds	r0, #1
 8007fd6:	f040 808d 	bne.w	80080f4 <_printf_float+0x1d0>
 8007fda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007fde:	b00d      	add	sp, #52	@ 0x34
 8007fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fe4:	4642      	mov	r2, r8
 8007fe6:	464b      	mov	r3, r9
 8007fe8:	4640      	mov	r0, r8
 8007fea:	4649      	mov	r1, r9
 8007fec:	f7f8 fdb6 	bl	8000b5c <__aeabi_dcmpun>
 8007ff0:	b140      	cbz	r0, 8008004 <_printf_float+0xe0>
 8007ff2:	464b      	mov	r3, r9
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	bfbc      	itt	lt
 8007ff8:	232d      	movlt	r3, #45	@ 0x2d
 8007ffa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007ffe:	4a7e      	ldr	r2, [pc, #504]	@ (80081f8 <_printf_float+0x2d4>)
 8008000:	4b7e      	ldr	r3, [pc, #504]	@ (80081fc <_printf_float+0x2d8>)
 8008002:	e7d4      	b.n	8007fae <_printf_float+0x8a>
 8008004:	6863      	ldr	r3, [r4, #4]
 8008006:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800800a:	9206      	str	r2, [sp, #24]
 800800c:	1c5a      	adds	r2, r3, #1
 800800e:	d13b      	bne.n	8008088 <_printf_float+0x164>
 8008010:	2306      	movs	r3, #6
 8008012:	6063      	str	r3, [r4, #4]
 8008014:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008018:	2300      	movs	r3, #0
 800801a:	6022      	str	r2, [r4, #0]
 800801c:	9303      	str	r3, [sp, #12]
 800801e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008020:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008024:	ab09      	add	r3, sp, #36	@ 0x24
 8008026:	9300      	str	r3, [sp, #0]
 8008028:	6861      	ldr	r1, [r4, #4]
 800802a:	ec49 8b10 	vmov	d0, r8, r9
 800802e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008032:	4628      	mov	r0, r5
 8008034:	f7ff fed6 	bl	8007de4 <__cvt>
 8008038:	9b06      	ldr	r3, [sp, #24]
 800803a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800803c:	2b47      	cmp	r3, #71	@ 0x47
 800803e:	4680      	mov	r8, r0
 8008040:	d129      	bne.n	8008096 <_printf_float+0x172>
 8008042:	1cc8      	adds	r0, r1, #3
 8008044:	db02      	blt.n	800804c <_printf_float+0x128>
 8008046:	6863      	ldr	r3, [r4, #4]
 8008048:	4299      	cmp	r1, r3
 800804a:	dd41      	ble.n	80080d0 <_printf_float+0x1ac>
 800804c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008050:	fa5f fa8a 	uxtb.w	sl, sl
 8008054:	3901      	subs	r1, #1
 8008056:	4652      	mov	r2, sl
 8008058:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800805c:	9109      	str	r1, [sp, #36]	@ 0x24
 800805e:	f7ff ff26 	bl	8007eae <__exponent>
 8008062:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008064:	1813      	adds	r3, r2, r0
 8008066:	2a01      	cmp	r2, #1
 8008068:	4681      	mov	r9, r0
 800806a:	6123      	str	r3, [r4, #16]
 800806c:	dc02      	bgt.n	8008074 <_printf_float+0x150>
 800806e:	6822      	ldr	r2, [r4, #0]
 8008070:	07d2      	lsls	r2, r2, #31
 8008072:	d501      	bpl.n	8008078 <_printf_float+0x154>
 8008074:	3301      	adds	r3, #1
 8008076:	6123      	str	r3, [r4, #16]
 8008078:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800807c:	2b00      	cmp	r3, #0
 800807e:	d0a2      	beq.n	8007fc6 <_printf_float+0xa2>
 8008080:	232d      	movs	r3, #45	@ 0x2d
 8008082:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008086:	e79e      	b.n	8007fc6 <_printf_float+0xa2>
 8008088:	9a06      	ldr	r2, [sp, #24]
 800808a:	2a47      	cmp	r2, #71	@ 0x47
 800808c:	d1c2      	bne.n	8008014 <_printf_float+0xf0>
 800808e:	2b00      	cmp	r3, #0
 8008090:	d1c0      	bne.n	8008014 <_printf_float+0xf0>
 8008092:	2301      	movs	r3, #1
 8008094:	e7bd      	b.n	8008012 <_printf_float+0xee>
 8008096:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800809a:	d9db      	bls.n	8008054 <_printf_float+0x130>
 800809c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80080a0:	d118      	bne.n	80080d4 <_printf_float+0x1b0>
 80080a2:	2900      	cmp	r1, #0
 80080a4:	6863      	ldr	r3, [r4, #4]
 80080a6:	dd0b      	ble.n	80080c0 <_printf_float+0x19c>
 80080a8:	6121      	str	r1, [r4, #16]
 80080aa:	b913      	cbnz	r3, 80080b2 <_printf_float+0x18e>
 80080ac:	6822      	ldr	r2, [r4, #0]
 80080ae:	07d0      	lsls	r0, r2, #31
 80080b0:	d502      	bpl.n	80080b8 <_printf_float+0x194>
 80080b2:	3301      	adds	r3, #1
 80080b4:	440b      	add	r3, r1
 80080b6:	6123      	str	r3, [r4, #16]
 80080b8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80080ba:	f04f 0900 	mov.w	r9, #0
 80080be:	e7db      	b.n	8008078 <_printf_float+0x154>
 80080c0:	b913      	cbnz	r3, 80080c8 <_printf_float+0x1a4>
 80080c2:	6822      	ldr	r2, [r4, #0]
 80080c4:	07d2      	lsls	r2, r2, #31
 80080c6:	d501      	bpl.n	80080cc <_printf_float+0x1a8>
 80080c8:	3302      	adds	r3, #2
 80080ca:	e7f4      	b.n	80080b6 <_printf_float+0x192>
 80080cc:	2301      	movs	r3, #1
 80080ce:	e7f2      	b.n	80080b6 <_printf_float+0x192>
 80080d0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80080d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080d6:	4299      	cmp	r1, r3
 80080d8:	db05      	blt.n	80080e6 <_printf_float+0x1c2>
 80080da:	6823      	ldr	r3, [r4, #0]
 80080dc:	6121      	str	r1, [r4, #16]
 80080de:	07d8      	lsls	r0, r3, #31
 80080e0:	d5ea      	bpl.n	80080b8 <_printf_float+0x194>
 80080e2:	1c4b      	adds	r3, r1, #1
 80080e4:	e7e7      	b.n	80080b6 <_printf_float+0x192>
 80080e6:	2900      	cmp	r1, #0
 80080e8:	bfd4      	ite	le
 80080ea:	f1c1 0202 	rsble	r2, r1, #2
 80080ee:	2201      	movgt	r2, #1
 80080f0:	4413      	add	r3, r2
 80080f2:	e7e0      	b.n	80080b6 <_printf_float+0x192>
 80080f4:	6823      	ldr	r3, [r4, #0]
 80080f6:	055a      	lsls	r2, r3, #21
 80080f8:	d407      	bmi.n	800810a <_printf_float+0x1e6>
 80080fa:	6923      	ldr	r3, [r4, #16]
 80080fc:	4642      	mov	r2, r8
 80080fe:	4631      	mov	r1, r6
 8008100:	4628      	mov	r0, r5
 8008102:	47b8      	blx	r7
 8008104:	3001      	adds	r0, #1
 8008106:	d12b      	bne.n	8008160 <_printf_float+0x23c>
 8008108:	e767      	b.n	8007fda <_printf_float+0xb6>
 800810a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800810e:	f240 80dd 	bls.w	80082cc <_printf_float+0x3a8>
 8008112:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008116:	2200      	movs	r2, #0
 8008118:	2300      	movs	r3, #0
 800811a:	f7f8 fced 	bl	8000af8 <__aeabi_dcmpeq>
 800811e:	2800      	cmp	r0, #0
 8008120:	d033      	beq.n	800818a <_printf_float+0x266>
 8008122:	4a37      	ldr	r2, [pc, #220]	@ (8008200 <_printf_float+0x2dc>)
 8008124:	2301      	movs	r3, #1
 8008126:	4631      	mov	r1, r6
 8008128:	4628      	mov	r0, r5
 800812a:	47b8      	blx	r7
 800812c:	3001      	adds	r0, #1
 800812e:	f43f af54 	beq.w	8007fda <_printf_float+0xb6>
 8008132:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008136:	4543      	cmp	r3, r8
 8008138:	db02      	blt.n	8008140 <_printf_float+0x21c>
 800813a:	6823      	ldr	r3, [r4, #0]
 800813c:	07d8      	lsls	r0, r3, #31
 800813e:	d50f      	bpl.n	8008160 <_printf_float+0x23c>
 8008140:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008144:	4631      	mov	r1, r6
 8008146:	4628      	mov	r0, r5
 8008148:	47b8      	blx	r7
 800814a:	3001      	adds	r0, #1
 800814c:	f43f af45 	beq.w	8007fda <_printf_float+0xb6>
 8008150:	f04f 0900 	mov.w	r9, #0
 8008154:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008158:	f104 0a1a 	add.w	sl, r4, #26
 800815c:	45c8      	cmp	r8, r9
 800815e:	dc09      	bgt.n	8008174 <_printf_float+0x250>
 8008160:	6823      	ldr	r3, [r4, #0]
 8008162:	079b      	lsls	r3, r3, #30
 8008164:	f100 8103 	bmi.w	800836e <_printf_float+0x44a>
 8008168:	68e0      	ldr	r0, [r4, #12]
 800816a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800816c:	4298      	cmp	r0, r3
 800816e:	bfb8      	it	lt
 8008170:	4618      	movlt	r0, r3
 8008172:	e734      	b.n	8007fde <_printf_float+0xba>
 8008174:	2301      	movs	r3, #1
 8008176:	4652      	mov	r2, sl
 8008178:	4631      	mov	r1, r6
 800817a:	4628      	mov	r0, r5
 800817c:	47b8      	blx	r7
 800817e:	3001      	adds	r0, #1
 8008180:	f43f af2b 	beq.w	8007fda <_printf_float+0xb6>
 8008184:	f109 0901 	add.w	r9, r9, #1
 8008188:	e7e8      	b.n	800815c <_printf_float+0x238>
 800818a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800818c:	2b00      	cmp	r3, #0
 800818e:	dc39      	bgt.n	8008204 <_printf_float+0x2e0>
 8008190:	4a1b      	ldr	r2, [pc, #108]	@ (8008200 <_printf_float+0x2dc>)
 8008192:	2301      	movs	r3, #1
 8008194:	4631      	mov	r1, r6
 8008196:	4628      	mov	r0, r5
 8008198:	47b8      	blx	r7
 800819a:	3001      	adds	r0, #1
 800819c:	f43f af1d 	beq.w	8007fda <_printf_float+0xb6>
 80081a0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80081a4:	ea59 0303 	orrs.w	r3, r9, r3
 80081a8:	d102      	bne.n	80081b0 <_printf_float+0x28c>
 80081aa:	6823      	ldr	r3, [r4, #0]
 80081ac:	07d9      	lsls	r1, r3, #31
 80081ae:	d5d7      	bpl.n	8008160 <_printf_float+0x23c>
 80081b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081b4:	4631      	mov	r1, r6
 80081b6:	4628      	mov	r0, r5
 80081b8:	47b8      	blx	r7
 80081ba:	3001      	adds	r0, #1
 80081bc:	f43f af0d 	beq.w	8007fda <_printf_float+0xb6>
 80081c0:	f04f 0a00 	mov.w	sl, #0
 80081c4:	f104 0b1a 	add.w	fp, r4, #26
 80081c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081ca:	425b      	negs	r3, r3
 80081cc:	4553      	cmp	r3, sl
 80081ce:	dc01      	bgt.n	80081d4 <_printf_float+0x2b0>
 80081d0:	464b      	mov	r3, r9
 80081d2:	e793      	b.n	80080fc <_printf_float+0x1d8>
 80081d4:	2301      	movs	r3, #1
 80081d6:	465a      	mov	r2, fp
 80081d8:	4631      	mov	r1, r6
 80081da:	4628      	mov	r0, r5
 80081dc:	47b8      	blx	r7
 80081de:	3001      	adds	r0, #1
 80081e0:	f43f aefb 	beq.w	8007fda <_printf_float+0xb6>
 80081e4:	f10a 0a01 	add.w	sl, sl, #1
 80081e8:	e7ee      	b.n	80081c8 <_printf_float+0x2a4>
 80081ea:	bf00      	nop
 80081ec:	7fefffff 	.word	0x7fefffff
 80081f0:	0800b56c 	.word	0x0800b56c
 80081f4:	0800b570 	.word	0x0800b570
 80081f8:	0800b574 	.word	0x0800b574
 80081fc:	0800b578 	.word	0x0800b578
 8008200:	0800b57c 	.word	0x0800b57c
 8008204:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008206:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800820a:	4553      	cmp	r3, sl
 800820c:	bfa8      	it	ge
 800820e:	4653      	movge	r3, sl
 8008210:	2b00      	cmp	r3, #0
 8008212:	4699      	mov	r9, r3
 8008214:	dc36      	bgt.n	8008284 <_printf_float+0x360>
 8008216:	f04f 0b00 	mov.w	fp, #0
 800821a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800821e:	f104 021a 	add.w	r2, r4, #26
 8008222:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008224:	9306      	str	r3, [sp, #24]
 8008226:	eba3 0309 	sub.w	r3, r3, r9
 800822a:	455b      	cmp	r3, fp
 800822c:	dc31      	bgt.n	8008292 <_printf_float+0x36e>
 800822e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008230:	459a      	cmp	sl, r3
 8008232:	dc3a      	bgt.n	80082aa <_printf_float+0x386>
 8008234:	6823      	ldr	r3, [r4, #0]
 8008236:	07da      	lsls	r2, r3, #31
 8008238:	d437      	bmi.n	80082aa <_printf_float+0x386>
 800823a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800823c:	ebaa 0903 	sub.w	r9, sl, r3
 8008240:	9b06      	ldr	r3, [sp, #24]
 8008242:	ebaa 0303 	sub.w	r3, sl, r3
 8008246:	4599      	cmp	r9, r3
 8008248:	bfa8      	it	ge
 800824a:	4699      	movge	r9, r3
 800824c:	f1b9 0f00 	cmp.w	r9, #0
 8008250:	dc33      	bgt.n	80082ba <_printf_float+0x396>
 8008252:	f04f 0800 	mov.w	r8, #0
 8008256:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800825a:	f104 0b1a 	add.w	fp, r4, #26
 800825e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008260:	ebaa 0303 	sub.w	r3, sl, r3
 8008264:	eba3 0309 	sub.w	r3, r3, r9
 8008268:	4543      	cmp	r3, r8
 800826a:	f77f af79 	ble.w	8008160 <_printf_float+0x23c>
 800826e:	2301      	movs	r3, #1
 8008270:	465a      	mov	r2, fp
 8008272:	4631      	mov	r1, r6
 8008274:	4628      	mov	r0, r5
 8008276:	47b8      	blx	r7
 8008278:	3001      	adds	r0, #1
 800827a:	f43f aeae 	beq.w	8007fda <_printf_float+0xb6>
 800827e:	f108 0801 	add.w	r8, r8, #1
 8008282:	e7ec      	b.n	800825e <_printf_float+0x33a>
 8008284:	4642      	mov	r2, r8
 8008286:	4631      	mov	r1, r6
 8008288:	4628      	mov	r0, r5
 800828a:	47b8      	blx	r7
 800828c:	3001      	adds	r0, #1
 800828e:	d1c2      	bne.n	8008216 <_printf_float+0x2f2>
 8008290:	e6a3      	b.n	8007fda <_printf_float+0xb6>
 8008292:	2301      	movs	r3, #1
 8008294:	4631      	mov	r1, r6
 8008296:	4628      	mov	r0, r5
 8008298:	9206      	str	r2, [sp, #24]
 800829a:	47b8      	blx	r7
 800829c:	3001      	adds	r0, #1
 800829e:	f43f ae9c 	beq.w	8007fda <_printf_float+0xb6>
 80082a2:	9a06      	ldr	r2, [sp, #24]
 80082a4:	f10b 0b01 	add.w	fp, fp, #1
 80082a8:	e7bb      	b.n	8008222 <_printf_float+0x2fe>
 80082aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082ae:	4631      	mov	r1, r6
 80082b0:	4628      	mov	r0, r5
 80082b2:	47b8      	blx	r7
 80082b4:	3001      	adds	r0, #1
 80082b6:	d1c0      	bne.n	800823a <_printf_float+0x316>
 80082b8:	e68f      	b.n	8007fda <_printf_float+0xb6>
 80082ba:	9a06      	ldr	r2, [sp, #24]
 80082bc:	464b      	mov	r3, r9
 80082be:	4442      	add	r2, r8
 80082c0:	4631      	mov	r1, r6
 80082c2:	4628      	mov	r0, r5
 80082c4:	47b8      	blx	r7
 80082c6:	3001      	adds	r0, #1
 80082c8:	d1c3      	bne.n	8008252 <_printf_float+0x32e>
 80082ca:	e686      	b.n	8007fda <_printf_float+0xb6>
 80082cc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80082d0:	f1ba 0f01 	cmp.w	sl, #1
 80082d4:	dc01      	bgt.n	80082da <_printf_float+0x3b6>
 80082d6:	07db      	lsls	r3, r3, #31
 80082d8:	d536      	bpl.n	8008348 <_printf_float+0x424>
 80082da:	2301      	movs	r3, #1
 80082dc:	4642      	mov	r2, r8
 80082de:	4631      	mov	r1, r6
 80082e0:	4628      	mov	r0, r5
 80082e2:	47b8      	blx	r7
 80082e4:	3001      	adds	r0, #1
 80082e6:	f43f ae78 	beq.w	8007fda <_printf_float+0xb6>
 80082ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082ee:	4631      	mov	r1, r6
 80082f0:	4628      	mov	r0, r5
 80082f2:	47b8      	blx	r7
 80082f4:	3001      	adds	r0, #1
 80082f6:	f43f ae70 	beq.w	8007fda <_printf_float+0xb6>
 80082fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80082fe:	2200      	movs	r2, #0
 8008300:	2300      	movs	r3, #0
 8008302:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008306:	f7f8 fbf7 	bl	8000af8 <__aeabi_dcmpeq>
 800830a:	b9c0      	cbnz	r0, 800833e <_printf_float+0x41a>
 800830c:	4653      	mov	r3, sl
 800830e:	f108 0201 	add.w	r2, r8, #1
 8008312:	4631      	mov	r1, r6
 8008314:	4628      	mov	r0, r5
 8008316:	47b8      	blx	r7
 8008318:	3001      	adds	r0, #1
 800831a:	d10c      	bne.n	8008336 <_printf_float+0x412>
 800831c:	e65d      	b.n	8007fda <_printf_float+0xb6>
 800831e:	2301      	movs	r3, #1
 8008320:	465a      	mov	r2, fp
 8008322:	4631      	mov	r1, r6
 8008324:	4628      	mov	r0, r5
 8008326:	47b8      	blx	r7
 8008328:	3001      	adds	r0, #1
 800832a:	f43f ae56 	beq.w	8007fda <_printf_float+0xb6>
 800832e:	f108 0801 	add.w	r8, r8, #1
 8008332:	45d0      	cmp	r8, sl
 8008334:	dbf3      	blt.n	800831e <_printf_float+0x3fa>
 8008336:	464b      	mov	r3, r9
 8008338:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800833c:	e6df      	b.n	80080fe <_printf_float+0x1da>
 800833e:	f04f 0800 	mov.w	r8, #0
 8008342:	f104 0b1a 	add.w	fp, r4, #26
 8008346:	e7f4      	b.n	8008332 <_printf_float+0x40e>
 8008348:	2301      	movs	r3, #1
 800834a:	4642      	mov	r2, r8
 800834c:	e7e1      	b.n	8008312 <_printf_float+0x3ee>
 800834e:	2301      	movs	r3, #1
 8008350:	464a      	mov	r2, r9
 8008352:	4631      	mov	r1, r6
 8008354:	4628      	mov	r0, r5
 8008356:	47b8      	blx	r7
 8008358:	3001      	adds	r0, #1
 800835a:	f43f ae3e 	beq.w	8007fda <_printf_float+0xb6>
 800835e:	f108 0801 	add.w	r8, r8, #1
 8008362:	68e3      	ldr	r3, [r4, #12]
 8008364:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008366:	1a5b      	subs	r3, r3, r1
 8008368:	4543      	cmp	r3, r8
 800836a:	dcf0      	bgt.n	800834e <_printf_float+0x42a>
 800836c:	e6fc      	b.n	8008168 <_printf_float+0x244>
 800836e:	f04f 0800 	mov.w	r8, #0
 8008372:	f104 0919 	add.w	r9, r4, #25
 8008376:	e7f4      	b.n	8008362 <_printf_float+0x43e>

08008378 <_printf_common>:
 8008378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800837c:	4616      	mov	r6, r2
 800837e:	4698      	mov	r8, r3
 8008380:	688a      	ldr	r2, [r1, #8]
 8008382:	690b      	ldr	r3, [r1, #16]
 8008384:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008388:	4293      	cmp	r3, r2
 800838a:	bfb8      	it	lt
 800838c:	4613      	movlt	r3, r2
 800838e:	6033      	str	r3, [r6, #0]
 8008390:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008394:	4607      	mov	r7, r0
 8008396:	460c      	mov	r4, r1
 8008398:	b10a      	cbz	r2, 800839e <_printf_common+0x26>
 800839a:	3301      	adds	r3, #1
 800839c:	6033      	str	r3, [r6, #0]
 800839e:	6823      	ldr	r3, [r4, #0]
 80083a0:	0699      	lsls	r1, r3, #26
 80083a2:	bf42      	ittt	mi
 80083a4:	6833      	ldrmi	r3, [r6, #0]
 80083a6:	3302      	addmi	r3, #2
 80083a8:	6033      	strmi	r3, [r6, #0]
 80083aa:	6825      	ldr	r5, [r4, #0]
 80083ac:	f015 0506 	ands.w	r5, r5, #6
 80083b0:	d106      	bne.n	80083c0 <_printf_common+0x48>
 80083b2:	f104 0a19 	add.w	sl, r4, #25
 80083b6:	68e3      	ldr	r3, [r4, #12]
 80083b8:	6832      	ldr	r2, [r6, #0]
 80083ba:	1a9b      	subs	r3, r3, r2
 80083bc:	42ab      	cmp	r3, r5
 80083be:	dc26      	bgt.n	800840e <_printf_common+0x96>
 80083c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80083c4:	6822      	ldr	r2, [r4, #0]
 80083c6:	3b00      	subs	r3, #0
 80083c8:	bf18      	it	ne
 80083ca:	2301      	movne	r3, #1
 80083cc:	0692      	lsls	r2, r2, #26
 80083ce:	d42b      	bmi.n	8008428 <_printf_common+0xb0>
 80083d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80083d4:	4641      	mov	r1, r8
 80083d6:	4638      	mov	r0, r7
 80083d8:	47c8      	blx	r9
 80083da:	3001      	adds	r0, #1
 80083dc:	d01e      	beq.n	800841c <_printf_common+0xa4>
 80083de:	6823      	ldr	r3, [r4, #0]
 80083e0:	6922      	ldr	r2, [r4, #16]
 80083e2:	f003 0306 	and.w	r3, r3, #6
 80083e6:	2b04      	cmp	r3, #4
 80083e8:	bf02      	ittt	eq
 80083ea:	68e5      	ldreq	r5, [r4, #12]
 80083ec:	6833      	ldreq	r3, [r6, #0]
 80083ee:	1aed      	subeq	r5, r5, r3
 80083f0:	68a3      	ldr	r3, [r4, #8]
 80083f2:	bf0c      	ite	eq
 80083f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083f8:	2500      	movne	r5, #0
 80083fa:	4293      	cmp	r3, r2
 80083fc:	bfc4      	itt	gt
 80083fe:	1a9b      	subgt	r3, r3, r2
 8008400:	18ed      	addgt	r5, r5, r3
 8008402:	2600      	movs	r6, #0
 8008404:	341a      	adds	r4, #26
 8008406:	42b5      	cmp	r5, r6
 8008408:	d11a      	bne.n	8008440 <_printf_common+0xc8>
 800840a:	2000      	movs	r0, #0
 800840c:	e008      	b.n	8008420 <_printf_common+0xa8>
 800840e:	2301      	movs	r3, #1
 8008410:	4652      	mov	r2, sl
 8008412:	4641      	mov	r1, r8
 8008414:	4638      	mov	r0, r7
 8008416:	47c8      	blx	r9
 8008418:	3001      	adds	r0, #1
 800841a:	d103      	bne.n	8008424 <_printf_common+0xac>
 800841c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008424:	3501      	adds	r5, #1
 8008426:	e7c6      	b.n	80083b6 <_printf_common+0x3e>
 8008428:	18e1      	adds	r1, r4, r3
 800842a:	1c5a      	adds	r2, r3, #1
 800842c:	2030      	movs	r0, #48	@ 0x30
 800842e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008432:	4422      	add	r2, r4
 8008434:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008438:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800843c:	3302      	adds	r3, #2
 800843e:	e7c7      	b.n	80083d0 <_printf_common+0x58>
 8008440:	2301      	movs	r3, #1
 8008442:	4622      	mov	r2, r4
 8008444:	4641      	mov	r1, r8
 8008446:	4638      	mov	r0, r7
 8008448:	47c8      	blx	r9
 800844a:	3001      	adds	r0, #1
 800844c:	d0e6      	beq.n	800841c <_printf_common+0xa4>
 800844e:	3601      	adds	r6, #1
 8008450:	e7d9      	b.n	8008406 <_printf_common+0x8e>
	...

08008454 <_printf_i>:
 8008454:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008458:	7e0f      	ldrb	r7, [r1, #24]
 800845a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800845c:	2f78      	cmp	r7, #120	@ 0x78
 800845e:	4691      	mov	r9, r2
 8008460:	4680      	mov	r8, r0
 8008462:	460c      	mov	r4, r1
 8008464:	469a      	mov	sl, r3
 8008466:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800846a:	d807      	bhi.n	800847c <_printf_i+0x28>
 800846c:	2f62      	cmp	r7, #98	@ 0x62
 800846e:	d80a      	bhi.n	8008486 <_printf_i+0x32>
 8008470:	2f00      	cmp	r7, #0
 8008472:	f000 80d2 	beq.w	800861a <_printf_i+0x1c6>
 8008476:	2f58      	cmp	r7, #88	@ 0x58
 8008478:	f000 80b9 	beq.w	80085ee <_printf_i+0x19a>
 800847c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008480:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008484:	e03a      	b.n	80084fc <_printf_i+0xa8>
 8008486:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800848a:	2b15      	cmp	r3, #21
 800848c:	d8f6      	bhi.n	800847c <_printf_i+0x28>
 800848e:	a101      	add	r1, pc, #4	@ (adr r1, 8008494 <_printf_i+0x40>)
 8008490:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008494:	080084ed 	.word	0x080084ed
 8008498:	08008501 	.word	0x08008501
 800849c:	0800847d 	.word	0x0800847d
 80084a0:	0800847d 	.word	0x0800847d
 80084a4:	0800847d 	.word	0x0800847d
 80084a8:	0800847d 	.word	0x0800847d
 80084ac:	08008501 	.word	0x08008501
 80084b0:	0800847d 	.word	0x0800847d
 80084b4:	0800847d 	.word	0x0800847d
 80084b8:	0800847d 	.word	0x0800847d
 80084bc:	0800847d 	.word	0x0800847d
 80084c0:	08008601 	.word	0x08008601
 80084c4:	0800852b 	.word	0x0800852b
 80084c8:	080085bb 	.word	0x080085bb
 80084cc:	0800847d 	.word	0x0800847d
 80084d0:	0800847d 	.word	0x0800847d
 80084d4:	08008623 	.word	0x08008623
 80084d8:	0800847d 	.word	0x0800847d
 80084dc:	0800852b 	.word	0x0800852b
 80084e0:	0800847d 	.word	0x0800847d
 80084e4:	0800847d 	.word	0x0800847d
 80084e8:	080085c3 	.word	0x080085c3
 80084ec:	6833      	ldr	r3, [r6, #0]
 80084ee:	1d1a      	adds	r2, r3, #4
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	6032      	str	r2, [r6, #0]
 80084f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80084fc:	2301      	movs	r3, #1
 80084fe:	e09d      	b.n	800863c <_printf_i+0x1e8>
 8008500:	6833      	ldr	r3, [r6, #0]
 8008502:	6820      	ldr	r0, [r4, #0]
 8008504:	1d19      	adds	r1, r3, #4
 8008506:	6031      	str	r1, [r6, #0]
 8008508:	0606      	lsls	r6, r0, #24
 800850a:	d501      	bpl.n	8008510 <_printf_i+0xbc>
 800850c:	681d      	ldr	r5, [r3, #0]
 800850e:	e003      	b.n	8008518 <_printf_i+0xc4>
 8008510:	0645      	lsls	r5, r0, #25
 8008512:	d5fb      	bpl.n	800850c <_printf_i+0xb8>
 8008514:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008518:	2d00      	cmp	r5, #0
 800851a:	da03      	bge.n	8008524 <_printf_i+0xd0>
 800851c:	232d      	movs	r3, #45	@ 0x2d
 800851e:	426d      	negs	r5, r5
 8008520:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008524:	4859      	ldr	r0, [pc, #356]	@ (800868c <_printf_i+0x238>)
 8008526:	230a      	movs	r3, #10
 8008528:	e011      	b.n	800854e <_printf_i+0xfa>
 800852a:	6821      	ldr	r1, [r4, #0]
 800852c:	6833      	ldr	r3, [r6, #0]
 800852e:	0608      	lsls	r0, r1, #24
 8008530:	f853 5b04 	ldr.w	r5, [r3], #4
 8008534:	d402      	bmi.n	800853c <_printf_i+0xe8>
 8008536:	0649      	lsls	r1, r1, #25
 8008538:	bf48      	it	mi
 800853a:	b2ad      	uxthmi	r5, r5
 800853c:	2f6f      	cmp	r7, #111	@ 0x6f
 800853e:	4853      	ldr	r0, [pc, #332]	@ (800868c <_printf_i+0x238>)
 8008540:	6033      	str	r3, [r6, #0]
 8008542:	bf14      	ite	ne
 8008544:	230a      	movne	r3, #10
 8008546:	2308      	moveq	r3, #8
 8008548:	2100      	movs	r1, #0
 800854a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800854e:	6866      	ldr	r6, [r4, #4]
 8008550:	60a6      	str	r6, [r4, #8]
 8008552:	2e00      	cmp	r6, #0
 8008554:	bfa2      	ittt	ge
 8008556:	6821      	ldrge	r1, [r4, #0]
 8008558:	f021 0104 	bicge.w	r1, r1, #4
 800855c:	6021      	strge	r1, [r4, #0]
 800855e:	b90d      	cbnz	r5, 8008564 <_printf_i+0x110>
 8008560:	2e00      	cmp	r6, #0
 8008562:	d04b      	beq.n	80085fc <_printf_i+0x1a8>
 8008564:	4616      	mov	r6, r2
 8008566:	fbb5 f1f3 	udiv	r1, r5, r3
 800856a:	fb03 5711 	mls	r7, r3, r1, r5
 800856e:	5dc7      	ldrb	r7, [r0, r7]
 8008570:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008574:	462f      	mov	r7, r5
 8008576:	42bb      	cmp	r3, r7
 8008578:	460d      	mov	r5, r1
 800857a:	d9f4      	bls.n	8008566 <_printf_i+0x112>
 800857c:	2b08      	cmp	r3, #8
 800857e:	d10b      	bne.n	8008598 <_printf_i+0x144>
 8008580:	6823      	ldr	r3, [r4, #0]
 8008582:	07df      	lsls	r7, r3, #31
 8008584:	d508      	bpl.n	8008598 <_printf_i+0x144>
 8008586:	6923      	ldr	r3, [r4, #16]
 8008588:	6861      	ldr	r1, [r4, #4]
 800858a:	4299      	cmp	r1, r3
 800858c:	bfde      	ittt	le
 800858e:	2330      	movle	r3, #48	@ 0x30
 8008590:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008594:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008598:	1b92      	subs	r2, r2, r6
 800859a:	6122      	str	r2, [r4, #16]
 800859c:	f8cd a000 	str.w	sl, [sp]
 80085a0:	464b      	mov	r3, r9
 80085a2:	aa03      	add	r2, sp, #12
 80085a4:	4621      	mov	r1, r4
 80085a6:	4640      	mov	r0, r8
 80085a8:	f7ff fee6 	bl	8008378 <_printf_common>
 80085ac:	3001      	adds	r0, #1
 80085ae:	d14a      	bne.n	8008646 <_printf_i+0x1f2>
 80085b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80085b4:	b004      	add	sp, #16
 80085b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085ba:	6823      	ldr	r3, [r4, #0]
 80085bc:	f043 0320 	orr.w	r3, r3, #32
 80085c0:	6023      	str	r3, [r4, #0]
 80085c2:	4833      	ldr	r0, [pc, #204]	@ (8008690 <_printf_i+0x23c>)
 80085c4:	2778      	movs	r7, #120	@ 0x78
 80085c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80085ca:	6823      	ldr	r3, [r4, #0]
 80085cc:	6831      	ldr	r1, [r6, #0]
 80085ce:	061f      	lsls	r7, r3, #24
 80085d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80085d4:	d402      	bmi.n	80085dc <_printf_i+0x188>
 80085d6:	065f      	lsls	r7, r3, #25
 80085d8:	bf48      	it	mi
 80085da:	b2ad      	uxthmi	r5, r5
 80085dc:	6031      	str	r1, [r6, #0]
 80085de:	07d9      	lsls	r1, r3, #31
 80085e0:	bf44      	itt	mi
 80085e2:	f043 0320 	orrmi.w	r3, r3, #32
 80085e6:	6023      	strmi	r3, [r4, #0]
 80085e8:	b11d      	cbz	r5, 80085f2 <_printf_i+0x19e>
 80085ea:	2310      	movs	r3, #16
 80085ec:	e7ac      	b.n	8008548 <_printf_i+0xf4>
 80085ee:	4827      	ldr	r0, [pc, #156]	@ (800868c <_printf_i+0x238>)
 80085f0:	e7e9      	b.n	80085c6 <_printf_i+0x172>
 80085f2:	6823      	ldr	r3, [r4, #0]
 80085f4:	f023 0320 	bic.w	r3, r3, #32
 80085f8:	6023      	str	r3, [r4, #0]
 80085fa:	e7f6      	b.n	80085ea <_printf_i+0x196>
 80085fc:	4616      	mov	r6, r2
 80085fe:	e7bd      	b.n	800857c <_printf_i+0x128>
 8008600:	6833      	ldr	r3, [r6, #0]
 8008602:	6825      	ldr	r5, [r4, #0]
 8008604:	6961      	ldr	r1, [r4, #20]
 8008606:	1d18      	adds	r0, r3, #4
 8008608:	6030      	str	r0, [r6, #0]
 800860a:	062e      	lsls	r6, r5, #24
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	d501      	bpl.n	8008614 <_printf_i+0x1c0>
 8008610:	6019      	str	r1, [r3, #0]
 8008612:	e002      	b.n	800861a <_printf_i+0x1c6>
 8008614:	0668      	lsls	r0, r5, #25
 8008616:	d5fb      	bpl.n	8008610 <_printf_i+0x1bc>
 8008618:	8019      	strh	r1, [r3, #0]
 800861a:	2300      	movs	r3, #0
 800861c:	6123      	str	r3, [r4, #16]
 800861e:	4616      	mov	r6, r2
 8008620:	e7bc      	b.n	800859c <_printf_i+0x148>
 8008622:	6833      	ldr	r3, [r6, #0]
 8008624:	1d1a      	adds	r2, r3, #4
 8008626:	6032      	str	r2, [r6, #0]
 8008628:	681e      	ldr	r6, [r3, #0]
 800862a:	6862      	ldr	r2, [r4, #4]
 800862c:	2100      	movs	r1, #0
 800862e:	4630      	mov	r0, r6
 8008630:	f7f7 fde6 	bl	8000200 <memchr>
 8008634:	b108      	cbz	r0, 800863a <_printf_i+0x1e6>
 8008636:	1b80      	subs	r0, r0, r6
 8008638:	6060      	str	r0, [r4, #4]
 800863a:	6863      	ldr	r3, [r4, #4]
 800863c:	6123      	str	r3, [r4, #16]
 800863e:	2300      	movs	r3, #0
 8008640:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008644:	e7aa      	b.n	800859c <_printf_i+0x148>
 8008646:	6923      	ldr	r3, [r4, #16]
 8008648:	4632      	mov	r2, r6
 800864a:	4649      	mov	r1, r9
 800864c:	4640      	mov	r0, r8
 800864e:	47d0      	blx	sl
 8008650:	3001      	adds	r0, #1
 8008652:	d0ad      	beq.n	80085b0 <_printf_i+0x15c>
 8008654:	6823      	ldr	r3, [r4, #0]
 8008656:	079b      	lsls	r3, r3, #30
 8008658:	d413      	bmi.n	8008682 <_printf_i+0x22e>
 800865a:	68e0      	ldr	r0, [r4, #12]
 800865c:	9b03      	ldr	r3, [sp, #12]
 800865e:	4298      	cmp	r0, r3
 8008660:	bfb8      	it	lt
 8008662:	4618      	movlt	r0, r3
 8008664:	e7a6      	b.n	80085b4 <_printf_i+0x160>
 8008666:	2301      	movs	r3, #1
 8008668:	4632      	mov	r2, r6
 800866a:	4649      	mov	r1, r9
 800866c:	4640      	mov	r0, r8
 800866e:	47d0      	blx	sl
 8008670:	3001      	adds	r0, #1
 8008672:	d09d      	beq.n	80085b0 <_printf_i+0x15c>
 8008674:	3501      	adds	r5, #1
 8008676:	68e3      	ldr	r3, [r4, #12]
 8008678:	9903      	ldr	r1, [sp, #12]
 800867a:	1a5b      	subs	r3, r3, r1
 800867c:	42ab      	cmp	r3, r5
 800867e:	dcf2      	bgt.n	8008666 <_printf_i+0x212>
 8008680:	e7eb      	b.n	800865a <_printf_i+0x206>
 8008682:	2500      	movs	r5, #0
 8008684:	f104 0619 	add.w	r6, r4, #25
 8008688:	e7f5      	b.n	8008676 <_printf_i+0x222>
 800868a:	bf00      	nop
 800868c:	0800b57e 	.word	0x0800b57e
 8008690:	0800b58f 	.word	0x0800b58f

08008694 <sniprintf>:
 8008694:	b40c      	push	{r2, r3}
 8008696:	b530      	push	{r4, r5, lr}
 8008698:	4b17      	ldr	r3, [pc, #92]	@ (80086f8 <sniprintf+0x64>)
 800869a:	1e0c      	subs	r4, r1, #0
 800869c:	681d      	ldr	r5, [r3, #0]
 800869e:	b09d      	sub	sp, #116	@ 0x74
 80086a0:	da08      	bge.n	80086b4 <sniprintf+0x20>
 80086a2:	238b      	movs	r3, #139	@ 0x8b
 80086a4:	602b      	str	r3, [r5, #0]
 80086a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80086aa:	b01d      	add	sp, #116	@ 0x74
 80086ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086b0:	b002      	add	sp, #8
 80086b2:	4770      	bx	lr
 80086b4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80086b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80086bc:	bf14      	ite	ne
 80086be:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80086c2:	4623      	moveq	r3, r4
 80086c4:	9304      	str	r3, [sp, #16]
 80086c6:	9307      	str	r3, [sp, #28]
 80086c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80086cc:	9002      	str	r0, [sp, #8]
 80086ce:	9006      	str	r0, [sp, #24]
 80086d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80086d4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80086d6:	ab21      	add	r3, sp, #132	@ 0x84
 80086d8:	a902      	add	r1, sp, #8
 80086da:	4628      	mov	r0, r5
 80086dc:	9301      	str	r3, [sp, #4]
 80086de:	f001 f84f 	bl	8009780 <_svfiprintf_r>
 80086e2:	1c43      	adds	r3, r0, #1
 80086e4:	bfbc      	itt	lt
 80086e6:	238b      	movlt	r3, #139	@ 0x8b
 80086e8:	602b      	strlt	r3, [r5, #0]
 80086ea:	2c00      	cmp	r4, #0
 80086ec:	d0dd      	beq.n	80086aa <sniprintf+0x16>
 80086ee:	9b02      	ldr	r3, [sp, #8]
 80086f0:	2200      	movs	r2, #0
 80086f2:	701a      	strb	r2, [r3, #0]
 80086f4:	e7d9      	b.n	80086aa <sniprintf+0x16>
 80086f6:	bf00      	nop
 80086f8:	200000cc 	.word	0x200000cc

080086fc <srand>:
 80086fc:	b538      	push	{r3, r4, r5, lr}
 80086fe:	4b10      	ldr	r3, [pc, #64]	@ (8008740 <srand+0x44>)
 8008700:	681d      	ldr	r5, [r3, #0]
 8008702:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8008704:	4604      	mov	r4, r0
 8008706:	b9b3      	cbnz	r3, 8008736 <srand+0x3a>
 8008708:	2018      	movs	r0, #24
 800870a:	f001 f935 	bl	8009978 <malloc>
 800870e:	4602      	mov	r2, r0
 8008710:	6328      	str	r0, [r5, #48]	@ 0x30
 8008712:	b920      	cbnz	r0, 800871e <srand+0x22>
 8008714:	4b0b      	ldr	r3, [pc, #44]	@ (8008744 <srand+0x48>)
 8008716:	480c      	ldr	r0, [pc, #48]	@ (8008748 <srand+0x4c>)
 8008718:	2146      	movs	r1, #70	@ 0x46
 800871a:	f000 f96b 	bl	80089f4 <__assert_func>
 800871e:	490b      	ldr	r1, [pc, #44]	@ (800874c <srand+0x50>)
 8008720:	4b0b      	ldr	r3, [pc, #44]	@ (8008750 <srand+0x54>)
 8008722:	e9c0 1300 	strd	r1, r3, [r0]
 8008726:	4b0b      	ldr	r3, [pc, #44]	@ (8008754 <srand+0x58>)
 8008728:	6083      	str	r3, [r0, #8]
 800872a:	230b      	movs	r3, #11
 800872c:	8183      	strh	r3, [r0, #12]
 800872e:	2100      	movs	r1, #0
 8008730:	2001      	movs	r0, #1
 8008732:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008736:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8008738:	2200      	movs	r2, #0
 800873a:	611c      	str	r4, [r3, #16]
 800873c:	615a      	str	r2, [r3, #20]
 800873e:	bd38      	pop	{r3, r4, r5, pc}
 8008740:	200000cc 	.word	0x200000cc
 8008744:	0800b5a0 	.word	0x0800b5a0
 8008748:	0800b5b7 	.word	0x0800b5b7
 800874c:	abcd330e 	.word	0xabcd330e
 8008750:	e66d1234 	.word	0xe66d1234
 8008754:	0005deec 	.word	0x0005deec

08008758 <rand>:
 8008758:	4b16      	ldr	r3, [pc, #88]	@ (80087b4 <rand+0x5c>)
 800875a:	b510      	push	{r4, lr}
 800875c:	681c      	ldr	r4, [r3, #0]
 800875e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008760:	b9b3      	cbnz	r3, 8008790 <rand+0x38>
 8008762:	2018      	movs	r0, #24
 8008764:	f001 f908 	bl	8009978 <malloc>
 8008768:	4602      	mov	r2, r0
 800876a:	6320      	str	r0, [r4, #48]	@ 0x30
 800876c:	b920      	cbnz	r0, 8008778 <rand+0x20>
 800876e:	4b12      	ldr	r3, [pc, #72]	@ (80087b8 <rand+0x60>)
 8008770:	4812      	ldr	r0, [pc, #72]	@ (80087bc <rand+0x64>)
 8008772:	2152      	movs	r1, #82	@ 0x52
 8008774:	f000 f93e 	bl	80089f4 <__assert_func>
 8008778:	4911      	ldr	r1, [pc, #68]	@ (80087c0 <rand+0x68>)
 800877a:	4b12      	ldr	r3, [pc, #72]	@ (80087c4 <rand+0x6c>)
 800877c:	e9c0 1300 	strd	r1, r3, [r0]
 8008780:	4b11      	ldr	r3, [pc, #68]	@ (80087c8 <rand+0x70>)
 8008782:	6083      	str	r3, [r0, #8]
 8008784:	230b      	movs	r3, #11
 8008786:	8183      	strh	r3, [r0, #12]
 8008788:	2100      	movs	r1, #0
 800878a:	2001      	movs	r0, #1
 800878c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008790:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008792:	480e      	ldr	r0, [pc, #56]	@ (80087cc <rand+0x74>)
 8008794:	690b      	ldr	r3, [r1, #16]
 8008796:	694c      	ldr	r4, [r1, #20]
 8008798:	4a0d      	ldr	r2, [pc, #52]	@ (80087d0 <rand+0x78>)
 800879a:	4358      	muls	r0, r3
 800879c:	fb02 0004 	mla	r0, r2, r4, r0
 80087a0:	fba3 3202 	umull	r3, r2, r3, r2
 80087a4:	3301      	adds	r3, #1
 80087a6:	eb40 0002 	adc.w	r0, r0, r2
 80087aa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80087ae:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80087b2:	bd10      	pop	{r4, pc}
 80087b4:	200000cc 	.word	0x200000cc
 80087b8:	0800b5a0 	.word	0x0800b5a0
 80087bc:	0800b5b7 	.word	0x0800b5b7
 80087c0:	abcd330e 	.word	0xabcd330e
 80087c4:	e66d1234 	.word	0xe66d1234
 80087c8:	0005deec 	.word	0x0005deec
 80087cc:	5851f42d 	.word	0x5851f42d
 80087d0:	4c957f2d 	.word	0x4c957f2d

080087d4 <std>:
 80087d4:	2300      	movs	r3, #0
 80087d6:	b510      	push	{r4, lr}
 80087d8:	4604      	mov	r4, r0
 80087da:	e9c0 3300 	strd	r3, r3, [r0]
 80087de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80087e2:	6083      	str	r3, [r0, #8]
 80087e4:	8181      	strh	r1, [r0, #12]
 80087e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80087e8:	81c2      	strh	r2, [r0, #14]
 80087ea:	6183      	str	r3, [r0, #24]
 80087ec:	4619      	mov	r1, r3
 80087ee:	2208      	movs	r2, #8
 80087f0:	305c      	adds	r0, #92	@ 0x5c
 80087f2:	f000 f8c4 	bl	800897e <memset>
 80087f6:	4b0d      	ldr	r3, [pc, #52]	@ (800882c <std+0x58>)
 80087f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80087fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008830 <std+0x5c>)
 80087fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80087fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008834 <std+0x60>)
 8008800:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008802:	4b0d      	ldr	r3, [pc, #52]	@ (8008838 <std+0x64>)
 8008804:	6323      	str	r3, [r4, #48]	@ 0x30
 8008806:	4b0d      	ldr	r3, [pc, #52]	@ (800883c <std+0x68>)
 8008808:	6224      	str	r4, [r4, #32]
 800880a:	429c      	cmp	r4, r3
 800880c:	d006      	beq.n	800881c <std+0x48>
 800880e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008812:	4294      	cmp	r4, r2
 8008814:	d002      	beq.n	800881c <std+0x48>
 8008816:	33d0      	adds	r3, #208	@ 0xd0
 8008818:	429c      	cmp	r4, r3
 800881a:	d105      	bne.n	8008828 <std+0x54>
 800881c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008824:	f000 b8e2 	b.w	80089ec <__retarget_lock_init_recursive>
 8008828:	bd10      	pop	{r4, pc}
 800882a:	bf00      	nop
 800882c:	0800a341 	.word	0x0800a341
 8008830:	0800a363 	.word	0x0800a363
 8008834:	0800a39b 	.word	0x0800a39b
 8008838:	0800a3bf 	.word	0x0800a3bf
 800883c:	200007cc 	.word	0x200007cc

08008840 <stdio_exit_handler>:
 8008840:	4a02      	ldr	r2, [pc, #8]	@ (800884c <stdio_exit_handler+0xc>)
 8008842:	4903      	ldr	r1, [pc, #12]	@ (8008850 <stdio_exit_handler+0x10>)
 8008844:	4803      	ldr	r0, [pc, #12]	@ (8008854 <stdio_exit_handler+0x14>)
 8008846:	f000 b869 	b.w	800891c <_fwalk_sglue>
 800884a:	bf00      	nop
 800884c:	200000c0 	.word	0x200000c0
 8008850:	08009bd5 	.word	0x08009bd5
 8008854:	200000d0 	.word	0x200000d0

08008858 <cleanup_stdio>:
 8008858:	6841      	ldr	r1, [r0, #4]
 800885a:	4b0c      	ldr	r3, [pc, #48]	@ (800888c <cleanup_stdio+0x34>)
 800885c:	4299      	cmp	r1, r3
 800885e:	b510      	push	{r4, lr}
 8008860:	4604      	mov	r4, r0
 8008862:	d001      	beq.n	8008868 <cleanup_stdio+0x10>
 8008864:	f001 f9b6 	bl	8009bd4 <_fflush_r>
 8008868:	68a1      	ldr	r1, [r4, #8]
 800886a:	4b09      	ldr	r3, [pc, #36]	@ (8008890 <cleanup_stdio+0x38>)
 800886c:	4299      	cmp	r1, r3
 800886e:	d002      	beq.n	8008876 <cleanup_stdio+0x1e>
 8008870:	4620      	mov	r0, r4
 8008872:	f001 f9af 	bl	8009bd4 <_fflush_r>
 8008876:	68e1      	ldr	r1, [r4, #12]
 8008878:	4b06      	ldr	r3, [pc, #24]	@ (8008894 <cleanup_stdio+0x3c>)
 800887a:	4299      	cmp	r1, r3
 800887c:	d004      	beq.n	8008888 <cleanup_stdio+0x30>
 800887e:	4620      	mov	r0, r4
 8008880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008884:	f001 b9a6 	b.w	8009bd4 <_fflush_r>
 8008888:	bd10      	pop	{r4, pc}
 800888a:	bf00      	nop
 800888c:	200007cc 	.word	0x200007cc
 8008890:	20000834 	.word	0x20000834
 8008894:	2000089c 	.word	0x2000089c

08008898 <global_stdio_init.part.0>:
 8008898:	b510      	push	{r4, lr}
 800889a:	4b0b      	ldr	r3, [pc, #44]	@ (80088c8 <global_stdio_init.part.0+0x30>)
 800889c:	4c0b      	ldr	r4, [pc, #44]	@ (80088cc <global_stdio_init.part.0+0x34>)
 800889e:	4a0c      	ldr	r2, [pc, #48]	@ (80088d0 <global_stdio_init.part.0+0x38>)
 80088a0:	601a      	str	r2, [r3, #0]
 80088a2:	4620      	mov	r0, r4
 80088a4:	2200      	movs	r2, #0
 80088a6:	2104      	movs	r1, #4
 80088a8:	f7ff ff94 	bl	80087d4 <std>
 80088ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80088b0:	2201      	movs	r2, #1
 80088b2:	2109      	movs	r1, #9
 80088b4:	f7ff ff8e 	bl	80087d4 <std>
 80088b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80088bc:	2202      	movs	r2, #2
 80088be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088c2:	2112      	movs	r1, #18
 80088c4:	f7ff bf86 	b.w	80087d4 <std>
 80088c8:	20000904 	.word	0x20000904
 80088cc:	200007cc 	.word	0x200007cc
 80088d0:	08008841 	.word	0x08008841

080088d4 <__sfp_lock_acquire>:
 80088d4:	4801      	ldr	r0, [pc, #4]	@ (80088dc <__sfp_lock_acquire+0x8>)
 80088d6:	f000 b88a 	b.w	80089ee <__retarget_lock_acquire_recursive>
 80088da:	bf00      	nop
 80088dc:	20000909 	.word	0x20000909

080088e0 <__sfp_lock_release>:
 80088e0:	4801      	ldr	r0, [pc, #4]	@ (80088e8 <__sfp_lock_release+0x8>)
 80088e2:	f000 b885 	b.w	80089f0 <__retarget_lock_release_recursive>
 80088e6:	bf00      	nop
 80088e8:	20000909 	.word	0x20000909

080088ec <__sinit>:
 80088ec:	b510      	push	{r4, lr}
 80088ee:	4604      	mov	r4, r0
 80088f0:	f7ff fff0 	bl	80088d4 <__sfp_lock_acquire>
 80088f4:	6a23      	ldr	r3, [r4, #32]
 80088f6:	b11b      	cbz	r3, 8008900 <__sinit+0x14>
 80088f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088fc:	f7ff bff0 	b.w	80088e0 <__sfp_lock_release>
 8008900:	4b04      	ldr	r3, [pc, #16]	@ (8008914 <__sinit+0x28>)
 8008902:	6223      	str	r3, [r4, #32]
 8008904:	4b04      	ldr	r3, [pc, #16]	@ (8008918 <__sinit+0x2c>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d1f5      	bne.n	80088f8 <__sinit+0xc>
 800890c:	f7ff ffc4 	bl	8008898 <global_stdio_init.part.0>
 8008910:	e7f2      	b.n	80088f8 <__sinit+0xc>
 8008912:	bf00      	nop
 8008914:	08008859 	.word	0x08008859
 8008918:	20000904 	.word	0x20000904

0800891c <_fwalk_sglue>:
 800891c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008920:	4607      	mov	r7, r0
 8008922:	4688      	mov	r8, r1
 8008924:	4614      	mov	r4, r2
 8008926:	2600      	movs	r6, #0
 8008928:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800892c:	f1b9 0901 	subs.w	r9, r9, #1
 8008930:	d505      	bpl.n	800893e <_fwalk_sglue+0x22>
 8008932:	6824      	ldr	r4, [r4, #0]
 8008934:	2c00      	cmp	r4, #0
 8008936:	d1f7      	bne.n	8008928 <_fwalk_sglue+0xc>
 8008938:	4630      	mov	r0, r6
 800893a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800893e:	89ab      	ldrh	r3, [r5, #12]
 8008940:	2b01      	cmp	r3, #1
 8008942:	d907      	bls.n	8008954 <_fwalk_sglue+0x38>
 8008944:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008948:	3301      	adds	r3, #1
 800894a:	d003      	beq.n	8008954 <_fwalk_sglue+0x38>
 800894c:	4629      	mov	r1, r5
 800894e:	4638      	mov	r0, r7
 8008950:	47c0      	blx	r8
 8008952:	4306      	orrs	r6, r0
 8008954:	3568      	adds	r5, #104	@ 0x68
 8008956:	e7e9      	b.n	800892c <_fwalk_sglue+0x10>

08008958 <strncat>:
 8008958:	b530      	push	{r4, r5, lr}
 800895a:	4604      	mov	r4, r0
 800895c:	7825      	ldrb	r5, [r4, #0]
 800895e:	4623      	mov	r3, r4
 8008960:	3401      	adds	r4, #1
 8008962:	2d00      	cmp	r5, #0
 8008964:	d1fa      	bne.n	800895c <strncat+0x4>
 8008966:	3a01      	subs	r2, #1
 8008968:	d304      	bcc.n	8008974 <strncat+0x1c>
 800896a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800896e:	f803 4b01 	strb.w	r4, [r3], #1
 8008972:	b904      	cbnz	r4, 8008976 <strncat+0x1e>
 8008974:	bd30      	pop	{r4, r5, pc}
 8008976:	2a00      	cmp	r2, #0
 8008978:	d1f5      	bne.n	8008966 <strncat+0xe>
 800897a:	701a      	strb	r2, [r3, #0]
 800897c:	e7f3      	b.n	8008966 <strncat+0xe>

0800897e <memset>:
 800897e:	4402      	add	r2, r0
 8008980:	4603      	mov	r3, r0
 8008982:	4293      	cmp	r3, r2
 8008984:	d100      	bne.n	8008988 <memset+0xa>
 8008986:	4770      	bx	lr
 8008988:	f803 1b01 	strb.w	r1, [r3], #1
 800898c:	e7f9      	b.n	8008982 <memset+0x4>
	...

08008990 <_localeconv_r>:
 8008990:	4800      	ldr	r0, [pc, #0]	@ (8008994 <_localeconv_r+0x4>)
 8008992:	4770      	bx	lr
 8008994:	2000020c 	.word	0x2000020c

08008998 <__errno>:
 8008998:	4b01      	ldr	r3, [pc, #4]	@ (80089a0 <__errno+0x8>)
 800899a:	6818      	ldr	r0, [r3, #0]
 800899c:	4770      	bx	lr
 800899e:	bf00      	nop
 80089a0:	200000cc 	.word	0x200000cc

080089a4 <__libc_init_array>:
 80089a4:	b570      	push	{r4, r5, r6, lr}
 80089a6:	4d0d      	ldr	r5, [pc, #52]	@ (80089dc <__libc_init_array+0x38>)
 80089a8:	4c0d      	ldr	r4, [pc, #52]	@ (80089e0 <__libc_init_array+0x3c>)
 80089aa:	1b64      	subs	r4, r4, r5
 80089ac:	10a4      	asrs	r4, r4, #2
 80089ae:	2600      	movs	r6, #0
 80089b0:	42a6      	cmp	r6, r4
 80089b2:	d109      	bne.n	80089c8 <__libc_init_array+0x24>
 80089b4:	4d0b      	ldr	r5, [pc, #44]	@ (80089e4 <__libc_init_array+0x40>)
 80089b6:	4c0c      	ldr	r4, [pc, #48]	@ (80089e8 <__libc_init_array+0x44>)
 80089b8:	f002 f8f0 	bl	800ab9c <_init>
 80089bc:	1b64      	subs	r4, r4, r5
 80089be:	10a4      	asrs	r4, r4, #2
 80089c0:	2600      	movs	r6, #0
 80089c2:	42a6      	cmp	r6, r4
 80089c4:	d105      	bne.n	80089d2 <__libc_init_array+0x2e>
 80089c6:	bd70      	pop	{r4, r5, r6, pc}
 80089c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80089cc:	4798      	blx	r3
 80089ce:	3601      	adds	r6, #1
 80089d0:	e7ee      	b.n	80089b0 <__libc_init_array+0xc>
 80089d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80089d6:	4798      	blx	r3
 80089d8:	3601      	adds	r6, #1
 80089da:	e7f2      	b.n	80089c2 <__libc_init_array+0x1e>
 80089dc:	0800b93c 	.word	0x0800b93c
 80089e0:	0800b93c 	.word	0x0800b93c
 80089e4:	0800b93c 	.word	0x0800b93c
 80089e8:	0800b940 	.word	0x0800b940

080089ec <__retarget_lock_init_recursive>:
 80089ec:	4770      	bx	lr

080089ee <__retarget_lock_acquire_recursive>:
 80089ee:	4770      	bx	lr

080089f0 <__retarget_lock_release_recursive>:
 80089f0:	4770      	bx	lr
	...

080089f4 <__assert_func>:
 80089f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80089f6:	4614      	mov	r4, r2
 80089f8:	461a      	mov	r2, r3
 80089fa:	4b09      	ldr	r3, [pc, #36]	@ (8008a20 <__assert_func+0x2c>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4605      	mov	r5, r0
 8008a00:	68d8      	ldr	r0, [r3, #12]
 8008a02:	b954      	cbnz	r4, 8008a1a <__assert_func+0x26>
 8008a04:	4b07      	ldr	r3, [pc, #28]	@ (8008a24 <__assert_func+0x30>)
 8008a06:	461c      	mov	r4, r3
 8008a08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a0c:	9100      	str	r1, [sp, #0]
 8008a0e:	462b      	mov	r3, r5
 8008a10:	4905      	ldr	r1, [pc, #20]	@ (8008a28 <__assert_func+0x34>)
 8008a12:	f001 fcd9 	bl	800a3c8 <fiprintf>
 8008a16:	f001 fd95 	bl	800a544 <abort>
 8008a1a:	4b04      	ldr	r3, [pc, #16]	@ (8008a2c <__assert_func+0x38>)
 8008a1c:	e7f4      	b.n	8008a08 <__assert_func+0x14>
 8008a1e:	bf00      	nop
 8008a20:	200000cc 	.word	0x200000cc
 8008a24:	0800b64a 	.word	0x0800b64a
 8008a28:	0800b61c 	.word	0x0800b61c
 8008a2c:	0800b60f 	.word	0x0800b60f

08008a30 <quorem>:
 8008a30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a34:	6903      	ldr	r3, [r0, #16]
 8008a36:	690c      	ldr	r4, [r1, #16]
 8008a38:	42a3      	cmp	r3, r4
 8008a3a:	4607      	mov	r7, r0
 8008a3c:	db7e      	blt.n	8008b3c <quorem+0x10c>
 8008a3e:	3c01      	subs	r4, #1
 8008a40:	f101 0814 	add.w	r8, r1, #20
 8008a44:	00a3      	lsls	r3, r4, #2
 8008a46:	f100 0514 	add.w	r5, r0, #20
 8008a4a:	9300      	str	r3, [sp, #0]
 8008a4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a50:	9301      	str	r3, [sp, #4]
 8008a52:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a62:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a66:	d32e      	bcc.n	8008ac6 <quorem+0x96>
 8008a68:	f04f 0a00 	mov.w	sl, #0
 8008a6c:	46c4      	mov	ip, r8
 8008a6e:	46ae      	mov	lr, r5
 8008a70:	46d3      	mov	fp, sl
 8008a72:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008a76:	b298      	uxth	r0, r3
 8008a78:	fb06 a000 	mla	r0, r6, r0, sl
 8008a7c:	0c02      	lsrs	r2, r0, #16
 8008a7e:	0c1b      	lsrs	r3, r3, #16
 8008a80:	fb06 2303 	mla	r3, r6, r3, r2
 8008a84:	f8de 2000 	ldr.w	r2, [lr]
 8008a88:	b280      	uxth	r0, r0
 8008a8a:	b292      	uxth	r2, r2
 8008a8c:	1a12      	subs	r2, r2, r0
 8008a8e:	445a      	add	r2, fp
 8008a90:	f8de 0000 	ldr.w	r0, [lr]
 8008a94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008a9e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008aa2:	b292      	uxth	r2, r2
 8008aa4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008aa8:	45e1      	cmp	r9, ip
 8008aaa:	f84e 2b04 	str.w	r2, [lr], #4
 8008aae:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008ab2:	d2de      	bcs.n	8008a72 <quorem+0x42>
 8008ab4:	9b00      	ldr	r3, [sp, #0]
 8008ab6:	58eb      	ldr	r3, [r5, r3]
 8008ab8:	b92b      	cbnz	r3, 8008ac6 <quorem+0x96>
 8008aba:	9b01      	ldr	r3, [sp, #4]
 8008abc:	3b04      	subs	r3, #4
 8008abe:	429d      	cmp	r5, r3
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	d32f      	bcc.n	8008b24 <quorem+0xf4>
 8008ac4:	613c      	str	r4, [r7, #16]
 8008ac6:	4638      	mov	r0, r7
 8008ac8:	f001 fb32 	bl	800a130 <__mcmp>
 8008acc:	2800      	cmp	r0, #0
 8008ace:	db25      	blt.n	8008b1c <quorem+0xec>
 8008ad0:	4629      	mov	r1, r5
 8008ad2:	2000      	movs	r0, #0
 8008ad4:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ad8:	f8d1 c000 	ldr.w	ip, [r1]
 8008adc:	fa1f fe82 	uxth.w	lr, r2
 8008ae0:	fa1f f38c 	uxth.w	r3, ip
 8008ae4:	eba3 030e 	sub.w	r3, r3, lr
 8008ae8:	4403      	add	r3, r0
 8008aea:	0c12      	lsrs	r2, r2, #16
 8008aec:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008af0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008afa:	45c1      	cmp	r9, r8
 8008afc:	f841 3b04 	str.w	r3, [r1], #4
 8008b00:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008b04:	d2e6      	bcs.n	8008ad4 <quorem+0xa4>
 8008b06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b0e:	b922      	cbnz	r2, 8008b1a <quorem+0xea>
 8008b10:	3b04      	subs	r3, #4
 8008b12:	429d      	cmp	r5, r3
 8008b14:	461a      	mov	r2, r3
 8008b16:	d30b      	bcc.n	8008b30 <quorem+0x100>
 8008b18:	613c      	str	r4, [r7, #16]
 8008b1a:	3601      	adds	r6, #1
 8008b1c:	4630      	mov	r0, r6
 8008b1e:	b003      	add	sp, #12
 8008b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b24:	6812      	ldr	r2, [r2, #0]
 8008b26:	3b04      	subs	r3, #4
 8008b28:	2a00      	cmp	r2, #0
 8008b2a:	d1cb      	bne.n	8008ac4 <quorem+0x94>
 8008b2c:	3c01      	subs	r4, #1
 8008b2e:	e7c6      	b.n	8008abe <quorem+0x8e>
 8008b30:	6812      	ldr	r2, [r2, #0]
 8008b32:	3b04      	subs	r3, #4
 8008b34:	2a00      	cmp	r2, #0
 8008b36:	d1ef      	bne.n	8008b18 <quorem+0xe8>
 8008b38:	3c01      	subs	r4, #1
 8008b3a:	e7ea      	b.n	8008b12 <quorem+0xe2>
 8008b3c:	2000      	movs	r0, #0
 8008b3e:	e7ee      	b.n	8008b1e <quorem+0xee>

08008b40 <_dtoa_r>:
 8008b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b44:	69c7      	ldr	r7, [r0, #28]
 8008b46:	b099      	sub	sp, #100	@ 0x64
 8008b48:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008b4c:	ec55 4b10 	vmov	r4, r5, d0
 8008b50:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008b52:	9109      	str	r1, [sp, #36]	@ 0x24
 8008b54:	4683      	mov	fp, r0
 8008b56:	920e      	str	r2, [sp, #56]	@ 0x38
 8008b58:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008b5a:	b97f      	cbnz	r7, 8008b7c <_dtoa_r+0x3c>
 8008b5c:	2010      	movs	r0, #16
 8008b5e:	f000 ff0b 	bl	8009978 <malloc>
 8008b62:	4602      	mov	r2, r0
 8008b64:	f8cb 001c 	str.w	r0, [fp, #28]
 8008b68:	b920      	cbnz	r0, 8008b74 <_dtoa_r+0x34>
 8008b6a:	4ba7      	ldr	r3, [pc, #668]	@ (8008e08 <_dtoa_r+0x2c8>)
 8008b6c:	21ef      	movs	r1, #239	@ 0xef
 8008b6e:	48a7      	ldr	r0, [pc, #668]	@ (8008e0c <_dtoa_r+0x2cc>)
 8008b70:	f7ff ff40 	bl	80089f4 <__assert_func>
 8008b74:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008b78:	6007      	str	r7, [r0, #0]
 8008b7a:	60c7      	str	r7, [r0, #12]
 8008b7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008b80:	6819      	ldr	r1, [r3, #0]
 8008b82:	b159      	cbz	r1, 8008b9c <_dtoa_r+0x5c>
 8008b84:	685a      	ldr	r2, [r3, #4]
 8008b86:	604a      	str	r2, [r1, #4]
 8008b88:	2301      	movs	r3, #1
 8008b8a:	4093      	lsls	r3, r2
 8008b8c:	608b      	str	r3, [r1, #8]
 8008b8e:	4658      	mov	r0, fp
 8008b90:	f001 f894 	bl	8009cbc <_Bfree>
 8008b94:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	601a      	str	r2, [r3, #0]
 8008b9c:	1e2b      	subs	r3, r5, #0
 8008b9e:	bfb9      	ittee	lt
 8008ba0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008ba4:	9303      	strlt	r3, [sp, #12]
 8008ba6:	2300      	movge	r3, #0
 8008ba8:	6033      	strge	r3, [r6, #0]
 8008baa:	9f03      	ldr	r7, [sp, #12]
 8008bac:	4b98      	ldr	r3, [pc, #608]	@ (8008e10 <_dtoa_r+0x2d0>)
 8008bae:	bfbc      	itt	lt
 8008bb0:	2201      	movlt	r2, #1
 8008bb2:	6032      	strlt	r2, [r6, #0]
 8008bb4:	43bb      	bics	r3, r7
 8008bb6:	d112      	bne.n	8008bde <_dtoa_r+0x9e>
 8008bb8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008bba:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008bbe:	6013      	str	r3, [r2, #0]
 8008bc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008bc4:	4323      	orrs	r3, r4
 8008bc6:	f000 854d 	beq.w	8009664 <_dtoa_r+0xb24>
 8008bca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008bcc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008e24 <_dtoa_r+0x2e4>
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	f000 854f 	beq.w	8009674 <_dtoa_r+0xb34>
 8008bd6:	f10a 0303 	add.w	r3, sl, #3
 8008bda:	f000 bd49 	b.w	8009670 <_dtoa_r+0xb30>
 8008bde:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008be2:	2200      	movs	r2, #0
 8008be4:	ec51 0b17 	vmov	r0, r1, d7
 8008be8:	2300      	movs	r3, #0
 8008bea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008bee:	f7f7 ff83 	bl	8000af8 <__aeabi_dcmpeq>
 8008bf2:	4680      	mov	r8, r0
 8008bf4:	b158      	cbz	r0, 8008c0e <_dtoa_r+0xce>
 8008bf6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	6013      	str	r3, [r2, #0]
 8008bfc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008bfe:	b113      	cbz	r3, 8008c06 <_dtoa_r+0xc6>
 8008c00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008c02:	4b84      	ldr	r3, [pc, #528]	@ (8008e14 <_dtoa_r+0x2d4>)
 8008c04:	6013      	str	r3, [r2, #0]
 8008c06:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008e28 <_dtoa_r+0x2e8>
 8008c0a:	f000 bd33 	b.w	8009674 <_dtoa_r+0xb34>
 8008c0e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008c12:	aa16      	add	r2, sp, #88	@ 0x58
 8008c14:	a917      	add	r1, sp, #92	@ 0x5c
 8008c16:	4658      	mov	r0, fp
 8008c18:	f001 fb3a 	bl	800a290 <__d2b>
 8008c1c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008c20:	4681      	mov	r9, r0
 8008c22:	2e00      	cmp	r6, #0
 8008c24:	d077      	beq.n	8008d16 <_dtoa_r+0x1d6>
 8008c26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c28:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008c2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c34:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008c38:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008c3c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008c40:	4619      	mov	r1, r3
 8008c42:	2200      	movs	r2, #0
 8008c44:	4b74      	ldr	r3, [pc, #464]	@ (8008e18 <_dtoa_r+0x2d8>)
 8008c46:	f7f7 fb37 	bl	80002b8 <__aeabi_dsub>
 8008c4a:	a369      	add	r3, pc, #420	@ (adr r3, 8008df0 <_dtoa_r+0x2b0>)
 8008c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c50:	f7f7 fcea 	bl	8000628 <__aeabi_dmul>
 8008c54:	a368      	add	r3, pc, #416	@ (adr r3, 8008df8 <_dtoa_r+0x2b8>)
 8008c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c5a:	f7f7 fb2f 	bl	80002bc <__adddf3>
 8008c5e:	4604      	mov	r4, r0
 8008c60:	4630      	mov	r0, r6
 8008c62:	460d      	mov	r5, r1
 8008c64:	f7f7 fc76 	bl	8000554 <__aeabi_i2d>
 8008c68:	a365      	add	r3, pc, #404	@ (adr r3, 8008e00 <_dtoa_r+0x2c0>)
 8008c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6e:	f7f7 fcdb 	bl	8000628 <__aeabi_dmul>
 8008c72:	4602      	mov	r2, r0
 8008c74:	460b      	mov	r3, r1
 8008c76:	4620      	mov	r0, r4
 8008c78:	4629      	mov	r1, r5
 8008c7a:	f7f7 fb1f 	bl	80002bc <__adddf3>
 8008c7e:	4604      	mov	r4, r0
 8008c80:	460d      	mov	r5, r1
 8008c82:	f7f7 ff81 	bl	8000b88 <__aeabi_d2iz>
 8008c86:	2200      	movs	r2, #0
 8008c88:	4607      	mov	r7, r0
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	4629      	mov	r1, r5
 8008c90:	f7f7 ff3c 	bl	8000b0c <__aeabi_dcmplt>
 8008c94:	b140      	cbz	r0, 8008ca8 <_dtoa_r+0x168>
 8008c96:	4638      	mov	r0, r7
 8008c98:	f7f7 fc5c 	bl	8000554 <__aeabi_i2d>
 8008c9c:	4622      	mov	r2, r4
 8008c9e:	462b      	mov	r3, r5
 8008ca0:	f7f7 ff2a 	bl	8000af8 <__aeabi_dcmpeq>
 8008ca4:	b900      	cbnz	r0, 8008ca8 <_dtoa_r+0x168>
 8008ca6:	3f01      	subs	r7, #1
 8008ca8:	2f16      	cmp	r7, #22
 8008caa:	d851      	bhi.n	8008d50 <_dtoa_r+0x210>
 8008cac:	4b5b      	ldr	r3, [pc, #364]	@ (8008e1c <_dtoa_r+0x2dc>)
 8008cae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008cba:	f7f7 ff27 	bl	8000b0c <__aeabi_dcmplt>
 8008cbe:	2800      	cmp	r0, #0
 8008cc0:	d048      	beq.n	8008d54 <_dtoa_r+0x214>
 8008cc2:	3f01      	subs	r7, #1
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	9312      	str	r3, [sp, #72]	@ 0x48
 8008cc8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008cca:	1b9b      	subs	r3, r3, r6
 8008ccc:	1e5a      	subs	r2, r3, #1
 8008cce:	bf44      	itt	mi
 8008cd0:	f1c3 0801 	rsbmi	r8, r3, #1
 8008cd4:	2300      	movmi	r3, #0
 8008cd6:	9208      	str	r2, [sp, #32]
 8008cd8:	bf54      	ite	pl
 8008cda:	f04f 0800 	movpl.w	r8, #0
 8008cde:	9308      	strmi	r3, [sp, #32]
 8008ce0:	2f00      	cmp	r7, #0
 8008ce2:	db39      	blt.n	8008d58 <_dtoa_r+0x218>
 8008ce4:	9b08      	ldr	r3, [sp, #32]
 8008ce6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008ce8:	443b      	add	r3, r7
 8008cea:	9308      	str	r3, [sp, #32]
 8008cec:	2300      	movs	r3, #0
 8008cee:	930a      	str	r3, [sp, #40]	@ 0x28
 8008cf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cf2:	2b09      	cmp	r3, #9
 8008cf4:	d864      	bhi.n	8008dc0 <_dtoa_r+0x280>
 8008cf6:	2b05      	cmp	r3, #5
 8008cf8:	bfc4      	itt	gt
 8008cfa:	3b04      	subgt	r3, #4
 8008cfc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008cfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d00:	f1a3 0302 	sub.w	r3, r3, #2
 8008d04:	bfcc      	ite	gt
 8008d06:	2400      	movgt	r4, #0
 8008d08:	2401      	movle	r4, #1
 8008d0a:	2b03      	cmp	r3, #3
 8008d0c:	d863      	bhi.n	8008dd6 <_dtoa_r+0x296>
 8008d0e:	e8df f003 	tbb	[pc, r3]
 8008d12:	372a      	.short	0x372a
 8008d14:	5535      	.short	0x5535
 8008d16:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008d1a:	441e      	add	r6, r3
 8008d1c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008d20:	2b20      	cmp	r3, #32
 8008d22:	bfc1      	itttt	gt
 8008d24:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008d28:	409f      	lslgt	r7, r3
 8008d2a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008d2e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008d32:	bfd6      	itet	le
 8008d34:	f1c3 0320 	rsble	r3, r3, #32
 8008d38:	ea47 0003 	orrgt.w	r0, r7, r3
 8008d3c:	fa04 f003 	lslle.w	r0, r4, r3
 8008d40:	f7f7 fbf8 	bl	8000534 <__aeabi_ui2d>
 8008d44:	2201      	movs	r2, #1
 8008d46:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008d4a:	3e01      	subs	r6, #1
 8008d4c:	9214      	str	r2, [sp, #80]	@ 0x50
 8008d4e:	e777      	b.n	8008c40 <_dtoa_r+0x100>
 8008d50:	2301      	movs	r3, #1
 8008d52:	e7b8      	b.n	8008cc6 <_dtoa_r+0x186>
 8008d54:	9012      	str	r0, [sp, #72]	@ 0x48
 8008d56:	e7b7      	b.n	8008cc8 <_dtoa_r+0x188>
 8008d58:	427b      	negs	r3, r7
 8008d5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	eba8 0807 	sub.w	r8, r8, r7
 8008d62:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008d64:	e7c4      	b.n	8008cf0 <_dtoa_r+0x1b0>
 8008d66:	2300      	movs	r3, #0
 8008d68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	dc35      	bgt.n	8008ddc <_dtoa_r+0x29c>
 8008d70:	2301      	movs	r3, #1
 8008d72:	9300      	str	r3, [sp, #0]
 8008d74:	9307      	str	r3, [sp, #28]
 8008d76:	461a      	mov	r2, r3
 8008d78:	920e      	str	r2, [sp, #56]	@ 0x38
 8008d7a:	e00b      	b.n	8008d94 <_dtoa_r+0x254>
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	e7f3      	b.n	8008d68 <_dtoa_r+0x228>
 8008d80:	2300      	movs	r3, #0
 8008d82:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d86:	18fb      	adds	r3, r7, r3
 8008d88:	9300      	str	r3, [sp, #0]
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	9307      	str	r3, [sp, #28]
 8008d90:	bfb8      	it	lt
 8008d92:	2301      	movlt	r3, #1
 8008d94:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008d98:	2100      	movs	r1, #0
 8008d9a:	2204      	movs	r2, #4
 8008d9c:	f102 0514 	add.w	r5, r2, #20
 8008da0:	429d      	cmp	r5, r3
 8008da2:	d91f      	bls.n	8008de4 <_dtoa_r+0x2a4>
 8008da4:	6041      	str	r1, [r0, #4]
 8008da6:	4658      	mov	r0, fp
 8008da8:	f000 ff48 	bl	8009c3c <_Balloc>
 8008dac:	4682      	mov	sl, r0
 8008dae:	2800      	cmp	r0, #0
 8008db0:	d13c      	bne.n	8008e2c <_dtoa_r+0x2ec>
 8008db2:	4b1b      	ldr	r3, [pc, #108]	@ (8008e20 <_dtoa_r+0x2e0>)
 8008db4:	4602      	mov	r2, r0
 8008db6:	f240 11af 	movw	r1, #431	@ 0x1af
 8008dba:	e6d8      	b.n	8008b6e <_dtoa_r+0x2e>
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	e7e0      	b.n	8008d82 <_dtoa_r+0x242>
 8008dc0:	2401      	movs	r4, #1
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dc6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008dc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008dcc:	9300      	str	r3, [sp, #0]
 8008dce:	9307      	str	r3, [sp, #28]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	2312      	movs	r3, #18
 8008dd4:	e7d0      	b.n	8008d78 <_dtoa_r+0x238>
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008dda:	e7f5      	b.n	8008dc8 <_dtoa_r+0x288>
 8008ddc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008dde:	9300      	str	r3, [sp, #0]
 8008de0:	9307      	str	r3, [sp, #28]
 8008de2:	e7d7      	b.n	8008d94 <_dtoa_r+0x254>
 8008de4:	3101      	adds	r1, #1
 8008de6:	0052      	lsls	r2, r2, #1
 8008de8:	e7d8      	b.n	8008d9c <_dtoa_r+0x25c>
 8008dea:	bf00      	nop
 8008dec:	f3af 8000 	nop.w
 8008df0:	636f4361 	.word	0x636f4361
 8008df4:	3fd287a7 	.word	0x3fd287a7
 8008df8:	8b60c8b3 	.word	0x8b60c8b3
 8008dfc:	3fc68a28 	.word	0x3fc68a28
 8008e00:	509f79fb 	.word	0x509f79fb
 8008e04:	3fd34413 	.word	0x3fd34413
 8008e08:	0800b5a0 	.word	0x0800b5a0
 8008e0c:	0800b658 	.word	0x0800b658
 8008e10:	7ff00000 	.word	0x7ff00000
 8008e14:	0800b57d 	.word	0x0800b57d
 8008e18:	3ff80000 	.word	0x3ff80000
 8008e1c:	0800b760 	.word	0x0800b760
 8008e20:	0800b6b0 	.word	0x0800b6b0
 8008e24:	0800b654 	.word	0x0800b654
 8008e28:	0800b57c 	.word	0x0800b57c
 8008e2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008e30:	6018      	str	r0, [r3, #0]
 8008e32:	9b07      	ldr	r3, [sp, #28]
 8008e34:	2b0e      	cmp	r3, #14
 8008e36:	f200 80a4 	bhi.w	8008f82 <_dtoa_r+0x442>
 8008e3a:	2c00      	cmp	r4, #0
 8008e3c:	f000 80a1 	beq.w	8008f82 <_dtoa_r+0x442>
 8008e40:	2f00      	cmp	r7, #0
 8008e42:	dd33      	ble.n	8008eac <_dtoa_r+0x36c>
 8008e44:	4bad      	ldr	r3, [pc, #692]	@ (80090fc <_dtoa_r+0x5bc>)
 8008e46:	f007 020f 	and.w	r2, r7, #15
 8008e4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e4e:	ed93 7b00 	vldr	d7, [r3]
 8008e52:	05f8      	lsls	r0, r7, #23
 8008e54:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008e58:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008e5c:	d516      	bpl.n	8008e8c <_dtoa_r+0x34c>
 8008e5e:	4ba8      	ldr	r3, [pc, #672]	@ (8009100 <_dtoa_r+0x5c0>)
 8008e60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e68:	f7f7 fd08 	bl	800087c <__aeabi_ddiv>
 8008e6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e70:	f004 040f 	and.w	r4, r4, #15
 8008e74:	2603      	movs	r6, #3
 8008e76:	4da2      	ldr	r5, [pc, #648]	@ (8009100 <_dtoa_r+0x5c0>)
 8008e78:	b954      	cbnz	r4, 8008e90 <_dtoa_r+0x350>
 8008e7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e82:	f7f7 fcfb 	bl	800087c <__aeabi_ddiv>
 8008e86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e8a:	e028      	b.n	8008ede <_dtoa_r+0x39e>
 8008e8c:	2602      	movs	r6, #2
 8008e8e:	e7f2      	b.n	8008e76 <_dtoa_r+0x336>
 8008e90:	07e1      	lsls	r1, r4, #31
 8008e92:	d508      	bpl.n	8008ea6 <_dtoa_r+0x366>
 8008e94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e98:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008e9c:	f7f7 fbc4 	bl	8000628 <__aeabi_dmul>
 8008ea0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ea4:	3601      	adds	r6, #1
 8008ea6:	1064      	asrs	r4, r4, #1
 8008ea8:	3508      	adds	r5, #8
 8008eaa:	e7e5      	b.n	8008e78 <_dtoa_r+0x338>
 8008eac:	f000 80d2 	beq.w	8009054 <_dtoa_r+0x514>
 8008eb0:	427c      	negs	r4, r7
 8008eb2:	4b92      	ldr	r3, [pc, #584]	@ (80090fc <_dtoa_r+0x5bc>)
 8008eb4:	4d92      	ldr	r5, [pc, #584]	@ (8009100 <_dtoa_r+0x5c0>)
 8008eb6:	f004 020f 	and.w	r2, r4, #15
 8008eba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ec6:	f7f7 fbaf 	bl	8000628 <__aeabi_dmul>
 8008eca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ece:	1124      	asrs	r4, r4, #4
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	2602      	movs	r6, #2
 8008ed4:	2c00      	cmp	r4, #0
 8008ed6:	f040 80b2 	bne.w	800903e <_dtoa_r+0x4fe>
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d1d3      	bne.n	8008e86 <_dtoa_r+0x346>
 8008ede:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008ee0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f000 80b7 	beq.w	8009058 <_dtoa_r+0x518>
 8008eea:	4b86      	ldr	r3, [pc, #536]	@ (8009104 <_dtoa_r+0x5c4>)
 8008eec:	2200      	movs	r2, #0
 8008eee:	4620      	mov	r0, r4
 8008ef0:	4629      	mov	r1, r5
 8008ef2:	f7f7 fe0b 	bl	8000b0c <__aeabi_dcmplt>
 8008ef6:	2800      	cmp	r0, #0
 8008ef8:	f000 80ae 	beq.w	8009058 <_dtoa_r+0x518>
 8008efc:	9b07      	ldr	r3, [sp, #28]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	f000 80aa 	beq.w	8009058 <_dtoa_r+0x518>
 8008f04:	9b00      	ldr	r3, [sp, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	dd37      	ble.n	8008f7a <_dtoa_r+0x43a>
 8008f0a:	1e7b      	subs	r3, r7, #1
 8008f0c:	9304      	str	r3, [sp, #16]
 8008f0e:	4620      	mov	r0, r4
 8008f10:	4b7d      	ldr	r3, [pc, #500]	@ (8009108 <_dtoa_r+0x5c8>)
 8008f12:	2200      	movs	r2, #0
 8008f14:	4629      	mov	r1, r5
 8008f16:	f7f7 fb87 	bl	8000628 <__aeabi_dmul>
 8008f1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f1e:	9c00      	ldr	r4, [sp, #0]
 8008f20:	3601      	adds	r6, #1
 8008f22:	4630      	mov	r0, r6
 8008f24:	f7f7 fb16 	bl	8000554 <__aeabi_i2d>
 8008f28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f2c:	f7f7 fb7c 	bl	8000628 <__aeabi_dmul>
 8008f30:	4b76      	ldr	r3, [pc, #472]	@ (800910c <_dtoa_r+0x5cc>)
 8008f32:	2200      	movs	r2, #0
 8008f34:	f7f7 f9c2 	bl	80002bc <__adddf3>
 8008f38:	4605      	mov	r5, r0
 8008f3a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008f3e:	2c00      	cmp	r4, #0
 8008f40:	f040 808d 	bne.w	800905e <_dtoa_r+0x51e>
 8008f44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f48:	4b71      	ldr	r3, [pc, #452]	@ (8009110 <_dtoa_r+0x5d0>)
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f7f7 f9b4 	bl	80002b8 <__aeabi_dsub>
 8008f50:	4602      	mov	r2, r0
 8008f52:	460b      	mov	r3, r1
 8008f54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f58:	462a      	mov	r2, r5
 8008f5a:	4633      	mov	r3, r6
 8008f5c:	f7f7 fdf4 	bl	8000b48 <__aeabi_dcmpgt>
 8008f60:	2800      	cmp	r0, #0
 8008f62:	f040 828b 	bne.w	800947c <_dtoa_r+0x93c>
 8008f66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f6a:	462a      	mov	r2, r5
 8008f6c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008f70:	f7f7 fdcc 	bl	8000b0c <__aeabi_dcmplt>
 8008f74:	2800      	cmp	r0, #0
 8008f76:	f040 8128 	bne.w	80091ca <_dtoa_r+0x68a>
 8008f7a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008f7e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008f82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	f2c0 815a 	blt.w	800923e <_dtoa_r+0x6fe>
 8008f8a:	2f0e      	cmp	r7, #14
 8008f8c:	f300 8157 	bgt.w	800923e <_dtoa_r+0x6fe>
 8008f90:	4b5a      	ldr	r3, [pc, #360]	@ (80090fc <_dtoa_r+0x5bc>)
 8008f92:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008f96:	ed93 7b00 	vldr	d7, [r3]
 8008f9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	ed8d 7b00 	vstr	d7, [sp]
 8008fa2:	da03      	bge.n	8008fac <_dtoa_r+0x46c>
 8008fa4:	9b07      	ldr	r3, [sp, #28]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	f340 8101 	ble.w	80091ae <_dtoa_r+0x66e>
 8008fac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008fb0:	4656      	mov	r6, sl
 8008fb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	4629      	mov	r1, r5
 8008fba:	f7f7 fc5f 	bl	800087c <__aeabi_ddiv>
 8008fbe:	f7f7 fde3 	bl	8000b88 <__aeabi_d2iz>
 8008fc2:	4680      	mov	r8, r0
 8008fc4:	f7f7 fac6 	bl	8000554 <__aeabi_i2d>
 8008fc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fcc:	f7f7 fb2c 	bl	8000628 <__aeabi_dmul>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	4620      	mov	r0, r4
 8008fd6:	4629      	mov	r1, r5
 8008fd8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008fdc:	f7f7 f96c 	bl	80002b8 <__aeabi_dsub>
 8008fe0:	f806 4b01 	strb.w	r4, [r6], #1
 8008fe4:	9d07      	ldr	r5, [sp, #28]
 8008fe6:	eba6 040a 	sub.w	r4, r6, sl
 8008fea:	42a5      	cmp	r5, r4
 8008fec:	4602      	mov	r2, r0
 8008fee:	460b      	mov	r3, r1
 8008ff0:	f040 8117 	bne.w	8009222 <_dtoa_r+0x6e2>
 8008ff4:	f7f7 f962 	bl	80002bc <__adddf3>
 8008ff8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ffc:	4604      	mov	r4, r0
 8008ffe:	460d      	mov	r5, r1
 8009000:	f7f7 fda2 	bl	8000b48 <__aeabi_dcmpgt>
 8009004:	2800      	cmp	r0, #0
 8009006:	f040 80f9 	bne.w	80091fc <_dtoa_r+0x6bc>
 800900a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800900e:	4620      	mov	r0, r4
 8009010:	4629      	mov	r1, r5
 8009012:	f7f7 fd71 	bl	8000af8 <__aeabi_dcmpeq>
 8009016:	b118      	cbz	r0, 8009020 <_dtoa_r+0x4e0>
 8009018:	f018 0f01 	tst.w	r8, #1
 800901c:	f040 80ee 	bne.w	80091fc <_dtoa_r+0x6bc>
 8009020:	4649      	mov	r1, r9
 8009022:	4658      	mov	r0, fp
 8009024:	f000 fe4a 	bl	8009cbc <_Bfree>
 8009028:	2300      	movs	r3, #0
 800902a:	7033      	strb	r3, [r6, #0]
 800902c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800902e:	3701      	adds	r7, #1
 8009030:	601f      	str	r7, [r3, #0]
 8009032:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009034:	2b00      	cmp	r3, #0
 8009036:	f000 831d 	beq.w	8009674 <_dtoa_r+0xb34>
 800903a:	601e      	str	r6, [r3, #0]
 800903c:	e31a      	b.n	8009674 <_dtoa_r+0xb34>
 800903e:	07e2      	lsls	r2, r4, #31
 8009040:	d505      	bpl.n	800904e <_dtoa_r+0x50e>
 8009042:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009046:	f7f7 faef 	bl	8000628 <__aeabi_dmul>
 800904a:	3601      	adds	r6, #1
 800904c:	2301      	movs	r3, #1
 800904e:	1064      	asrs	r4, r4, #1
 8009050:	3508      	adds	r5, #8
 8009052:	e73f      	b.n	8008ed4 <_dtoa_r+0x394>
 8009054:	2602      	movs	r6, #2
 8009056:	e742      	b.n	8008ede <_dtoa_r+0x39e>
 8009058:	9c07      	ldr	r4, [sp, #28]
 800905a:	9704      	str	r7, [sp, #16]
 800905c:	e761      	b.n	8008f22 <_dtoa_r+0x3e2>
 800905e:	4b27      	ldr	r3, [pc, #156]	@ (80090fc <_dtoa_r+0x5bc>)
 8009060:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009062:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009066:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800906a:	4454      	add	r4, sl
 800906c:	2900      	cmp	r1, #0
 800906e:	d053      	beq.n	8009118 <_dtoa_r+0x5d8>
 8009070:	4928      	ldr	r1, [pc, #160]	@ (8009114 <_dtoa_r+0x5d4>)
 8009072:	2000      	movs	r0, #0
 8009074:	f7f7 fc02 	bl	800087c <__aeabi_ddiv>
 8009078:	4633      	mov	r3, r6
 800907a:	462a      	mov	r2, r5
 800907c:	f7f7 f91c 	bl	80002b8 <__aeabi_dsub>
 8009080:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009084:	4656      	mov	r6, sl
 8009086:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800908a:	f7f7 fd7d 	bl	8000b88 <__aeabi_d2iz>
 800908e:	4605      	mov	r5, r0
 8009090:	f7f7 fa60 	bl	8000554 <__aeabi_i2d>
 8009094:	4602      	mov	r2, r0
 8009096:	460b      	mov	r3, r1
 8009098:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800909c:	f7f7 f90c 	bl	80002b8 <__aeabi_dsub>
 80090a0:	3530      	adds	r5, #48	@ 0x30
 80090a2:	4602      	mov	r2, r0
 80090a4:	460b      	mov	r3, r1
 80090a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80090aa:	f806 5b01 	strb.w	r5, [r6], #1
 80090ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80090b2:	f7f7 fd2b 	bl	8000b0c <__aeabi_dcmplt>
 80090b6:	2800      	cmp	r0, #0
 80090b8:	d171      	bne.n	800919e <_dtoa_r+0x65e>
 80090ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090be:	4911      	ldr	r1, [pc, #68]	@ (8009104 <_dtoa_r+0x5c4>)
 80090c0:	2000      	movs	r0, #0
 80090c2:	f7f7 f8f9 	bl	80002b8 <__aeabi_dsub>
 80090c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80090ca:	f7f7 fd1f 	bl	8000b0c <__aeabi_dcmplt>
 80090ce:	2800      	cmp	r0, #0
 80090d0:	f040 8095 	bne.w	80091fe <_dtoa_r+0x6be>
 80090d4:	42a6      	cmp	r6, r4
 80090d6:	f43f af50 	beq.w	8008f7a <_dtoa_r+0x43a>
 80090da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80090de:	4b0a      	ldr	r3, [pc, #40]	@ (8009108 <_dtoa_r+0x5c8>)
 80090e0:	2200      	movs	r2, #0
 80090e2:	f7f7 faa1 	bl	8000628 <__aeabi_dmul>
 80090e6:	4b08      	ldr	r3, [pc, #32]	@ (8009108 <_dtoa_r+0x5c8>)
 80090e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80090ec:	2200      	movs	r2, #0
 80090ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090f2:	f7f7 fa99 	bl	8000628 <__aeabi_dmul>
 80090f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090fa:	e7c4      	b.n	8009086 <_dtoa_r+0x546>
 80090fc:	0800b760 	.word	0x0800b760
 8009100:	0800b738 	.word	0x0800b738
 8009104:	3ff00000 	.word	0x3ff00000
 8009108:	40240000 	.word	0x40240000
 800910c:	401c0000 	.word	0x401c0000
 8009110:	40140000 	.word	0x40140000
 8009114:	3fe00000 	.word	0x3fe00000
 8009118:	4631      	mov	r1, r6
 800911a:	4628      	mov	r0, r5
 800911c:	f7f7 fa84 	bl	8000628 <__aeabi_dmul>
 8009120:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009124:	9415      	str	r4, [sp, #84]	@ 0x54
 8009126:	4656      	mov	r6, sl
 8009128:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800912c:	f7f7 fd2c 	bl	8000b88 <__aeabi_d2iz>
 8009130:	4605      	mov	r5, r0
 8009132:	f7f7 fa0f 	bl	8000554 <__aeabi_i2d>
 8009136:	4602      	mov	r2, r0
 8009138:	460b      	mov	r3, r1
 800913a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800913e:	f7f7 f8bb 	bl	80002b8 <__aeabi_dsub>
 8009142:	3530      	adds	r5, #48	@ 0x30
 8009144:	f806 5b01 	strb.w	r5, [r6], #1
 8009148:	4602      	mov	r2, r0
 800914a:	460b      	mov	r3, r1
 800914c:	42a6      	cmp	r6, r4
 800914e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009152:	f04f 0200 	mov.w	r2, #0
 8009156:	d124      	bne.n	80091a2 <_dtoa_r+0x662>
 8009158:	4bac      	ldr	r3, [pc, #688]	@ (800940c <_dtoa_r+0x8cc>)
 800915a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800915e:	f7f7 f8ad 	bl	80002bc <__adddf3>
 8009162:	4602      	mov	r2, r0
 8009164:	460b      	mov	r3, r1
 8009166:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800916a:	f7f7 fced 	bl	8000b48 <__aeabi_dcmpgt>
 800916e:	2800      	cmp	r0, #0
 8009170:	d145      	bne.n	80091fe <_dtoa_r+0x6be>
 8009172:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009176:	49a5      	ldr	r1, [pc, #660]	@ (800940c <_dtoa_r+0x8cc>)
 8009178:	2000      	movs	r0, #0
 800917a:	f7f7 f89d 	bl	80002b8 <__aeabi_dsub>
 800917e:	4602      	mov	r2, r0
 8009180:	460b      	mov	r3, r1
 8009182:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009186:	f7f7 fcc1 	bl	8000b0c <__aeabi_dcmplt>
 800918a:	2800      	cmp	r0, #0
 800918c:	f43f aef5 	beq.w	8008f7a <_dtoa_r+0x43a>
 8009190:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009192:	1e73      	subs	r3, r6, #1
 8009194:	9315      	str	r3, [sp, #84]	@ 0x54
 8009196:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800919a:	2b30      	cmp	r3, #48	@ 0x30
 800919c:	d0f8      	beq.n	8009190 <_dtoa_r+0x650>
 800919e:	9f04      	ldr	r7, [sp, #16]
 80091a0:	e73e      	b.n	8009020 <_dtoa_r+0x4e0>
 80091a2:	4b9b      	ldr	r3, [pc, #620]	@ (8009410 <_dtoa_r+0x8d0>)
 80091a4:	f7f7 fa40 	bl	8000628 <__aeabi_dmul>
 80091a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091ac:	e7bc      	b.n	8009128 <_dtoa_r+0x5e8>
 80091ae:	d10c      	bne.n	80091ca <_dtoa_r+0x68a>
 80091b0:	4b98      	ldr	r3, [pc, #608]	@ (8009414 <_dtoa_r+0x8d4>)
 80091b2:	2200      	movs	r2, #0
 80091b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091b8:	f7f7 fa36 	bl	8000628 <__aeabi_dmul>
 80091bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80091c0:	f7f7 fcb8 	bl	8000b34 <__aeabi_dcmpge>
 80091c4:	2800      	cmp	r0, #0
 80091c6:	f000 8157 	beq.w	8009478 <_dtoa_r+0x938>
 80091ca:	2400      	movs	r4, #0
 80091cc:	4625      	mov	r5, r4
 80091ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091d0:	43db      	mvns	r3, r3
 80091d2:	9304      	str	r3, [sp, #16]
 80091d4:	4656      	mov	r6, sl
 80091d6:	2700      	movs	r7, #0
 80091d8:	4621      	mov	r1, r4
 80091da:	4658      	mov	r0, fp
 80091dc:	f000 fd6e 	bl	8009cbc <_Bfree>
 80091e0:	2d00      	cmp	r5, #0
 80091e2:	d0dc      	beq.n	800919e <_dtoa_r+0x65e>
 80091e4:	b12f      	cbz	r7, 80091f2 <_dtoa_r+0x6b2>
 80091e6:	42af      	cmp	r7, r5
 80091e8:	d003      	beq.n	80091f2 <_dtoa_r+0x6b2>
 80091ea:	4639      	mov	r1, r7
 80091ec:	4658      	mov	r0, fp
 80091ee:	f000 fd65 	bl	8009cbc <_Bfree>
 80091f2:	4629      	mov	r1, r5
 80091f4:	4658      	mov	r0, fp
 80091f6:	f000 fd61 	bl	8009cbc <_Bfree>
 80091fa:	e7d0      	b.n	800919e <_dtoa_r+0x65e>
 80091fc:	9704      	str	r7, [sp, #16]
 80091fe:	4633      	mov	r3, r6
 8009200:	461e      	mov	r6, r3
 8009202:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009206:	2a39      	cmp	r2, #57	@ 0x39
 8009208:	d107      	bne.n	800921a <_dtoa_r+0x6da>
 800920a:	459a      	cmp	sl, r3
 800920c:	d1f8      	bne.n	8009200 <_dtoa_r+0x6c0>
 800920e:	9a04      	ldr	r2, [sp, #16]
 8009210:	3201      	adds	r2, #1
 8009212:	9204      	str	r2, [sp, #16]
 8009214:	2230      	movs	r2, #48	@ 0x30
 8009216:	f88a 2000 	strb.w	r2, [sl]
 800921a:	781a      	ldrb	r2, [r3, #0]
 800921c:	3201      	adds	r2, #1
 800921e:	701a      	strb	r2, [r3, #0]
 8009220:	e7bd      	b.n	800919e <_dtoa_r+0x65e>
 8009222:	4b7b      	ldr	r3, [pc, #492]	@ (8009410 <_dtoa_r+0x8d0>)
 8009224:	2200      	movs	r2, #0
 8009226:	f7f7 f9ff 	bl	8000628 <__aeabi_dmul>
 800922a:	2200      	movs	r2, #0
 800922c:	2300      	movs	r3, #0
 800922e:	4604      	mov	r4, r0
 8009230:	460d      	mov	r5, r1
 8009232:	f7f7 fc61 	bl	8000af8 <__aeabi_dcmpeq>
 8009236:	2800      	cmp	r0, #0
 8009238:	f43f aebb 	beq.w	8008fb2 <_dtoa_r+0x472>
 800923c:	e6f0      	b.n	8009020 <_dtoa_r+0x4e0>
 800923e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009240:	2a00      	cmp	r2, #0
 8009242:	f000 80db 	beq.w	80093fc <_dtoa_r+0x8bc>
 8009246:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009248:	2a01      	cmp	r2, #1
 800924a:	f300 80bf 	bgt.w	80093cc <_dtoa_r+0x88c>
 800924e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009250:	2a00      	cmp	r2, #0
 8009252:	f000 80b7 	beq.w	80093c4 <_dtoa_r+0x884>
 8009256:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800925a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800925c:	4646      	mov	r6, r8
 800925e:	9a08      	ldr	r2, [sp, #32]
 8009260:	2101      	movs	r1, #1
 8009262:	441a      	add	r2, r3
 8009264:	4658      	mov	r0, fp
 8009266:	4498      	add	r8, r3
 8009268:	9208      	str	r2, [sp, #32]
 800926a:	f000 fddb 	bl	8009e24 <__i2b>
 800926e:	4605      	mov	r5, r0
 8009270:	b15e      	cbz	r6, 800928a <_dtoa_r+0x74a>
 8009272:	9b08      	ldr	r3, [sp, #32]
 8009274:	2b00      	cmp	r3, #0
 8009276:	dd08      	ble.n	800928a <_dtoa_r+0x74a>
 8009278:	42b3      	cmp	r3, r6
 800927a:	9a08      	ldr	r2, [sp, #32]
 800927c:	bfa8      	it	ge
 800927e:	4633      	movge	r3, r6
 8009280:	eba8 0803 	sub.w	r8, r8, r3
 8009284:	1af6      	subs	r6, r6, r3
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	9308      	str	r3, [sp, #32]
 800928a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800928c:	b1f3      	cbz	r3, 80092cc <_dtoa_r+0x78c>
 800928e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009290:	2b00      	cmp	r3, #0
 8009292:	f000 80b7 	beq.w	8009404 <_dtoa_r+0x8c4>
 8009296:	b18c      	cbz	r4, 80092bc <_dtoa_r+0x77c>
 8009298:	4629      	mov	r1, r5
 800929a:	4622      	mov	r2, r4
 800929c:	4658      	mov	r0, fp
 800929e:	f000 fe81 	bl	8009fa4 <__pow5mult>
 80092a2:	464a      	mov	r2, r9
 80092a4:	4601      	mov	r1, r0
 80092a6:	4605      	mov	r5, r0
 80092a8:	4658      	mov	r0, fp
 80092aa:	f000 fdd1 	bl	8009e50 <__multiply>
 80092ae:	4649      	mov	r1, r9
 80092b0:	9004      	str	r0, [sp, #16]
 80092b2:	4658      	mov	r0, fp
 80092b4:	f000 fd02 	bl	8009cbc <_Bfree>
 80092b8:	9b04      	ldr	r3, [sp, #16]
 80092ba:	4699      	mov	r9, r3
 80092bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092be:	1b1a      	subs	r2, r3, r4
 80092c0:	d004      	beq.n	80092cc <_dtoa_r+0x78c>
 80092c2:	4649      	mov	r1, r9
 80092c4:	4658      	mov	r0, fp
 80092c6:	f000 fe6d 	bl	8009fa4 <__pow5mult>
 80092ca:	4681      	mov	r9, r0
 80092cc:	2101      	movs	r1, #1
 80092ce:	4658      	mov	r0, fp
 80092d0:	f000 fda8 	bl	8009e24 <__i2b>
 80092d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092d6:	4604      	mov	r4, r0
 80092d8:	2b00      	cmp	r3, #0
 80092da:	f000 81cf 	beq.w	800967c <_dtoa_r+0xb3c>
 80092de:	461a      	mov	r2, r3
 80092e0:	4601      	mov	r1, r0
 80092e2:	4658      	mov	r0, fp
 80092e4:	f000 fe5e 	bl	8009fa4 <__pow5mult>
 80092e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	4604      	mov	r4, r0
 80092ee:	f300 8095 	bgt.w	800941c <_dtoa_r+0x8dc>
 80092f2:	9b02      	ldr	r3, [sp, #8]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	f040 8087 	bne.w	8009408 <_dtoa_r+0x8c8>
 80092fa:	9b03      	ldr	r3, [sp, #12]
 80092fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009300:	2b00      	cmp	r3, #0
 8009302:	f040 8089 	bne.w	8009418 <_dtoa_r+0x8d8>
 8009306:	9b03      	ldr	r3, [sp, #12]
 8009308:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800930c:	0d1b      	lsrs	r3, r3, #20
 800930e:	051b      	lsls	r3, r3, #20
 8009310:	b12b      	cbz	r3, 800931e <_dtoa_r+0x7de>
 8009312:	9b08      	ldr	r3, [sp, #32]
 8009314:	3301      	adds	r3, #1
 8009316:	9308      	str	r3, [sp, #32]
 8009318:	f108 0801 	add.w	r8, r8, #1
 800931c:	2301      	movs	r3, #1
 800931e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009320:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009322:	2b00      	cmp	r3, #0
 8009324:	f000 81b0 	beq.w	8009688 <_dtoa_r+0xb48>
 8009328:	6923      	ldr	r3, [r4, #16]
 800932a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800932e:	6918      	ldr	r0, [r3, #16]
 8009330:	f000 fd2c 	bl	8009d8c <__hi0bits>
 8009334:	f1c0 0020 	rsb	r0, r0, #32
 8009338:	9b08      	ldr	r3, [sp, #32]
 800933a:	4418      	add	r0, r3
 800933c:	f010 001f 	ands.w	r0, r0, #31
 8009340:	d077      	beq.n	8009432 <_dtoa_r+0x8f2>
 8009342:	f1c0 0320 	rsb	r3, r0, #32
 8009346:	2b04      	cmp	r3, #4
 8009348:	dd6b      	ble.n	8009422 <_dtoa_r+0x8e2>
 800934a:	9b08      	ldr	r3, [sp, #32]
 800934c:	f1c0 001c 	rsb	r0, r0, #28
 8009350:	4403      	add	r3, r0
 8009352:	4480      	add	r8, r0
 8009354:	4406      	add	r6, r0
 8009356:	9308      	str	r3, [sp, #32]
 8009358:	f1b8 0f00 	cmp.w	r8, #0
 800935c:	dd05      	ble.n	800936a <_dtoa_r+0x82a>
 800935e:	4649      	mov	r1, r9
 8009360:	4642      	mov	r2, r8
 8009362:	4658      	mov	r0, fp
 8009364:	f000 fe78 	bl	800a058 <__lshift>
 8009368:	4681      	mov	r9, r0
 800936a:	9b08      	ldr	r3, [sp, #32]
 800936c:	2b00      	cmp	r3, #0
 800936e:	dd05      	ble.n	800937c <_dtoa_r+0x83c>
 8009370:	4621      	mov	r1, r4
 8009372:	461a      	mov	r2, r3
 8009374:	4658      	mov	r0, fp
 8009376:	f000 fe6f 	bl	800a058 <__lshift>
 800937a:	4604      	mov	r4, r0
 800937c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800937e:	2b00      	cmp	r3, #0
 8009380:	d059      	beq.n	8009436 <_dtoa_r+0x8f6>
 8009382:	4621      	mov	r1, r4
 8009384:	4648      	mov	r0, r9
 8009386:	f000 fed3 	bl	800a130 <__mcmp>
 800938a:	2800      	cmp	r0, #0
 800938c:	da53      	bge.n	8009436 <_dtoa_r+0x8f6>
 800938e:	1e7b      	subs	r3, r7, #1
 8009390:	9304      	str	r3, [sp, #16]
 8009392:	4649      	mov	r1, r9
 8009394:	2300      	movs	r3, #0
 8009396:	220a      	movs	r2, #10
 8009398:	4658      	mov	r0, fp
 800939a:	f000 fcb1 	bl	8009d00 <__multadd>
 800939e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80093a0:	4681      	mov	r9, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	f000 8172 	beq.w	800968c <_dtoa_r+0xb4c>
 80093a8:	2300      	movs	r3, #0
 80093aa:	4629      	mov	r1, r5
 80093ac:	220a      	movs	r2, #10
 80093ae:	4658      	mov	r0, fp
 80093b0:	f000 fca6 	bl	8009d00 <__multadd>
 80093b4:	9b00      	ldr	r3, [sp, #0]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	4605      	mov	r5, r0
 80093ba:	dc67      	bgt.n	800948c <_dtoa_r+0x94c>
 80093bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093be:	2b02      	cmp	r3, #2
 80093c0:	dc41      	bgt.n	8009446 <_dtoa_r+0x906>
 80093c2:	e063      	b.n	800948c <_dtoa_r+0x94c>
 80093c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80093c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80093ca:	e746      	b.n	800925a <_dtoa_r+0x71a>
 80093cc:	9b07      	ldr	r3, [sp, #28]
 80093ce:	1e5c      	subs	r4, r3, #1
 80093d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093d2:	42a3      	cmp	r3, r4
 80093d4:	bfbf      	itttt	lt
 80093d6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80093d8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80093da:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80093dc:	1ae3      	sublt	r3, r4, r3
 80093de:	bfb4      	ite	lt
 80093e0:	18d2      	addlt	r2, r2, r3
 80093e2:	1b1c      	subge	r4, r3, r4
 80093e4:	9b07      	ldr	r3, [sp, #28]
 80093e6:	bfbc      	itt	lt
 80093e8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80093ea:	2400      	movlt	r4, #0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	bfb5      	itete	lt
 80093f0:	eba8 0603 	sublt.w	r6, r8, r3
 80093f4:	9b07      	ldrge	r3, [sp, #28]
 80093f6:	2300      	movlt	r3, #0
 80093f8:	4646      	movge	r6, r8
 80093fa:	e730      	b.n	800925e <_dtoa_r+0x71e>
 80093fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80093fe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009400:	4646      	mov	r6, r8
 8009402:	e735      	b.n	8009270 <_dtoa_r+0x730>
 8009404:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009406:	e75c      	b.n	80092c2 <_dtoa_r+0x782>
 8009408:	2300      	movs	r3, #0
 800940a:	e788      	b.n	800931e <_dtoa_r+0x7de>
 800940c:	3fe00000 	.word	0x3fe00000
 8009410:	40240000 	.word	0x40240000
 8009414:	40140000 	.word	0x40140000
 8009418:	9b02      	ldr	r3, [sp, #8]
 800941a:	e780      	b.n	800931e <_dtoa_r+0x7de>
 800941c:	2300      	movs	r3, #0
 800941e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009420:	e782      	b.n	8009328 <_dtoa_r+0x7e8>
 8009422:	d099      	beq.n	8009358 <_dtoa_r+0x818>
 8009424:	9a08      	ldr	r2, [sp, #32]
 8009426:	331c      	adds	r3, #28
 8009428:	441a      	add	r2, r3
 800942a:	4498      	add	r8, r3
 800942c:	441e      	add	r6, r3
 800942e:	9208      	str	r2, [sp, #32]
 8009430:	e792      	b.n	8009358 <_dtoa_r+0x818>
 8009432:	4603      	mov	r3, r0
 8009434:	e7f6      	b.n	8009424 <_dtoa_r+0x8e4>
 8009436:	9b07      	ldr	r3, [sp, #28]
 8009438:	9704      	str	r7, [sp, #16]
 800943a:	2b00      	cmp	r3, #0
 800943c:	dc20      	bgt.n	8009480 <_dtoa_r+0x940>
 800943e:	9300      	str	r3, [sp, #0]
 8009440:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009442:	2b02      	cmp	r3, #2
 8009444:	dd1e      	ble.n	8009484 <_dtoa_r+0x944>
 8009446:	9b00      	ldr	r3, [sp, #0]
 8009448:	2b00      	cmp	r3, #0
 800944a:	f47f aec0 	bne.w	80091ce <_dtoa_r+0x68e>
 800944e:	4621      	mov	r1, r4
 8009450:	2205      	movs	r2, #5
 8009452:	4658      	mov	r0, fp
 8009454:	f000 fc54 	bl	8009d00 <__multadd>
 8009458:	4601      	mov	r1, r0
 800945a:	4604      	mov	r4, r0
 800945c:	4648      	mov	r0, r9
 800945e:	f000 fe67 	bl	800a130 <__mcmp>
 8009462:	2800      	cmp	r0, #0
 8009464:	f77f aeb3 	ble.w	80091ce <_dtoa_r+0x68e>
 8009468:	4656      	mov	r6, sl
 800946a:	2331      	movs	r3, #49	@ 0x31
 800946c:	f806 3b01 	strb.w	r3, [r6], #1
 8009470:	9b04      	ldr	r3, [sp, #16]
 8009472:	3301      	adds	r3, #1
 8009474:	9304      	str	r3, [sp, #16]
 8009476:	e6ae      	b.n	80091d6 <_dtoa_r+0x696>
 8009478:	9c07      	ldr	r4, [sp, #28]
 800947a:	9704      	str	r7, [sp, #16]
 800947c:	4625      	mov	r5, r4
 800947e:	e7f3      	b.n	8009468 <_dtoa_r+0x928>
 8009480:	9b07      	ldr	r3, [sp, #28]
 8009482:	9300      	str	r3, [sp, #0]
 8009484:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009486:	2b00      	cmp	r3, #0
 8009488:	f000 8104 	beq.w	8009694 <_dtoa_r+0xb54>
 800948c:	2e00      	cmp	r6, #0
 800948e:	dd05      	ble.n	800949c <_dtoa_r+0x95c>
 8009490:	4629      	mov	r1, r5
 8009492:	4632      	mov	r2, r6
 8009494:	4658      	mov	r0, fp
 8009496:	f000 fddf 	bl	800a058 <__lshift>
 800949a:	4605      	mov	r5, r0
 800949c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d05a      	beq.n	8009558 <_dtoa_r+0xa18>
 80094a2:	6869      	ldr	r1, [r5, #4]
 80094a4:	4658      	mov	r0, fp
 80094a6:	f000 fbc9 	bl	8009c3c <_Balloc>
 80094aa:	4606      	mov	r6, r0
 80094ac:	b928      	cbnz	r0, 80094ba <_dtoa_r+0x97a>
 80094ae:	4b84      	ldr	r3, [pc, #528]	@ (80096c0 <_dtoa_r+0xb80>)
 80094b0:	4602      	mov	r2, r0
 80094b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80094b6:	f7ff bb5a 	b.w	8008b6e <_dtoa_r+0x2e>
 80094ba:	692a      	ldr	r2, [r5, #16]
 80094bc:	3202      	adds	r2, #2
 80094be:	0092      	lsls	r2, r2, #2
 80094c0:	f105 010c 	add.w	r1, r5, #12
 80094c4:	300c      	adds	r0, #12
 80094c6:	f001 f82f 	bl	800a528 <memcpy>
 80094ca:	2201      	movs	r2, #1
 80094cc:	4631      	mov	r1, r6
 80094ce:	4658      	mov	r0, fp
 80094d0:	f000 fdc2 	bl	800a058 <__lshift>
 80094d4:	f10a 0301 	add.w	r3, sl, #1
 80094d8:	9307      	str	r3, [sp, #28]
 80094da:	9b00      	ldr	r3, [sp, #0]
 80094dc:	4453      	add	r3, sl
 80094de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80094e0:	9b02      	ldr	r3, [sp, #8]
 80094e2:	f003 0301 	and.w	r3, r3, #1
 80094e6:	462f      	mov	r7, r5
 80094e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80094ea:	4605      	mov	r5, r0
 80094ec:	9b07      	ldr	r3, [sp, #28]
 80094ee:	4621      	mov	r1, r4
 80094f0:	3b01      	subs	r3, #1
 80094f2:	4648      	mov	r0, r9
 80094f4:	9300      	str	r3, [sp, #0]
 80094f6:	f7ff fa9b 	bl	8008a30 <quorem>
 80094fa:	4639      	mov	r1, r7
 80094fc:	9002      	str	r0, [sp, #8]
 80094fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009502:	4648      	mov	r0, r9
 8009504:	f000 fe14 	bl	800a130 <__mcmp>
 8009508:	462a      	mov	r2, r5
 800950a:	9008      	str	r0, [sp, #32]
 800950c:	4621      	mov	r1, r4
 800950e:	4658      	mov	r0, fp
 8009510:	f000 fe2a 	bl	800a168 <__mdiff>
 8009514:	68c2      	ldr	r2, [r0, #12]
 8009516:	4606      	mov	r6, r0
 8009518:	bb02      	cbnz	r2, 800955c <_dtoa_r+0xa1c>
 800951a:	4601      	mov	r1, r0
 800951c:	4648      	mov	r0, r9
 800951e:	f000 fe07 	bl	800a130 <__mcmp>
 8009522:	4602      	mov	r2, r0
 8009524:	4631      	mov	r1, r6
 8009526:	4658      	mov	r0, fp
 8009528:	920e      	str	r2, [sp, #56]	@ 0x38
 800952a:	f000 fbc7 	bl	8009cbc <_Bfree>
 800952e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009530:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009532:	9e07      	ldr	r6, [sp, #28]
 8009534:	ea43 0102 	orr.w	r1, r3, r2
 8009538:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800953a:	4319      	orrs	r1, r3
 800953c:	d110      	bne.n	8009560 <_dtoa_r+0xa20>
 800953e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009542:	d029      	beq.n	8009598 <_dtoa_r+0xa58>
 8009544:	9b08      	ldr	r3, [sp, #32]
 8009546:	2b00      	cmp	r3, #0
 8009548:	dd02      	ble.n	8009550 <_dtoa_r+0xa10>
 800954a:	9b02      	ldr	r3, [sp, #8]
 800954c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009550:	9b00      	ldr	r3, [sp, #0]
 8009552:	f883 8000 	strb.w	r8, [r3]
 8009556:	e63f      	b.n	80091d8 <_dtoa_r+0x698>
 8009558:	4628      	mov	r0, r5
 800955a:	e7bb      	b.n	80094d4 <_dtoa_r+0x994>
 800955c:	2201      	movs	r2, #1
 800955e:	e7e1      	b.n	8009524 <_dtoa_r+0x9e4>
 8009560:	9b08      	ldr	r3, [sp, #32]
 8009562:	2b00      	cmp	r3, #0
 8009564:	db04      	blt.n	8009570 <_dtoa_r+0xa30>
 8009566:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009568:	430b      	orrs	r3, r1
 800956a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800956c:	430b      	orrs	r3, r1
 800956e:	d120      	bne.n	80095b2 <_dtoa_r+0xa72>
 8009570:	2a00      	cmp	r2, #0
 8009572:	dded      	ble.n	8009550 <_dtoa_r+0xa10>
 8009574:	4649      	mov	r1, r9
 8009576:	2201      	movs	r2, #1
 8009578:	4658      	mov	r0, fp
 800957a:	f000 fd6d 	bl	800a058 <__lshift>
 800957e:	4621      	mov	r1, r4
 8009580:	4681      	mov	r9, r0
 8009582:	f000 fdd5 	bl	800a130 <__mcmp>
 8009586:	2800      	cmp	r0, #0
 8009588:	dc03      	bgt.n	8009592 <_dtoa_r+0xa52>
 800958a:	d1e1      	bne.n	8009550 <_dtoa_r+0xa10>
 800958c:	f018 0f01 	tst.w	r8, #1
 8009590:	d0de      	beq.n	8009550 <_dtoa_r+0xa10>
 8009592:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009596:	d1d8      	bne.n	800954a <_dtoa_r+0xa0a>
 8009598:	9a00      	ldr	r2, [sp, #0]
 800959a:	2339      	movs	r3, #57	@ 0x39
 800959c:	7013      	strb	r3, [r2, #0]
 800959e:	4633      	mov	r3, r6
 80095a0:	461e      	mov	r6, r3
 80095a2:	3b01      	subs	r3, #1
 80095a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80095a8:	2a39      	cmp	r2, #57	@ 0x39
 80095aa:	d052      	beq.n	8009652 <_dtoa_r+0xb12>
 80095ac:	3201      	adds	r2, #1
 80095ae:	701a      	strb	r2, [r3, #0]
 80095b0:	e612      	b.n	80091d8 <_dtoa_r+0x698>
 80095b2:	2a00      	cmp	r2, #0
 80095b4:	dd07      	ble.n	80095c6 <_dtoa_r+0xa86>
 80095b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80095ba:	d0ed      	beq.n	8009598 <_dtoa_r+0xa58>
 80095bc:	9a00      	ldr	r2, [sp, #0]
 80095be:	f108 0301 	add.w	r3, r8, #1
 80095c2:	7013      	strb	r3, [r2, #0]
 80095c4:	e608      	b.n	80091d8 <_dtoa_r+0x698>
 80095c6:	9b07      	ldr	r3, [sp, #28]
 80095c8:	9a07      	ldr	r2, [sp, #28]
 80095ca:	f803 8c01 	strb.w	r8, [r3, #-1]
 80095ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d028      	beq.n	8009626 <_dtoa_r+0xae6>
 80095d4:	4649      	mov	r1, r9
 80095d6:	2300      	movs	r3, #0
 80095d8:	220a      	movs	r2, #10
 80095da:	4658      	mov	r0, fp
 80095dc:	f000 fb90 	bl	8009d00 <__multadd>
 80095e0:	42af      	cmp	r7, r5
 80095e2:	4681      	mov	r9, r0
 80095e4:	f04f 0300 	mov.w	r3, #0
 80095e8:	f04f 020a 	mov.w	r2, #10
 80095ec:	4639      	mov	r1, r7
 80095ee:	4658      	mov	r0, fp
 80095f0:	d107      	bne.n	8009602 <_dtoa_r+0xac2>
 80095f2:	f000 fb85 	bl	8009d00 <__multadd>
 80095f6:	4607      	mov	r7, r0
 80095f8:	4605      	mov	r5, r0
 80095fa:	9b07      	ldr	r3, [sp, #28]
 80095fc:	3301      	adds	r3, #1
 80095fe:	9307      	str	r3, [sp, #28]
 8009600:	e774      	b.n	80094ec <_dtoa_r+0x9ac>
 8009602:	f000 fb7d 	bl	8009d00 <__multadd>
 8009606:	4629      	mov	r1, r5
 8009608:	4607      	mov	r7, r0
 800960a:	2300      	movs	r3, #0
 800960c:	220a      	movs	r2, #10
 800960e:	4658      	mov	r0, fp
 8009610:	f000 fb76 	bl	8009d00 <__multadd>
 8009614:	4605      	mov	r5, r0
 8009616:	e7f0      	b.n	80095fa <_dtoa_r+0xaba>
 8009618:	9b00      	ldr	r3, [sp, #0]
 800961a:	2b00      	cmp	r3, #0
 800961c:	bfcc      	ite	gt
 800961e:	461e      	movgt	r6, r3
 8009620:	2601      	movle	r6, #1
 8009622:	4456      	add	r6, sl
 8009624:	2700      	movs	r7, #0
 8009626:	4649      	mov	r1, r9
 8009628:	2201      	movs	r2, #1
 800962a:	4658      	mov	r0, fp
 800962c:	f000 fd14 	bl	800a058 <__lshift>
 8009630:	4621      	mov	r1, r4
 8009632:	4681      	mov	r9, r0
 8009634:	f000 fd7c 	bl	800a130 <__mcmp>
 8009638:	2800      	cmp	r0, #0
 800963a:	dcb0      	bgt.n	800959e <_dtoa_r+0xa5e>
 800963c:	d102      	bne.n	8009644 <_dtoa_r+0xb04>
 800963e:	f018 0f01 	tst.w	r8, #1
 8009642:	d1ac      	bne.n	800959e <_dtoa_r+0xa5e>
 8009644:	4633      	mov	r3, r6
 8009646:	461e      	mov	r6, r3
 8009648:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800964c:	2a30      	cmp	r2, #48	@ 0x30
 800964e:	d0fa      	beq.n	8009646 <_dtoa_r+0xb06>
 8009650:	e5c2      	b.n	80091d8 <_dtoa_r+0x698>
 8009652:	459a      	cmp	sl, r3
 8009654:	d1a4      	bne.n	80095a0 <_dtoa_r+0xa60>
 8009656:	9b04      	ldr	r3, [sp, #16]
 8009658:	3301      	adds	r3, #1
 800965a:	9304      	str	r3, [sp, #16]
 800965c:	2331      	movs	r3, #49	@ 0x31
 800965e:	f88a 3000 	strb.w	r3, [sl]
 8009662:	e5b9      	b.n	80091d8 <_dtoa_r+0x698>
 8009664:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009666:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80096c4 <_dtoa_r+0xb84>
 800966a:	b11b      	cbz	r3, 8009674 <_dtoa_r+0xb34>
 800966c:	f10a 0308 	add.w	r3, sl, #8
 8009670:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009672:	6013      	str	r3, [r2, #0]
 8009674:	4650      	mov	r0, sl
 8009676:	b019      	add	sp, #100	@ 0x64
 8009678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800967c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800967e:	2b01      	cmp	r3, #1
 8009680:	f77f ae37 	ble.w	80092f2 <_dtoa_r+0x7b2>
 8009684:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009686:	930a      	str	r3, [sp, #40]	@ 0x28
 8009688:	2001      	movs	r0, #1
 800968a:	e655      	b.n	8009338 <_dtoa_r+0x7f8>
 800968c:	9b00      	ldr	r3, [sp, #0]
 800968e:	2b00      	cmp	r3, #0
 8009690:	f77f aed6 	ble.w	8009440 <_dtoa_r+0x900>
 8009694:	4656      	mov	r6, sl
 8009696:	4621      	mov	r1, r4
 8009698:	4648      	mov	r0, r9
 800969a:	f7ff f9c9 	bl	8008a30 <quorem>
 800969e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80096a2:	f806 8b01 	strb.w	r8, [r6], #1
 80096a6:	9b00      	ldr	r3, [sp, #0]
 80096a8:	eba6 020a 	sub.w	r2, r6, sl
 80096ac:	4293      	cmp	r3, r2
 80096ae:	ddb3      	ble.n	8009618 <_dtoa_r+0xad8>
 80096b0:	4649      	mov	r1, r9
 80096b2:	2300      	movs	r3, #0
 80096b4:	220a      	movs	r2, #10
 80096b6:	4658      	mov	r0, fp
 80096b8:	f000 fb22 	bl	8009d00 <__multadd>
 80096bc:	4681      	mov	r9, r0
 80096be:	e7ea      	b.n	8009696 <_dtoa_r+0xb56>
 80096c0:	0800b6b0 	.word	0x0800b6b0
 80096c4:	0800b64b 	.word	0x0800b64b

080096c8 <__ssputs_r>:
 80096c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096cc:	688e      	ldr	r6, [r1, #8]
 80096ce:	461f      	mov	r7, r3
 80096d0:	42be      	cmp	r6, r7
 80096d2:	680b      	ldr	r3, [r1, #0]
 80096d4:	4682      	mov	sl, r0
 80096d6:	460c      	mov	r4, r1
 80096d8:	4690      	mov	r8, r2
 80096da:	d82d      	bhi.n	8009738 <__ssputs_r+0x70>
 80096dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80096e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80096e4:	d026      	beq.n	8009734 <__ssputs_r+0x6c>
 80096e6:	6965      	ldr	r5, [r4, #20]
 80096e8:	6909      	ldr	r1, [r1, #16]
 80096ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80096ee:	eba3 0901 	sub.w	r9, r3, r1
 80096f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80096f6:	1c7b      	adds	r3, r7, #1
 80096f8:	444b      	add	r3, r9
 80096fa:	106d      	asrs	r5, r5, #1
 80096fc:	429d      	cmp	r5, r3
 80096fe:	bf38      	it	cc
 8009700:	461d      	movcc	r5, r3
 8009702:	0553      	lsls	r3, r2, #21
 8009704:	d527      	bpl.n	8009756 <__ssputs_r+0x8e>
 8009706:	4629      	mov	r1, r5
 8009708:	f000 f960 	bl	80099cc <_malloc_r>
 800970c:	4606      	mov	r6, r0
 800970e:	b360      	cbz	r0, 800976a <__ssputs_r+0xa2>
 8009710:	6921      	ldr	r1, [r4, #16]
 8009712:	464a      	mov	r2, r9
 8009714:	f000 ff08 	bl	800a528 <memcpy>
 8009718:	89a3      	ldrh	r3, [r4, #12]
 800971a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800971e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009722:	81a3      	strh	r3, [r4, #12]
 8009724:	6126      	str	r6, [r4, #16]
 8009726:	6165      	str	r5, [r4, #20]
 8009728:	444e      	add	r6, r9
 800972a:	eba5 0509 	sub.w	r5, r5, r9
 800972e:	6026      	str	r6, [r4, #0]
 8009730:	60a5      	str	r5, [r4, #8]
 8009732:	463e      	mov	r6, r7
 8009734:	42be      	cmp	r6, r7
 8009736:	d900      	bls.n	800973a <__ssputs_r+0x72>
 8009738:	463e      	mov	r6, r7
 800973a:	6820      	ldr	r0, [r4, #0]
 800973c:	4632      	mov	r2, r6
 800973e:	4641      	mov	r1, r8
 8009740:	f000 fe82 	bl	800a448 <memmove>
 8009744:	68a3      	ldr	r3, [r4, #8]
 8009746:	1b9b      	subs	r3, r3, r6
 8009748:	60a3      	str	r3, [r4, #8]
 800974a:	6823      	ldr	r3, [r4, #0]
 800974c:	4433      	add	r3, r6
 800974e:	6023      	str	r3, [r4, #0]
 8009750:	2000      	movs	r0, #0
 8009752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009756:	462a      	mov	r2, r5
 8009758:	f000 fe48 	bl	800a3ec <_realloc_r>
 800975c:	4606      	mov	r6, r0
 800975e:	2800      	cmp	r0, #0
 8009760:	d1e0      	bne.n	8009724 <__ssputs_r+0x5c>
 8009762:	6921      	ldr	r1, [r4, #16]
 8009764:	4650      	mov	r0, sl
 8009766:	f000 ff09 	bl	800a57c <_free_r>
 800976a:	230c      	movs	r3, #12
 800976c:	f8ca 3000 	str.w	r3, [sl]
 8009770:	89a3      	ldrh	r3, [r4, #12]
 8009772:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009776:	81a3      	strh	r3, [r4, #12]
 8009778:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800977c:	e7e9      	b.n	8009752 <__ssputs_r+0x8a>
	...

08009780 <_svfiprintf_r>:
 8009780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009784:	4698      	mov	r8, r3
 8009786:	898b      	ldrh	r3, [r1, #12]
 8009788:	061b      	lsls	r3, r3, #24
 800978a:	b09d      	sub	sp, #116	@ 0x74
 800978c:	4607      	mov	r7, r0
 800978e:	460d      	mov	r5, r1
 8009790:	4614      	mov	r4, r2
 8009792:	d510      	bpl.n	80097b6 <_svfiprintf_r+0x36>
 8009794:	690b      	ldr	r3, [r1, #16]
 8009796:	b973      	cbnz	r3, 80097b6 <_svfiprintf_r+0x36>
 8009798:	2140      	movs	r1, #64	@ 0x40
 800979a:	f000 f917 	bl	80099cc <_malloc_r>
 800979e:	6028      	str	r0, [r5, #0]
 80097a0:	6128      	str	r0, [r5, #16]
 80097a2:	b930      	cbnz	r0, 80097b2 <_svfiprintf_r+0x32>
 80097a4:	230c      	movs	r3, #12
 80097a6:	603b      	str	r3, [r7, #0]
 80097a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80097ac:	b01d      	add	sp, #116	@ 0x74
 80097ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097b2:	2340      	movs	r3, #64	@ 0x40
 80097b4:	616b      	str	r3, [r5, #20]
 80097b6:	2300      	movs	r3, #0
 80097b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80097ba:	2320      	movs	r3, #32
 80097bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80097c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80097c4:	2330      	movs	r3, #48	@ 0x30
 80097c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009964 <_svfiprintf_r+0x1e4>
 80097ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80097ce:	f04f 0901 	mov.w	r9, #1
 80097d2:	4623      	mov	r3, r4
 80097d4:	469a      	mov	sl, r3
 80097d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097da:	b10a      	cbz	r2, 80097e0 <_svfiprintf_r+0x60>
 80097dc:	2a25      	cmp	r2, #37	@ 0x25
 80097de:	d1f9      	bne.n	80097d4 <_svfiprintf_r+0x54>
 80097e0:	ebba 0b04 	subs.w	fp, sl, r4
 80097e4:	d00b      	beq.n	80097fe <_svfiprintf_r+0x7e>
 80097e6:	465b      	mov	r3, fp
 80097e8:	4622      	mov	r2, r4
 80097ea:	4629      	mov	r1, r5
 80097ec:	4638      	mov	r0, r7
 80097ee:	f7ff ff6b 	bl	80096c8 <__ssputs_r>
 80097f2:	3001      	adds	r0, #1
 80097f4:	f000 80a7 	beq.w	8009946 <_svfiprintf_r+0x1c6>
 80097f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097fa:	445a      	add	r2, fp
 80097fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80097fe:	f89a 3000 	ldrb.w	r3, [sl]
 8009802:	2b00      	cmp	r3, #0
 8009804:	f000 809f 	beq.w	8009946 <_svfiprintf_r+0x1c6>
 8009808:	2300      	movs	r3, #0
 800980a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800980e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009812:	f10a 0a01 	add.w	sl, sl, #1
 8009816:	9304      	str	r3, [sp, #16]
 8009818:	9307      	str	r3, [sp, #28]
 800981a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800981e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009820:	4654      	mov	r4, sl
 8009822:	2205      	movs	r2, #5
 8009824:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009828:	484e      	ldr	r0, [pc, #312]	@ (8009964 <_svfiprintf_r+0x1e4>)
 800982a:	f7f6 fce9 	bl	8000200 <memchr>
 800982e:	9a04      	ldr	r2, [sp, #16]
 8009830:	b9d8      	cbnz	r0, 800986a <_svfiprintf_r+0xea>
 8009832:	06d0      	lsls	r0, r2, #27
 8009834:	bf44      	itt	mi
 8009836:	2320      	movmi	r3, #32
 8009838:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800983c:	0711      	lsls	r1, r2, #28
 800983e:	bf44      	itt	mi
 8009840:	232b      	movmi	r3, #43	@ 0x2b
 8009842:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009846:	f89a 3000 	ldrb.w	r3, [sl]
 800984a:	2b2a      	cmp	r3, #42	@ 0x2a
 800984c:	d015      	beq.n	800987a <_svfiprintf_r+0xfa>
 800984e:	9a07      	ldr	r2, [sp, #28]
 8009850:	4654      	mov	r4, sl
 8009852:	2000      	movs	r0, #0
 8009854:	f04f 0c0a 	mov.w	ip, #10
 8009858:	4621      	mov	r1, r4
 800985a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800985e:	3b30      	subs	r3, #48	@ 0x30
 8009860:	2b09      	cmp	r3, #9
 8009862:	d94b      	bls.n	80098fc <_svfiprintf_r+0x17c>
 8009864:	b1b0      	cbz	r0, 8009894 <_svfiprintf_r+0x114>
 8009866:	9207      	str	r2, [sp, #28]
 8009868:	e014      	b.n	8009894 <_svfiprintf_r+0x114>
 800986a:	eba0 0308 	sub.w	r3, r0, r8
 800986e:	fa09 f303 	lsl.w	r3, r9, r3
 8009872:	4313      	orrs	r3, r2
 8009874:	9304      	str	r3, [sp, #16]
 8009876:	46a2      	mov	sl, r4
 8009878:	e7d2      	b.n	8009820 <_svfiprintf_r+0xa0>
 800987a:	9b03      	ldr	r3, [sp, #12]
 800987c:	1d19      	adds	r1, r3, #4
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	9103      	str	r1, [sp, #12]
 8009882:	2b00      	cmp	r3, #0
 8009884:	bfbb      	ittet	lt
 8009886:	425b      	neglt	r3, r3
 8009888:	f042 0202 	orrlt.w	r2, r2, #2
 800988c:	9307      	strge	r3, [sp, #28]
 800988e:	9307      	strlt	r3, [sp, #28]
 8009890:	bfb8      	it	lt
 8009892:	9204      	strlt	r2, [sp, #16]
 8009894:	7823      	ldrb	r3, [r4, #0]
 8009896:	2b2e      	cmp	r3, #46	@ 0x2e
 8009898:	d10a      	bne.n	80098b0 <_svfiprintf_r+0x130>
 800989a:	7863      	ldrb	r3, [r4, #1]
 800989c:	2b2a      	cmp	r3, #42	@ 0x2a
 800989e:	d132      	bne.n	8009906 <_svfiprintf_r+0x186>
 80098a0:	9b03      	ldr	r3, [sp, #12]
 80098a2:	1d1a      	adds	r2, r3, #4
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	9203      	str	r2, [sp, #12]
 80098a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80098ac:	3402      	adds	r4, #2
 80098ae:	9305      	str	r3, [sp, #20]
 80098b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009974 <_svfiprintf_r+0x1f4>
 80098b4:	7821      	ldrb	r1, [r4, #0]
 80098b6:	2203      	movs	r2, #3
 80098b8:	4650      	mov	r0, sl
 80098ba:	f7f6 fca1 	bl	8000200 <memchr>
 80098be:	b138      	cbz	r0, 80098d0 <_svfiprintf_r+0x150>
 80098c0:	9b04      	ldr	r3, [sp, #16]
 80098c2:	eba0 000a 	sub.w	r0, r0, sl
 80098c6:	2240      	movs	r2, #64	@ 0x40
 80098c8:	4082      	lsls	r2, r0
 80098ca:	4313      	orrs	r3, r2
 80098cc:	3401      	adds	r4, #1
 80098ce:	9304      	str	r3, [sp, #16]
 80098d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098d4:	4824      	ldr	r0, [pc, #144]	@ (8009968 <_svfiprintf_r+0x1e8>)
 80098d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80098da:	2206      	movs	r2, #6
 80098dc:	f7f6 fc90 	bl	8000200 <memchr>
 80098e0:	2800      	cmp	r0, #0
 80098e2:	d036      	beq.n	8009952 <_svfiprintf_r+0x1d2>
 80098e4:	4b21      	ldr	r3, [pc, #132]	@ (800996c <_svfiprintf_r+0x1ec>)
 80098e6:	bb1b      	cbnz	r3, 8009930 <_svfiprintf_r+0x1b0>
 80098e8:	9b03      	ldr	r3, [sp, #12]
 80098ea:	3307      	adds	r3, #7
 80098ec:	f023 0307 	bic.w	r3, r3, #7
 80098f0:	3308      	adds	r3, #8
 80098f2:	9303      	str	r3, [sp, #12]
 80098f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098f6:	4433      	add	r3, r6
 80098f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80098fa:	e76a      	b.n	80097d2 <_svfiprintf_r+0x52>
 80098fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009900:	460c      	mov	r4, r1
 8009902:	2001      	movs	r0, #1
 8009904:	e7a8      	b.n	8009858 <_svfiprintf_r+0xd8>
 8009906:	2300      	movs	r3, #0
 8009908:	3401      	adds	r4, #1
 800990a:	9305      	str	r3, [sp, #20]
 800990c:	4619      	mov	r1, r3
 800990e:	f04f 0c0a 	mov.w	ip, #10
 8009912:	4620      	mov	r0, r4
 8009914:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009918:	3a30      	subs	r2, #48	@ 0x30
 800991a:	2a09      	cmp	r2, #9
 800991c:	d903      	bls.n	8009926 <_svfiprintf_r+0x1a6>
 800991e:	2b00      	cmp	r3, #0
 8009920:	d0c6      	beq.n	80098b0 <_svfiprintf_r+0x130>
 8009922:	9105      	str	r1, [sp, #20]
 8009924:	e7c4      	b.n	80098b0 <_svfiprintf_r+0x130>
 8009926:	fb0c 2101 	mla	r1, ip, r1, r2
 800992a:	4604      	mov	r4, r0
 800992c:	2301      	movs	r3, #1
 800992e:	e7f0      	b.n	8009912 <_svfiprintf_r+0x192>
 8009930:	ab03      	add	r3, sp, #12
 8009932:	9300      	str	r3, [sp, #0]
 8009934:	462a      	mov	r2, r5
 8009936:	4b0e      	ldr	r3, [pc, #56]	@ (8009970 <_svfiprintf_r+0x1f0>)
 8009938:	a904      	add	r1, sp, #16
 800993a:	4638      	mov	r0, r7
 800993c:	f7fe faf2 	bl	8007f24 <_printf_float>
 8009940:	1c42      	adds	r2, r0, #1
 8009942:	4606      	mov	r6, r0
 8009944:	d1d6      	bne.n	80098f4 <_svfiprintf_r+0x174>
 8009946:	89ab      	ldrh	r3, [r5, #12]
 8009948:	065b      	lsls	r3, r3, #25
 800994a:	f53f af2d 	bmi.w	80097a8 <_svfiprintf_r+0x28>
 800994e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009950:	e72c      	b.n	80097ac <_svfiprintf_r+0x2c>
 8009952:	ab03      	add	r3, sp, #12
 8009954:	9300      	str	r3, [sp, #0]
 8009956:	462a      	mov	r2, r5
 8009958:	4b05      	ldr	r3, [pc, #20]	@ (8009970 <_svfiprintf_r+0x1f0>)
 800995a:	a904      	add	r1, sp, #16
 800995c:	4638      	mov	r0, r7
 800995e:	f7fe fd79 	bl	8008454 <_printf_i>
 8009962:	e7ed      	b.n	8009940 <_svfiprintf_r+0x1c0>
 8009964:	0800b6c1 	.word	0x0800b6c1
 8009968:	0800b6cb 	.word	0x0800b6cb
 800996c:	08007f25 	.word	0x08007f25
 8009970:	080096c9 	.word	0x080096c9
 8009974:	0800b6c7 	.word	0x0800b6c7

08009978 <malloc>:
 8009978:	4b02      	ldr	r3, [pc, #8]	@ (8009984 <malloc+0xc>)
 800997a:	4601      	mov	r1, r0
 800997c:	6818      	ldr	r0, [r3, #0]
 800997e:	f000 b825 	b.w	80099cc <_malloc_r>
 8009982:	bf00      	nop
 8009984:	200000cc 	.word	0x200000cc

08009988 <sbrk_aligned>:
 8009988:	b570      	push	{r4, r5, r6, lr}
 800998a:	4e0f      	ldr	r6, [pc, #60]	@ (80099c8 <sbrk_aligned+0x40>)
 800998c:	460c      	mov	r4, r1
 800998e:	6831      	ldr	r1, [r6, #0]
 8009990:	4605      	mov	r5, r0
 8009992:	b911      	cbnz	r1, 800999a <sbrk_aligned+0x12>
 8009994:	f000 fda6 	bl	800a4e4 <_sbrk_r>
 8009998:	6030      	str	r0, [r6, #0]
 800999a:	4621      	mov	r1, r4
 800999c:	4628      	mov	r0, r5
 800999e:	f000 fda1 	bl	800a4e4 <_sbrk_r>
 80099a2:	1c43      	adds	r3, r0, #1
 80099a4:	d103      	bne.n	80099ae <sbrk_aligned+0x26>
 80099a6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80099aa:	4620      	mov	r0, r4
 80099ac:	bd70      	pop	{r4, r5, r6, pc}
 80099ae:	1cc4      	adds	r4, r0, #3
 80099b0:	f024 0403 	bic.w	r4, r4, #3
 80099b4:	42a0      	cmp	r0, r4
 80099b6:	d0f8      	beq.n	80099aa <sbrk_aligned+0x22>
 80099b8:	1a21      	subs	r1, r4, r0
 80099ba:	4628      	mov	r0, r5
 80099bc:	f000 fd92 	bl	800a4e4 <_sbrk_r>
 80099c0:	3001      	adds	r0, #1
 80099c2:	d1f2      	bne.n	80099aa <sbrk_aligned+0x22>
 80099c4:	e7ef      	b.n	80099a6 <sbrk_aligned+0x1e>
 80099c6:	bf00      	nop
 80099c8:	2000090c 	.word	0x2000090c

080099cc <_malloc_r>:
 80099cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099d0:	1ccd      	adds	r5, r1, #3
 80099d2:	f025 0503 	bic.w	r5, r5, #3
 80099d6:	3508      	adds	r5, #8
 80099d8:	2d0c      	cmp	r5, #12
 80099da:	bf38      	it	cc
 80099dc:	250c      	movcc	r5, #12
 80099de:	2d00      	cmp	r5, #0
 80099e0:	4606      	mov	r6, r0
 80099e2:	db01      	blt.n	80099e8 <_malloc_r+0x1c>
 80099e4:	42a9      	cmp	r1, r5
 80099e6:	d904      	bls.n	80099f2 <_malloc_r+0x26>
 80099e8:	230c      	movs	r3, #12
 80099ea:	6033      	str	r3, [r6, #0]
 80099ec:	2000      	movs	r0, #0
 80099ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009ac8 <_malloc_r+0xfc>
 80099f6:	f000 f915 	bl	8009c24 <__malloc_lock>
 80099fa:	f8d8 3000 	ldr.w	r3, [r8]
 80099fe:	461c      	mov	r4, r3
 8009a00:	bb44      	cbnz	r4, 8009a54 <_malloc_r+0x88>
 8009a02:	4629      	mov	r1, r5
 8009a04:	4630      	mov	r0, r6
 8009a06:	f7ff ffbf 	bl	8009988 <sbrk_aligned>
 8009a0a:	1c43      	adds	r3, r0, #1
 8009a0c:	4604      	mov	r4, r0
 8009a0e:	d158      	bne.n	8009ac2 <_malloc_r+0xf6>
 8009a10:	f8d8 4000 	ldr.w	r4, [r8]
 8009a14:	4627      	mov	r7, r4
 8009a16:	2f00      	cmp	r7, #0
 8009a18:	d143      	bne.n	8009aa2 <_malloc_r+0xd6>
 8009a1a:	2c00      	cmp	r4, #0
 8009a1c:	d04b      	beq.n	8009ab6 <_malloc_r+0xea>
 8009a1e:	6823      	ldr	r3, [r4, #0]
 8009a20:	4639      	mov	r1, r7
 8009a22:	4630      	mov	r0, r6
 8009a24:	eb04 0903 	add.w	r9, r4, r3
 8009a28:	f000 fd5c 	bl	800a4e4 <_sbrk_r>
 8009a2c:	4581      	cmp	r9, r0
 8009a2e:	d142      	bne.n	8009ab6 <_malloc_r+0xea>
 8009a30:	6821      	ldr	r1, [r4, #0]
 8009a32:	1a6d      	subs	r5, r5, r1
 8009a34:	4629      	mov	r1, r5
 8009a36:	4630      	mov	r0, r6
 8009a38:	f7ff ffa6 	bl	8009988 <sbrk_aligned>
 8009a3c:	3001      	adds	r0, #1
 8009a3e:	d03a      	beq.n	8009ab6 <_malloc_r+0xea>
 8009a40:	6823      	ldr	r3, [r4, #0]
 8009a42:	442b      	add	r3, r5
 8009a44:	6023      	str	r3, [r4, #0]
 8009a46:	f8d8 3000 	ldr.w	r3, [r8]
 8009a4a:	685a      	ldr	r2, [r3, #4]
 8009a4c:	bb62      	cbnz	r2, 8009aa8 <_malloc_r+0xdc>
 8009a4e:	f8c8 7000 	str.w	r7, [r8]
 8009a52:	e00f      	b.n	8009a74 <_malloc_r+0xa8>
 8009a54:	6822      	ldr	r2, [r4, #0]
 8009a56:	1b52      	subs	r2, r2, r5
 8009a58:	d420      	bmi.n	8009a9c <_malloc_r+0xd0>
 8009a5a:	2a0b      	cmp	r2, #11
 8009a5c:	d917      	bls.n	8009a8e <_malloc_r+0xc2>
 8009a5e:	1961      	adds	r1, r4, r5
 8009a60:	42a3      	cmp	r3, r4
 8009a62:	6025      	str	r5, [r4, #0]
 8009a64:	bf18      	it	ne
 8009a66:	6059      	strne	r1, [r3, #4]
 8009a68:	6863      	ldr	r3, [r4, #4]
 8009a6a:	bf08      	it	eq
 8009a6c:	f8c8 1000 	streq.w	r1, [r8]
 8009a70:	5162      	str	r2, [r4, r5]
 8009a72:	604b      	str	r3, [r1, #4]
 8009a74:	4630      	mov	r0, r6
 8009a76:	f000 f8db 	bl	8009c30 <__malloc_unlock>
 8009a7a:	f104 000b 	add.w	r0, r4, #11
 8009a7e:	1d23      	adds	r3, r4, #4
 8009a80:	f020 0007 	bic.w	r0, r0, #7
 8009a84:	1ac2      	subs	r2, r0, r3
 8009a86:	bf1c      	itt	ne
 8009a88:	1a1b      	subne	r3, r3, r0
 8009a8a:	50a3      	strne	r3, [r4, r2]
 8009a8c:	e7af      	b.n	80099ee <_malloc_r+0x22>
 8009a8e:	6862      	ldr	r2, [r4, #4]
 8009a90:	42a3      	cmp	r3, r4
 8009a92:	bf0c      	ite	eq
 8009a94:	f8c8 2000 	streq.w	r2, [r8]
 8009a98:	605a      	strne	r2, [r3, #4]
 8009a9a:	e7eb      	b.n	8009a74 <_malloc_r+0xa8>
 8009a9c:	4623      	mov	r3, r4
 8009a9e:	6864      	ldr	r4, [r4, #4]
 8009aa0:	e7ae      	b.n	8009a00 <_malloc_r+0x34>
 8009aa2:	463c      	mov	r4, r7
 8009aa4:	687f      	ldr	r7, [r7, #4]
 8009aa6:	e7b6      	b.n	8009a16 <_malloc_r+0x4a>
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	42a3      	cmp	r3, r4
 8009aae:	d1fb      	bne.n	8009aa8 <_malloc_r+0xdc>
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	6053      	str	r3, [r2, #4]
 8009ab4:	e7de      	b.n	8009a74 <_malloc_r+0xa8>
 8009ab6:	230c      	movs	r3, #12
 8009ab8:	6033      	str	r3, [r6, #0]
 8009aba:	4630      	mov	r0, r6
 8009abc:	f000 f8b8 	bl	8009c30 <__malloc_unlock>
 8009ac0:	e794      	b.n	80099ec <_malloc_r+0x20>
 8009ac2:	6005      	str	r5, [r0, #0]
 8009ac4:	e7d6      	b.n	8009a74 <_malloc_r+0xa8>
 8009ac6:	bf00      	nop
 8009ac8:	20000910 	.word	0x20000910

08009acc <__sflush_r>:
 8009acc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ad4:	0716      	lsls	r6, r2, #28
 8009ad6:	4605      	mov	r5, r0
 8009ad8:	460c      	mov	r4, r1
 8009ada:	d454      	bmi.n	8009b86 <__sflush_r+0xba>
 8009adc:	684b      	ldr	r3, [r1, #4]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	dc02      	bgt.n	8009ae8 <__sflush_r+0x1c>
 8009ae2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	dd48      	ble.n	8009b7a <__sflush_r+0xae>
 8009ae8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009aea:	2e00      	cmp	r6, #0
 8009aec:	d045      	beq.n	8009b7a <__sflush_r+0xae>
 8009aee:	2300      	movs	r3, #0
 8009af0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009af4:	682f      	ldr	r7, [r5, #0]
 8009af6:	6a21      	ldr	r1, [r4, #32]
 8009af8:	602b      	str	r3, [r5, #0]
 8009afa:	d030      	beq.n	8009b5e <__sflush_r+0x92>
 8009afc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009afe:	89a3      	ldrh	r3, [r4, #12]
 8009b00:	0759      	lsls	r1, r3, #29
 8009b02:	d505      	bpl.n	8009b10 <__sflush_r+0x44>
 8009b04:	6863      	ldr	r3, [r4, #4]
 8009b06:	1ad2      	subs	r2, r2, r3
 8009b08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009b0a:	b10b      	cbz	r3, 8009b10 <__sflush_r+0x44>
 8009b0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009b0e:	1ad2      	subs	r2, r2, r3
 8009b10:	2300      	movs	r3, #0
 8009b12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009b14:	6a21      	ldr	r1, [r4, #32]
 8009b16:	4628      	mov	r0, r5
 8009b18:	47b0      	blx	r6
 8009b1a:	1c43      	adds	r3, r0, #1
 8009b1c:	89a3      	ldrh	r3, [r4, #12]
 8009b1e:	d106      	bne.n	8009b2e <__sflush_r+0x62>
 8009b20:	6829      	ldr	r1, [r5, #0]
 8009b22:	291d      	cmp	r1, #29
 8009b24:	d82b      	bhi.n	8009b7e <__sflush_r+0xb2>
 8009b26:	4a2a      	ldr	r2, [pc, #168]	@ (8009bd0 <__sflush_r+0x104>)
 8009b28:	410a      	asrs	r2, r1
 8009b2a:	07d6      	lsls	r6, r2, #31
 8009b2c:	d427      	bmi.n	8009b7e <__sflush_r+0xb2>
 8009b2e:	2200      	movs	r2, #0
 8009b30:	6062      	str	r2, [r4, #4]
 8009b32:	04d9      	lsls	r1, r3, #19
 8009b34:	6922      	ldr	r2, [r4, #16]
 8009b36:	6022      	str	r2, [r4, #0]
 8009b38:	d504      	bpl.n	8009b44 <__sflush_r+0x78>
 8009b3a:	1c42      	adds	r2, r0, #1
 8009b3c:	d101      	bne.n	8009b42 <__sflush_r+0x76>
 8009b3e:	682b      	ldr	r3, [r5, #0]
 8009b40:	b903      	cbnz	r3, 8009b44 <__sflush_r+0x78>
 8009b42:	6560      	str	r0, [r4, #84]	@ 0x54
 8009b44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b46:	602f      	str	r7, [r5, #0]
 8009b48:	b1b9      	cbz	r1, 8009b7a <__sflush_r+0xae>
 8009b4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b4e:	4299      	cmp	r1, r3
 8009b50:	d002      	beq.n	8009b58 <__sflush_r+0x8c>
 8009b52:	4628      	mov	r0, r5
 8009b54:	f000 fd12 	bl	800a57c <_free_r>
 8009b58:	2300      	movs	r3, #0
 8009b5a:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b5c:	e00d      	b.n	8009b7a <__sflush_r+0xae>
 8009b5e:	2301      	movs	r3, #1
 8009b60:	4628      	mov	r0, r5
 8009b62:	47b0      	blx	r6
 8009b64:	4602      	mov	r2, r0
 8009b66:	1c50      	adds	r0, r2, #1
 8009b68:	d1c9      	bne.n	8009afe <__sflush_r+0x32>
 8009b6a:	682b      	ldr	r3, [r5, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d0c6      	beq.n	8009afe <__sflush_r+0x32>
 8009b70:	2b1d      	cmp	r3, #29
 8009b72:	d001      	beq.n	8009b78 <__sflush_r+0xac>
 8009b74:	2b16      	cmp	r3, #22
 8009b76:	d11e      	bne.n	8009bb6 <__sflush_r+0xea>
 8009b78:	602f      	str	r7, [r5, #0]
 8009b7a:	2000      	movs	r0, #0
 8009b7c:	e022      	b.n	8009bc4 <__sflush_r+0xf8>
 8009b7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b82:	b21b      	sxth	r3, r3
 8009b84:	e01b      	b.n	8009bbe <__sflush_r+0xf2>
 8009b86:	690f      	ldr	r7, [r1, #16]
 8009b88:	2f00      	cmp	r7, #0
 8009b8a:	d0f6      	beq.n	8009b7a <__sflush_r+0xae>
 8009b8c:	0793      	lsls	r3, r2, #30
 8009b8e:	680e      	ldr	r6, [r1, #0]
 8009b90:	bf08      	it	eq
 8009b92:	694b      	ldreq	r3, [r1, #20]
 8009b94:	600f      	str	r7, [r1, #0]
 8009b96:	bf18      	it	ne
 8009b98:	2300      	movne	r3, #0
 8009b9a:	eba6 0807 	sub.w	r8, r6, r7
 8009b9e:	608b      	str	r3, [r1, #8]
 8009ba0:	f1b8 0f00 	cmp.w	r8, #0
 8009ba4:	dde9      	ble.n	8009b7a <__sflush_r+0xae>
 8009ba6:	6a21      	ldr	r1, [r4, #32]
 8009ba8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009baa:	4643      	mov	r3, r8
 8009bac:	463a      	mov	r2, r7
 8009bae:	4628      	mov	r0, r5
 8009bb0:	47b0      	blx	r6
 8009bb2:	2800      	cmp	r0, #0
 8009bb4:	dc08      	bgt.n	8009bc8 <__sflush_r+0xfc>
 8009bb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bbe:	81a3      	strh	r3, [r4, #12]
 8009bc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bc8:	4407      	add	r7, r0
 8009bca:	eba8 0800 	sub.w	r8, r8, r0
 8009bce:	e7e7      	b.n	8009ba0 <__sflush_r+0xd4>
 8009bd0:	dfbffffe 	.word	0xdfbffffe

08009bd4 <_fflush_r>:
 8009bd4:	b538      	push	{r3, r4, r5, lr}
 8009bd6:	690b      	ldr	r3, [r1, #16]
 8009bd8:	4605      	mov	r5, r0
 8009bda:	460c      	mov	r4, r1
 8009bdc:	b913      	cbnz	r3, 8009be4 <_fflush_r+0x10>
 8009bde:	2500      	movs	r5, #0
 8009be0:	4628      	mov	r0, r5
 8009be2:	bd38      	pop	{r3, r4, r5, pc}
 8009be4:	b118      	cbz	r0, 8009bee <_fflush_r+0x1a>
 8009be6:	6a03      	ldr	r3, [r0, #32]
 8009be8:	b90b      	cbnz	r3, 8009bee <_fflush_r+0x1a>
 8009bea:	f7fe fe7f 	bl	80088ec <__sinit>
 8009bee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d0f3      	beq.n	8009bde <_fflush_r+0xa>
 8009bf6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009bf8:	07d0      	lsls	r0, r2, #31
 8009bfa:	d404      	bmi.n	8009c06 <_fflush_r+0x32>
 8009bfc:	0599      	lsls	r1, r3, #22
 8009bfe:	d402      	bmi.n	8009c06 <_fflush_r+0x32>
 8009c00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c02:	f7fe fef4 	bl	80089ee <__retarget_lock_acquire_recursive>
 8009c06:	4628      	mov	r0, r5
 8009c08:	4621      	mov	r1, r4
 8009c0a:	f7ff ff5f 	bl	8009acc <__sflush_r>
 8009c0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009c10:	07da      	lsls	r2, r3, #31
 8009c12:	4605      	mov	r5, r0
 8009c14:	d4e4      	bmi.n	8009be0 <_fflush_r+0xc>
 8009c16:	89a3      	ldrh	r3, [r4, #12]
 8009c18:	059b      	lsls	r3, r3, #22
 8009c1a:	d4e1      	bmi.n	8009be0 <_fflush_r+0xc>
 8009c1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c1e:	f7fe fee7 	bl	80089f0 <__retarget_lock_release_recursive>
 8009c22:	e7dd      	b.n	8009be0 <_fflush_r+0xc>

08009c24 <__malloc_lock>:
 8009c24:	4801      	ldr	r0, [pc, #4]	@ (8009c2c <__malloc_lock+0x8>)
 8009c26:	f7fe bee2 	b.w	80089ee <__retarget_lock_acquire_recursive>
 8009c2a:	bf00      	nop
 8009c2c:	20000908 	.word	0x20000908

08009c30 <__malloc_unlock>:
 8009c30:	4801      	ldr	r0, [pc, #4]	@ (8009c38 <__malloc_unlock+0x8>)
 8009c32:	f7fe bedd 	b.w	80089f0 <__retarget_lock_release_recursive>
 8009c36:	bf00      	nop
 8009c38:	20000908 	.word	0x20000908

08009c3c <_Balloc>:
 8009c3c:	b570      	push	{r4, r5, r6, lr}
 8009c3e:	69c6      	ldr	r6, [r0, #28]
 8009c40:	4604      	mov	r4, r0
 8009c42:	460d      	mov	r5, r1
 8009c44:	b976      	cbnz	r6, 8009c64 <_Balloc+0x28>
 8009c46:	2010      	movs	r0, #16
 8009c48:	f7ff fe96 	bl	8009978 <malloc>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	61e0      	str	r0, [r4, #28]
 8009c50:	b920      	cbnz	r0, 8009c5c <_Balloc+0x20>
 8009c52:	4b18      	ldr	r3, [pc, #96]	@ (8009cb4 <_Balloc+0x78>)
 8009c54:	4818      	ldr	r0, [pc, #96]	@ (8009cb8 <_Balloc+0x7c>)
 8009c56:	216b      	movs	r1, #107	@ 0x6b
 8009c58:	f7fe fecc 	bl	80089f4 <__assert_func>
 8009c5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c60:	6006      	str	r6, [r0, #0]
 8009c62:	60c6      	str	r6, [r0, #12]
 8009c64:	69e6      	ldr	r6, [r4, #28]
 8009c66:	68f3      	ldr	r3, [r6, #12]
 8009c68:	b183      	cbz	r3, 8009c8c <_Balloc+0x50>
 8009c6a:	69e3      	ldr	r3, [r4, #28]
 8009c6c:	68db      	ldr	r3, [r3, #12]
 8009c6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009c72:	b9b8      	cbnz	r0, 8009ca4 <_Balloc+0x68>
 8009c74:	2101      	movs	r1, #1
 8009c76:	fa01 f605 	lsl.w	r6, r1, r5
 8009c7a:	1d72      	adds	r2, r6, #5
 8009c7c:	0092      	lsls	r2, r2, #2
 8009c7e:	4620      	mov	r0, r4
 8009c80:	f000 fc67 	bl	800a552 <_calloc_r>
 8009c84:	b160      	cbz	r0, 8009ca0 <_Balloc+0x64>
 8009c86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009c8a:	e00e      	b.n	8009caa <_Balloc+0x6e>
 8009c8c:	2221      	movs	r2, #33	@ 0x21
 8009c8e:	2104      	movs	r1, #4
 8009c90:	4620      	mov	r0, r4
 8009c92:	f000 fc5e 	bl	800a552 <_calloc_r>
 8009c96:	69e3      	ldr	r3, [r4, #28]
 8009c98:	60f0      	str	r0, [r6, #12]
 8009c9a:	68db      	ldr	r3, [r3, #12]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d1e4      	bne.n	8009c6a <_Balloc+0x2e>
 8009ca0:	2000      	movs	r0, #0
 8009ca2:	bd70      	pop	{r4, r5, r6, pc}
 8009ca4:	6802      	ldr	r2, [r0, #0]
 8009ca6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009caa:	2300      	movs	r3, #0
 8009cac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009cb0:	e7f7      	b.n	8009ca2 <_Balloc+0x66>
 8009cb2:	bf00      	nop
 8009cb4:	0800b5a0 	.word	0x0800b5a0
 8009cb8:	0800b6d2 	.word	0x0800b6d2

08009cbc <_Bfree>:
 8009cbc:	b570      	push	{r4, r5, r6, lr}
 8009cbe:	69c6      	ldr	r6, [r0, #28]
 8009cc0:	4605      	mov	r5, r0
 8009cc2:	460c      	mov	r4, r1
 8009cc4:	b976      	cbnz	r6, 8009ce4 <_Bfree+0x28>
 8009cc6:	2010      	movs	r0, #16
 8009cc8:	f7ff fe56 	bl	8009978 <malloc>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	61e8      	str	r0, [r5, #28]
 8009cd0:	b920      	cbnz	r0, 8009cdc <_Bfree+0x20>
 8009cd2:	4b09      	ldr	r3, [pc, #36]	@ (8009cf8 <_Bfree+0x3c>)
 8009cd4:	4809      	ldr	r0, [pc, #36]	@ (8009cfc <_Bfree+0x40>)
 8009cd6:	218f      	movs	r1, #143	@ 0x8f
 8009cd8:	f7fe fe8c 	bl	80089f4 <__assert_func>
 8009cdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ce0:	6006      	str	r6, [r0, #0]
 8009ce2:	60c6      	str	r6, [r0, #12]
 8009ce4:	b13c      	cbz	r4, 8009cf6 <_Bfree+0x3a>
 8009ce6:	69eb      	ldr	r3, [r5, #28]
 8009ce8:	6862      	ldr	r2, [r4, #4]
 8009cea:	68db      	ldr	r3, [r3, #12]
 8009cec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009cf0:	6021      	str	r1, [r4, #0]
 8009cf2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009cf6:	bd70      	pop	{r4, r5, r6, pc}
 8009cf8:	0800b5a0 	.word	0x0800b5a0
 8009cfc:	0800b6d2 	.word	0x0800b6d2

08009d00 <__multadd>:
 8009d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d04:	690d      	ldr	r5, [r1, #16]
 8009d06:	4607      	mov	r7, r0
 8009d08:	460c      	mov	r4, r1
 8009d0a:	461e      	mov	r6, r3
 8009d0c:	f101 0c14 	add.w	ip, r1, #20
 8009d10:	2000      	movs	r0, #0
 8009d12:	f8dc 3000 	ldr.w	r3, [ip]
 8009d16:	b299      	uxth	r1, r3
 8009d18:	fb02 6101 	mla	r1, r2, r1, r6
 8009d1c:	0c1e      	lsrs	r6, r3, #16
 8009d1e:	0c0b      	lsrs	r3, r1, #16
 8009d20:	fb02 3306 	mla	r3, r2, r6, r3
 8009d24:	b289      	uxth	r1, r1
 8009d26:	3001      	adds	r0, #1
 8009d28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009d2c:	4285      	cmp	r5, r0
 8009d2e:	f84c 1b04 	str.w	r1, [ip], #4
 8009d32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009d36:	dcec      	bgt.n	8009d12 <__multadd+0x12>
 8009d38:	b30e      	cbz	r6, 8009d7e <__multadd+0x7e>
 8009d3a:	68a3      	ldr	r3, [r4, #8]
 8009d3c:	42ab      	cmp	r3, r5
 8009d3e:	dc19      	bgt.n	8009d74 <__multadd+0x74>
 8009d40:	6861      	ldr	r1, [r4, #4]
 8009d42:	4638      	mov	r0, r7
 8009d44:	3101      	adds	r1, #1
 8009d46:	f7ff ff79 	bl	8009c3c <_Balloc>
 8009d4a:	4680      	mov	r8, r0
 8009d4c:	b928      	cbnz	r0, 8009d5a <__multadd+0x5a>
 8009d4e:	4602      	mov	r2, r0
 8009d50:	4b0c      	ldr	r3, [pc, #48]	@ (8009d84 <__multadd+0x84>)
 8009d52:	480d      	ldr	r0, [pc, #52]	@ (8009d88 <__multadd+0x88>)
 8009d54:	21ba      	movs	r1, #186	@ 0xba
 8009d56:	f7fe fe4d 	bl	80089f4 <__assert_func>
 8009d5a:	6922      	ldr	r2, [r4, #16]
 8009d5c:	3202      	adds	r2, #2
 8009d5e:	f104 010c 	add.w	r1, r4, #12
 8009d62:	0092      	lsls	r2, r2, #2
 8009d64:	300c      	adds	r0, #12
 8009d66:	f000 fbdf 	bl	800a528 <memcpy>
 8009d6a:	4621      	mov	r1, r4
 8009d6c:	4638      	mov	r0, r7
 8009d6e:	f7ff ffa5 	bl	8009cbc <_Bfree>
 8009d72:	4644      	mov	r4, r8
 8009d74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009d78:	3501      	adds	r5, #1
 8009d7a:	615e      	str	r6, [r3, #20]
 8009d7c:	6125      	str	r5, [r4, #16]
 8009d7e:	4620      	mov	r0, r4
 8009d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d84:	0800b6b0 	.word	0x0800b6b0
 8009d88:	0800b6d2 	.word	0x0800b6d2

08009d8c <__hi0bits>:
 8009d8c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009d90:	4603      	mov	r3, r0
 8009d92:	bf36      	itet	cc
 8009d94:	0403      	lslcc	r3, r0, #16
 8009d96:	2000      	movcs	r0, #0
 8009d98:	2010      	movcc	r0, #16
 8009d9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009d9e:	bf3c      	itt	cc
 8009da0:	021b      	lslcc	r3, r3, #8
 8009da2:	3008      	addcc	r0, #8
 8009da4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009da8:	bf3c      	itt	cc
 8009daa:	011b      	lslcc	r3, r3, #4
 8009dac:	3004      	addcc	r0, #4
 8009dae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009db2:	bf3c      	itt	cc
 8009db4:	009b      	lslcc	r3, r3, #2
 8009db6:	3002      	addcc	r0, #2
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	db05      	blt.n	8009dc8 <__hi0bits+0x3c>
 8009dbc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009dc0:	f100 0001 	add.w	r0, r0, #1
 8009dc4:	bf08      	it	eq
 8009dc6:	2020      	moveq	r0, #32
 8009dc8:	4770      	bx	lr

08009dca <__lo0bits>:
 8009dca:	6803      	ldr	r3, [r0, #0]
 8009dcc:	4602      	mov	r2, r0
 8009dce:	f013 0007 	ands.w	r0, r3, #7
 8009dd2:	d00b      	beq.n	8009dec <__lo0bits+0x22>
 8009dd4:	07d9      	lsls	r1, r3, #31
 8009dd6:	d421      	bmi.n	8009e1c <__lo0bits+0x52>
 8009dd8:	0798      	lsls	r0, r3, #30
 8009dda:	bf49      	itett	mi
 8009ddc:	085b      	lsrmi	r3, r3, #1
 8009dde:	089b      	lsrpl	r3, r3, #2
 8009de0:	2001      	movmi	r0, #1
 8009de2:	6013      	strmi	r3, [r2, #0]
 8009de4:	bf5c      	itt	pl
 8009de6:	6013      	strpl	r3, [r2, #0]
 8009de8:	2002      	movpl	r0, #2
 8009dea:	4770      	bx	lr
 8009dec:	b299      	uxth	r1, r3
 8009dee:	b909      	cbnz	r1, 8009df4 <__lo0bits+0x2a>
 8009df0:	0c1b      	lsrs	r3, r3, #16
 8009df2:	2010      	movs	r0, #16
 8009df4:	b2d9      	uxtb	r1, r3
 8009df6:	b909      	cbnz	r1, 8009dfc <__lo0bits+0x32>
 8009df8:	3008      	adds	r0, #8
 8009dfa:	0a1b      	lsrs	r3, r3, #8
 8009dfc:	0719      	lsls	r1, r3, #28
 8009dfe:	bf04      	itt	eq
 8009e00:	091b      	lsreq	r3, r3, #4
 8009e02:	3004      	addeq	r0, #4
 8009e04:	0799      	lsls	r1, r3, #30
 8009e06:	bf04      	itt	eq
 8009e08:	089b      	lsreq	r3, r3, #2
 8009e0a:	3002      	addeq	r0, #2
 8009e0c:	07d9      	lsls	r1, r3, #31
 8009e0e:	d403      	bmi.n	8009e18 <__lo0bits+0x4e>
 8009e10:	085b      	lsrs	r3, r3, #1
 8009e12:	f100 0001 	add.w	r0, r0, #1
 8009e16:	d003      	beq.n	8009e20 <__lo0bits+0x56>
 8009e18:	6013      	str	r3, [r2, #0]
 8009e1a:	4770      	bx	lr
 8009e1c:	2000      	movs	r0, #0
 8009e1e:	4770      	bx	lr
 8009e20:	2020      	movs	r0, #32
 8009e22:	4770      	bx	lr

08009e24 <__i2b>:
 8009e24:	b510      	push	{r4, lr}
 8009e26:	460c      	mov	r4, r1
 8009e28:	2101      	movs	r1, #1
 8009e2a:	f7ff ff07 	bl	8009c3c <_Balloc>
 8009e2e:	4602      	mov	r2, r0
 8009e30:	b928      	cbnz	r0, 8009e3e <__i2b+0x1a>
 8009e32:	4b05      	ldr	r3, [pc, #20]	@ (8009e48 <__i2b+0x24>)
 8009e34:	4805      	ldr	r0, [pc, #20]	@ (8009e4c <__i2b+0x28>)
 8009e36:	f240 1145 	movw	r1, #325	@ 0x145
 8009e3a:	f7fe fddb 	bl	80089f4 <__assert_func>
 8009e3e:	2301      	movs	r3, #1
 8009e40:	6144      	str	r4, [r0, #20]
 8009e42:	6103      	str	r3, [r0, #16]
 8009e44:	bd10      	pop	{r4, pc}
 8009e46:	bf00      	nop
 8009e48:	0800b6b0 	.word	0x0800b6b0
 8009e4c:	0800b6d2 	.word	0x0800b6d2

08009e50 <__multiply>:
 8009e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e54:	4614      	mov	r4, r2
 8009e56:	690a      	ldr	r2, [r1, #16]
 8009e58:	6923      	ldr	r3, [r4, #16]
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	bfa8      	it	ge
 8009e5e:	4623      	movge	r3, r4
 8009e60:	460f      	mov	r7, r1
 8009e62:	bfa4      	itt	ge
 8009e64:	460c      	movge	r4, r1
 8009e66:	461f      	movge	r7, r3
 8009e68:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009e6c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009e70:	68a3      	ldr	r3, [r4, #8]
 8009e72:	6861      	ldr	r1, [r4, #4]
 8009e74:	eb0a 0609 	add.w	r6, sl, r9
 8009e78:	42b3      	cmp	r3, r6
 8009e7a:	b085      	sub	sp, #20
 8009e7c:	bfb8      	it	lt
 8009e7e:	3101      	addlt	r1, #1
 8009e80:	f7ff fedc 	bl	8009c3c <_Balloc>
 8009e84:	b930      	cbnz	r0, 8009e94 <__multiply+0x44>
 8009e86:	4602      	mov	r2, r0
 8009e88:	4b44      	ldr	r3, [pc, #272]	@ (8009f9c <__multiply+0x14c>)
 8009e8a:	4845      	ldr	r0, [pc, #276]	@ (8009fa0 <__multiply+0x150>)
 8009e8c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009e90:	f7fe fdb0 	bl	80089f4 <__assert_func>
 8009e94:	f100 0514 	add.w	r5, r0, #20
 8009e98:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009e9c:	462b      	mov	r3, r5
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	4543      	cmp	r3, r8
 8009ea2:	d321      	bcc.n	8009ee8 <__multiply+0x98>
 8009ea4:	f107 0114 	add.w	r1, r7, #20
 8009ea8:	f104 0214 	add.w	r2, r4, #20
 8009eac:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009eb0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009eb4:	9302      	str	r3, [sp, #8]
 8009eb6:	1b13      	subs	r3, r2, r4
 8009eb8:	3b15      	subs	r3, #21
 8009eba:	f023 0303 	bic.w	r3, r3, #3
 8009ebe:	3304      	adds	r3, #4
 8009ec0:	f104 0715 	add.w	r7, r4, #21
 8009ec4:	42ba      	cmp	r2, r7
 8009ec6:	bf38      	it	cc
 8009ec8:	2304      	movcc	r3, #4
 8009eca:	9301      	str	r3, [sp, #4]
 8009ecc:	9b02      	ldr	r3, [sp, #8]
 8009ece:	9103      	str	r1, [sp, #12]
 8009ed0:	428b      	cmp	r3, r1
 8009ed2:	d80c      	bhi.n	8009eee <__multiply+0x9e>
 8009ed4:	2e00      	cmp	r6, #0
 8009ed6:	dd03      	ble.n	8009ee0 <__multiply+0x90>
 8009ed8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d05b      	beq.n	8009f98 <__multiply+0x148>
 8009ee0:	6106      	str	r6, [r0, #16]
 8009ee2:	b005      	add	sp, #20
 8009ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ee8:	f843 2b04 	str.w	r2, [r3], #4
 8009eec:	e7d8      	b.n	8009ea0 <__multiply+0x50>
 8009eee:	f8b1 a000 	ldrh.w	sl, [r1]
 8009ef2:	f1ba 0f00 	cmp.w	sl, #0
 8009ef6:	d024      	beq.n	8009f42 <__multiply+0xf2>
 8009ef8:	f104 0e14 	add.w	lr, r4, #20
 8009efc:	46a9      	mov	r9, r5
 8009efe:	f04f 0c00 	mov.w	ip, #0
 8009f02:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009f06:	f8d9 3000 	ldr.w	r3, [r9]
 8009f0a:	fa1f fb87 	uxth.w	fp, r7
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	fb0a 330b 	mla	r3, sl, fp, r3
 8009f14:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009f18:	f8d9 7000 	ldr.w	r7, [r9]
 8009f1c:	4463      	add	r3, ip
 8009f1e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009f22:	fb0a c70b 	mla	r7, sl, fp, ip
 8009f26:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009f30:	4572      	cmp	r2, lr
 8009f32:	f849 3b04 	str.w	r3, [r9], #4
 8009f36:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009f3a:	d8e2      	bhi.n	8009f02 <__multiply+0xb2>
 8009f3c:	9b01      	ldr	r3, [sp, #4]
 8009f3e:	f845 c003 	str.w	ip, [r5, r3]
 8009f42:	9b03      	ldr	r3, [sp, #12]
 8009f44:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009f48:	3104      	adds	r1, #4
 8009f4a:	f1b9 0f00 	cmp.w	r9, #0
 8009f4e:	d021      	beq.n	8009f94 <__multiply+0x144>
 8009f50:	682b      	ldr	r3, [r5, #0]
 8009f52:	f104 0c14 	add.w	ip, r4, #20
 8009f56:	46ae      	mov	lr, r5
 8009f58:	f04f 0a00 	mov.w	sl, #0
 8009f5c:	f8bc b000 	ldrh.w	fp, [ip]
 8009f60:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009f64:	fb09 770b 	mla	r7, r9, fp, r7
 8009f68:	4457      	add	r7, sl
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009f70:	f84e 3b04 	str.w	r3, [lr], #4
 8009f74:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009f78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009f7c:	f8be 3000 	ldrh.w	r3, [lr]
 8009f80:	fb09 330a 	mla	r3, r9, sl, r3
 8009f84:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009f88:	4562      	cmp	r2, ip
 8009f8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009f8e:	d8e5      	bhi.n	8009f5c <__multiply+0x10c>
 8009f90:	9f01      	ldr	r7, [sp, #4]
 8009f92:	51eb      	str	r3, [r5, r7]
 8009f94:	3504      	adds	r5, #4
 8009f96:	e799      	b.n	8009ecc <__multiply+0x7c>
 8009f98:	3e01      	subs	r6, #1
 8009f9a:	e79b      	b.n	8009ed4 <__multiply+0x84>
 8009f9c:	0800b6b0 	.word	0x0800b6b0
 8009fa0:	0800b6d2 	.word	0x0800b6d2

08009fa4 <__pow5mult>:
 8009fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fa8:	4615      	mov	r5, r2
 8009faa:	f012 0203 	ands.w	r2, r2, #3
 8009fae:	4607      	mov	r7, r0
 8009fb0:	460e      	mov	r6, r1
 8009fb2:	d007      	beq.n	8009fc4 <__pow5mult+0x20>
 8009fb4:	4c25      	ldr	r4, [pc, #148]	@ (800a04c <__pow5mult+0xa8>)
 8009fb6:	3a01      	subs	r2, #1
 8009fb8:	2300      	movs	r3, #0
 8009fba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009fbe:	f7ff fe9f 	bl	8009d00 <__multadd>
 8009fc2:	4606      	mov	r6, r0
 8009fc4:	10ad      	asrs	r5, r5, #2
 8009fc6:	d03d      	beq.n	800a044 <__pow5mult+0xa0>
 8009fc8:	69fc      	ldr	r4, [r7, #28]
 8009fca:	b97c      	cbnz	r4, 8009fec <__pow5mult+0x48>
 8009fcc:	2010      	movs	r0, #16
 8009fce:	f7ff fcd3 	bl	8009978 <malloc>
 8009fd2:	4602      	mov	r2, r0
 8009fd4:	61f8      	str	r0, [r7, #28]
 8009fd6:	b928      	cbnz	r0, 8009fe4 <__pow5mult+0x40>
 8009fd8:	4b1d      	ldr	r3, [pc, #116]	@ (800a050 <__pow5mult+0xac>)
 8009fda:	481e      	ldr	r0, [pc, #120]	@ (800a054 <__pow5mult+0xb0>)
 8009fdc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009fe0:	f7fe fd08 	bl	80089f4 <__assert_func>
 8009fe4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009fe8:	6004      	str	r4, [r0, #0]
 8009fea:	60c4      	str	r4, [r0, #12]
 8009fec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009ff0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ff4:	b94c      	cbnz	r4, 800a00a <__pow5mult+0x66>
 8009ff6:	f240 2171 	movw	r1, #625	@ 0x271
 8009ffa:	4638      	mov	r0, r7
 8009ffc:	f7ff ff12 	bl	8009e24 <__i2b>
 800a000:	2300      	movs	r3, #0
 800a002:	f8c8 0008 	str.w	r0, [r8, #8]
 800a006:	4604      	mov	r4, r0
 800a008:	6003      	str	r3, [r0, #0]
 800a00a:	f04f 0900 	mov.w	r9, #0
 800a00e:	07eb      	lsls	r3, r5, #31
 800a010:	d50a      	bpl.n	800a028 <__pow5mult+0x84>
 800a012:	4631      	mov	r1, r6
 800a014:	4622      	mov	r2, r4
 800a016:	4638      	mov	r0, r7
 800a018:	f7ff ff1a 	bl	8009e50 <__multiply>
 800a01c:	4631      	mov	r1, r6
 800a01e:	4680      	mov	r8, r0
 800a020:	4638      	mov	r0, r7
 800a022:	f7ff fe4b 	bl	8009cbc <_Bfree>
 800a026:	4646      	mov	r6, r8
 800a028:	106d      	asrs	r5, r5, #1
 800a02a:	d00b      	beq.n	800a044 <__pow5mult+0xa0>
 800a02c:	6820      	ldr	r0, [r4, #0]
 800a02e:	b938      	cbnz	r0, 800a040 <__pow5mult+0x9c>
 800a030:	4622      	mov	r2, r4
 800a032:	4621      	mov	r1, r4
 800a034:	4638      	mov	r0, r7
 800a036:	f7ff ff0b 	bl	8009e50 <__multiply>
 800a03a:	6020      	str	r0, [r4, #0]
 800a03c:	f8c0 9000 	str.w	r9, [r0]
 800a040:	4604      	mov	r4, r0
 800a042:	e7e4      	b.n	800a00e <__pow5mult+0x6a>
 800a044:	4630      	mov	r0, r6
 800a046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a04a:	bf00      	nop
 800a04c:	0800b72c 	.word	0x0800b72c
 800a050:	0800b5a0 	.word	0x0800b5a0
 800a054:	0800b6d2 	.word	0x0800b6d2

0800a058 <__lshift>:
 800a058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a05c:	460c      	mov	r4, r1
 800a05e:	6849      	ldr	r1, [r1, #4]
 800a060:	6923      	ldr	r3, [r4, #16]
 800a062:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a066:	68a3      	ldr	r3, [r4, #8]
 800a068:	4607      	mov	r7, r0
 800a06a:	4691      	mov	r9, r2
 800a06c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a070:	f108 0601 	add.w	r6, r8, #1
 800a074:	42b3      	cmp	r3, r6
 800a076:	db0b      	blt.n	800a090 <__lshift+0x38>
 800a078:	4638      	mov	r0, r7
 800a07a:	f7ff fddf 	bl	8009c3c <_Balloc>
 800a07e:	4605      	mov	r5, r0
 800a080:	b948      	cbnz	r0, 800a096 <__lshift+0x3e>
 800a082:	4602      	mov	r2, r0
 800a084:	4b28      	ldr	r3, [pc, #160]	@ (800a128 <__lshift+0xd0>)
 800a086:	4829      	ldr	r0, [pc, #164]	@ (800a12c <__lshift+0xd4>)
 800a088:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a08c:	f7fe fcb2 	bl	80089f4 <__assert_func>
 800a090:	3101      	adds	r1, #1
 800a092:	005b      	lsls	r3, r3, #1
 800a094:	e7ee      	b.n	800a074 <__lshift+0x1c>
 800a096:	2300      	movs	r3, #0
 800a098:	f100 0114 	add.w	r1, r0, #20
 800a09c:	f100 0210 	add.w	r2, r0, #16
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	4553      	cmp	r3, sl
 800a0a4:	db33      	blt.n	800a10e <__lshift+0xb6>
 800a0a6:	6920      	ldr	r0, [r4, #16]
 800a0a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a0ac:	f104 0314 	add.w	r3, r4, #20
 800a0b0:	f019 091f 	ands.w	r9, r9, #31
 800a0b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a0b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a0bc:	d02b      	beq.n	800a116 <__lshift+0xbe>
 800a0be:	f1c9 0e20 	rsb	lr, r9, #32
 800a0c2:	468a      	mov	sl, r1
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	6818      	ldr	r0, [r3, #0]
 800a0c8:	fa00 f009 	lsl.w	r0, r0, r9
 800a0cc:	4310      	orrs	r0, r2
 800a0ce:	f84a 0b04 	str.w	r0, [sl], #4
 800a0d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0d6:	459c      	cmp	ip, r3
 800a0d8:	fa22 f20e 	lsr.w	r2, r2, lr
 800a0dc:	d8f3      	bhi.n	800a0c6 <__lshift+0x6e>
 800a0de:	ebac 0304 	sub.w	r3, ip, r4
 800a0e2:	3b15      	subs	r3, #21
 800a0e4:	f023 0303 	bic.w	r3, r3, #3
 800a0e8:	3304      	adds	r3, #4
 800a0ea:	f104 0015 	add.w	r0, r4, #21
 800a0ee:	4584      	cmp	ip, r0
 800a0f0:	bf38      	it	cc
 800a0f2:	2304      	movcc	r3, #4
 800a0f4:	50ca      	str	r2, [r1, r3]
 800a0f6:	b10a      	cbz	r2, 800a0fc <__lshift+0xa4>
 800a0f8:	f108 0602 	add.w	r6, r8, #2
 800a0fc:	3e01      	subs	r6, #1
 800a0fe:	4638      	mov	r0, r7
 800a100:	612e      	str	r6, [r5, #16]
 800a102:	4621      	mov	r1, r4
 800a104:	f7ff fdda 	bl	8009cbc <_Bfree>
 800a108:	4628      	mov	r0, r5
 800a10a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a10e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a112:	3301      	adds	r3, #1
 800a114:	e7c5      	b.n	800a0a2 <__lshift+0x4a>
 800a116:	3904      	subs	r1, #4
 800a118:	f853 2b04 	ldr.w	r2, [r3], #4
 800a11c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a120:	459c      	cmp	ip, r3
 800a122:	d8f9      	bhi.n	800a118 <__lshift+0xc0>
 800a124:	e7ea      	b.n	800a0fc <__lshift+0xa4>
 800a126:	bf00      	nop
 800a128:	0800b6b0 	.word	0x0800b6b0
 800a12c:	0800b6d2 	.word	0x0800b6d2

0800a130 <__mcmp>:
 800a130:	690a      	ldr	r2, [r1, #16]
 800a132:	4603      	mov	r3, r0
 800a134:	6900      	ldr	r0, [r0, #16]
 800a136:	1a80      	subs	r0, r0, r2
 800a138:	b530      	push	{r4, r5, lr}
 800a13a:	d10e      	bne.n	800a15a <__mcmp+0x2a>
 800a13c:	3314      	adds	r3, #20
 800a13e:	3114      	adds	r1, #20
 800a140:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a144:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a148:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a14c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a150:	4295      	cmp	r5, r2
 800a152:	d003      	beq.n	800a15c <__mcmp+0x2c>
 800a154:	d205      	bcs.n	800a162 <__mcmp+0x32>
 800a156:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a15a:	bd30      	pop	{r4, r5, pc}
 800a15c:	42a3      	cmp	r3, r4
 800a15e:	d3f3      	bcc.n	800a148 <__mcmp+0x18>
 800a160:	e7fb      	b.n	800a15a <__mcmp+0x2a>
 800a162:	2001      	movs	r0, #1
 800a164:	e7f9      	b.n	800a15a <__mcmp+0x2a>
	...

0800a168 <__mdiff>:
 800a168:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a16c:	4689      	mov	r9, r1
 800a16e:	4606      	mov	r6, r0
 800a170:	4611      	mov	r1, r2
 800a172:	4648      	mov	r0, r9
 800a174:	4614      	mov	r4, r2
 800a176:	f7ff ffdb 	bl	800a130 <__mcmp>
 800a17a:	1e05      	subs	r5, r0, #0
 800a17c:	d112      	bne.n	800a1a4 <__mdiff+0x3c>
 800a17e:	4629      	mov	r1, r5
 800a180:	4630      	mov	r0, r6
 800a182:	f7ff fd5b 	bl	8009c3c <_Balloc>
 800a186:	4602      	mov	r2, r0
 800a188:	b928      	cbnz	r0, 800a196 <__mdiff+0x2e>
 800a18a:	4b3f      	ldr	r3, [pc, #252]	@ (800a288 <__mdiff+0x120>)
 800a18c:	f240 2137 	movw	r1, #567	@ 0x237
 800a190:	483e      	ldr	r0, [pc, #248]	@ (800a28c <__mdiff+0x124>)
 800a192:	f7fe fc2f 	bl	80089f4 <__assert_func>
 800a196:	2301      	movs	r3, #1
 800a198:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a19c:	4610      	mov	r0, r2
 800a19e:	b003      	add	sp, #12
 800a1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1a4:	bfbc      	itt	lt
 800a1a6:	464b      	movlt	r3, r9
 800a1a8:	46a1      	movlt	r9, r4
 800a1aa:	4630      	mov	r0, r6
 800a1ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a1b0:	bfba      	itte	lt
 800a1b2:	461c      	movlt	r4, r3
 800a1b4:	2501      	movlt	r5, #1
 800a1b6:	2500      	movge	r5, #0
 800a1b8:	f7ff fd40 	bl	8009c3c <_Balloc>
 800a1bc:	4602      	mov	r2, r0
 800a1be:	b918      	cbnz	r0, 800a1c8 <__mdiff+0x60>
 800a1c0:	4b31      	ldr	r3, [pc, #196]	@ (800a288 <__mdiff+0x120>)
 800a1c2:	f240 2145 	movw	r1, #581	@ 0x245
 800a1c6:	e7e3      	b.n	800a190 <__mdiff+0x28>
 800a1c8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a1cc:	6926      	ldr	r6, [r4, #16]
 800a1ce:	60c5      	str	r5, [r0, #12]
 800a1d0:	f109 0310 	add.w	r3, r9, #16
 800a1d4:	f109 0514 	add.w	r5, r9, #20
 800a1d8:	f104 0e14 	add.w	lr, r4, #20
 800a1dc:	f100 0b14 	add.w	fp, r0, #20
 800a1e0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a1e4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a1e8:	9301      	str	r3, [sp, #4]
 800a1ea:	46d9      	mov	r9, fp
 800a1ec:	f04f 0c00 	mov.w	ip, #0
 800a1f0:	9b01      	ldr	r3, [sp, #4]
 800a1f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a1f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a1fa:	9301      	str	r3, [sp, #4]
 800a1fc:	fa1f f38a 	uxth.w	r3, sl
 800a200:	4619      	mov	r1, r3
 800a202:	b283      	uxth	r3, r0
 800a204:	1acb      	subs	r3, r1, r3
 800a206:	0c00      	lsrs	r0, r0, #16
 800a208:	4463      	add	r3, ip
 800a20a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a20e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a212:	b29b      	uxth	r3, r3
 800a214:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a218:	4576      	cmp	r6, lr
 800a21a:	f849 3b04 	str.w	r3, [r9], #4
 800a21e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a222:	d8e5      	bhi.n	800a1f0 <__mdiff+0x88>
 800a224:	1b33      	subs	r3, r6, r4
 800a226:	3b15      	subs	r3, #21
 800a228:	f023 0303 	bic.w	r3, r3, #3
 800a22c:	3415      	adds	r4, #21
 800a22e:	3304      	adds	r3, #4
 800a230:	42a6      	cmp	r6, r4
 800a232:	bf38      	it	cc
 800a234:	2304      	movcc	r3, #4
 800a236:	441d      	add	r5, r3
 800a238:	445b      	add	r3, fp
 800a23a:	461e      	mov	r6, r3
 800a23c:	462c      	mov	r4, r5
 800a23e:	4544      	cmp	r4, r8
 800a240:	d30e      	bcc.n	800a260 <__mdiff+0xf8>
 800a242:	f108 0103 	add.w	r1, r8, #3
 800a246:	1b49      	subs	r1, r1, r5
 800a248:	f021 0103 	bic.w	r1, r1, #3
 800a24c:	3d03      	subs	r5, #3
 800a24e:	45a8      	cmp	r8, r5
 800a250:	bf38      	it	cc
 800a252:	2100      	movcc	r1, #0
 800a254:	440b      	add	r3, r1
 800a256:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a25a:	b191      	cbz	r1, 800a282 <__mdiff+0x11a>
 800a25c:	6117      	str	r7, [r2, #16]
 800a25e:	e79d      	b.n	800a19c <__mdiff+0x34>
 800a260:	f854 1b04 	ldr.w	r1, [r4], #4
 800a264:	46e6      	mov	lr, ip
 800a266:	0c08      	lsrs	r0, r1, #16
 800a268:	fa1c fc81 	uxtah	ip, ip, r1
 800a26c:	4471      	add	r1, lr
 800a26e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a272:	b289      	uxth	r1, r1
 800a274:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a278:	f846 1b04 	str.w	r1, [r6], #4
 800a27c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a280:	e7dd      	b.n	800a23e <__mdiff+0xd6>
 800a282:	3f01      	subs	r7, #1
 800a284:	e7e7      	b.n	800a256 <__mdiff+0xee>
 800a286:	bf00      	nop
 800a288:	0800b6b0 	.word	0x0800b6b0
 800a28c:	0800b6d2 	.word	0x0800b6d2

0800a290 <__d2b>:
 800a290:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a294:	460f      	mov	r7, r1
 800a296:	2101      	movs	r1, #1
 800a298:	ec59 8b10 	vmov	r8, r9, d0
 800a29c:	4616      	mov	r6, r2
 800a29e:	f7ff fccd 	bl	8009c3c <_Balloc>
 800a2a2:	4604      	mov	r4, r0
 800a2a4:	b930      	cbnz	r0, 800a2b4 <__d2b+0x24>
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	4b23      	ldr	r3, [pc, #140]	@ (800a338 <__d2b+0xa8>)
 800a2aa:	4824      	ldr	r0, [pc, #144]	@ (800a33c <__d2b+0xac>)
 800a2ac:	f240 310f 	movw	r1, #783	@ 0x30f
 800a2b0:	f7fe fba0 	bl	80089f4 <__assert_func>
 800a2b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a2b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a2bc:	b10d      	cbz	r5, 800a2c2 <__d2b+0x32>
 800a2be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a2c2:	9301      	str	r3, [sp, #4]
 800a2c4:	f1b8 0300 	subs.w	r3, r8, #0
 800a2c8:	d023      	beq.n	800a312 <__d2b+0x82>
 800a2ca:	4668      	mov	r0, sp
 800a2cc:	9300      	str	r3, [sp, #0]
 800a2ce:	f7ff fd7c 	bl	8009dca <__lo0bits>
 800a2d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a2d6:	b1d0      	cbz	r0, 800a30e <__d2b+0x7e>
 800a2d8:	f1c0 0320 	rsb	r3, r0, #32
 800a2dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a2e0:	430b      	orrs	r3, r1
 800a2e2:	40c2      	lsrs	r2, r0
 800a2e4:	6163      	str	r3, [r4, #20]
 800a2e6:	9201      	str	r2, [sp, #4]
 800a2e8:	9b01      	ldr	r3, [sp, #4]
 800a2ea:	61a3      	str	r3, [r4, #24]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	bf0c      	ite	eq
 800a2f0:	2201      	moveq	r2, #1
 800a2f2:	2202      	movne	r2, #2
 800a2f4:	6122      	str	r2, [r4, #16]
 800a2f6:	b1a5      	cbz	r5, 800a322 <__d2b+0x92>
 800a2f8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a2fc:	4405      	add	r5, r0
 800a2fe:	603d      	str	r5, [r7, #0]
 800a300:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a304:	6030      	str	r0, [r6, #0]
 800a306:	4620      	mov	r0, r4
 800a308:	b003      	add	sp, #12
 800a30a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a30e:	6161      	str	r1, [r4, #20]
 800a310:	e7ea      	b.n	800a2e8 <__d2b+0x58>
 800a312:	a801      	add	r0, sp, #4
 800a314:	f7ff fd59 	bl	8009dca <__lo0bits>
 800a318:	9b01      	ldr	r3, [sp, #4]
 800a31a:	6163      	str	r3, [r4, #20]
 800a31c:	3020      	adds	r0, #32
 800a31e:	2201      	movs	r2, #1
 800a320:	e7e8      	b.n	800a2f4 <__d2b+0x64>
 800a322:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a326:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a32a:	6038      	str	r0, [r7, #0]
 800a32c:	6918      	ldr	r0, [r3, #16]
 800a32e:	f7ff fd2d 	bl	8009d8c <__hi0bits>
 800a332:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a336:	e7e5      	b.n	800a304 <__d2b+0x74>
 800a338:	0800b6b0 	.word	0x0800b6b0
 800a33c:	0800b6d2 	.word	0x0800b6d2

0800a340 <__sread>:
 800a340:	b510      	push	{r4, lr}
 800a342:	460c      	mov	r4, r1
 800a344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a348:	f000 f8ba 	bl	800a4c0 <_read_r>
 800a34c:	2800      	cmp	r0, #0
 800a34e:	bfab      	itete	ge
 800a350:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a352:	89a3      	ldrhlt	r3, [r4, #12]
 800a354:	181b      	addge	r3, r3, r0
 800a356:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a35a:	bfac      	ite	ge
 800a35c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a35e:	81a3      	strhlt	r3, [r4, #12]
 800a360:	bd10      	pop	{r4, pc}

0800a362 <__swrite>:
 800a362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a366:	461f      	mov	r7, r3
 800a368:	898b      	ldrh	r3, [r1, #12]
 800a36a:	05db      	lsls	r3, r3, #23
 800a36c:	4605      	mov	r5, r0
 800a36e:	460c      	mov	r4, r1
 800a370:	4616      	mov	r6, r2
 800a372:	d505      	bpl.n	800a380 <__swrite+0x1e>
 800a374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a378:	2302      	movs	r3, #2
 800a37a:	2200      	movs	r2, #0
 800a37c:	f000 f88e 	bl	800a49c <_lseek_r>
 800a380:	89a3      	ldrh	r3, [r4, #12]
 800a382:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a386:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a38a:	81a3      	strh	r3, [r4, #12]
 800a38c:	4632      	mov	r2, r6
 800a38e:	463b      	mov	r3, r7
 800a390:	4628      	mov	r0, r5
 800a392:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a396:	f000 b8b5 	b.w	800a504 <_write_r>

0800a39a <__sseek>:
 800a39a:	b510      	push	{r4, lr}
 800a39c:	460c      	mov	r4, r1
 800a39e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3a2:	f000 f87b 	bl	800a49c <_lseek_r>
 800a3a6:	1c43      	adds	r3, r0, #1
 800a3a8:	89a3      	ldrh	r3, [r4, #12]
 800a3aa:	bf15      	itete	ne
 800a3ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a3ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a3b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a3b6:	81a3      	strheq	r3, [r4, #12]
 800a3b8:	bf18      	it	ne
 800a3ba:	81a3      	strhne	r3, [r4, #12]
 800a3bc:	bd10      	pop	{r4, pc}

0800a3be <__sclose>:
 800a3be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3c2:	f000 b85b 	b.w	800a47c <_close_r>
	...

0800a3c8 <fiprintf>:
 800a3c8:	b40e      	push	{r1, r2, r3}
 800a3ca:	b503      	push	{r0, r1, lr}
 800a3cc:	4601      	mov	r1, r0
 800a3ce:	ab03      	add	r3, sp, #12
 800a3d0:	4805      	ldr	r0, [pc, #20]	@ (800a3e8 <fiprintf+0x20>)
 800a3d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3d6:	6800      	ldr	r0, [r0, #0]
 800a3d8:	9301      	str	r3, [sp, #4]
 800a3da:	f000 f943 	bl	800a664 <_vfiprintf_r>
 800a3de:	b002      	add	sp, #8
 800a3e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3e4:	b003      	add	sp, #12
 800a3e6:	4770      	bx	lr
 800a3e8:	200000cc 	.word	0x200000cc

0800a3ec <_realloc_r>:
 800a3ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3f0:	4680      	mov	r8, r0
 800a3f2:	4615      	mov	r5, r2
 800a3f4:	460c      	mov	r4, r1
 800a3f6:	b921      	cbnz	r1, 800a402 <_realloc_r+0x16>
 800a3f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3fc:	4611      	mov	r1, r2
 800a3fe:	f7ff bae5 	b.w	80099cc <_malloc_r>
 800a402:	b92a      	cbnz	r2, 800a410 <_realloc_r+0x24>
 800a404:	f000 f8ba 	bl	800a57c <_free_r>
 800a408:	2400      	movs	r4, #0
 800a40a:	4620      	mov	r0, r4
 800a40c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a410:	f000 fa52 	bl	800a8b8 <_malloc_usable_size_r>
 800a414:	4285      	cmp	r5, r0
 800a416:	4606      	mov	r6, r0
 800a418:	d802      	bhi.n	800a420 <_realloc_r+0x34>
 800a41a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a41e:	d8f4      	bhi.n	800a40a <_realloc_r+0x1e>
 800a420:	4629      	mov	r1, r5
 800a422:	4640      	mov	r0, r8
 800a424:	f7ff fad2 	bl	80099cc <_malloc_r>
 800a428:	4607      	mov	r7, r0
 800a42a:	2800      	cmp	r0, #0
 800a42c:	d0ec      	beq.n	800a408 <_realloc_r+0x1c>
 800a42e:	42b5      	cmp	r5, r6
 800a430:	462a      	mov	r2, r5
 800a432:	4621      	mov	r1, r4
 800a434:	bf28      	it	cs
 800a436:	4632      	movcs	r2, r6
 800a438:	f000 f876 	bl	800a528 <memcpy>
 800a43c:	4621      	mov	r1, r4
 800a43e:	4640      	mov	r0, r8
 800a440:	f000 f89c 	bl	800a57c <_free_r>
 800a444:	463c      	mov	r4, r7
 800a446:	e7e0      	b.n	800a40a <_realloc_r+0x1e>

0800a448 <memmove>:
 800a448:	4288      	cmp	r0, r1
 800a44a:	b510      	push	{r4, lr}
 800a44c:	eb01 0402 	add.w	r4, r1, r2
 800a450:	d902      	bls.n	800a458 <memmove+0x10>
 800a452:	4284      	cmp	r4, r0
 800a454:	4623      	mov	r3, r4
 800a456:	d807      	bhi.n	800a468 <memmove+0x20>
 800a458:	1e43      	subs	r3, r0, #1
 800a45a:	42a1      	cmp	r1, r4
 800a45c:	d008      	beq.n	800a470 <memmove+0x28>
 800a45e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a462:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a466:	e7f8      	b.n	800a45a <memmove+0x12>
 800a468:	4402      	add	r2, r0
 800a46a:	4601      	mov	r1, r0
 800a46c:	428a      	cmp	r2, r1
 800a46e:	d100      	bne.n	800a472 <memmove+0x2a>
 800a470:	bd10      	pop	{r4, pc}
 800a472:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a476:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a47a:	e7f7      	b.n	800a46c <memmove+0x24>

0800a47c <_close_r>:
 800a47c:	b538      	push	{r3, r4, r5, lr}
 800a47e:	4d06      	ldr	r5, [pc, #24]	@ (800a498 <_close_r+0x1c>)
 800a480:	2300      	movs	r3, #0
 800a482:	4604      	mov	r4, r0
 800a484:	4608      	mov	r0, r1
 800a486:	602b      	str	r3, [r5, #0]
 800a488:	f7f8 f832 	bl	80024f0 <_close>
 800a48c:	1c43      	adds	r3, r0, #1
 800a48e:	d102      	bne.n	800a496 <_close_r+0x1a>
 800a490:	682b      	ldr	r3, [r5, #0]
 800a492:	b103      	cbz	r3, 800a496 <_close_r+0x1a>
 800a494:	6023      	str	r3, [r4, #0]
 800a496:	bd38      	pop	{r3, r4, r5, pc}
 800a498:	20000914 	.word	0x20000914

0800a49c <_lseek_r>:
 800a49c:	b538      	push	{r3, r4, r5, lr}
 800a49e:	4d07      	ldr	r5, [pc, #28]	@ (800a4bc <_lseek_r+0x20>)
 800a4a0:	4604      	mov	r4, r0
 800a4a2:	4608      	mov	r0, r1
 800a4a4:	4611      	mov	r1, r2
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	602a      	str	r2, [r5, #0]
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	f7f8 f847 	bl	800253e <_lseek>
 800a4b0:	1c43      	adds	r3, r0, #1
 800a4b2:	d102      	bne.n	800a4ba <_lseek_r+0x1e>
 800a4b4:	682b      	ldr	r3, [r5, #0]
 800a4b6:	b103      	cbz	r3, 800a4ba <_lseek_r+0x1e>
 800a4b8:	6023      	str	r3, [r4, #0]
 800a4ba:	bd38      	pop	{r3, r4, r5, pc}
 800a4bc:	20000914 	.word	0x20000914

0800a4c0 <_read_r>:
 800a4c0:	b538      	push	{r3, r4, r5, lr}
 800a4c2:	4d07      	ldr	r5, [pc, #28]	@ (800a4e0 <_read_r+0x20>)
 800a4c4:	4604      	mov	r4, r0
 800a4c6:	4608      	mov	r0, r1
 800a4c8:	4611      	mov	r1, r2
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	602a      	str	r2, [r5, #0]
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	f7f7 ffd5 	bl	800247e <_read>
 800a4d4:	1c43      	adds	r3, r0, #1
 800a4d6:	d102      	bne.n	800a4de <_read_r+0x1e>
 800a4d8:	682b      	ldr	r3, [r5, #0]
 800a4da:	b103      	cbz	r3, 800a4de <_read_r+0x1e>
 800a4dc:	6023      	str	r3, [r4, #0]
 800a4de:	bd38      	pop	{r3, r4, r5, pc}
 800a4e0:	20000914 	.word	0x20000914

0800a4e4 <_sbrk_r>:
 800a4e4:	b538      	push	{r3, r4, r5, lr}
 800a4e6:	4d06      	ldr	r5, [pc, #24]	@ (800a500 <_sbrk_r+0x1c>)
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	4604      	mov	r4, r0
 800a4ec:	4608      	mov	r0, r1
 800a4ee:	602b      	str	r3, [r5, #0]
 800a4f0:	f7f8 f832 	bl	8002558 <_sbrk>
 800a4f4:	1c43      	adds	r3, r0, #1
 800a4f6:	d102      	bne.n	800a4fe <_sbrk_r+0x1a>
 800a4f8:	682b      	ldr	r3, [r5, #0]
 800a4fa:	b103      	cbz	r3, 800a4fe <_sbrk_r+0x1a>
 800a4fc:	6023      	str	r3, [r4, #0]
 800a4fe:	bd38      	pop	{r3, r4, r5, pc}
 800a500:	20000914 	.word	0x20000914

0800a504 <_write_r>:
 800a504:	b538      	push	{r3, r4, r5, lr}
 800a506:	4d07      	ldr	r5, [pc, #28]	@ (800a524 <_write_r+0x20>)
 800a508:	4604      	mov	r4, r0
 800a50a:	4608      	mov	r0, r1
 800a50c:	4611      	mov	r1, r2
 800a50e:	2200      	movs	r2, #0
 800a510:	602a      	str	r2, [r5, #0]
 800a512:	461a      	mov	r2, r3
 800a514:	f7f7 ffd0 	bl	80024b8 <_write>
 800a518:	1c43      	adds	r3, r0, #1
 800a51a:	d102      	bne.n	800a522 <_write_r+0x1e>
 800a51c:	682b      	ldr	r3, [r5, #0]
 800a51e:	b103      	cbz	r3, 800a522 <_write_r+0x1e>
 800a520:	6023      	str	r3, [r4, #0]
 800a522:	bd38      	pop	{r3, r4, r5, pc}
 800a524:	20000914 	.word	0x20000914

0800a528 <memcpy>:
 800a528:	440a      	add	r2, r1
 800a52a:	4291      	cmp	r1, r2
 800a52c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a530:	d100      	bne.n	800a534 <memcpy+0xc>
 800a532:	4770      	bx	lr
 800a534:	b510      	push	{r4, lr}
 800a536:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a53a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a53e:	4291      	cmp	r1, r2
 800a540:	d1f9      	bne.n	800a536 <memcpy+0xe>
 800a542:	bd10      	pop	{r4, pc}

0800a544 <abort>:
 800a544:	b508      	push	{r3, lr}
 800a546:	2006      	movs	r0, #6
 800a548:	f000 fb0c 	bl	800ab64 <raise>
 800a54c:	2001      	movs	r0, #1
 800a54e:	f7f7 ff8b 	bl	8002468 <_exit>

0800a552 <_calloc_r>:
 800a552:	b570      	push	{r4, r5, r6, lr}
 800a554:	fba1 5402 	umull	r5, r4, r1, r2
 800a558:	b93c      	cbnz	r4, 800a56a <_calloc_r+0x18>
 800a55a:	4629      	mov	r1, r5
 800a55c:	f7ff fa36 	bl	80099cc <_malloc_r>
 800a560:	4606      	mov	r6, r0
 800a562:	b928      	cbnz	r0, 800a570 <_calloc_r+0x1e>
 800a564:	2600      	movs	r6, #0
 800a566:	4630      	mov	r0, r6
 800a568:	bd70      	pop	{r4, r5, r6, pc}
 800a56a:	220c      	movs	r2, #12
 800a56c:	6002      	str	r2, [r0, #0]
 800a56e:	e7f9      	b.n	800a564 <_calloc_r+0x12>
 800a570:	462a      	mov	r2, r5
 800a572:	4621      	mov	r1, r4
 800a574:	f7fe fa03 	bl	800897e <memset>
 800a578:	e7f5      	b.n	800a566 <_calloc_r+0x14>
	...

0800a57c <_free_r>:
 800a57c:	b538      	push	{r3, r4, r5, lr}
 800a57e:	4605      	mov	r5, r0
 800a580:	2900      	cmp	r1, #0
 800a582:	d041      	beq.n	800a608 <_free_r+0x8c>
 800a584:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a588:	1f0c      	subs	r4, r1, #4
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	bfb8      	it	lt
 800a58e:	18e4      	addlt	r4, r4, r3
 800a590:	f7ff fb48 	bl	8009c24 <__malloc_lock>
 800a594:	4a1d      	ldr	r2, [pc, #116]	@ (800a60c <_free_r+0x90>)
 800a596:	6813      	ldr	r3, [r2, #0]
 800a598:	b933      	cbnz	r3, 800a5a8 <_free_r+0x2c>
 800a59a:	6063      	str	r3, [r4, #4]
 800a59c:	6014      	str	r4, [r2, #0]
 800a59e:	4628      	mov	r0, r5
 800a5a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5a4:	f7ff bb44 	b.w	8009c30 <__malloc_unlock>
 800a5a8:	42a3      	cmp	r3, r4
 800a5aa:	d908      	bls.n	800a5be <_free_r+0x42>
 800a5ac:	6820      	ldr	r0, [r4, #0]
 800a5ae:	1821      	adds	r1, r4, r0
 800a5b0:	428b      	cmp	r3, r1
 800a5b2:	bf01      	itttt	eq
 800a5b4:	6819      	ldreq	r1, [r3, #0]
 800a5b6:	685b      	ldreq	r3, [r3, #4]
 800a5b8:	1809      	addeq	r1, r1, r0
 800a5ba:	6021      	streq	r1, [r4, #0]
 800a5bc:	e7ed      	b.n	800a59a <_free_r+0x1e>
 800a5be:	461a      	mov	r2, r3
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	b10b      	cbz	r3, 800a5c8 <_free_r+0x4c>
 800a5c4:	42a3      	cmp	r3, r4
 800a5c6:	d9fa      	bls.n	800a5be <_free_r+0x42>
 800a5c8:	6811      	ldr	r1, [r2, #0]
 800a5ca:	1850      	adds	r0, r2, r1
 800a5cc:	42a0      	cmp	r0, r4
 800a5ce:	d10b      	bne.n	800a5e8 <_free_r+0x6c>
 800a5d0:	6820      	ldr	r0, [r4, #0]
 800a5d2:	4401      	add	r1, r0
 800a5d4:	1850      	adds	r0, r2, r1
 800a5d6:	4283      	cmp	r3, r0
 800a5d8:	6011      	str	r1, [r2, #0]
 800a5da:	d1e0      	bne.n	800a59e <_free_r+0x22>
 800a5dc:	6818      	ldr	r0, [r3, #0]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	6053      	str	r3, [r2, #4]
 800a5e2:	4408      	add	r0, r1
 800a5e4:	6010      	str	r0, [r2, #0]
 800a5e6:	e7da      	b.n	800a59e <_free_r+0x22>
 800a5e8:	d902      	bls.n	800a5f0 <_free_r+0x74>
 800a5ea:	230c      	movs	r3, #12
 800a5ec:	602b      	str	r3, [r5, #0]
 800a5ee:	e7d6      	b.n	800a59e <_free_r+0x22>
 800a5f0:	6820      	ldr	r0, [r4, #0]
 800a5f2:	1821      	adds	r1, r4, r0
 800a5f4:	428b      	cmp	r3, r1
 800a5f6:	bf04      	itt	eq
 800a5f8:	6819      	ldreq	r1, [r3, #0]
 800a5fa:	685b      	ldreq	r3, [r3, #4]
 800a5fc:	6063      	str	r3, [r4, #4]
 800a5fe:	bf04      	itt	eq
 800a600:	1809      	addeq	r1, r1, r0
 800a602:	6021      	streq	r1, [r4, #0]
 800a604:	6054      	str	r4, [r2, #4]
 800a606:	e7ca      	b.n	800a59e <_free_r+0x22>
 800a608:	bd38      	pop	{r3, r4, r5, pc}
 800a60a:	bf00      	nop
 800a60c:	20000910 	.word	0x20000910

0800a610 <__sfputc_r>:
 800a610:	6893      	ldr	r3, [r2, #8]
 800a612:	3b01      	subs	r3, #1
 800a614:	2b00      	cmp	r3, #0
 800a616:	b410      	push	{r4}
 800a618:	6093      	str	r3, [r2, #8]
 800a61a:	da08      	bge.n	800a62e <__sfputc_r+0x1e>
 800a61c:	6994      	ldr	r4, [r2, #24]
 800a61e:	42a3      	cmp	r3, r4
 800a620:	db01      	blt.n	800a626 <__sfputc_r+0x16>
 800a622:	290a      	cmp	r1, #10
 800a624:	d103      	bne.n	800a62e <__sfputc_r+0x1e>
 800a626:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a62a:	f000 b94d 	b.w	800a8c8 <__swbuf_r>
 800a62e:	6813      	ldr	r3, [r2, #0]
 800a630:	1c58      	adds	r0, r3, #1
 800a632:	6010      	str	r0, [r2, #0]
 800a634:	7019      	strb	r1, [r3, #0]
 800a636:	4608      	mov	r0, r1
 800a638:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a63c:	4770      	bx	lr

0800a63e <__sfputs_r>:
 800a63e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a640:	4606      	mov	r6, r0
 800a642:	460f      	mov	r7, r1
 800a644:	4614      	mov	r4, r2
 800a646:	18d5      	adds	r5, r2, r3
 800a648:	42ac      	cmp	r4, r5
 800a64a:	d101      	bne.n	800a650 <__sfputs_r+0x12>
 800a64c:	2000      	movs	r0, #0
 800a64e:	e007      	b.n	800a660 <__sfputs_r+0x22>
 800a650:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a654:	463a      	mov	r2, r7
 800a656:	4630      	mov	r0, r6
 800a658:	f7ff ffda 	bl	800a610 <__sfputc_r>
 800a65c:	1c43      	adds	r3, r0, #1
 800a65e:	d1f3      	bne.n	800a648 <__sfputs_r+0xa>
 800a660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a664 <_vfiprintf_r>:
 800a664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a668:	460d      	mov	r5, r1
 800a66a:	b09d      	sub	sp, #116	@ 0x74
 800a66c:	4614      	mov	r4, r2
 800a66e:	4698      	mov	r8, r3
 800a670:	4606      	mov	r6, r0
 800a672:	b118      	cbz	r0, 800a67c <_vfiprintf_r+0x18>
 800a674:	6a03      	ldr	r3, [r0, #32]
 800a676:	b90b      	cbnz	r3, 800a67c <_vfiprintf_r+0x18>
 800a678:	f7fe f938 	bl	80088ec <__sinit>
 800a67c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a67e:	07d9      	lsls	r1, r3, #31
 800a680:	d405      	bmi.n	800a68e <_vfiprintf_r+0x2a>
 800a682:	89ab      	ldrh	r3, [r5, #12]
 800a684:	059a      	lsls	r2, r3, #22
 800a686:	d402      	bmi.n	800a68e <_vfiprintf_r+0x2a>
 800a688:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a68a:	f7fe f9b0 	bl	80089ee <__retarget_lock_acquire_recursive>
 800a68e:	89ab      	ldrh	r3, [r5, #12]
 800a690:	071b      	lsls	r3, r3, #28
 800a692:	d501      	bpl.n	800a698 <_vfiprintf_r+0x34>
 800a694:	692b      	ldr	r3, [r5, #16]
 800a696:	b99b      	cbnz	r3, 800a6c0 <_vfiprintf_r+0x5c>
 800a698:	4629      	mov	r1, r5
 800a69a:	4630      	mov	r0, r6
 800a69c:	f000 f952 	bl	800a944 <__swsetup_r>
 800a6a0:	b170      	cbz	r0, 800a6c0 <_vfiprintf_r+0x5c>
 800a6a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a6a4:	07dc      	lsls	r4, r3, #31
 800a6a6:	d504      	bpl.n	800a6b2 <_vfiprintf_r+0x4e>
 800a6a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a6ac:	b01d      	add	sp, #116	@ 0x74
 800a6ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6b2:	89ab      	ldrh	r3, [r5, #12]
 800a6b4:	0598      	lsls	r0, r3, #22
 800a6b6:	d4f7      	bmi.n	800a6a8 <_vfiprintf_r+0x44>
 800a6b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a6ba:	f7fe f999 	bl	80089f0 <__retarget_lock_release_recursive>
 800a6be:	e7f3      	b.n	800a6a8 <_vfiprintf_r+0x44>
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6c4:	2320      	movs	r3, #32
 800a6c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a6ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6ce:	2330      	movs	r3, #48	@ 0x30
 800a6d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a880 <_vfiprintf_r+0x21c>
 800a6d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a6d8:	f04f 0901 	mov.w	r9, #1
 800a6dc:	4623      	mov	r3, r4
 800a6de:	469a      	mov	sl, r3
 800a6e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6e4:	b10a      	cbz	r2, 800a6ea <_vfiprintf_r+0x86>
 800a6e6:	2a25      	cmp	r2, #37	@ 0x25
 800a6e8:	d1f9      	bne.n	800a6de <_vfiprintf_r+0x7a>
 800a6ea:	ebba 0b04 	subs.w	fp, sl, r4
 800a6ee:	d00b      	beq.n	800a708 <_vfiprintf_r+0xa4>
 800a6f0:	465b      	mov	r3, fp
 800a6f2:	4622      	mov	r2, r4
 800a6f4:	4629      	mov	r1, r5
 800a6f6:	4630      	mov	r0, r6
 800a6f8:	f7ff ffa1 	bl	800a63e <__sfputs_r>
 800a6fc:	3001      	adds	r0, #1
 800a6fe:	f000 80a7 	beq.w	800a850 <_vfiprintf_r+0x1ec>
 800a702:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a704:	445a      	add	r2, fp
 800a706:	9209      	str	r2, [sp, #36]	@ 0x24
 800a708:	f89a 3000 	ldrb.w	r3, [sl]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	f000 809f 	beq.w	800a850 <_vfiprintf_r+0x1ec>
 800a712:	2300      	movs	r3, #0
 800a714:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a718:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a71c:	f10a 0a01 	add.w	sl, sl, #1
 800a720:	9304      	str	r3, [sp, #16]
 800a722:	9307      	str	r3, [sp, #28]
 800a724:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a728:	931a      	str	r3, [sp, #104]	@ 0x68
 800a72a:	4654      	mov	r4, sl
 800a72c:	2205      	movs	r2, #5
 800a72e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a732:	4853      	ldr	r0, [pc, #332]	@ (800a880 <_vfiprintf_r+0x21c>)
 800a734:	f7f5 fd64 	bl	8000200 <memchr>
 800a738:	9a04      	ldr	r2, [sp, #16]
 800a73a:	b9d8      	cbnz	r0, 800a774 <_vfiprintf_r+0x110>
 800a73c:	06d1      	lsls	r1, r2, #27
 800a73e:	bf44      	itt	mi
 800a740:	2320      	movmi	r3, #32
 800a742:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a746:	0713      	lsls	r3, r2, #28
 800a748:	bf44      	itt	mi
 800a74a:	232b      	movmi	r3, #43	@ 0x2b
 800a74c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a750:	f89a 3000 	ldrb.w	r3, [sl]
 800a754:	2b2a      	cmp	r3, #42	@ 0x2a
 800a756:	d015      	beq.n	800a784 <_vfiprintf_r+0x120>
 800a758:	9a07      	ldr	r2, [sp, #28]
 800a75a:	4654      	mov	r4, sl
 800a75c:	2000      	movs	r0, #0
 800a75e:	f04f 0c0a 	mov.w	ip, #10
 800a762:	4621      	mov	r1, r4
 800a764:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a768:	3b30      	subs	r3, #48	@ 0x30
 800a76a:	2b09      	cmp	r3, #9
 800a76c:	d94b      	bls.n	800a806 <_vfiprintf_r+0x1a2>
 800a76e:	b1b0      	cbz	r0, 800a79e <_vfiprintf_r+0x13a>
 800a770:	9207      	str	r2, [sp, #28]
 800a772:	e014      	b.n	800a79e <_vfiprintf_r+0x13a>
 800a774:	eba0 0308 	sub.w	r3, r0, r8
 800a778:	fa09 f303 	lsl.w	r3, r9, r3
 800a77c:	4313      	orrs	r3, r2
 800a77e:	9304      	str	r3, [sp, #16]
 800a780:	46a2      	mov	sl, r4
 800a782:	e7d2      	b.n	800a72a <_vfiprintf_r+0xc6>
 800a784:	9b03      	ldr	r3, [sp, #12]
 800a786:	1d19      	adds	r1, r3, #4
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	9103      	str	r1, [sp, #12]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	bfbb      	ittet	lt
 800a790:	425b      	neglt	r3, r3
 800a792:	f042 0202 	orrlt.w	r2, r2, #2
 800a796:	9307      	strge	r3, [sp, #28]
 800a798:	9307      	strlt	r3, [sp, #28]
 800a79a:	bfb8      	it	lt
 800a79c:	9204      	strlt	r2, [sp, #16]
 800a79e:	7823      	ldrb	r3, [r4, #0]
 800a7a0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a7a2:	d10a      	bne.n	800a7ba <_vfiprintf_r+0x156>
 800a7a4:	7863      	ldrb	r3, [r4, #1]
 800a7a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a7a8:	d132      	bne.n	800a810 <_vfiprintf_r+0x1ac>
 800a7aa:	9b03      	ldr	r3, [sp, #12]
 800a7ac:	1d1a      	adds	r2, r3, #4
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	9203      	str	r2, [sp, #12]
 800a7b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a7b6:	3402      	adds	r4, #2
 800a7b8:	9305      	str	r3, [sp, #20]
 800a7ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a890 <_vfiprintf_r+0x22c>
 800a7be:	7821      	ldrb	r1, [r4, #0]
 800a7c0:	2203      	movs	r2, #3
 800a7c2:	4650      	mov	r0, sl
 800a7c4:	f7f5 fd1c 	bl	8000200 <memchr>
 800a7c8:	b138      	cbz	r0, 800a7da <_vfiprintf_r+0x176>
 800a7ca:	9b04      	ldr	r3, [sp, #16]
 800a7cc:	eba0 000a 	sub.w	r0, r0, sl
 800a7d0:	2240      	movs	r2, #64	@ 0x40
 800a7d2:	4082      	lsls	r2, r0
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	3401      	adds	r4, #1
 800a7d8:	9304      	str	r3, [sp, #16]
 800a7da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7de:	4829      	ldr	r0, [pc, #164]	@ (800a884 <_vfiprintf_r+0x220>)
 800a7e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a7e4:	2206      	movs	r2, #6
 800a7e6:	f7f5 fd0b 	bl	8000200 <memchr>
 800a7ea:	2800      	cmp	r0, #0
 800a7ec:	d03f      	beq.n	800a86e <_vfiprintf_r+0x20a>
 800a7ee:	4b26      	ldr	r3, [pc, #152]	@ (800a888 <_vfiprintf_r+0x224>)
 800a7f0:	bb1b      	cbnz	r3, 800a83a <_vfiprintf_r+0x1d6>
 800a7f2:	9b03      	ldr	r3, [sp, #12]
 800a7f4:	3307      	adds	r3, #7
 800a7f6:	f023 0307 	bic.w	r3, r3, #7
 800a7fa:	3308      	adds	r3, #8
 800a7fc:	9303      	str	r3, [sp, #12]
 800a7fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a800:	443b      	add	r3, r7
 800a802:	9309      	str	r3, [sp, #36]	@ 0x24
 800a804:	e76a      	b.n	800a6dc <_vfiprintf_r+0x78>
 800a806:	fb0c 3202 	mla	r2, ip, r2, r3
 800a80a:	460c      	mov	r4, r1
 800a80c:	2001      	movs	r0, #1
 800a80e:	e7a8      	b.n	800a762 <_vfiprintf_r+0xfe>
 800a810:	2300      	movs	r3, #0
 800a812:	3401      	adds	r4, #1
 800a814:	9305      	str	r3, [sp, #20]
 800a816:	4619      	mov	r1, r3
 800a818:	f04f 0c0a 	mov.w	ip, #10
 800a81c:	4620      	mov	r0, r4
 800a81e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a822:	3a30      	subs	r2, #48	@ 0x30
 800a824:	2a09      	cmp	r2, #9
 800a826:	d903      	bls.n	800a830 <_vfiprintf_r+0x1cc>
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d0c6      	beq.n	800a7ba <_vfiprintf_r+0x156>
 800a82c:	9105      	str	r1, [sp, #20]
 800a82e:	e7c4      	b.n	800a7ba <_vfiprintf_r+0x156>
 800a830:	fb0c 2101 	mla	r1, ip, r1, r2
 800a834:	4604      	mov	r4, r0
 800a836:	2301      	movs	r3, #1
 800a838:	e7f0      	b.n	800a81c <_vfiprintf_r+0x1b8>
 800a83a:	ab03      	add	r3, sp, #12
 800a83c:	9300      	str	r3, [sp, #0]
 800a83e:	462a      	mov	r2, r5
 800a840:	4b12      	ldr	r3, [pc, #72]	@ (800a88c <_vfiprintf_r+0x228>)
 800a842:	a904      	add	r1, sp, #16
 800a844:	4630      	mov	r0, r6
 800a846:	f7fd fb6d 	bl	8007f24 <_printf_float>
 800a84a:	4607      	mov	r7, r0
 800a84c:	1c78      	adds	r0, r7, #1
 800a84e:	d1d6      	bne.n	800a7fe <_vfiprintf_r+0x19a>
 800a850:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a852:	07d9      	lsls	r1, r3, #31
 800a854:	d405      	bmi.n	800a862 <_vfiprintf_r+0x1fe>
 800a856:	89ab      	ldrh	r3, [r5, #12]
 800a858:	059a      	lsls	r2, r3, #22
 800a85a:	d402      	bmi.n	800a862 <_vfiprintf_r+0x1fe>
 800a85c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a85e:	f7fe f8c7 	bl	80089f0 <__retarget_lock_release_recursive>
 800a862:	89ab      	ldrh	r3, [r5, #12]
 800a864:	065b      	lsls	r3, r3, #25
 800a866:	f53f af1f 	bmi.w	800a6a8 <_vfiprintf_r+0x44>
 800a86a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a86c:	e71e      	b.n	800a6ac <_vfiprintf_r+0x48>
 800a86e:	ab03      	add	r3, sp, #12
 800a870:	9300      	str	r3, [sp, #0]
 800a872:	462a      	mov	r2, r5
 800a874:	4b05      	ldr	r3, [pc, #20]	@ (800a88c <_vfiprintf_r+0x228>)
 800a876:	a904      	add	r1, sp, #16
 800a878:	4630      	mov	r0, r6
 800a87a:	f7fd fdeb 	bl	8008454 <_printf_i>
 800a87e:	e7e4      	b.n	800a84a <_vfiprintf_r+0x1e6>
 800a880:	0800b6c1 	.word	0x0800b6c1
 800a884:	0800b6cb 	.word	0x0800b6cb
 800a888:	08007f25 	.word	0x08007f25
 800a88c:	0800a63f 	.word	0x0800a63f
 800a890:	0800b6c7 	.word	0x0800b6c7

0800a894 <__ascii_mbtowc>:
 800a894:	b082      	sub	sp, #8
 800a896:	b901      	cbnz	r1, 800a89a <__ascii_mbtowc+0x6>
 800a898:	a901      	add	r1, sp, #4
 800a89a:	b142      	cbz	r2, 800a8ae <__ascii_mbtowc+0x1a>
 800a89c:	b14b      	cbz	r3, 800a8b2 <__ascii_mbtowc+0x1e>
 800a89e:	7813      	ldrb	r3, [r2, #0]
 800a8a0:	600b      	str	r3, [r1, #0]
 800a8a2:	7812      	ldrb	r2, [r2, #0]
 800a8a4:	1e10      	subs	r0, r2, #0
 800a8a6:	bf18      	it	ne
 800a8a8:	2001      	movne	r0, #1
 800a8aa:	b002      	add	sp, #8
 800a8ac:	4770      	bx	lr
 800a8ae:	4610      	mov	r0, r2
 800a8b0:	e7fb      	b.n	800a8aa <__ascii_mbtowc+0x16>
 800a8b2:	f06f 0001 	mvn.w	r0, #1
 800a8b6:	e7f8      	b.n	800a8aa <__ascii_mbtowc+0x16>

0800a8b8 <_malloc_usable_size_r>:
 800a8b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8bc:	1f18      	subs	r0, r3, #4
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	bfbc      	itt	lt
 800a8c2:	580b      	ldrlt	r3, [r1, r0]
 800a8c4:	18c0      	addlt	r0, r0, r3
 800a8c6:	4770      	bx	lr

0800a8c8 <__swbuf_r>:
 800a8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ca:	460e      	mov	r6, r1
 800a8cc:	4614      	mov	r4, r2
 800a8ce:	4605      	mov	r5, r0
 800a8d0:	b118      	cbz	r0, 800a8da <__swbuf_r+0x12>
 800a8d2:	6a03      	ldr	r3, [r0, #32]
 800a8d4:	b90b      	cbnz	r3, 800a8da <__swbuf_r+0x12>
 800a8d6:	f7fe f809 	bl	80088ec <__sinit>
 800a8da:	69a3      	ldr	r3, [r4, #24]
 800a8dc:	60a3      	str	r3, [r4, #8]
 800a8de:	89a3      	ldrh	r3, [r4, #12]
 800a8e0:	071a      	lsls	r2, r3, #28
 800a8e2:	d501      	bpl.n	800a8e8 <__swbuf_r+0x20>
 800a8e4:	6923      	ldr	r3, [r4, #16]
 800a8e6:	b943      	cbnz	r3, 800a8fa <__swbuf_r+0x32>
 800a8e8:	4621      	mov	r1, r4
 800a8ea:	4628      	mov	r0, r5
 800a8ec:	f000 f82a 	bl	800a944 <__swsetup_r>
 800a8f0:	b118      	cbz	r0, 800a8fa <__swbuf_r+0x32>
 800a8f2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a8f6:	4638      	mov	r0, r7
 800a8f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8fa:	6823      	ldr	r3, [r4, #0]
 800a8fc:	6922      	ldr	r2, [r4, #16]
 800a8fe:	1a98      	subs	r0, r3, r2
 800a900:	6963      	ldr	r3, [r4, #20]
 800a902:	b2f6      	uxtb	r6, r6
 800a904:	4283      	cmp	r3, r0
 800a906:	4637      	mov	r7, r6
 800a908:	dc05      	bgt.n	800a916 <__swbuf_r+0x4e>
 800a90a:	4621      	mov	r1, r4
 800a90c:	4628      	mov	r0, r5
 800a90e:	f7ff f961 	bl	8009bd4 <_fflush_r>
 800a912:	2800      	cmp	r0, #0
 800a914:	d1ed      	bne.n	800a8f2 <__swbuf_r+0x2a>
 800a916:	68a3      	ldr	r3, [r4, #8]
 800a918:	3b01      	subs	r3, #1
 800a91a:	60a3      	str	r3, [r4, #8]
 800a91c:	6823      	ldr	r3, [r4, #0]
 800a91e:	1c5a      	adds	r2, r3, #1
 800a920:	6022      	str	r2, [r4, #0]
 800a922:	701e      	strb	r6, [r3, #0]
 800a924:	6962      	ldr	r2, [r4, #20]
 800a926:	1c43      	adds	r3, r0, #1
 800a928:	429a      	cmp	r2, r3
 800a92a:	d004      	beq.n	800a936 <__swbuf_r+0x6e>
 800a92c:	89a3      	ldrh	r3, [r4, #12]
 800a92e:	07db      	lsls	r3, r3, #31
 800a930:	d5e1      	bpl.n	800a8f6 <__swbuf_r+0x2e>
 800a932:	2e0a      	cmp	r6, #10
 800a934:	d1df      	bne.n	800a8f6 <__swbuf_r+0x2e>
 800a936:	4621      	mov	r1, r4
 800a938:	4628      	mov	r0, r5
 800a93a:	f7ff f94b 	bl	8009bd4 <_fflush_r>
 800a93e:	2800      	cmp	r0, #0
 800a940:	d0d9      	beq.n	800a8f6 <__swbuf_r+0x2e>
 800a942:	e7d6      	b.n	800a8f2 <__swbuf_r+0x2a>

0800a944 <__swsetup_r>:
 800a944:	b538      	push	{r3, r4, r5, lr}
 800a946:	4b29      	ldr	r3, [pc, #164]	@ (800a9ec <__swsetup_r+0xa8>)
 800a948:	4605      	mov	r5, r0
 800a94a:	6818      	ldr	r0, [r3, #0]
 800a94c:	460c      	mov	r4, r1
 800a94e:	b118      	cbz	r0, 800a958 <__swsetup_r+0x14>
 800a950:	6a03      	ldr	r3, [r0, #32]
 800a952:	b90b      	cbnz	r3, 800a958 <__swsetup_r+0x14>
 800a954:	f7fd ffca 	bl	80088ec <__sinit>
 800a958:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a95c:	0719      	lsls	r1, r3, #28
 800a95e:	d422      	bmi.n	800a9a6 <__swsetup_r+0x62>
 800a960:	06da      	lsls	r2, r3, #27
 800a962:	d407      	bmi.n	800a974 <__swsetup_r+0x30>
 800a964:	2209      	movs	r2, #9
 800a966:	602a      	str	r2, [r5, #0]
 800a968:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a96c:	81a3      	strh	r3, [r4, #12]
 800a96e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a972:	e033      	b.n	800a9dc <__swsetup_r+0x98>
 800a974:	0758      	lsls	r0, r3, #29
 800a976:	d512      	bpl.n	800a99e <__swsetup_r+0x5a>
 800a978:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a97a:	b141      	cbz	r1, 800a98e <__swsetup_r+0x4a>
 800a97c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a980:	4299      	cmp	r1, r3
 800a982:	d002      	beq.n	800a98a <__swsetup_r+0x46>
 800a984:	4628      	mov	r0, r5
 800a986:	f7ff fdf9 	bl	800a57c <_free_r>
 800a98a:	2300      	movs	r3, #0
 800a98c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a98e:	89a3      	ldrh	r3, [r4, #12]
 800a990:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a994:	81a3      	strh	r3, [r4, #12]
 800a996:	2300      	movs	r3, #0
 800a998:	6063      	str	r3, [r4, #4]
 800a99a:	6923      	ldr	r3, [r4, #16]
 800a99c:	6023      	str	r3, [r4, #0]
 800a99e:	89a3      	ldrh	r3, [r4, #12]
 800a9a0:	f043 0308 	orr.w	r3, r3, #8
 800a9a4:	81a3      	strh	r3, [r4, #12]
 800a9a6:	6923      	ldr	r3, [r4, #16]
 800a9a8:	b94b      	cbnz	r3, 800a9be <__swsetup_r+0x7a>
 800a9aa:	89a3      	ldrh	r3, [r4, #12]
 800a9ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a9b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9b4:	d003      	beq.n	800a9be <__swsetup_r+0x7a>
 800a9b6:	4621      	mov	r1, r4
 800a9b8:	4628      	mov	r0, r5
 800a9ba:	f000 f84c 	bl	800aa56 <__smakebuf_r>
 800a9be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9c2:	f013 0201 	ands.w	r2, r3, #1
 800a9c6:	d00a      	beq.n	800a9de <__swsetup_r+0x9a>
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	60a2      	str	r2, [r4, #8]
 800a9cc:	6962      	ldr	r2, [r4, #20]
 800a9ce:	4252      	negs	r2, r2
 800a9d0:	61a2      	str	r2, [r4, #24]
 800a9d2:	6922      	ldr	r2, [r4, #16]
 800a9d4:	b942      	cbnz	r2, 800a9e8 <__swsetup_r+0xa4>
 800a9d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a9da:	d1c5      	bne.n	800a968 <__swsetup_r+0x24>
 800a9dc:	bd38      	pop	{r3, r4, r5, pc}
 800a9de:	0799      	lsls	r1, r3, #30
 800a9e0:	bf58      	it	pl
 800a9e2:	6962      	ldrpl	r2, [r4, #20]
 800a9e4:	60a2      	str	r2, [r4, #8]
 800a9e6:	e7f4      	b.n	800a9d2 <__swsetup_r+0x8e>
 800a9e8:	2000      	movs	r0, #0
 800a9ea:	e7f7      	b.n	800a9dc <__swsetup_r+0x98>
 800a9ec:	200000cc 	.word	0x200000cc

0800a9f0 <__ascii_wctomb>:
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	4608      	mov	r0, r1
 800a9f4:	b141      	cbz	r1, 800aa08 <__ascii_wctomb+0x18>
 800a9f6:	2aff      	cmp	r2, #255	@ 0xff
 800a9f8:	d904      	bls.n	800aa04 <__ascii_wctomb+0x14>
 800a9fa:	228a      	movs	r2, #138	@ 0x8a
 800a9fc:	601a      	str	r2, [r3, #0]
 800a9fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aa02:	4770      	bx	lr
 800aa04:	700a      	strb	r2, [r1, #0]
 800aa06:	2001      	movs	r0, #1
 800aa08:	4770      	bx	lr

0800aa0a <__swhatbuf_r>:
 800aa0a:	b570      	push	{r4, r5, r6, lr}
 800aa0c:	460c      	mov	r4, r1
 800aa0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa12:	2900      	cmp	r1, #0
 800aa14:	b096      	sub	sp, #88	@ 0x58
 800aa16:	4615      	mov	r5, r2
 800aa18:	461e      	mov	r6, r3
 800aa1a:	da0d      	bge.n	800aa38 <__swhatbuf_r+0x2e>
 800aa1c:	89a3      	ldrh	r3, [r4, #12]
 800aa1e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800aa22:	f04f 0100 	mov.w	r1, #0
 800aa26:	bf14      	ite	ne
 800aa28:	2340      	movne	r3, #64	@ 0x40
 800aa2a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aa2e:	2000      	movs	r0, #0
 800aa30:	6031      	str	r1, [r6, #0]
 800aa32:	602b      	str	r3, [r5, #0]
 800aa34:	b016      	add	sp, #88	@ 0x58
 800aa36:	bd70      	pop	{r4, r5, r6, pc}
 800aa38:	466a      	mov	r2, sp
 800aa3a:	f000 f849 	bl	800aad0 <_fstat_r>
 800aa3e:	2800      	cmp	r0, #0
 800aa40:	dbec      	blt.n	800aa1c <__swhatbuf_r+0x12>
 800aa42:	9901      	ldr	r1, [sp, #4]
 800aa44:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aa48:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aa4c:	4259      	negs	r1, r3
 800aa4e:	4159      	adcs	r1, r3
 800aa50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa54:	e7eb      	b.n	800aa2e <__swhatbuf_r+0x24>

0800aa56 <__smakebuf_r>:
 800aa56:	898b      	ldrh	r3, [r1, #12]
 800aa58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa5a:	079d      	lsls	r5, r3, #30
 800aa5c:	4606      	mov	r6, r0
 800aa5e:	460c      	mov	r4, r1
 800aa60:	d507      	bpl.n	800aa72 <__smakebuf_r+0x1c>
 800aa62:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aa66:	6023      	str	r3, [r4, #0]
 800aa68:	6123      	str	r3, [r4, #16]
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	6163      	str	r3, [r4, #20]
 800aa6e:	b003      	add	sp, #12
 800aa70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa72:	ab01      	add	r3, sp, #4
 800aa74:	466a      	mov	r2, sp
 800aa76:	f7ff ffc8 	bl	800aa0a <__swhatbuf_r>
 800aa7a:	9f00      	ldr	r7, [sp, #0]
 800aa7c:	4605      	mov	r5, r0
 800aa7e:	4639      	mov	r1, r7
 800aa80:	4630      	mov	r0, r6
 800aa82:	f7fe ffa3 	bl	80099cc <_malloc_r>
 800aa86:	b948      	cbnz	r0, 800aa9c <__smakebuf_r+0x46>
 800aa88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa8c:	059a      	lsls	r2, r3, #22
 800aa8e:	d4ee      	bmi.n	800aa6e <__smakebuf_r+0x18>
 800aa90:	f023 0303 	bic.w	r3, r3, #3
 800aa94:	f043 0302 	orr.w	r3, r3, #2
 800aa98:	81a3      	strh	r3, [r4, #12]
 800aa9a:	e7e2      	b.n	800aa62 <__smakebuf_r+0xc>
 800aa9c:	89a3      	ldrh	r3, [r4, #12]
 800aa9e:	6020      	str	r0, [r4, #0]
 800aaa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aaa4:	81a3      	strh	r3, [r4, #12]
 800aaa6:	9b01      	ldr	r3, [sp, #4]
 800aaa8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aaac:	b15b      	cbz	r3, 800aac6 <__smakebuf_r+0x70>
 800aaae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aab2:	4630      	mov	r0, r6
 800aab4:	f000 f81e 	bl	800aaf4 <_isatty_r>
 800aab8:	b128      	cbz	r0, 800aac6 <__smakebuf_r+0x70>
 800aaba:	89a3      	ldrh	r3, [r4, #12]
 800aabc:	f023 0303 	bic.w	r3, r3, #3
 800aac0:	f043 0301 	orr.w	r3, r3, #1
 800aac4:	81a3      	strh	r3, [r4, #12]
 800aac6:	89a3      	ldrh	r3, [r4, #12]
 800aac8:	431d      	orrs	r5, r3
 800aaca:	81a5      	strh	r5, [r4, #12]
 800aacc:	e7cf      	b.n	800aa6e <__smakebuf_r+0x18>
	...

0800aad0 <_fstat_r>:
 800aad0:	b538      	push	{r3, r4, r5, lr}
 800aad2:	4d07      	ldr	r5, [pc, #28]	@ (800aaf0 <_fstat_r+0x20>)
 800aad4:	2300      	movs	r3, #0
 800aad6:	4604      	mov	r4, r0
 800aad8:	4608      	mov	r0, r1
 800aada:	4611      	mov	r1, r2
 800aadc:	602b      	str	r3, [r5, #0]
 800aade:	f7f7 fd13 	bl	8002508 <_fstat>
 800aae2:	1c43      	adds	r3, r0, #1
 800aae4:	d102      	bne.n	800aaec <_fstat_r+0x1c>
 800aae6:	682b      	ldr	r3, [r5, #0]
 800aae8:	b103      	cbz	r3, 800aaec <_fstat_r+0x1c>
 800aaea:	6023      	str	r3, [r4, #0]
 800aaec:	bd38      	pop	{r3, r4, r5, pc}
 800aaee:	bf00      	nop
 800aaf0:	20000914 	.word	0x20000914

0800aaf4 <_isatty_r>:
 800aaf4:	b538      	push	{r3, r4, r5, lr}
 800aaf6:	4d06      	ldr	r5, [pc, #24]	@ (800ab10 <_isatty_r+0x1c>)
 800aaf8:	2300      	movs	r3, #0
 800aafa:	4604      	mov	r4, r0
 800aafc:	4608      	mov	r0, r1
 800aafe:	602b      	str	r3, [r5, #0]
 800ab00:	f7f7 fd12 	bl	8002528 <_isatty>
 800ab04:	1c43      	adds	r3, r0, #1
 800ab06:	d102      	bne.n	800ab0e <_isatty_r+0x1a>
 800ab08:	682b      	ldr	r3, [r5, #0]
 800ab0a:	b103      	cbz	r3, 800ab0e <_isatty_r+0x1a>
 800ab0c:	6023      	str	r3, [r4, #0]
 800ab0e:	bd38      	pop	{r3, r4, r5, pc}
 800ab10:	20000914 	.word	0x20000914

0800ab14 <_raise_r>:
 800ab14:	291f      	cmp	r1, #31
 800ab16:	b538      	push	{r3, r4, r5, lr}
 800ab18:	4605      	mov	r5, r0
 800ab1a:	460c      	mov	r4, r1
 800ab1c:	d904      	bls.n	800ab28 <_raise_r+0x14>
 800ab1e:	2316      	movs	r3, #22
 800ab20:	6003      	str	r3, [r0, #0]
 800ab22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab26:	bd38      	pop	{r3, r4, r5, pc}
 800ab28:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ab2a:	b112      	cbz	r2, 800ab32 <_raise_r+0x1e>
 800ab2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab30:	b94b      	cbnz	r3, 800ab46 <_raise_r+0x32>
 800ab32:	4628      	mov	r0, r5
 800ab34:	f000 f830 	bl	800ab98 <_getpid_r>
 800ab38:	4622      	mov	r2, r4
 800ab3a:	4601      	mov	r1, r0
 800ab3c:	4628      	mov	r0, r5
 800ab3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab42:	f000 b817 	b.w	800ab74 <_kill_r>
 800ab46:	2b01      	cmp	r3, #1
 800ab48:	d00a      	beq.n	800ab60 <_raise_r+0x4c>
 800ab4a:	1c59      	adds	r1, r3, #1
 800ab4c:	d103      	bne.n	800ab56 <_raise_r+0x42>
 800ab4e:	2316      	movs	r3, #22
 800ab50:	6003      	str	r3, [r0, #0]
 800ab52:	2001      	movs	r0, #1
 800ab54:	e7e7      	b.n	800ab26 <_raise_r+0x12>
 800ab56:	2100      	movs	r1, #0
 800ab58:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	4798      	blx	r3
 800ab60:	2000      	movs	r0, #0
 800ab62:	e7e0      	b.n	800ab26 <_raise_r+0x12>

0800ab64 <raise>:
 800ab64:	4b02      	ldr	r3, [pc, #8]	@ (800ab70 <raise+0xc>)
 800ab66:	4601      	mov	r1, r0
 800ab68:	6818      	ldr	r0, [r3, #0]
 800ab6a:	f7ff bfd3 	b.w	800ab14 <_raise_r>
 800ab6e:	bf00      	nop
 800ab70:	200000cc 	.word	0x200000cc

0800ab74 <_kill_r>:
 800ab74:	b538      	push	{r3, r4, r5, lr}
 800ab76:	4d07      	ldr	r5, [pc, #28]	@ (800ab94 <_kill_r+0x20>)
 800ab78:	2300      	movs	r3, #0
 800ab7a:	4604      	mov	r4, r0
 800ab7c:	4608      	mov	r0, r1
 800ab7e:	4611      	mov	r1, r2
 800ab80:	602b      	str	r3, [r5, #0]
 800ab82:	f7f7 fc61 	bl	8002448 <_kill>
 800ab86:	1c43      	adds	r3, r0, #1
 800ab88:	d102      	bne.n	800ab90 <_kill_r+0x1c>
 800ab8a:	682b      	ldr	r3, [r5, #0]
 800ab8c:	b103      	cbz	r3, 800ab90 <_kill_r+0x1c>
 800ab8e:	6023      	str	r3, [r4, #0]
 800ab90:	bd38      	pop	{r3, r4, r5, pc}
 800ab92:	bf00      	nop
 800ab94:	20000914 	.word	0x20000914

0800ab98 <_getpid_r>:
 800ab98:	f7f7 bc4e 	b.w	8002438 <_getpid>

0800ab9c <_init>:
 800ab9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab9e:	bf00      	nop
 800aba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aba2:	bc08      	pop	{r3}
 800aba4:	469e      	mov	lr, r3
 800aba6:	4770      	bx	lr

0800aba8 <_fini>:
 800aba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abaa:	bf00      	nop
 800abac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abae:	bc08      	pop	{r3}
 800abb0:	469e      	mov	lr, r3
 800abb2:	4770      	bx	lr
